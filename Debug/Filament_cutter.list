
Filament_cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ef4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000228  08009094  08009094  00019094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092bc  080092bc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080092bc  080092bc  000192bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092c4  080092c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c4  080092c4  000192c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080092cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000758  20000074  08009340  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007cc  08009340  000207cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ebd3  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b55  00000000  00000000  0003ec77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  000427d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001238  00000000  00000000  00043b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026024  00000000  00000000  00044db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000171e1  00000000  00000000  0006add4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de9ac  00000000  00000000  00081fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00160961  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059d0  00000000  00000000  001609b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800907c 	.word	0x0800907c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800907c 	.word	0x0800907c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96e 	b.w	8000f00 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8083 	bne.w	8000d52 <__udivmoddi4+0x116>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d947      	bls.n	8000ce2 <__udivmoddi4+0xa6>
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b142      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	f1c2 0020 	rsb	r0, r2, #32
 8000c5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c60:	4091      	lsls	r1, r2
 8000c62:	4097      	lsls	r7, r2
 8000c64:	ea40 0c01 	orr.w	ip, r0, r1
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbbc f6f8 	udiv	r6, ip, r8
 8000c74:	fa1f fe87 	uxth.w	lr, r7
 8000c78:	fb08 c116 	mls	r1, r8, r6, ip
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f10e 	mul.w	r1, r6, lr
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 8119 	bcs.w	8000ec4 <__udivmoddi4+0x288>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8116 	bls.w	8000ec4 <__udivmoddi4+0x288>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	443b      	add	r3, r7
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8105 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8102 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xaa>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d150      	bne.n	8000d90 <__udivmoddi4+0x154>
 8000cee:	1bcb      	subs	r3, r1, r7
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfe:	0c21      	lsrs	r1, r4, #16
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb08 f30c 	mul.w	r3, r8, ip
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0xe2>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f200 80e9 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x10c>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x10a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80d9 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e7bf      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x12e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <__udivmoddi4+0x282>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x1cc>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0x140>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80b8 	bhi.w	8000eec <__udivmoddi4+0x2b0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	468c      	mov	ip, r1
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0a8      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f603 	lsr.w	r6, r0, r3
 8000d98:	4097      	lsls	r7, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4330      	orrs	r0, r6
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f108 	mul.w	r1, r6, r8
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x19c>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dca:	f080 808d 	bcs.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 808a 	bls.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b281      	uxth	r1, r0
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb00 f308 	mul.w	r3, r0, r8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x1c4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df6:	d273      	bcs.n	8000ee0 <__udivmoddi4+0x2a4>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d971      	bls.n	8000ee0 <__udivmoddi4+0x2a4>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4439      	add	r1, r7
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e06:	e778      	b.n	8000cfa <__udivmoddi4+0xbe>
 8000e08:	f1c6 0c20 	rsb	ip, r6, #32
 8000e0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e14:	431c      	orrs	r4, r3
 8000e16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e26:	431f      	orrs	r7, r3
 8000e28:	0c3b      	lsrs	r3, r7, #16
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fa1f f884 	uxth.w	r8, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	fa02 f206 	lsl.w	r2, r2, r6
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x220>
 8000e4a:	1861      	adds	r1, r4, r1
 8000e4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e50:	d248      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e52:	458a      	cmp	sl, r1
 8000e54:	d946      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4421      	add	r1, r4
 8000e5c:	eba1 010a 	sub.w	r1, r1, sl
 8000e60:	b2bf      	uxth	r7, r7
 8000e62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6e:	fb00 f808 	mul.w	r8, r0, r8
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x24a>
 8000e76:	19e7      	adds	r7, r4, r7
 8000e78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7c:	d22e      	bcs.n	8000edc <__udivmoddi4+0x2a0>
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d92c      	bls.n	8000edc <__udivmoddi4+0x2a0>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4427      	add	r7, r4
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	eba7 0708 	sub.w	r7, r7, r8
 8000e8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e92:	454f      	cmp	r7, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	d31a      	bcc.n	8000ed0 <__udivmoddi4+0x294>
 8000e9a:	d017      	beq.n	8000ecc <__udivmoddi4+0x290>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x27a>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb0:	40f7      	lsrs	r7, r6
 8000eb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e70b      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fd      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	d2e5      	bcs.n	8000e9c <__udivmoddi4+0x260>
 8000ed0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7df      	b.n	8000e9c <__udivmoddi4+0x260>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e7d2      	b.n	8000e86 <__udivmoddi4+0x24a>
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	e78d      	b.n	8000e00 <__udivmoddi4+0x1c4>
 8000ee4:	4681      	mov	r9, r0
 8000ee6:	e7b9      	b.n	8000e5c <__udivmoddi4+0x220>
 8000ee8:	4666      	mov	r6, ip
 8000eea:	e775      	b.n	8000dd8 <__udivmoddi4+0x19c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14a>
 8000ef0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef4:	4439      	add	r1, r7
 8000ef6:	e713      	b.n	8000d20 <__udivmoddi4+0xe4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443c      	add	r4, r7
 8000efc:	e724      	b.n	8000d48 <__udivmoddi4+0x10c>
 8000efe:	bf00      	nop

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <DC_motor_encoder_Init>:
 */

#include "L298_dc.h"


void DC_motor_encoder_Init(dc_motor *motor) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_AUTORELOAD(motor->encoder_timer, FULL_ROTATION_PULSE);
	//HAL_TIM_Encoder_Start(motor->encoder_timer, TIM_CHANNEL_ALL);
	HAL_LPTIM_Encoder_Start_IT(motor->encoder_timer, FULL_ROTATION_PULSE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f241 1192 	movw	r1, #4498	; 0x1192
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fb51 	bl	80045bc <HAL_LPTIM_Encoder_Start_IT>
	/* Enable Autoreload match interrupt */
	__HAL_LPTIM_ENABLE_IT(motor->encoder_timer, LPTIM_IT_ARRM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DC_motor_Init>:

void DC_motor_Init(dc_motor *motor, TIM_HandleTypeDef *Timer,
		uint32_t PWM_Channel, GPIO_TypeDef *Port_IN1, uint16_t IN1_Pin,
		GPIO_TypeDef *Port_IN2, uint16_t IN2_Pin,
		LPTIM_HandleTypeDef *Encoder_timer) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
	motor->pwm_timer.htim = Timer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	601a      	str	r2, [r3, #0]
	motor->pwm_timer.channel = PWM_Channel;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	605a      	str	r2, [r3, #4]

	motor->Port_IN1 = Port_IN1;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	609a      	str	r2, [r3, #8]
	motor->Port_IN2 = Port_IN2;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	60da      	str	r2, [r3, #12]
	motor->Pin_IN1 = IN1_Pin;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	8b3a      	ldrh	r2, [r7, #24]
 8000f60:	821a      	strh	r2, [r3, #16]
	motor->Pin_IN2 = IN2_Pin;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	8c3a      	ldrh	r2, [r7, #32]
 8000f66:	825a      	strh	r2, [r3, #18]
	motor->encoder_timer = Encoder_timer;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	619a      	str	r2, [r3, #24]

	DC_motor_encoder_Init(motor);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ffc8 	bl	8000f04 <DC_motor_encoder_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DC_set_speed>:

void DC_set_speed(dc_motor *motor, uint8_t speed) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
	if (speed > 100) speed = 100;
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <DC_set_speed+0x16>
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COUNTER(motor->pwm_timer.htim, 0);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <DC_set_speed+0x34>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fae:	e02c      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d105      	bne.n	8000fc4 <DC_set_speed+0x48>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fc2:	e022      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d105      	bne.n	8000fd8 <DC_set_speed+0x5c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000fd6:	e018      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b0c      	cmp	r3, #12
 8000fde:	d105      	bne.n	8000fec <DC_set_speed+0x70>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fea:	e00e      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d105      	bne.n	8001000 <DC_set_speed+0x84>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ffe:	e004      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DC_set_direction>:

void DC_set_direction(dc_motor *motor, DC_direction DIR) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	motor->DIR = DIR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	751a      	strb	r2, [r3, #20]

	if (motor->DIR == LEFT) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <DC_set_direction+0x3c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_RESET);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f003 fa04 	bl	8004448 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68d8      	ldr	r0, [r3, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8a5b      	ldrh	r3, [r3, #18]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	f003 f9fc 	bl	8004448 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
	}
}
 8001050:	e00f      	b.n	8001072 <DC_set_direction+0x5c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6898      	ldr	r0, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8a1b      	ldrh	r3, [r3, #16]
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f003 f9f3 	bl	8004448 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68d8      	ldr	r0, [r3, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a5b      	ldrh	r3, [r3, #18]
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f003 f9eb 	bl	8004448 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <DC_rotate>:

void DC_rotate(dc_motor *motor, DC_direction DIR, uint8_t speed) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
 8001086:	4613      	mov	r3, r2
 8001088:	70bb      	strb	r3, [r7, #2]
	DC_set_direction(motor, DIR);
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffc1 	bl	8001016 <DC_set_direction>
	DC_set_speed(motor, speed);
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff6f 	bl	8000f7c <DC_set_speed>

	HAL_TIM_PWM_Start(motor->pwm_timer.htim, motor->pwm_timer.channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f005 f87f 	bl	80061ac <HAL_TIM_PWM_Start>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <DC_stop>:

void DC_stop(dc_motor *motor) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8a1b      	ldrh	r3, [r3, #16]
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f003 f9bd 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68d8      	ldr	r0, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8a5b      	ldrh	r3, [r3, #18]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f003 f9b5 	bl	8004448 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <DC_stop+0x3c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2264      	movs	r2, #100	; 0x64
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f0:	e02c      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d105      	bne.n	8001106 <DC_stop+0x50>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001104:	e022      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d105      	bne.n	800111a <DC_stop+0x64>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001118:	e018      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d105      	bne.n	800112e <DC_stop+0x78>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800112c:	e00e      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d105      	bne.n	8001142 <DC_stop+0x8c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001140:	e004      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <DC_set_angle>:
}

uint16_t pulses_to_count;

void DC_set_angle(dc_motor *motor, uint16_t angle, uint8_t speed, DC_direction DIR)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	460b      	mov	r3, r1
 8001168:	707b      	strb	r3, [r7, #1]
 800116a:	4613      	mov	r3, r2
 800116c:	703b      	strb	r3, [r7, #0]
	if(CUTTING_PROCESS_FLAG == 0)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <DC_set_angle+0x70>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <DC_set_angle+0x66>
	{
		CUTTING_PROCESS_FLAG = 1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <DC_set_angle+0x70>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 0;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <DC_set_angle+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		pulses_to_count = (angle * FULL_ROTATION_PULSE * 2) / 360;
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	f242 3224 	movw	r2, #8996	; 0x2324
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <DC_set_angle+0x78>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	441a      	add	r2, r3
 8001196:	1212      	asrs	r2, r2, #8
 8001198:	17db      	asrs	r3, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <DC_set_angle+0x7c>)
 80011a0:	801a      	strh	r2, [r3, #0]
		__HAL_LPTIM_AUTORELOAD_SET(motor->encoder_timer, pulses_to_count);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <DC_set_angle+0x7c>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	619a      	str	r2, [r3, #24]
		DC_rotate(motor, DIR, speed);
 80011ae:	787a      	ldrb	r2, [r7, #1]
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff60 	bl	800107a <DC_rotate>
	}

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000fa 	.word	0x200000fa
 80011c8:	20000504 	.word	0x20000504
 80011cc:	b60b60b7 	.word	0xb60b60b7
 80011d0:	200000f8 	.word	0x200000f8

080011d4 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e01f      	b.n	8001224 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80011f4:	2201      	movs	r2, #1
 80011f6:	2102      	movs	r1, #2
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <SendByteSPI+0x60>)
 80011fa:	f003 f925 	bl	8004448 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8001200:	2200      	movs	r2, #0
 8001202:	2102      	movs	r1, #2
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <SendByteSPI+0x60>)
 8001206:	f003 f91f 	bl	8004448 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <SendByteSPI+0x60>)
 8001210:	f003 f91a 	bl	8004448 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8001214:	2201      	movs	r2, #1
 8001216:	2108      	movs	r1, #8
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <SendByteSPI+0x60>)
 800121a:	f003 f915 	bl	8004448 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b07      	cmp	r3, #7
 8001228:	dddc      	ble.n	80011e4 <SendByteSPI+0x10>

	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000800 	.word	0x48000800

08001238 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001248:	f003 f8fe 	bl	8004448 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 800124c:	20f8      	movs	r0, #248	; 0xf8
 800124e:	f7ff ffc1 	bl	80011d4 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffba 	bl	80011d4 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffb4 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fb87 	bl	8001980 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001278:	f003 f8e6 	bl	8004448 <HAL_GPIO_WritePin>

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000800 	.word	0x48000800

08001288 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001292:	2201      	movs	r2, #1
 8001294:	2104      	movs	r1, #4
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <ST7920_SendData+0x4c>)
 8001298:	f003 f8d6 	bl	8004448 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 800129c:	20fa      	movs	r0, #250	; 0xfa
 800129e:	f7ff ff99 	bl	80011d4 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f023 030f 	bic.w	r3, r3, #15
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff92 	bl	80011d4 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff8c 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fb5f 	bl	8001980 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <ST7920_SendData+0x4c>)
 80012c8:	f003 f8be 	bl	8004448 <HAL_GPIO_WritePin>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48000800 	.word	0x48000800

080012d8 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d81e      	bhi.n	8001328 <ST7920_SendString+0x50>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <ST7920_SendString+0x18>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001301 	.word	0x08001301
 80012f4:	0800130b 	.word	0x0800130b
 80012f8:	08001315 	.word	0x08001315
 80012fc:	0800131f 	.word	0x0800131f
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	60bb      	str	r3, [r7, #8]
            break;
 8001308:	e013      	b.n	8001332 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001310:	60bb      	str	r3, [r7, #8]
            break;
 8001312:	e00e      	b.n	8001332 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800131a:	60bb      	str	r3, [r7, #8]
            break;
 800131c:	e009      	b.n	8001332 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8001324:	60bb      	str	r3, [r7, #8]
            break;
 8001326:	e004      	b.n	8001332 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132e:	60bb      	str	r3, [r7, #8]
            break;
 8001330:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff7e 	bl	8001238 <ST7920_SendCmd>

    while (*string)
 800133c:	e006      	b.n	800134c <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff9e 	bl	8001288 <ST7920_SendData>
    while (*string)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f4      	bne.n	800133e <ST7920_SendString+0x66>
    	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d115      	bne.n	800139a <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 800136e:	2030      	movs	r0, #48	; 0x30
 8001370:	f7ff ff62 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001374:	2001      	movs	r0, #1
 8001376:	f002 fd9f 	bl	8003eb8 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800137a:	2034      	movs	r0, #52	; 0x34
 800137c:	f7ff ff5c 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001380:	2001      	movs	r0, #1
 8001382:	f002 fd99 	bl	8003eb8 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 8001386:	2036      	movs	r0, #54	; 0x36
 8001388:	f7ff ff56 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 800138c:	2001      	movs	r0, #1
 800138e:	f002 fd93 	bl	8003eb8 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <ST7920_GraphicMode+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8001398:	e00b      	b.n	80013b2 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 80013a0:	2030      	movs	r0, #48	; 0x30
 80013a2:	f7ff ff49 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f002 fd86 	bl	8003eb8 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <ST7920_GraphicMode+0x5c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000090 	.word	0x20000090

080013c0 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
 80013cc:	e06a      	b.n	80014a4 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b1f      	cmp	r3, #31
 80013d2:	d830      	bhi.n	8001436 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e029      	b.n	800142e <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff28 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff21 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff3d 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff30 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d9d2      	bls.n	80013da <ST7920_DrawBitmap+0x1a>
 8001434:	e033      	b.n	800149e <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e02d      	b.n	8001498 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	3b20      	subs	r3, #32
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fef3 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff feec 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff08 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fefb 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9ce      	bls.n	800143c <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	d991      	bls.n	80013ce <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <ST7920_Update+0x10>)
 80014ba:	f7ff ff81 	bl	80013c0 <ST7920_DrawBitmap>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000100 	.word	0x20000100

080014c8 <ST7920_Clear>:



void ST7920_Clear()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <ST7920_Clear+0x98>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d13a      	bne.n	800154c <ST7920_Clear+0x84>
	{
		uint8_t x, y;
		memset(image, 0, sizeof(image));
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	2100      	movs	r1, #0
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <ST7920_Clear+0x9c>)
 80014de:	f006 fde3 	bl	80080a8 <memset>
		for(y = 0; y < 64; y++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	e02d      	b.n	8001544 <ST7920_Clear+0x7c>
		{
			if(y < 32)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80a      	bhi.n	8001504 <ST7920_Clear+0x3c>
			{
				ST7920_SendCmd(0x80 | y);
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe9e 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 80014fc:	2080      	movs	r0, #128	; 0x80
 80014fe:	f7ff fe9b 	bl	8001238 <ST7920_SendCmd>
 8001502:	e00d      	b.n	8001520 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	3b20      	subs	r3, #32
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe8f 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 800151a:	2088      	movs	r0, #136	; 0x88
 800151c:	f7ff fe8c 	bl	8001238 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	e008      	b.n	8001538 <ST7920_Clear+0x70>
			{
				ST7920_SendData(0);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff feae 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(0);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff feab 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3301      	adds	r3, #1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9f3      	bls.n	8001526 <ST7920_Clear+0x5e>
		for(y = 0; y < 64; y++)
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	3301      	adds	r3, #1
 8001542:	71bb      	strb	r3, [r7, #6]
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b3f      	cmp	r3, #63	; 0x3f
 8001548:	d9ce      	bls.n	80014e8 <ST7920_Clear+0x20>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 800154a:	e005      	b.n	8001558 <ST7920_Clear+0x90>
		ST7920_SendCmd(0x01);   // clear the display using command
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fe73 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8001552:	2002      	movs	r0, #2
 8001554:	f002 fcb0 	bl	8003eb8 <HAL_Delay>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000090 	.word	0x20000090
 8001564:	20000100 	.word	0x20000100

08001568 <ST7920_Init>:


void ST7920_Init (void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	481c      	ldr	r0, [pc, #112]	; (80015e4 <ST7920_Init+0x7c>)
 8001572:	f002 ff69 	bl	8004448 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8001576:	200a      	movs	r0, #10
 8001578:	f002 fc9e 	bl	8003eb8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 800157c:	2201      	movs	r2, #1
 800157e:	2101      	movs	r1, #1
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <ST7920_Init+0x7c>)
 8001582:	f002 ff61 	bl	8004448 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8001586:	2032      	movs	r0, #50	; 0x32
 8001588:	f002 fc96 	bl	8003eb8 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 800158c:	2030      	movs	r0, #48	; 0x30
 800158e:	f7ff fe53 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8001592:	206e      	movs	r0, #110	; 0x6e
 8001594:	f000 f9f4 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 8001598:	2030      	movs	r0, #48	; 0x30
 800159a:	f7ff fe4d 	bl	8001238 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 800159e:	2028      	movs	r0, #40	; 0x28
 80015a0:	f000 f9ee 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fe47 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 80015aa:	206e      	movs	r0, #110	; 0x6e
 80015ac:	f000 f9e8 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fe41 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80015b6:	200c      	movs	r0, #12
 80015b8:	f002 fc7e 	bl	8003eb8 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 80015bc:	2006      	movs	r0, #6
 80015be:	f7ff fe3b 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015c2:	2001      	movs	r0, #1
 80015c4:	f002 fc78 	bl	8003eb8 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 80015c8:	200c      	movs	r0, #12
 80015ca:	f7ff fe35 	bl	8001238 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80015ce:	2001      	movs	r0, #1
 80015d0:	f002 fc72 	bl	8003eb8 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff fe2f 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 fc6c 	bl	8003eb8 <HAL_Delay>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	48000800 	.word	0x48000800

080015e8 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SetPixel+0xb8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d248      	bcs.n	8001694 <SetPixel+0xac>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SetPixel+0xbc>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	429a      	cmp	r2, r3
 800160a:	d243      	bcs.n	8001694 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <SetPixel+0xbc>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	08d2      	lsrs	r2, r2, #3
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SetPixel+0xc0>)
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	fa21 f303 	lsr.w	r3, r1, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

    *image = *p;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SetPixel+0xc0>)
 800164a:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <SetPixel+0xc4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	429a      	cmp	r2, r3
 8001654:	d202      	bcs.n	800165c <SetPixel+0x74>
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SetPixel+0xc4>)
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <SetPixel+0xc8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	429a      	cmp	r2, r3
 8001664:	d304      	bcc.n	8001670 <SetPixel+0x88>
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SetPixel+0xc8>)
 800166e:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SetPixel+0xcc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	429a      	cmp	r2, r3
 8001678:	d202      	bcs.n	8001680 <SetPixel+0x98>
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <SetPixel+0xcc>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SetPixel+0xd0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d304      	bcc.n	8001694 <SetPixel+0xac>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SetPixel+0xd0>)
 8001692:	701a      	strb	r2, [r3, #0]


  }

}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000001 	.word	0x20000001
 80016a8:	20000100 	.word	0x20000100
 80016ac:	20000500 	.word	0x20000500
 80016b0:	20000502 	.word	0x20000502
 80016b4:	200000fc 	.word	0x200000fc
 80016b8:	20000501 	.word	0x20000501

080016bc <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	4603      	mov	r3, r0
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	460b      	mov	r3, r1
 80016d4:	717b      	strb	r3, [r7, #5]
 80016d6:	4613      	mov	r3, r2
 80016d8:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 80016da:	797a      	ldrb	r2, [r7, #5]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d303      	bcc.n	80016ea <DrawLine+0x2e>
 80016e2:	797a      	ldrb	r2, [r7, #5]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	e002      	b.n	80016f0 <DrawLine+0x34>
 80016ea:	79fa      	ldrb	r2, [r7, #7]
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 80016f2:	793a      	ldrb	r2, [r7, #4]
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d303      	bcc.n	8001702 <DrawLine+0x46>
 80016fa:	793a      	ldrb	r2, [r7, #4]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	e002      	b.n	8001708 <DrawLine+0x4c>
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	429a      	cmp	r2, r3
 8001710:	d201      	bcs.n	8001716 <DrawLine+0x5a>
 8001712:	2301      	movs	r3, #1
 8001714:	e001      	b.n	800171a <DrawLine+0x5e>
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 800171c:	79ba      	ldrb	r2, [r7, #6]
 800171e:	793b      	ldrb	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d201      	bcs.n	8001728 <DrawLine+0x6c>
 8001724:	2301      	movs	r3, #1
 8001726:	e001      	b.n	800172c <DrawLine+0x70>
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff53 	bl	80015e8 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	429a      	cmp	r2, r3
 8001748:	d103      	bne.n	8001752 <DrawLine+0x96>
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	793b      	ldrb	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	d01e      	beq.n	8001790 <DrawLine+0xd4>
    int e2 = err + err;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	425b      	negs	r3, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd08      	ble.n	8001774 <DrawLine+0xb8>
    {
      err -= dy;
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4413      	add	r3, r2
 8001772:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	dadc      	bge.n	8001736 <DrawLine+0x7a>
    {
      err += dx;
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4413      	add	r3, r2
 800178c:	71bb      	strb	r3, [r7, #6]
  {
 800178e:	e7d2      	b.n	8001736 <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8001790:	bf00      	nop
    }
  }
}
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
	...

0800179c <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <DrawRectangle+0x10c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
	if (
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d26b      	bcs.n	800189e <DrawRectangle+0x102>
		y >= numRows
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <DrawRectangle+0x110>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
		x >= numCols ||
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d265      	bcs.n	800189e <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <DrawRectangle+0x10c>)
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	db05      	blt.n	80017ec <DrawRectangle+0x50>
		w = numCols - x;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <DrawRectangle+0x10c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <DrawRectangle+0x110>)
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	db05      	blt.n	8001806 <DrawRectangle+0x6a>
		h = numRows - y;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <DrawRectangle+0x110>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2d8      	uxtb	r0, r3
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f7ff ff4d 	bl	80016bc <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2d8      	uxtb	r0, r3
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b2dc      	uxtb	r4, r3
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	883b      	ldrh	r3, [r7, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4622      	mov	r2, r4
 800184c:	f7ff ff36 	bl	80016bc <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	b2d8      	uxtb	r0, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	b2dc      	uxtb	r4, r3
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	883b      	ldrh	r3, [r7, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4622      	mov	r2, r4
 800186a:	f7ff ff27 	bl	80016bc <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b2d8      	uxtb	r0, r3
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	b2d9      	uxtb	r1, r3
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2dc      	uxtb	r4, r3
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4622      	mov	r2, r4
 8001898:	f7ff ff10 	bl	80016bc <DrawLine>
 800189c:	e000      	b.n	80018a0 <DrawRectangle+0x104>
		return;
 800189e:	bf00      	nop
}
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000001 	.word	0x20000001
 80018ac:	20000000 	.word	0x20000000

080018b0 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
	if (
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d240      	bcs.n	800195c <DrawFilledRectangle+0xac>
		y >= numRows
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <DrawFilledRectangle+0xb8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
		x >= numCols ||
 80018e0:	88ba      	ldrh	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d23a      	bcs.n	800195c <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	db05      	blt.n	8001900 <DrawFilledRectangle+0x50>
		w = numCols - x;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	883b      	ldrh	r3, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4293      	cmp	r3, r2
 800190c:	db05      	blt.n	800191a <DrawFilledRectangle+0x6a>
		h = numRows - y;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e017      	b.n	8001950 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4413      	add	r3, r2
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b2dc      	uxtb	r4, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4413      	add	r3, r2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4622      	mov	r2, r4
 8001946:	f7ff feb9 	bl	80016bc <DrawLine>
	for (i = 0; i <= h; i++) {
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3301      	adds	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b29b      	uxth	r3, r3
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d2e2      	bcs.n	8001920 <DrawFilledRectangle+0x70>
 800195a:	e000      	b.n	800195e <DrawFilledRectangle+0xae>
		return;
 800195c:	bf00      	nop
	}
}
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	20000001 	.word	0x20000001
 8001968:	20000000 	.word	0x20000000

0800196c <delay_init>:
//#include "stm32f1xx.h"



void delay_init ()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <delay_init+0x10>)
 8001972:	f004 fadb 	bl	8005f2c <HAL_TIM_Base_Start>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000604 	.word	0x20000604

08001980 <delay_us>:

void delay_us (uint16_t delay)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(_TIMER, 0);  // reset the counter
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <delay_us+0x30>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(_TIMER))<delay);  // wait for the delay to complete
 8001992:	bf00      	nop
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <delay_us+0x30>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3f9      	bcc.n	8001994 <delay_us+0x14>
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000604 	.word	0x20000604

080019b4 <encoder_init>:
extern stepper_motor extruder;
extern dc_motor DC_motor;
extern filament_cutter FC_struct;

void encoder_init(GPIO_TypeDef* GPIO_BTN_PORT, uint16_t Button_Pin, uint32_t debounce_time)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	460b      	mov	r3, r1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	817b      	strh	r3, [r7, #10]
	enc_btn.PORT = GPIO_BTN_PORT;
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <encoder_init+0x50>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6013      	str	r3, [r2, #0]
	enc_btn.PIN = Button_Pin;
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <encoder_init+0x50>)
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	8093      	strh	r3, [r2, #4]
	enc_btn.debounce_time = debounce_time;
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <encoder_init+0x50>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60d3      	str	r3, [r2, #12]
	enc_btn.BTN_state = DEFA;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <encoder_init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	741a      	strb	r2, [r3, #16]
	enc_btn.last_tick = 0;
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <encoder_init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]

	ENC_Button_RegisterPressCallback(&ENC_Button_PressedTask);
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <encoder_init+0x54>)
 80019e2:	f000 f821 	bl	8001a28 <ENC_Button_RegisterPressCallback>

	__HAL_TIM_SET_AUTORELOAD(_ENC_TIMER, 19);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <encoder_init+0x58>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2213      	movs	r2, #19
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <encoder_init+0x58>)
 80019f0:	2213      	movs	r2, #19
 80019f2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(_ENC_TIMER, TIM_CHANNEL_ALL);
 80019f4:	213c      	movs	r1, #60	; 0x3c
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <encoder_init+0x58>)
 80019f8:	f004 fdec 	bl	80065d4 <HAL_TIM_Encoder_Start>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000094 	.word	0x20000094
 8001a08:	08001b35 	.word	0x08001b35
 8001a0c:	200005b8 	.word	0x200005b8

08001a10 <enc_get_counter>:


uint32_t enc_get_counter()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_ENC_TIMER);
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <enc_get_counter+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200005b8 	.word	0x200005b8

08001a28 <ENC_Button_RegisterPressCallback>:


void ENC_Button_RegisterPressCallback(void *callback)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	enc_btn.ButtonPressed = callback;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <ENC_Button_RegisterPressCallback+0x1c>)
 8001a34:	6153      	str	r3, [r2, #20]

}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000094 	.word	0x20000094

08001a48 <ENC_Button_DebounceRoutine>:


void ENC_Button_DebounceRoutine(cursor_position* cur_postion)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - enc_btn.last_tick) > enc_btn.debounce_time)
 8001a50:	f002 fa26 	bl	8003ea0 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d915      	bls.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
	{
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <ENC_Button_DebounceRoutine+0x54>)
 8001a68:	f002 fcd6 	bl	8004418 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10b      	bne.n	8001a8a <ENC_Button_DebounceRoutine+0x42>
		{
			enc_btn.BTN_state = PRESSED;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	741a      	strb	r2, [r3, #16]
			if(enc_btn.ButtonPressed != NULL)
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
			{
				enc_btn.ButtonPressed(cur_postion);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
			enc_btn.BTN_state = DEFA;
		}

	}

}
 8001a88:	e002      	b.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
			enc_btn.BTN_state = DEFA;
 8001a8a:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	741a      	strb	r2, [r3, #16]
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000094 	.word	0x20000094
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <ENC_Button_IdleRoutine>:


void ENC_Button_IdleRoutine()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <ENC_Button_IdleRoutine+0x28>)
 8001aa8:	f002 fcb6 	bl	8004418 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <ENC_Button_IdleRoutine+0x22>
	{
		enc_btn.last_tick = HAL_GetTick();
 8001ab2:	f002 f9f5 	bl	8003ea0 <HAL_GetTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <ENC_Button_IdleRoutine+0x2c>)
 8001aba:	6093      	str	r3, [r2, #8]
		enc_btn.BTN_state = DEBOUNCE;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <ENC_Button_IdleRoutine+0x2c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	741a      	strb	r2, [r3, #16]
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	20000094 	.word	0x20000094

08001ad0 <ENC_Button_PressedRoutine>:


void ENC_Button_PressedRoutine()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_SET)
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <ENC_Button_PressedRoutine+0x1c>)
 8001ad8:	f002 fc9e 	bl	8004418 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <ENC_Button_PressedRoutine+0x18>
	{
		enc_btn.BTN_state = DEFA;
 8001ae2:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <ENC_Button_PressedRoutine+0x20>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	741a      	strb	r2, [r3, #16]
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	48000400 	.word	0x48000400
 8001af0:	20000094 	.word	0x20000094

08001af4 <ENC_Button_Action>:


void ENC_Button_Action(cursor_position* cur_postion)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	switch(enc_btn.BTN_state)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <ENC_Button_Action+0x3c>)
 8001afe:	7c1b      	ldrb	r3, [r3, #16]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d00d      	beq.n	8001b20 <ENC_Button_Action+0x2c>
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	dc0e      	bgt.n	8001b26 <ENC_Button_Action+0x32>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <ENC_Button_Action+0x1e>
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d003      	beq.n	8001b18 <ENC_Button_Action+0x24>
		break;
	case PRESSED:
		ENC_Button_PressedRoutine();
		break;
	}
}
 8001b10:	e009      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_IdleRoutine();
 8001b12:	f7ff ffc5 	bl	8001aa0 <ENC_Button_IdleRoutine>
		break;
 8001b16:	e006      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_DebounceRoutine(cur_postion);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff95 	bl	8001a48 <ENC_Button_DebounceRoutine>
		break;
 8001b1e:	e002      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_PressedRoutine();
 8001b20:	f7ff ffd6 	bl	8001ad0 <ENC_Button_PressedRoutine>
		break;
 8001b24:	bf00      	nop
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000094 	.word	0x20000094

08001b34 <ENC_Button_PressedTask>:



//void ENC_Button_PressedTask(encoder_button* enc_btn, cursor_position* cursor_pos)
void ENC_Button_PressedTask(cursor_position* cursor_pos)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	if(cursor_pos->current_layer == FIRST_LAYER)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d136      	bne.n	8001bb2 <ENC_Button_PressedTask+0x7e>
	{
		if(cursor_pos->FL_position == SETTINGS)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <ENC_Button_PressedTask+0x28>
		{
			cursor_pos->current_layer = SECOND_LAYER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b52:	4b7e      	ldr	r3, [pc, #504]	; (8001d4c <ENC_Button_PressedTask+0x218>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24


	}


}
 8001b5a:	e0f3      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->FL_position == START)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10a      	bne.n	8001b7a <ENC_Button_PressedTask+0x46>
			FC_struct.mode = EXTRUDE;
 8001b64:	4b7a      	ldr	r3, [pc, #488]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
			cursor_pos->FL_position = ACTIVE_START;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b70:	4b76      	ldr	r3, [pc, #472]	; (8001d4c <ENC_Button_PressedTask+0x218>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b78:	e0e4      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->FL_position == STOP)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	f040 80e0 	bne.w	8001d44 <ENC_Button_PressedTask+0x210>
			stepper_stop(&extruder);
 8001b84:	4873      	ldr	r0, [pc, #460]	; (8001d54 <ENC_Button_PressedTask+0x220>)
 8001b86:	f001 f9d1 	bl	8002f2c <stepper_stop>
			DC_stop(&DC_motor);
 8001b8a:	4873      	ldr	r0, [pc, #460]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001b8c:	f7ff fa93 	bl	80010b6 <DC_stop>
			EXTRUDE_PROCESS_FLAG = 0;
 8001b90:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <ENC_Button_PressedTask+0x228>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			CUTTING_PROCESS_FLAG = 0;
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <ENC_Button_PressedTask+0x22c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = STANDBY;
 8001b9c:	4b6c      	ldr	r3, [pc, #432]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001ba2:	4b6a      	ldr	r3, [pc, #424]	; (8001d4c <ENC_Button_PressedTask+0x218>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	e0c8      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
	else if(cursor_pos->current_layer == SECOND_LAYER)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	799b      	ldrb	r3, [r3, #6]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d137      	bne.n	8001c2a <ENC_Button_PressedTask+0xf6>
		if(cursor_pos->SL_position == BACK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <ENC_Button_PressedTask+0x9c>
			cursor_pos->current_layer = FIRST_LAYER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	719a      	strb	r2, [r3, #6]
			cursor_pos->FL_position = DEFAULT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
}
 8001bce:	e0b9      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->SL_position == FIL_DIA)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	789b      	ldrb	r3, [r3, #2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <ENC_Button_PressedTask+0xb2>
			cursor_pos->current_layer = THIRD_LAYER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	711a      	strb	r2, [r3, #4]
}
 8001be4:	e0ae      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->SL_position == FIL_DEN)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d106      	bne.n	8001bfc <ENC_Button_PressedTask+0xc8>
			cursor_pos->current_layer = THIRD_LAYER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	711a      	strb	r2, [r3, #4]
}
 8001bfa:	e0a3      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->SL_position == SAMPLE_WEIGHT)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d106      	bne.n	8001c12 <ENC_Button_PressedTask+0xde>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = WEIGHT_5g;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	711a      	strb	r2, [r3, #4]
}
 8001c10:	e098      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->SL_position == QUANTITY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	f040 8094 	bne.w	8001d44 <ENC_Button_PressedTask+0x210>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QTY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2209      	movs	r2, #9
 8001c26:	711a      	strb	r2, [r3, #4]
}
 8001c28:	e08c      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
	else if(cursor_pos->current_layer == THIRD_LAYER)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	799b      	ldrb	r3, [r3, #6]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 8088 	bne.w	8001d44 <ENC_Button_PressedTask+0x210>
		if(cursor_pos->TL_position == DIAMETER_175)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <ENC_Button_PressedTask+0x11c>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_175;
 8001c48:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001c4a:	4a46      	ldr	r2, [pc, #280]	; (8001d64 <ENC_Button_PressedTask+0x230>)
 8001c4c:	609a      	str	r2, [r3, #8]
}
 8001c4e:	e079      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == DIAMETER_285)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d109      	bne.n	8001c6c <ENC_Button_PressedTask+0x138>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_285;
 8001c64:	4b3a      	ldr	r3, [pc, #232]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001c66:	4a40      	ldr	r2, [pc, #256]	; (8001d68 <ENC_Button_PressedTask+0x234>)
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	e06b      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == DENSITY_PLA)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d109      	bne.n	8001c88 <ENC_Button_PressedTask+0x154>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_PLA;
 8001c80:	4b33      	ldr	r3, [pc, #204]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001c82:	4a3a      	ldr	r2, [pc, #232]	; (8001d6c <ENC_Button_PressedTask+0x238>)
 8001c84:	605a      	str	r2, [r3, #4]
}
 8001c86:	e05d      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == DENSITY_ABS)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d109      	bne.n	8001ca4 <ENC_Button_PressedTask+0x170>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_ABS;
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001c9e:	4a34      	ldr	r2, [pc, #208]	; (8001d70 <ENC_Button_PressedTask+0x23c>)
 8001ca0:	605a      	str	r2, [r3, #4]
}
 8001ca2:	e04f      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == DENSITY_PETG)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d109      	bne.n	8001cc0 <ENC_Button_PressedTask+0x18c>
			cursor_pos->current_layer = SECOND_LAYER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = FIL_DEN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.filament_density = Filament_density_PETG;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001cba:	4a2e      	ldr	r2, [pc, #184]	; (8001d74 <ENC_Button_PressedTask+0x240>)
 8001cbc:	605a      	str	r2, [r3, #4]
}
 8001cbe:	e041      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == WEIGHT_5g)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d109      	bne.n	8001cdc <ENC_Button_PressedTask+0x1a8>
			cursor_pos->current_layer = SECOND_LAYER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_5g;
 8001cd4:	4b1e      	ldr	r3, [pc, #120]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	819a      	strh	r2, [r3, #12]
}
 8001cda:	e033      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == WEIGHT_25g)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d109      	bne.n	8001cf8 <ENC_Button_PressedTask+0x1c4>
			cursor_pos->current_layer = SECOND_LAYER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_25g;
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001cf2:	2219      	movs	r2, #25
 8001cf4:	819a      	strh	r2, [r3, #12]
}
 8001cf6:	e025      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == WEIGHT_50g)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d109      	bne.n	8001d14 <ENC_Button_PressedTask+0x1e0>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_50g;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001d0e:	2232      	movs	r2, #50	; 0x32
 8001d10:	819a      	strh	r2, [r3, #12]
}
 8001d12:	e017      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == WEIGHT_100g)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d109      	bne.n	8001d30 <ENC_Button_PressedTask+0x1fc>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_100g;
 8001d28:	4b09      	ldr	r3, [pc, #36]	; (8001d50 <ENC_Button_PressedTask+0x21c>)
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	819a      	strh	r2, [r3, #12]
}
 8001d2e:	e009      	b.n	8001d44 <ENC_Button_PressedTask+0x210>
		else if(cursor_pos->TL_position == QTY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d105      	bne.n	8001d44 <ENC_Button_PressedTask+0x210>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QUANTITY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	711a      	strb	r2, [r3, #4]
}
 8001d44:	bf00      	nop
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	200005b8 	.word	0x200005b8
 8001d50:	20000518 	.word	0x20000518
 8001d54:	200000ac 	.word	0x200000ac
 8001d58:	200000d0 	.word	0x200000d0
 8001d5c:	20000504 	.word	0x20000504
 8001d60:	200000fa 	.word	0x200000fa
 8001d64:	3fe00000 	.word	0x3fe00000
 8001d68:	40366666 	.word	0x40366666
 8001d6c:	3f9eb852 	.word	0x3f9eb852
 8001d70:	3f851eb8 	.word	0x3f851eb8
 8001d74:	3f9d70a4 	.word	0x3f9d70a4

08001d78 <Filament_Cutter_Init>:
extern filament_cutter_mode prev_mode;
extern stepper_motor extruder;
extern dc_motor DC_motor;

void Filament_Cutter_Init(stepper_motor *motor, dc_motor* dc_motor)
{
 8001d78:	b490      	push	{r4, r7}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
	FC_params.filament_density = Filament_density_PLA;
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001d84:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <Filament_Cutter_Init+0x58>)
 8001d86:	601a      	str	r2, [r3, #0]
	FC_params.filament_diameter = Filament_diameter_175;
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001d8a:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <Filament_Cutter_Init+0x5c>)
 8001d8c:	605a      	str	r2, [r3, #4]
	FC_params.sample_quantities = 1;
 8001d8e:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	729a      	strb	r2, [r3, #10]
	FC_params.target_weight = Sample_weight_5g;
 8001d94:	4b0d      	ldr	r3, [pc, #52]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001d96:	2205      	movs	r2, #5
 8001d98:	811a      	strh	r2, [r3, #8]
	FC_params.current_length_cm = 0;
 8001d9a:	4b0c      	ldr	r3, [pc, #48]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	819a      	strh	r2, [r3, #12]

	FC_struct.motor = motor;
 8001da0:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <Filament_Cutter_Init+0x60>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6193      	str	r3, [r2, #24]
	FC_struct.dc_motor = dc_motor;
 8001da6:	4a0c      	ldr	r2, [pc, #48]	; (8001dd8 <Filament_Cutter_Init+0x60>)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	6153      	str	r3, [r2, #20]
	FC_struct.mode = STANDBY;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	; (8001dd8 <Filament_Cutter_Init+0x60>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	701a      	strb	r2, [r3, #0]
	FC_struct.parameters = FC_params;
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <Filament_Cutter_Init+0x60>)
 8001db4:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <Filament_Cutter_Init+0x54>)
 8001db6:	1d1c      	adds	r4, r3, #4
 8001db8:	4613      	mov	r3, r2
 8001dba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc90      	pop	{r4, r7}
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	20000508 	.word	0x20000508
 8001dd0:	3f9eb852 	.word	0x3f9eb852
 8001dd4:	3fe00000 	.word	0x3fe00000
 8001dd8:	20000518 	.word	0x20000518

08001ddc <motors_update>:



void motors_update(stepper_motor *motor, dc_motor* dc_motor)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
	if(FC_struct.mode != prev_mode)
 8001de6:	4b1d      	ldr	r3, [pc, #116]	; (8001e5c <motors_update+0x80>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <motors_update+0x84>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d00a      	beq.n	8001e0a <motors_update+0x2e>
	{
		prev_mode = FC_struct.mode;
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <motors_update+0x80>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4b19      	ldr	r3, [pc, #100]	; (8001e60 <motors_update+0x84>)
 8001dfc:	701a      	strb	r2, [r3, #0]
		printf("Mode: %d\n", prev_mode);
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <motors_update+0x84>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	4619      	mov	r1, r3
 8001e04:	4817      	ldr	r0, [pc, #92]	; (8001e64 <motors_update+0x88>)
 8001e06:	f006 f957 	bl	80080b8 <iprintf>
	}

	switch(FC_struct.mode)
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <motors_update+0x80>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d013      	beq.n	8001e3c <motors_update+0x60>
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	dc1c      	bgt.n	8001e52 <motors_update+0x76>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <motors_update+0x46>
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d004      	beq.n	8001e2a <motors_update+0x4e>
		DC_set_angle(dc_motor, 360, 50, RIGHT);
		stepper_stop(&extruder);

		break;
	}
}
 8001e20:	e017      	b.n	8001e52 <motors_update+0x76>
		DC_stop(&DC_motor);
 8001e22:	4811      	ldr	r0, [pc, #68]	; (8001e68 <motors_update+0x8c>)
 8001e24:	f7ff f947 	bl	80010b6 <DC_stop>
		break;
 8001e28:	e013      	b.n	8001e52 <motors_update+0x76>
		HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	480f      	ldr	r0, [pc, #60]	; (8001e6c <motors_update+0x90>)
 8001e30:	f002 fb0a 	bl	8004448 <HAL_GPIO_WritePin>
		stepper_extrude_weight(motor);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f001 fa5b 	bl	80032f0 <stepper_extrude_weight>
		break;
 8001e3a:	e00a      	b.n	8001e52 <motors_update+0x76>
		DC_set_angle(dc_motor, 360, 50, RIGHT);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	2232      	movs	r2, #50	; 0x32
 8001e40:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001e44:	6838      	ldr	r0, [r7, #0]
 8001e46:	f7ff f985 	bl	8001154 <DC_set_angle>
		stepper_stop(&extruder);
 8001e4a:	4809      	ldr	r0, [pc, #36]	; (8001e70 <motors_update+0x94>)
 8001e4c:	f001 f86e 	bl	8002f2c <stepper_stop>
		break;
 8001e50:	bf00      	nop
}
 8001e52:	bf00      	nop
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000518 	.word	0x20000518
 8001e60:	2000056d 	.word	0x2000056d
 8001e64:	08009094 	.word	0x08009094
 8001e68:	200000d0 	.word	0x200000d0
 8001e6c:	48000c00 	.word	0x48000c00
 8001e70:	200000ac 	.word	0x200000ac

08001e74 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	; 0x28
 8001e78:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	605a      	str	r2, [r3, #4]
 8001e84:	609a      	str	r2, [r3, #8]
 8001e86:	60da      	str	r2, [r3, #12]
 8001e88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b48      	ldr	r3, [pc, #288]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ea2:	4b45      	ldr	r3, [pc, #276]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	4b3f      	ldr	r3, [pc, #252]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	4b39      	ldr	r3, [pc, #228]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a38      	ldr	r2, [pc, #224]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ed8:	f043 0308 	orr.w	r3, r3, #8
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f003 0308 	and.w	r3, r3, #8
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eea:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eee:	4a32      	ldr	r2, [pc, #200]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ef0:	f043 0302 	orr.w	r3, r3, #2
 8001ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef6:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <MX_GPIO_Init+0x144>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f02:	2200      	movs	r2, #0
 8001f04:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001f08:	482c      	ldr	r0, [pc, #176]	; (8001fbc <MX_GPIO_Init+0x148>)
 8001f0a:	f002 fa9d 	bl	8004448 <HAL_GPIO_WritePin>
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2120      	movs	r1, #32
 8001f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f16:	f002 fa97 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <MX_GPIO_Init+0x14c>)
 8001f20:	f002 fa92 	bl	8004448 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f2a:	4b26      	ldr	r3, [pc, #152]	; (8001fc4 <MX_GPIO_Init+0x150>)
 8001f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4619      	mov	r1, r3
 8001f38:	4820      	ldr	r0, [pc, #128]	; (8001fbc <MX_GPIO_Init+0x148>)
 8001f3a:	f002 f8f3 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f3e:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001f42:	617b      	str	r3, [r7, #20]
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f44:	2301      	movs	r3, #1
 8001f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4819      	ldr	r0, [pc, #100]	; (8001fbc <MX_GPIO_Init+0x148>)
 8001f58:	f002 f8e4 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f76:	f002 f8d5 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTRD_SLEEP_Pin;
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRD_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <MX_GPIO_Init+0x14c>)
 8001f92:	f002 f8c7 	bl	8004124 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001f96:	2340      	movs	r3, #64	; 0x40
 8001f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001fa2:	f107 0314 	add.w	r3, r7, #20
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	4807      	ldr	r0, [pc, #28]	; (8001fc8 <MX_GPIO_Init+0x154>)
 8001faa:	f002 f8bb 	bl	8004124 <HAL_GPIO_Init>

}
 8001fae:	bf00      	nop
 8001fb0:	3728      	adds	r7, #40	; 0x28
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48000800 	.word	0x48000800
 8001fc0:	48000c00 	.word	0x48000c00
 8001fc4:	10210000 	.word	0x10210000
 8001fc8:	48000400 	.word	0x48000400

08001fcc <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fd0:	4b16      	ldr	r3, [pc, #88]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <MX_LPTIM1_Init+0x64>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001fe2:	4b12      	ldr	r3, [pc, #72]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001fe8:	4b10      	ldr	r3, [pc, #64]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <MX_LPTIM1_Init+0x60>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8002002:	4b0a      	ldr	r3, [pc, #40]	; (800202c <MX_LPTIM1_Init+0x60>)
 8002004:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002008:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_LPTIM1_Init+0x60>)
 800200c:	2200      	movs	r2, #0
 800200e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002010:	4b06      	ldr	r3, [pc, #24]	; (800202c <MX_LPTIM1_Init+0x60>)
 8002012:	2200      	movs	r2, #0
 8002014:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002016:	4805      	ldr	r0, [pc, #20]	; (800202c <MX_LPTIM1_Init+0x60>)
 8002018:	f002 fa2e 	bl	8004478 <HAL_LPTIM_Init>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8002022:	f000 f997 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000534 	.word	0x20000534
 8002030:	40007c00 	.word	0x40007c00

08002034 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0a4      	sub	sp, #144	; 0x90
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	2268      	movs	r2, #104	; 0x68
 8002052:	2100      	movs	r1, #0
 8002054:	4618      	mov	r0, r3
 8002056:	f006 f827 	bl	80080a8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <HAL_LPTIM_MspInit+0xc0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d142      	bne.n	80020ea <HAL_LPTIM_MspInit+0xb6>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002068:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 800206a:	2300      	movs	r3, #0
 800206c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fba4 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 800207e:	f000 f969 	bl	8002354 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a1c      	ldr	r2, [pc, #112]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 8002088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 80020a0:	f043 0302 	orr.w	r3, r3, #2
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_LPTIM_MspInit+0xc4>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = DC_ENC_B_Pin|DC_ENC_A_Pin;
 80020b2:	23a0      	movs	r3, #160	; 0xa0
 80020b4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	2302      	movs	r3, #2
 80020b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80020c8:	2301      	movs	r3, #1
 80020ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020d2:	4619      	mov	r1, r3
 80020d4:	4809      	ldr	r0, [pc, #36]	; (80020fc <HAL_LPTIM_MspInit+0xc8>)
 80020d6:	f002 f825 	bl	8004124 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80020da:	2200      	movs	r2, #0
 80020dc:	2100      	movs	r1, #0
 80020de:	2041      	movs	r0, #65	; 0x41
 80020e0:	f001 ffe9 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80020e4:	2041      	movs	r0, #65	; 0x41
 80020e6:	f002 f802 	bl	80040ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80020ea:	bf00      	nop
 80020ec:	3790      	adds	r7, #144	; 0x90
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40007c00 	.word	0x40007c00
 80020f8:	40021000 	.word	0x40021000
 80020fc:	48000400 	.word	0x48000400

08002100 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002108:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800210c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d013      	beq.n	8002140 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002118:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800211c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002120:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00b      	beq.n	8002140 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002128:	e000      	b.n	800212c <ITM_SendChar+0x2c>
    {
      __NOP();
 800212a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800212c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f9      	beq.n	800212a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002136:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002140:	687b      	ldr	r3, [r7, #4]
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b082      	sub	sp, #8
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
	ITM_SendChar(ch);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ffd1 	bl	8002100 <ITM_SendChar>
	return ch;
 800215e:	687b      	ldr	r3, [r7, #4]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3708      	adds	r7, #8
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216e:	f001 fe27 	bl	8003dc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002172:	f000 f859 	bl	8002228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002176:	f7ff fe7d 	bl	8001e74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800217a:	f001 fd6b 	bl	8003c54 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800217e:	f001 fa47 	bl	8003610 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002182:	f001 faf3 	bl	800376c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002186:	f001 fb41 	bl	800380c <MX_TIM3_Init>
  MX_TIM6_Init();
 800218a:	f001 fb95 	bl	80038b8 <MX_TIM6_Init>
  MX_TIM16_Init();
 800218e:	f001 fbc9 	bl	8003924 <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8002192:	f7ff ff1b 	bl	8001fcc <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  encoder_init(ENC_BTN_GPIO_Port, ENC_BTN_Pin, 20);
 8002196:	2214      	movs	r2, #20
 8002198:	2140      	movs	r1, #64	; 0x40
 800219a:	481a      	ldr	r0, [pc, #104]	; (8002204 <main+0x9c>)
 800219c:	f7ff fc0a 	bl	80019b4 <encoder_init>
  delay_init();
 80021a0:	f7ff fbe4 	bl	800196c <delay_init>
  ST7920_Init();
 80021a4:	f7ff f9e0 	bl	8001568 <ST7920_Init>
  stepper_init(&extruder, &htim1, TIM_CHANNEL_1, &htim2, EXT_DIR_GPIO_Port,
 80021a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ac:	9301      	str	r3, [sp, #4]
 80021ae:	4b16      	ldr	r3, [pc, #88]	; (8002208 <main+0xa0>)
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <main+0xa4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <main+0xa8>)
 80021b8:	4816      	ldr	r0, [pc, #88]	; (8002214 <main+0xac>)
 80021ba:	f000 fe9b 	bl	8002ef4 <stepper_init>
  EXT_DIR_Pin);
  DC_motor_Init(&DC_motor, &htim16, TIM_CHANNEL_1, CUT_DIR_IN1_GPIO_Port,
 80021be:	4b16      	ldr	r3, [pc, #88]	; (8002218 <main+0xb0>)
 80021c0:	9303      	str	r3, [sp, #12]
 80021c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021c6:	9302      	str	r3, [sp, #8]
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <main+0xa0>)
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	4b0d      	ldr	r3, [pc, #52]	; (8002208 <main+0xa0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	4911      	ldr	r1, [pc, #68]	; (800221c <main+0xb4>)
 80021d8:	4811      	ldr	r0, [pc, #68]	; (8002220 <main+0xb8>)
 80021da:	f7fe feac 	bl	8000f36 <DC_motor_Init>
  CUT_DIR_IN1_Pin, CUT_DIR_IN2_GPIO_Port, CUT_DIR_IN2_Pin, &hlptim1);
  Init_menu(&cursor_pos);
 80021de:	4811      	ldr	r0, [pc, #68]	; (8002224 <main+0xbc>)
 80021e0:	f000 fb38 	bl	8002854 <Init_menu>
  Filament_Cutter_Init(&extruder, &DC_motor);
 80021e4:	490e      	ldr	r1, [pc, #56]	; (8002220 <main+0xb8>)
 80021e6:	480b      	ldr	r0, [pc, #44]	; (8002214 <main+0xac>)
 80021e8:	f7ff fdc6 	bl	8001d78 <Filament_Cutter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		motors_update(&extruder, &DC_motor);
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <main+0xb8>)
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <main+0xac>)
 80021f0:	f7ff fdf4 	bl	8001ddc <motors_update>
		ENC_Button_Action(&cursor_pos);
 80021f4:	480b      	ldr	r0, [pc, #44]	; (8002224 <main+0xbc>)
 80021f6:	f7ff fc7d 	bl	8001af4 <ENC_Button_Action>
		menu_update(&cursor_pos);
 80021fa:	480a      	ldr	r0, [pc, #40]	; (8002224 <main+0xbc>)
 80021fc:	f000 fb08 	bl	8002810 <menu_update>
		motors_update(&extruder, &DC_motor);
 8002200:	e7f4      	b.n	80021ec <main+0x84>
 8002202:	bf00      	nop
 8002204:	48000400 	.word	0x48000400
 8002208:	48000800 	.word	0x48000800
 800220c:	2000069c 	.word	0x2000069c
 8002210:	20000650 	.word	0x20000650
 8002214:	200000ac 	.word	0x200000ac
 8002218:	20000534 	.word	0x20000534
 800221c:	200006e8 	.word	0x200006e8
 8002220:	200000d0 	.word	0x200000d0
 8002224:	200005b0 	.word	0x200005b0

08002228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b096      	sub	sp, #88	; 0x58
 800222c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800222e:	f107 0314 	add.w	r3, r7, #20
 8002232:	2244      	movs	r2, #68	; 0x44
 8002234:	2100      	movs	r1, #0
 8002236:	4618      	mov	r0, r3
 8002238:	f005 ff36 	bl	80080a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800223c:	463b      	mov	r3, r7
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
 8002244:	609a      	str	r2, [r3, #8]
 8002246:	60da      	str	r2, [r3, #12]
 8002248:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800224a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800224e:	f002 fc3b 	bl	8004ac8 <HAL_PWREx_ControlVoltageScaling>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002258:	f000 f87c 	bl	8002354 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800225c:	2302      	movs	r3, #2
 800225e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002260:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002266:	2340      	movs	r3, #64	; 0x40
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800226a:	2302      	movs	r3, #2
 800226c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800226e:	2302      	movs	r3, #2
 8002270:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002272:	2301      	movs	r3, #1
 8002274:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002276:	230a      	movs	r3, #10
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800227a:	2307      	movs	r3, #7
 800227c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800227e:	2302      	movs	r3, #2
 8002280:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002282:	2302      	movs	r3, #2
 8002284:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002286:	f107 0314 	add.w	r3, r7, #20
 800228a:	4618      	mov	r0, r3
 800228c:	f002 fc72 	bl	8004b74 <HAL_RCC_OscConfig>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002296:	f000 f85d 	bl	8002354 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800229a:	230f      	movs	r3, #15
 800229c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800229e:	2303      	movs	r3, #3
 80022a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022ae:	463b      	mov	r3, r7
 80022b0:	2104      	movs	r1, #4
 80022b2:	4618      	mov	r0, r3
 80022b4:	f003 f87e 	bl	80053b4 <HAL_RCC_ClockConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022be:	f000 f849 	bl	8002354 <Error_Handler>
  }
}
 80022c2:	bf00      	nop
 80022c4:	3758      	adds	r7, #88	; 0x58
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	//UNUSED(hlptim);
	CUTTING_PROCESS_FLAG = 0;
 80022d4:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
	FC_struct.mode = STANDBY;
 80022da:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
	cursor_pos.FL_position = DEFAULT;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <HAL_LPTIM_AutoReloadMatchCallback+0x30>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
	printf("DC_INT\n");
 80022e6:	4806      	ldr	r0, [pc, #24]	; (8002300 <HAL_LPTIM_AutoReloadMatchCallback+0x34>)
 80022e8:	f005 ff6c 	bl	80081c4 <puts>

}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200000fa 	.word	0x200000fa
 80022f8:	20000518 	.word	0x20000518
 80022fc:	200005b0 	.word	0x200005b0
 8002300:	080090a0 	.word	0x080090a0

08002304 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if(FIRST_MISS_FLAG == 1)
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d10f      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if (htim->Instance == extruder.slave_timer.htim->Instance)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <HAL_TIM_PeriodElapsedCallback+0x40>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d108      	bne.n	8002336 <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			EXTRUDE_PROCESS_FLAG = 0;
 8002324:	4b08      	ldr	r3, [pc, #32]	; (8002348 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = CUTTING;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <HAL_TIM_PeriodElapsedCallback+0x48>)
 800232c:	2202      	movs	r2, #2
 800232e:	701a      	strb	r2, [r3, #0]
			printf("EXTR_INT\n");
 8002330:	4807      	ldr	r0, [pc, #28]	; (8002350 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002332:	f005 ff47 	bl	80081c4 <puts>
		}
	}
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	20000503 	.word	0x20000503
 8002344:	200000ac 	.word	0x200000ac
 8002348:	20000504 	.word	0x20000504
 800234c:	20000518 	.word	0x20000518
 8002350:	080090a8 	.word	0x080090a8

08002354 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002358:	b672      	cpsid	i
}
 800235a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800235c:	e7fe      	b.n	800235c <Error_Handler+0x8>
	...

08002360 <update_first_layer>:
extern filament_cutter FC_struct;
extern dc_motor DC_motor;


void update_first_layer(cursor_position* curr_position)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	if(curr_position->FL_position != curr_position->FL_prev_position)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	785b      	ldrb	r3, [r3, #1]
 8002370:	429a      	cmp	r2, r3
 8002372:	d066      	beq.n	8002442 <update_first_layer+0xe2>
	{
		switch(curr_position->FL_position)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b04      	cmp	r3, #4
 800237a:	d85d      	bhi.n	8002438 <update_first_layer+0xd8>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <update_first_layer+0x24>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002399 	.word	0x08002399
 8002388:	080023b9 	.word	0x080023b9
 800238c:	080023db 	.word	0x080023db
 8002390:	080023f5 	.word	0x080023f5
 8002394:	08002417 	.word	0x08002417
		{
			case DEFAULT:
			DC_stop(&DC_motor);
 8002398:	482c      	ldr	r0, [pc, #176]	; (800244c <update_first_layer+0xec>)
 800239a:	f7fe fe8c 	bl	80010b6 <DC_stop>
			ST7920_GraphicMode(1);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7fe ffde 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023a4:	f7ff f890 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe ffd9 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023ae:	f7ff f88b 	bl	80014c8 <ST7920_Clear>

			default_screen();
 80023b2:	f000 fbc5 	bl	8002b40 <default_screen>
			break;
 80023b6:	e040      	b.n	800243a <update_first_layer+0xda>

			case START:
			default_screen();
 80023b8:	f000 fbc2 	bl	8002b40 <default_screen>

			// highlighting "START"
			ST7920_GraphicMode(1);
 80023bc:	2001      	movs	r0, #1
 80023be:	f7fe ffcf 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(88, 48, 80, 16);
 80023c2:	2310      	movs	r3, #16
 80023c4:	2250      	movs	r2, #80	; 0x50
 80023c6:	2130      	movs	r1, #48	; 0x30
 80023c8:	2058      	movs	r0, #88	; 0x58
 80023ca:	f7ff fa71 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80023ce:	f7ff f871 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe ffc4 	bl	8001360 <ST7920_GraphicMode>
			break;
 80023d8:	e02f      	b.n	800243a <update_first_layer+0xda>

			case ACTIVE_START:
			ST7920_GraphicMode(1);
 80023da:	2001      	movs	r0, #1
 80023dc:	f7fe ffc0 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023e0:	f7ff f872 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7fe ffbb 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023ea:	f7ff f86d 	bl	80014c8 <ST7920_Clear>
			active_start_screen();
 80023ee:	f000 fd5b 	bl	8002ea8 <active_start_screen>


			break;
 80023f2:	e022      	b.n	800243a <update_first_layer+0xda>


			case STOP:
			active_start_screen();
 80023f4:	f000 fd58 	bl	8002ea8 <active_start_screen>

			// highlighting
			ST7920_GraphicMode(1);
 80023f8:	2001      	movs	r0, #1
 80023fa:	f7fe ffb1 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(48, 50, 35, 16);
 80023fe:	2310      	movs	r3, #16
 8002400:	2223      	movs	r2, #35	; 0x23
 8002402:	2132      	movs	r1, #50	; 0x32
 8002404:	2030      	movs	r0, #48	; 0x30
 8002406:	f7ff fa53 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800240a:	f7ff f853 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe ffa6 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002414:	e011      	b.n	800243a <update_first_layer+0xda>

			case SETTINGS:
			default_screen();
 8002416:	f000 fb93 	bl	8002b40 <default_screen>
			// highlighting "SETTINGS"
			ST7920_GraphicMode(1);
 800241a:	2001      	movs	r0, #1
 800241c:	f7fe ffa0 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 16, 80, 16);
 8002420:	2310      	movs	r3, #16
 8002422:	2250      	movs	r2, #80	; 0x50
 8002424:	2110      	movs	r1, #16
 8002426:	2000      	movs	r0, #0
 8002428:	f7ff fa42 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800242c:	f7ff f842 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002430:	2000      	movs	r0, #0
 8002432:	f7fe ff95 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002436:	e000      	b.n	800243a <update_first_layer+0xda>

			default:

			break;
 8002438:	bf00      	nop

		}

		curr_position->FL_prev_position = curr_position->FL_position;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	705a      	strb	r2, [r3, #1]
	}
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200000d0 	.word	0x200000d0

08002450 <update_second_layer>:


void update_second_layer(cursor_position* curr_position)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	if(curr_position->SL_position != curr_position->SL_prev_position)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	789a      	ldrb	r2, [r3, #2]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	78db      	ldrb	r3, [r3, #3]
 8002460:	429a      	cmp	r2, r3
 8002462:	f000 809e 	beq.w	80025a2 <update_second_layer+0x152>
	{

		switch(curr_position->SL_position)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	789b      	ldrb	r3, [r3, #2]
 800246a:	2b04      	cmp	r3, #4
 800246c:	f200 8094 	bhi.w	8002598 <update_second_layer+0x148>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <update_second_layer+0x28>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002565 	.word	0x08002565
 800247c:	0800248d 	.word	0x0800248d
 8002480:	080024c3 	.word	0x080024c3
 8002484:	080024f9 	.word	0x080024f9
 8002488:	0800252f 	.word	0x0800252f
		{
		case FIL_DIA:
			ST7920_GraphicMode(1);
 800248c:	2001      	movs	r0, #1
 800248e:	f7fe ff67 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002492:	f7ff f819 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002496:	2000      	movs	r0, #0
 8002498:	f7fe ff62 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800249c:	f7ff f814 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 80024a0:	f000 fb78 	bl	8002b94 <settings_screen>

			// highlighting
			ST7920_GraphicMode(1);
 80024a4:	2001      	movs	r0, #1
 80024a6:	f7fe ff5b 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 80024aa:	230e      	movs	r3, #14
 80024ac:	224f      	movs	r2, #79	; 0x4f
 80024ae:	2100      	movs	r1, #0
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7ff f9fd 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80024b6:	f7fe fffd 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7fe ff50 	bl	8001360 <ST7920_GraphicMode>

			break;
 80024c0:	e06b      	b.n	800259a <update_second_layer+0x14a>

		case FIL_DEN:
			ST7920_GraphicMode(1);
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7fe ff4c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024c8:	f7fe fffe 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe ff47 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024d2:	f7fe fff9 	bl	80014c8 <ST7920_Clear>

			// highlighting
			settings_screen();
 80024d6:	f000 fb5d 	bl	8002b94 <settings_screen>
			ST7920_GraphicMode(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7fe ff40 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 80024e0:	230f      	movs	r3, #15
 80024e2:	224f      	movs	r2, #79	; 0x4f
 80024e4:	210f      	movs	r1, #15
 80024e6:	2000      	movs	r0, #0
 80024e8:	f7ff f9e2 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80024ec:	f7fe ffe2 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe ff35 	bl	8001360 <ST7920_GraphicMode>

			break;
 80024f6:	e050      	b.n	800259a <update_second_layer+0x14a>

		case SAMPLE_WEIGHT:
			ST7920_GraphicMode(1);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7fe ff31 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024fe:	f7fe ffe3 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002502:	2000      	movs	r0, #0
 8002504:	f7fe ff2c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002508:	f7fe ffde 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 800250c:	f000 fb42 	bl	8002b94 <settings_screen>

			ST7920_GraphicMode(1);
 8002510:	2001      	movs	r0, #1
 8002512:	f7fe ff25 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 15);
 8002516:	230f      	movs	r3, #15
 8002518:	224f      	movs	r2, #79	; 0x4f
 800251a:	211e      	movs	r1, #30
 800251c:	2000      	movs	r0, #0
 800251e:	f7ff f9c7 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002522:	f7fe ffc7 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002526:	2000      	movs	r0, #0
 8002528:	f7fe ff1a 	bl	8001360 <ST7920_GraphicMode>
			break;
 800252c:	e035      	b.n	800259a <update_second_layer+0x14a>

		case QUANTITY:
			ST7920_GraphicMode(1);
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe ff16 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002534:	f7fe ffc8 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002538:	2000      	movs	r0, #0
 800253a:	f7fe ff11 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800253e:	f7fe ffc3 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002542:	f000 fb27 	bl	8002b94 <settings_screen>

			ST7920_GraphicMode(1);
 8002546:	2001      	movs	r0, #1
 8002548:	f7fe ff0a 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 15);
 800254c:	230f      	movs	r3, #15
 800254e:	224f      	movs	r2, #79	; 0x4f
 8002550:	2130      	movs	r1, #48	; 0x30
 8002552:	2000      	movs	r0, #0
 8002554:	f7ff f9ac 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002558:	f7fe ffac 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe feff 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002562:	e01a      	b.n	800259a <update_second_layer+0x14a>

		case BACK:
			ST7920_GraphicMode(1);
 8002564:	2001      	movs	r0, #1
 8002566:	f7fe fefb 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800256a:	f7fe ffad 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe fef6 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002574:	f7fe ffa8 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002578:	f000 fb0c 	bl	8002b94 <settings_screen>

			ST7920_GraphicMode(1);
 800257c:	2001      	movs	r0, #1
 800257e:	f7fe feef 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(80, 48, 79, 15);
 8002582:	230f      	movs	r3, #15
 8002584:	224f      	movs	r2, #79	; 0x4f
 8002586:	2130      	movs	r1, #48	; 0x30
 8002588:	2050      	movs	r0, #80	; 0x50
 800258a:	f7ff f991 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800258e:	f7fe ff91 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002592:	2000      	movs	r0, #0
 8002594:	f7fe fee4 	bl	8001360 <ST7920_GraphicMode>


		default:

			break;
 8002598:	bf00      	nop
		}

		curr_position->SL_prev_position = curr_position->SL_position;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	789a      	ldrb	r2, [r3, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	70da      	strb	r2, [r3, #3]
	}

}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop

080025ac <update_third_layer>:


void update_third_layer(cursor_position* curr_position)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
	if(curr_position->TL_position != curr_position->TL_prev_position)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	791a      	ldrb	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	795b      	ldrb	r3, [r3, #5]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f000 8122 	beq.w	8002806 <update_third_layer+0x25a>
	{
		switch(curr_position->TL_position)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	2b09      	cmp	r3, #9
 80025c8:	f200 8118 	bhi.w	80027fc <update_third_layer+0x250>
 80025cc:	a201      	add	r2, pc, #4	; (adr r2, 80025d4 <update_third_layer+0x28>)
 80025ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d2:	bf00      	nop
 80025d4:	080025fd 	.word	0x080025fd
 80025d8:	08002633 	.word	0x08002633
 80025dc:	08002669 	.word	0x08002669
 80025e0:	0800269f 	.word	0x0800269f
 80025e4:	080026d5 	.word	0x080026d5
 80025e8:	0800270b 	.word	0x0800270b
 80025ec:	08002741 	.word	0x08002741
 80025f0:	08002777 	.word	0x08002777
 80025f4:	080027ad 	.word	0x080027ad
 80025f8:	080027e3 	.word	0x080027e3
		{
		case DIAMETER_175:
			ST7920_GraphicMode(1);
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fe feaf 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002602:	f7fe ff61 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe feaa 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800260c:	f7fe ff5c 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 8002610:	f000 faea 	bl	8002be8 <diameter_screen>

			ST7920_GraphicMode(1);
 8002614:	2001      	movs	r0, #1
 8002616:	f7fe fea3 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800261a:	230e      	movs	r3, #14
 800261c:	224f      	movs	r2, #79	; 0x4f
 800261e:	2100      	movs	r1, #0
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff f945 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002626:	f7fe ff45 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fe98 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002630:	e0e5      	b.n	80027fe <update_third_layer+0x252>

		case DIAMETER_285:
			ST7920_GraphicMode(1);
 8002632:	2001      	movs	r0, #1
 8002634:	f7fe fe94 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002638:	f7fe ff46 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800263c:	2000      	movs	r0, #0
 800263e:	f7fe fe8f 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002642:	f7fe ff41 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 8002646:	f000 facf 	bl	8002be8 <diameter_screen>

			ST7920_GraphicMode(1);
 800264a:	2001      	movs	r0, #1
 800264c:	f7fe fe88 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 8002650:	230f      	movs	r3, #15
 8002652:	224f      	movs	r2, #79	; 0x4f
 8002654:	210f      	movs	r1, #15
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff f92a 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800265c:	f7fe ff2a 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002660:	2000      	movs	r0, #0
 8002662:	f7fe fe7d 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002666:	e0ca      	b.n	80027fe <update_third_layer+0x252>

		case DENSITY_PLA:
			ST7920_GraphicMode(1);
 8002668:	2001      	movs	r0, #1
 800266a:	f7fe fe79 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800266e:	f7fe ff2b 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002672:	2000      	movs	r0, #0
 8002674:	f7fe fe74 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002678:	f7fe ff26 	bl	80014c8 <ST7920_Clear>
			density_screen();
 800267c:	f000 faf4 	bl	8002c68 <density_screen>

			ST7920_GraphicMode(1);
 8002680:	2001      	movs	r0, #1
 8002682:	f7fe fe6d 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 8002686:	230e      	movs	r3, #14
 8002688:	224f      	movs	r2, #79	; 0x4f
 800268a:	2100      	movs	r1, #0
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff f90f 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002692:	f7fe ff0f 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002696:	2000      	movs	r0, #0
 8002698:	f7fe fe62 	bl	8001360 <ST7920_GraphicMode>
			break;
 800269c:	e0af      	b.n	80027fe <update_third_layer+0x252>

		case DENSITY_ABS:
			ST7920_GraphicMode(1);
 800269e:	2001      	movs	r0, #1
 80026a0:	f7fe fe5e 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026a4:	f7fe ff10 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fe59 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026ae:	f7fe ff0b 	bl	80014c8 <ST7920_Clear>
			density_screen();
 80026b2:	f000 fad9 	bl	8002c68 <density_screen>

			ST7920_GraphicMode(1);
 80026b6:	2001      	movs	r0, #1
 80026b8:	f7fe fe52 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 80026bc:	230e      	movs	r3, #14
 80026be:	224f      	movs	r2, #79	; 0x4f
 80026c0:	210f      	movs	r1, #15
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7ff f8f4 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80026c8:	f7fe fef4 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fe47 	bl	8001360 <ST7920_GraphicMode>
			break;
 80026d2:	e094      	b.n	80027fe <update_third_layer+0x252>

		case DENSITY_PETG:
			ST7920_GraphicMode(1);
 80026d4:	2001      	movs	r0, #1
 80026d6:	f7fe fe43 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026da:	f7fe fef5 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7fe fe3e 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026e4:	f7fe fef0 	bl	80014c8 <ST7920_Clear>
			density_screen();
 80026e8:	f000 fabe 	bl	8002c68 <density_screen>

			ST7920_GraphicMode(1);
 80026ec:	2001      	movs	r0, #1
 80026ee:	f7fe fe37 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 14);
 80026f2:	230e      	movs	r3, #14
 80026f4:	224f      	movs	r2, #79	; 0x4f
 80026f6:	211e      	movs	r1, #30
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7ff f8d9 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80026fe:	f7fe fed9 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe2c 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002708:	e079      	b.n	80027fe <update_third_layer+0x252>

		case WEIGHT_5g:
			ST7920_GraphicMode(1);
 800270a:	2001      	movs	r0, #1
 800270c:	f7fe fe28 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002710:	f7fe feda 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fe23 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800271a:	f7fe fed5 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 800271e:	f000 fb4d 	bl	8002dbc <weight_screen>

			ST7920_GraphicMode(1);
 8002722:	2001      	movs	r0, #1
 8002724:	f7fe fe1c 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 8002728:	230e      	movs	r3, #14
 800272a:	224f      	movs	r2, #79	; 0x4f
 800272c:	2100      	movs	r1, #0
 800272e:	2000      	movs	r0, #0
 8002730:	f7ff f8be 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002734:	f7fe febe 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fe11 	bl	8001360 <ST7920_GraphicMode>
			break;
 800273e:	e05e      	b.n	80027fe <update_third_layer+0x252>

		case WEIGHT_25g:
			ST7920_GraphicMode(1);
 8002740:	2001      	movs	r0, #1
 8002742:	f7fe fe0d 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002746:	f7fe febf 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fe08 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002750:	f7fe feba 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 8002754:	f000 fb32 	bl	8002dbc <weight_screen>

			ST7920_GraphicMode(1);
 8002758:	2001      	movs	r0, #1
 800275a:	f7fe fe01 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 800275e:	230e      	movs	r3, #14
 8002760:	224f      	movs	r2, #79	; 0x4f
 8002762:	210f      	movs	r1, #15
 8002764:	2000      	movs	r0, #0
 8002766:	f7ff f8a3 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800276a:	f7fe fea3 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fdf6 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002774:	e043      	b.n	80027fe <update_third_layer+0x252>

		case WEIGHT_50g:
			ST7920_GraphicMode(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f7fe fdf2 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800277c:	f7fe fea4 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002780:	2000      	movs	r0, #0
 8002782:	f7fe fded 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002786:	f7fe fe9f 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 800278a:	f000 fb17 	bl	8002dbc <weight_screen>

			ST7920_GraphicMode(1);
 800278e:	2001      	movs	r0, #1
 8002790:	f7fe fde6 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 16);
 8002794:	2310      	movs	r3, #16
 8002796:	224f      	movs	r2, #79	; 0x4f
 8002798:	211e      	movs	r1, #30
 800279a:	2000      	movs	r0, #0
 800279c:	f7ff f888 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80027a0:	f7fe fe88 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80027a4:	2000      	movs	r0, #0
 80027a6:	f7fe fddb 	bl	8001360 <ST7920_GraphicMode>
			break;
 80027aa:	e028      	b.n	80027fe <update_third_layer+0x252>

		case WEIGHT_100g:
			ST7920_GraphicMode(1);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7fe fdd7 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80027b2:	f7fe fe89 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fdd2 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80027bc:	f7fe fe84 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 80027c0:	f000 fafc 	bl	8002dbc <weight_screen>

			ST7920_GraphicMode(1);
 80027c4:	2001      	movs	r0, #1
 80027c6:	f7fe fdcb 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 14);
 80027ca:	230e      	movs	r3, #14
 80027cc:	224f      	movs	r2, #79	; 0x4f
 80027ce:	2130      	movs	r1, #48	; 0x30
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff f86d 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80027d6:	f7fe fe6d 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe fdc0 	bl	8001360 <ST7920_GraphicMode>
			break;
 80027e0:	e00d      	b.n	80027fe <update_third_layer+0x252>

		case QTY:
			ST7920_GraphicMode(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f7fe fdbc 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80027e8:	f7fe fe6e 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80027ec:	2000      	movs	r0, #0
 80027ee:	f7fe fdb7 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80027f2:	f7fe fe69 	bl	80014c8 <ST7920_Clear>

			quantity_screen();
 80027f6:	f000 fb71 	bl	8002edc <quantity_screen>

			break;
 80027fa:	e000      	b.n	80027fe <update_third_layer+0x252>

		default:
			break;
 80027fc:	bf00      	nop

		}

		curr_position->TL_prev_position = curr_position->TL_position;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	791a      	ldrb	r2, [r3, #4]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	715a      	strb	r2, [r3, #5]

	}

}
 8002806:	bf00      	nop
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop

08002810 <menu_update>:



void menu_update(cursor_position* curr_position)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]

	update_enc(curr_position);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f83b 	bl	8002894 <update_enc>

	if(curr_position->current_layer == FIRST_LAYER)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	799b      	ldrb	r3, [r3, #6]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <menu_update+0x1e>
	{

		update_first_layer(curr_position);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7ff fd9a 	bl	8002360 <update_first_layer>
	else if(curr_position->current_layer == THIRD_LAYER)
	{
		update_third_layer(curr_position);
	}

}
 800282c:	e00e      	b.n	800284c <menu_update+0x3c>
	else if(curr_position->current_layer == SECOND_LAYER)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	799b      	ldrb	r3, [r3, #6]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d103      	bne.n	800283e <menu_update+0x2e>
		update_second_layer(curr_position);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f7ff fe0a 	bl	8002450 <update_second_layer>
}
 800283c:	e006      	b.n	800284c <menu_update+0x3c>
	else if(curr_position->current_layer == THIRD_LAYER)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	799b      	ldrb	r3, [r3, #6]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d102      	bne.n	800284c <menu_update+0x3c>
		update_third_layer(curr_position);
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff feb0 	bl	80025ac <update_third_layer>
}
 800284c:	bf00      	nop
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <Init_menu>:


void Init_menu(cursor_position* curr_position)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
	curr_position->FL_position = DEFAULT;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
	curr_position->SL_position = FIL_DIA;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	709a      	strb	r2, [r3, #2]
	curr_position->TL_position = DIAMETER_175;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	711a      	strb	r2, [r3, #4]
	curr_position->FL_prev_position = START;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	705a      	strb	r2, [r3, #1]
	curr_position->SL_prev_position = NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2205      	movs	r2, #5
 8002878:	70da      	strb	r2, [r3, #3]
	curr_position->TL_prev_position = NONE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2205      	movs	r2, #5
 800287e:	715a      	strb	r2, [r3, #5]
	curr_position->current_layer = FIRST_LAYER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	719a      	strb	r2, [r3, #6]
	menu_update(curr_position);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffc2 	bl	8002810 <menu_update>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <update_enc>:



void update_enc(cursor_position* curr_position)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]

	uint8_t enc_value;
	enc_value = enc_get_counter();
 800289c:	f7ff f8b8 	bl	8001a10 <enc_get_counter>
 80028a0:	4603      	mov	r3, r0
 80028a2:	73fb      	strb	r3, [r7, #15]

	if(curr_position->current_layer == FIRST_LAYER)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	799b      	ldrb	r3, [r3, #6]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d148      	bne.n	800293e <update_enc+0xaa>
	{

		if(!(FC_struct.mode != STANDBY))
 80028ac:	4b97      	ldr	r3, [pc, #604]	; (8002b0c <update_enc+0x278>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12f      	bne.n	8002914 <update_enc+0x80>
		{

			if((enc_value >=0) & (enc_value < 4))
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d803      	bhi.n	80028c2 <update_enc+0x2e>
			{
				curr_position->FL_position = DEFAULT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]


	}


}
 80028c0:	e139      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 4) & (enc_value < 8))
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	bf8c      	ite	hi
 80028c8:	2301      	movhi	r3, #1
 80028ca:	2300      	movls	r3, #0
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	7bfb      	ldrb	r3, [r7, #15]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	bf94      	ite	ls
 80028d4:	2301      	movls	r3, #1
 80028d6:	2300      	movhi	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4013      	ands	r3, r2
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <update_enc+0x56>
				curr_position->FL_position = SETTINGS;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2204      	movs	r2, #4
 80028e6:	701a      	strb	r2, [r3, #0]
}
 80028e8:	e125      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 8) & (enc_value < 12))
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b07      	cmp	r3, #7
 80028ee:	bf8c      	ite	hi
 80028f0:	2301      	movhi	r3, #1
 80028f2:	2300      	movls	r3, #0
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	7bfb      	ldrb	r3, [r7, #15]
 80028f8:	2b0b      	cmp	r3, #11
 80028fa:	bf94      	ite	ls
 80028fc:	2301      	movls	r3, #1
 80028fe:	2300      	movhi	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	4013      	ands	r3, r2
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8115 	beq.w	8002b36 <update_enc+0x2a2>
				curr_position->FL_position = START;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	701a      	strb	r2, [r3, #0]
}
 8002912:	e110      	b.n	8002b36 <update_enc+0x2a2>
		else if((enc_value >= 8) & (enc_value < 20))
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b07      	cmp	r3, #7
 8002918:	bf8c      	ite	hi
 800291a:	2301      	movhi	r3, #1
 800291c:	2300      	movls	r3, #0
 800291e:	b2da      	uxtb	r2, r3
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b13      	cmp	r3, #19
 8002924:	bf94      	ite	ls
 8002926:	2301      	movls	r3, #1
 8002928:	2300      	movhi	r3, #0
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4013      	ands	r3, r2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 8100 	beq.w	8002b36 <update_enc+0x2a2>
			curr_position->FL_position = STOP;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2203      	movs	r2, #3
 800293a:	701a      	strb	r2, [r3, #0]
}
 800293c:	e0fb      	b.n	8002b36 <update_enc+0x2a2>
	else if(curr_position->current_layer == SECOND_LAYER)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	799b      	ldrb	r3, [r3, #6]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d157      	bne.n	80029f6 <update_enc+0x162>
		if((enc_value >=0) & (enc_value < 4))
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b03      	cmp	r3, #3
 800294a:	d803      	bhi.n	8002954 <update_enc+0xc0>
			curr_position->SL_position = FIL_DIA;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	709a      	strb	r2, [r3, #2]
}
 8002952:	e0f0      	b.n	8002b36 <update_enc+0x2a2>
		else if((enc_value >= 4) & (enc_value < 8))
 8002954:	7bfb      	ldrb	r3, [r7, #15]
 8002956:	2b03      	cmp	r3, #3
 8002958:	bf8c      	ite	hi
 800295a:	2301      	movhi	r3, #1
 800295c:	2300      	movls	r3, #0
 800295e:	b2da      	uxtb	r2, r3
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2b07      	cmp	r3, #7
 8002964:	bf94      	ite	ls
 8002966:	2301      	movls	r3, #1
 8002968:	2300      	movhi	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	4013      	ands	r3, r2
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <update_enc+0xe8>
			curr_position->SL_position = FIL_DEN;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2202      	movs	r2, #2
 8002978:	709a      	strb	r2, [r3, #2]
}
 800297a:	e0dc      	b.n	8002b36 <update_enc+0x2a2>
		else if((enc_value >= 8) & (enc_value < 12))
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b07      	cmp	r3, #7
 8002980:	bf8c      	ite	hi
 8002982:	2301      	movhi	r3, #1
 8002984:	2300      	movls	r3, #0
 8002986:	b2da      	uxtb	r2, r3
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	2b0b      	cmp	r3, #11
 800298c:	bf94      	ite	ls
 800298e:	2301      	movls	r3, #1
 8002990:	2300      	movhi	r3, #0
 8002992:	b2db      	uxtb	r3, r3
 8002994:	4013      	ands	r3, r2
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <update_enc+0x110>
			curr_position->SL_position = SAMPLE_WEIGHT;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	709a      	strb	r2, [r3, #2]
}
 80029a2:	e0c8      	b.n	8002b36 <update_enc+0x2a2>
		else if((enc_value >= 12) & (enc_value < 16))
 80029a4:	7bfb      	ldrb	r3, [r7, #15]
 80029a6:	2b0b      	cmp	r3, #11
 80029a8:	bf8c      	ite	hi
 80029aa:	2301      	movhi	r3, #1
 80029ac:	2300      	movls	r3, #0
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	7bfb      	ldrb	r3, [r7, #15]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	bf94      	ite	ls
 80029b6:	2301      	movls	r3, #1
 80029b8:	2300      	movhi	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4013      	ands	r3, r2
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <update_enc+0x138>
			curr_position->SL_position = QUANTITY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2204      	movs	r2, #4
 80029c8:	709a      	strb	r2, [r3, #2]
}
 80029ca:	e0b4      	b.n	8002b36 <update_enc+0x2a2>
		else if((enc_value >= 16) & (enc_value < 21))
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b0f      	cmp	r3, #15
 80029d0:	bf8c      	ite	hi
 80029d2:	2301      	movhi	r3, #1
 80029d4:	2300      	movls	r3, #0
 80029d6:	b2da      	uxtb	r2, r3
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b14      	cmp	r3, #20
 80029dc:	bf94      	ite	ls
 80029de:	2301      	movls	r3, #1
 80029e0:	2300      	movhi	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	4013      	ands	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80a4 	beq.w	8002b36 <update_enc+0x2a2>
			curr_position->SL_position = BACK;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	709a      	strb	r2, [r3, #2]
}
 80029f4:	e09f      	b.n	8002b36 <update_enc+0x2a2>
	else if(curr_position->current_layer == THIRD_LAYER)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	799b      	ldrb	r3, [r3, #6]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	f040 809b 	bne.w	8002b36 <update_enc+0x2a2>
		if(curr_position->SL_position == FIL_DIA)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	789b      	ldrb	r3, [r3, #2]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d11a      	bne.n	8002a3e <update_enc+0x1aa>
			if((enc_value >= 0) & (enc_value < 4))
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d803      	bhi.n	8002a16 <update_enc+0x182>
				curr_position->TL_position = DIAMETER_175;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	711a      	strb	r2, [r3, #4]
}
 8002a14:	e08f      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 4) & (enc_value <= 8))
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	bf8c      	ite	hi
 8002a1c:	2301      	movhi	r3, #1
 8002a1e:	2300      	movls	r3, #0
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	4013      	ands	r3, r2
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d07f      	beq.n	8002b36 <update_enc+0x2a2>
				curr_position->TL_position = DIAMETER_285;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	711a      	strb	r2, [r3, #4]
}
 8002a3c:	e07b      	b.n	8002b36 <update_enc+0x2a2>
		else if(curr_position->SL_position == FIL_DEN)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	789b      	ldrb	r3, [r3, #2]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d12e      	bne.n	8002aa4 <update_enc+0x210>
			if((enc_value >= 0) & (enc_value < 4))
 8002a46:	7bfb      	ldrb	r3, [r7, #15]
 8002a48:	2b03      	cmp	r3, #3
 8002a4a:	d803      	bhi.n	8002a54 <update_enc+0x1c0>
				curr_position->TL_position = DENSITY_PLA;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	711a      	strb	r2, [r3, #4]
}
 8002a52:	e070      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 4) & (enc_value < 8))
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	bf8c      	ite	hi
 8002a5a:	2301      	movhi	r3, #1
 8002a5c:	2300      	movls	r3, #0
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b07      	cmp	r3, #7
 8002a64:	bf94      	ite	ls
 8002a66:	2301      	movls	r3, #1
 8002a68:	2300      	movhi	r3, #0
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <update_enc+0x1e8>
				curr_position->TL_position = DENSITY_ABS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2203      	movs	r2, #3
 8002a78:	711a      	strb	r2, [r3, #4]
}
 8002a7a:	e05c      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 8) & (enc_value <= 20))
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b07      	cmp	r3, #7
 8002a80:	bf8c      	ite	hi
 8002a82:	2301      	movhi	r3, #1
 8002a84:	2300      	movls	r3, #0
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	7bfb      	ldrb	r3, [r7, #15]
 8002a8a:	2b14      	cmp	r3, #20
 8002a8c:	bf94      	ite	ls
 8002a8e:	2301      	movls	r3, #1
 8002a90:	2300      	movhi	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d04c      	beq.n	8002b36 <update_enc+0x2a2>
				curr_position->TL_position = DENSITY_PETG;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	711a      	strb	r2, [r3, #4]
}
 8002aa2:	e048      	b.n	8002b36 <update_enc+0x2a2>
		else if(curr_position->SL_position == SAMPLE_WEIGHT)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	789b      	ldrb	r3, [r3, #2]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d144      	bne.n	8002b36 <update_enc+0x2a2>
			if((enc_value >= 0) & (enc_value < 4))
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d803      	bhi.n	8002aba <update_enc+0x226>
				curr_position->TL_position = WEIGHT_5g;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2205      	movs	r2, #5
 8002ab6:	711a      	strb	r2, [r3, #4]
}
 8002ab8:	e03d      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 4) & (enc_value < 8))
 8002aba:	7bfb      	ldrb	r3, [r7, #15]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	bf8c      	ite	hi
 8002ac0:	2301      	movhi	r3, #1
 8002ac2:	2300      	movls	r3, #0
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	2b07      	cmp	r3, #7
 8002aca:	bf94      	ite	ls
 8002acc:	2301      	movls	r3, #1
 8002ace:	2300      	movhi	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <update_enc+0x24e>
				curr_position->TL_position = WEIGHT_25g;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2206      	movs	r2, #6
 8002ade:	711a      	strb	r2, [r3, #4]
}
 8002ae0:	e029      	b.n	8002b36 <update_enc+0x2a2>
			else if((enc_value >= 8) & (enc_value < 12))
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b07      	cmp	r3, #7
 8002ae6:	bf8c      	ite	hi
 8002ae8:	2301      	movhi	r3, #1
 8002aea:	2300      	movls	r3, #0
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b0b      	cmp	r3, #11
 8002af2:	bf94      	ite	ls
 8002af4:	2301      	movls	r3, #1
 8002af6:	2300      	movhi	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4013      	ands	r3, r2
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d006      	beq.n	8002b10 <update_enc+0x27c>
				curr_position->TL_position = WEIGHT_50g;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2207      	movs	r2, #7
 8002b06:	711a      	strb	r2, [r3, #4]
}
 8002b08:	e015      	b.n	8002b36 <update_enc+0x2a2>
 8002b0a:	bf00      	nop
 8002b0c:	20000518 	.word	0x20000518
			else if((enc_value >= 12) & (enc_value < 20))
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b0b      	cmp	r3, #11
 8002b14:	bf8c      	ite	hi
 8002b16:	2301      	movhi	r3, #1
 8002b18:	2300      	movls	r3, #0
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	7bfb      	ldrb	r3, [r7, #15]
 8002b1e:	2b13      	cmp	r3, #19
 8002b20:	bf94      	ite	ls
 8002b22:	2301      	movls	r3, #1
 8002b24:	2300      	movhi	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	4013      	ands	r3, r2
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d002      	beq.n	8002b36 <update_enc+0x2a2>
				curr_position->TL_position = WEIGHT_100g;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2208      	movs	r2, #8
 8002b34:	711a      	strb	r2, [r3, #4]
}
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop

08002b40 <default_screen>:




void default_screen()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"FILAMENT CUTTER");
 8002b44:	4a10      	ldr	r2, [pc, #64]	; (8002b88 <default_screen+0x48>)
 8002b46:	2100      	movs	r1, #0
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fbc5 	bl	80012d8 <ST7920_SendString>
	ST7920_GraphicMode(1);
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fe fc06 	bl	8001360 <ST7920_GraphicMode>
	ST7920_Clear();
 8002b54:	f7fe fcb8 	bl	80014c8 <ST7920_Clear>
	DrawRectangle(0, 0, 127, 14);
 8002b58:	230e      	movs	r3, #14
 8002b5a:	227f      	movs	r2, #127	; 0x7f
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7fe fe1c 	bl	800179c <DrawRectangle>
	ST7920_Update();
 8002b64:	f7fe fca6 	bl	80014b4 <ST7920_Update>
	ST7920_GraphicMode(0);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f7fe fbf9 	bl	8001360 <ST7920_GraphicMode>
	ST7920_SendString(1,0,"1.Settings");
 8002b6e:	4a07      	ldr	r2, [pc, #28]	; (8002b8c <default_screen+0x4c>)
 8002b70:	2100      	movs	r1, #0
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7fe fbb0 	bl	80012d8 <ST7920_SendString>
	//ST7920_SendString(3,0,"STOP");
	ST7920_SendString(3,5," START");
 8002b78:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <default_screen+0x50>)
 8002b7a:	2105      	movs	r1, #5
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f7fe fbab 	bl	80012d8 <ST7920_SendString>

}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	080090b4 	.word	0x080090b4
 8002b8c:	080090c4 	.word	0x080090c4
 8002b90:	080090d0 	.word	0x080090d0

08002b94 <settings_screen>:



void settings_screen()
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"1.Diameter");
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <settings_screen+0x3c>)
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fb9b 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1,0,"2.Density");
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <settings_screen+0x40>)
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	2001      	movs	r0, #1
 8002ba8:	f7fe fb96 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(2,0,"3.Weight");
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <settings_screen+0x44>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	f7fe fb91 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,0,"4.QTY");
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <settings_screen+0x48>)
 8002bb8:	2100      	movs	r1, #0
 8002bba:	2003      	movs	r0, #3
 8002bbc:	f7fe fb8c 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,5,"5.BACK");
 8002bc0:	4a07      	ldr	r2, [pc, #28]	; (8002be0 <settings_screen+0x4c>)
 8002bc2:	2105      	movs	r1, #5
 8002bc4:	2003      	movs	r0, #3
 8002bc6:	f7fe fb87 	bl	80012d8 <ST7920_SendString>

}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	080090d8 	.word	0x080090d8
 8002bd4:	080090e4 	.word	0x080090e4
 8002bd8:	080090f0 	.word	0x080090f0
 8002bdc:	080090fc 	.word	0x080090fc
 8002be0:	08009104 	.word	0x08009104
 8002be4:	00000000 	.word	0x00000000

08002be8 <diameter_screen>:


void diameter_screen()
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_diameter == Filament_diameter_175)
 8002bec:	4b18      	ldr	r3, [pc, #96]	; (8002c50 <diameter_screen+0x68>)
 8002bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bf2:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8002bf6:	eef4 7a47 	vcmp.f32	s15, s14
 8002bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bfe:	d109      	bne.n	8002c14 <diameter_screen+0x2c>
	{
		ST7920_SendString(0, 0, "1.75 mm <<");
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <diameter_screen+0x6c>)
 8002c02:	2100      	movs	r1, #0
 8002c04:	2000      	movs	r0, #0
 8002c06:	f7fe fb67 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm");
 8002c0a:	4a13      	ldr	r2, [pc, #76]	; (8002c58 <diameter_screen+0x70>)
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2001      	movs	r0, #1
 8002c10:	f7fe fb62 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density == Filament_diameter_285)
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <diameter_screen+0x68>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7fd fc95 	bl	8000548 <__aeabi_f2d>
 8002c1e:	a30a      	add	r3, pc, #40	; (adr r3, 8002c48 <diameter_screen+0x60>)
 8002c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c24:	f7fd ff50 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d100      	bne.n	8002c30 <diameter_screen+0x48>
	{
		ST7920_SendString(0, 0, "1.75 mm");
		ST7920_SendString(1, 0, "2.85 mm <<");
	}
}
 8002c2e:	e009      	b.n	8002c44 <diameter_screen+0x5c>
		ST7920_SendString(0, 0, "1.75 mm");
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <diameter_screen+0x74>)
 8002c32:	2100      	movs	r1, #0
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fe fb4f 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm <<");
 8002c3a:	4a09      	ldr	r2, [pc, #36]	; (8002c60 <diameter_screen+0x78>)
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7fe fb4a 	bl	80012d8 <ST7920_SendString>
}
 8002c44:	bf00      	nop
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	cccccccd 	.word	0xcccccccd
 8002c4c:	4006cccc 	.word	0x4006cccc
 8002c50:	20000518 	.word	0x20000518
 8002c54:	0800910c 	.word	0x0800910c
 8002c58:	08009118 	.word	0x08009118
 8002c5c:	08009120 	.word	0x08009120
 8002c60:	08009128 	.word	0x08009128
 8002c64:	00000000 	.word	0x00000000

08002c68 <density_screen>:


void density_screen()
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_density >= (Filament_density_PLA-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PLA+0.001))
 8002c6c:	4b4c      	ldr	r3, [pc, #304]	; (8002da0 <density_screen+0x138>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7fd fc69 	bl	8000548 <__aeabi_f2d>
 8002c76:	a33e      	add	r3, pc, #248	; (adr r3, 8002d70 <density_screen+0x108>)
 8002c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7c:	f7fd ff42 	bl	8000b04 <__aeabi_dcmpge>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01b      	beq.n	8002cbe <density_screen+0x56>
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <density_screen+0x138>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7fd fc5c 	bl	8000548 <__aeabi_f2d>
 8002c90:	a339      	add	r3, pc, #228	; (adr r3, 8002d78 <density_screen+0x110>)
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f7fd ff2b 	bl	8000af0 <__aeabi_dcmple>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00e      	beq.n	8002cbe <density_screen+0x56>
	{
		ST7920_SendString(0, 0, "1. PLA <<");
 8002ca0:	4a40      	ldr	r2, [pc, #256]	; (8002da4 <density_screen+0x13c>)
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fb17 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002caa:	4a3f      	ldr	r2, [pc, #252]	; (8002da8 <density_screen+0x140>)
 8002cac:	2100      	movs	r1, #0
 8002cae:	2001      	movs	r0, #1
 8002cb0:	f7fe fb12 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002cb4:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <density_screen+0x144>)
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fe fb0d 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_ABS-0.001) && (FC_struct.parameters.filament_density <= Filament_density_ABS+0.001))
 8002cbe:	4b38      	ldr	r3, [pc, #224]	; (8002da0 <density_screen+0x138>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc40 	bl	8000548 <__aeabi_f2d>
 8002cc8:	a32d      	add	r3, pc, #180	; (adr r3, 8002d80 <density_screen+0x118>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd ff19 	bl	8000b04 <__aeabi_dcmpge>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d01b      	beq.n	8002d10 <density_screen+0xa8>
 8002cd8:	4b31      	ldr	r3, [pc, #196]	; (8002da0 <density_screen+0x138>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7fd fc33 	bl	8000548 <__aeabi_f2d>
 8002ce2:	a329      	add	r3, pc, #164	; (adr r3, 8002d88 <density_screen+0x120>)
 8002ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce8:	f7fd ff02 	bl	8000af0 <__aeabi_dcmple>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <density_screen+0xa8>
	{
		ST7920_SendString(0, 0, "1. PLA");
 8002cf2:	4a2f      	ldr	r2, [pc, #188]	; (8002db0 <density_screen+0x148>)
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2000      	movs	r0, #0
 8002cf8:	f7fe faee 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS <<");
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <density_screen+0x14c>)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	2001      	movs	r0, #1
 8002d02:	f7fe fae9 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002d06:	4a29      	ldr	r2, [pc, #164]	; (8002dac <density_screen+0x144>)
 8002d08:	2100      	movs	r1, #0
 8002d0a:	2002      	movs	r0, #2
 8002d0c:	f7fe fae4 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <density_screen+0x138>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fc17 	bl	8000548 <__aeabi_f2d>
 8002d1a:	a31d      	add	r3, pc, #116	; (adr r3, 8002d90 <density_screen+0x128>)
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f7fd fef0 	bl	8000b04 <__aeabi_dcmpge>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d100      	bne.n	8002d2c <density_screen+0xc4>
	{
		ST7920_SendString(0, 0, "1. PLA");
		ST7920_SendString(1, 0, "2. ABS");
		ST7920_SendString(2, 0, "3. PETG <<");
	}
}
 8002d2a:	e01c      	b.n	8002d66 <density_screen+0xfe>
	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <density_screen+0x138>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fd fc09 	bl	8000548 <__aeabi_f2d>
 8002d36:	a318      	add	r3, pc, #96	; (adr r3, 8002d98 <density_screen+0x130>)
 8002d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3c:	f7fd fed8 	bl	8000af0 <__aeabi_dcmple>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d100      	bne.n	8002d48 <density_screen+0xe0>
}
 8002d46:	e00e      	b.n	8002d66 <density_screen+0xfe>
		ST7920_SendString(0, 0, "1. PLA");
 8002d48:	4a19      	ldr	r2, [pc, #100]	; (8002db0 <density_screen+0x148>)
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	f7fe fac3 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002d52:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <density_screen+0x140>)
 8002d54:	2100      	movs	r1, #0
 8002d56:	2001      	movs	r0, #1
 8002d58:	f7fe fabe 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG <<");
 8002d5c:	4a16      	ldr	r2, [pc, #88]	; (8002db8 <density_screen+0x150>)
 8002d5e:	2100      	movs	r1, #0
 8002d60:	2002      	movs	r0, #2
 8002d62:	f7fe fab9 	bl	80012d8 <ST7920_SendString>
}
 8002d66:	bf00      	nop
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	f3af 8000 	nop.w
 8002d70:	a9fbe76d 	.word	0xa9fbe76d
 8002d74:	3ff3d2f1 	.word	0x3ff3d2f1
 8002d78:	d0e56041 	.word	0xd0e56041
 8002d7c:	3ff3db22 	.word	0x3ff3db22
 8002d80:	76c8b43a 	.word	0x76c8b43a
 8002d84:	3ff09fbe 	.word	0x3ff09fbe
 8002d88:	9db22d0e 	.word	0x9db22d0e
 8002d8c:	3ff0a7ef 	.word	0x3ff0a7ef
 8002d90:	e76c8b44 	.word	0xe76c8b44
 8002d94:	3ff3a9fb 	.word	0x3ff3a9fb
 8002d98:	0e560418 	.word	0x0e560418
 8002d9c:	3ff3b22d 	.word	0x3ff3b22d
 8002da0:	20000518 	.word	0x20000518
 8002da4:	08009134 	.word	0x08009134
 8002da8:	08009140 	.word	0x08009140
 8002dac:	08009148 	.word	0x08009148
 8002db0:	08009150 	.word	0x08009150
 8002db4:	08009158 	.word	0x08009158
 8002db8:	08009164 	.word	0x08009164

08002dbc <weight_screen>:


void weight_screen()
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.target_weight == Sample_weight_5g)
 8002dc0:	4b30      	ldr	r3, [pc, #192]	; (8002e84 <weight_screen+0xc8>)
 8002dc2:	899b      	ldrh	r3, [r3, #12]
 8002dc4:	2b05      	cmp	r3, #5
 8002dc6:	d113      	bne.n	8002df0 <weight_screen+0x34>
	{
		ST7920_SendString(0, 0, "5g <<");
 8002dc8:	4a2f      	ldr	r2, [pc, #188]	; (8002e88 <weight_screen+0xcc>)
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f7fe fa83 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002dd2:	4a2e      	ldr	r2, [pc, #184]	; (8002e8c <weight_screen+0xd0>)
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	f7fe fa7e 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <weight_screen+0xd4>)
 8002dde:	2100      	movs	r1, #0
 8002de0:	2002      	movs	r0, #2
 8002de2:	f7fe fa79 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002de6:	4a2b      	ldr	r2, [pc, #172]	; (8002e94 <weight_screen+0xd8>)
 8002de8:	2100      	movs	r1, #0
 8002dea:	2003      	movs	r0, #3
 8002dec:	f7fe fa74 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_25g)
 8002df0:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <weight_screen+0xc8>)
 8002df2:	899b      	ldrh	r3, [r3, #12]
 8002df4:	2b19      	cmp	r3, #25
 8002df6:	d113      	bne.n	8002e20 <weight_screen+0x64>
	{
		ST7920_SendString(0, 0, "5g");
 8002df8:	4a27      	ldr	r2, [pc, #156]	; (8002e98 <weight_screen+0xdc>)
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	f7fe fa6b 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g <<");
 8002e02:	4a26      	ldr	r2, [pc, #152]	; (8002e9c <weight_screen+0xe0>)
 8002e04:	2100      	movs	r1, #0
 8002e06:	2001      	movs	r0, #1
 8002e08:	f7fe fa66 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002e0c:	4a20      	ldr	r2, [pc, #128]	; (8002e90 <weight_screen+0xd4>)
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2002      	movs	r0, #2
 8002e12:	f7fe fa61 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002e16:	4a1f      	ldr	r2, [pc, #124]	; (8002e94 <weight_screen+0xd8>)
 8002e18:	2100      	movs	r1, #0
 8002e1a:	2003      	movs	r0, #3
 8002e1c:	f7fe fa5c 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_50g)
 8002e20:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <weight_screen+0xc8>)
 8002e22:	899b      	ldrh	r3, [r3, #12]
 8002e24:	2b32      	cmp	r3, #50	; 0x32
 8002e26:	d113      	bne.n	8002e50 <weight_screen+0x94>
	{
		ST7920_SendString(0, 0, "5g");
 8002e28:	4a1b      	ldr	r2, [pc, #108]	; (8002e98 <weight_screen+0xdc>)
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f7fe fa53 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002e32:	4a16      	ldr	r2, [pc, #88]	; (8002e8c <weight_screen+0xd0>)
 8002e34:	2100      	movs	r1, #0
 8002e36:	2001      	movs	r0, #1
 8002e38:	f7fe fa4e 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g <<");
 8002e3c:	4a18      	ldr	r2, [pc, #96]	; (8002ea0 <weight_screen+0xe4>)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2002      	movs	r0, #2
 8002e42:	f7fe fa49 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002e46:	4a13      	ldr	r2, [pc, #76]	; (8002e94 <weight_screen+0xd8>)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2003      	movs	r0, #3
 8002e4c:	f7fe fa44 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_100g)
 8002e50:	4b0c      	ldr	r3, [pc, #48]	; (8002e84 <weight_screen+0xc8>)
 8002e52:	899b      	ldrh	r3, [r3, #12]
 8002e54:	2b64      	cmp	r3, #100	; 0x64
 8002e56:	d113      	bne.n	8002e80 <weight_screen+0xc4>
	{
		ST7920_SendString(0, 0, "5g");
 8002e58:	4a0f      	ldr	r2, [pc, #60]	; (8002e98 <weight_screen+0xdc>)
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7fe fa3b 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <weight_screen+0xd0>)
 8002e64:	2100      	movs	r1, #0
 8002e66:	2001      	movs	r0, #1
 8002e68:	f7fe fa36 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002e6c:	4a08      	ldr	r2, [pc, #32]	; (8002e90 <weight_screen+0xd4>)
 8002e6e:	2100      	movs	r1, #0
 8002e70:	2002      	movs	r0, #2
 8002e72:	f7fe fa31 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g <<");
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <weight_screen+0xe8>)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2003      	movs	r0, #3
 8002e7c:	f7fe fa2c 	bl	80012d8 <ST7920_SendString>
	}
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000518 	.word	0x20000518
 8002e88:	08009170 	.word	0x08009170
 8002e8c:	08009178 	.word	0x08009178
 8002e90:	0800917c 	.word	0x0800917c
 8002e94:	08009180 	.word	0x08009180
 8002e98:	08009188 	.word	0x08009188
 8002e9c:	0800918c 	.word	0x0800918c
 8002ea0:	08009194 	.word	0x08009194
 8002ea4:	0800919c 	.word	0x0800919c

08002ea8 <active_start_screen>:

void active_start_screen()
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "Working...");
 8002eac:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <active_start_screen+0x28>)
 8002eae:	2100      	movs	r1, #0
 8002eb0:	2000      	movs	r0, #0
 8002eb2:	f7fe fa11 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1, 0, "0/500 [cm]");
 8002eb6:	4a07      	ldr	r2, [pc, #28]	; (8002ed4 <active_start_screen+0x2c>)
 8002eb8:	2100      	movs	r1, #0
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f7fe fa0c 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3, 3, "STOP");
 8002ec0:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <active_start_screen+0x30>)
 8002ec2:	2103      	movs	r1, #3
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f7fe fa07 	bl	80012d8 <ST7920_SendString>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	080091a4 	.word	0x080091a4
 8002ed4:	080091b0 	.word	0x080091b0
 8002ed8:	080091bc 	.word	0x080091bc

08002edc <quantity_screen>:


void quantity_screen()
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "QTY: ");
 8002ee0:	4a03      	ldr	r2, [pc, #12]	; (8002ef0 <quantity_screen+0x14>)
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fe f9f7 	bl	80012d8 <ST7920_SendString>
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	080091c4 	.word	0x080091c4

08002ef4 <stepper_init>:

extern filament_cutter FC_struct;

void stepper_init(stepper_motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		TIM_HandleTypeDef *slave_timer, GPIO_TypeDef* Dir_port, uint16_t Dir_pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
	motor->timer.htim = htim;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	68ba      	ldr	r2, [r7, #8]
 8002f06:	601a      	str	r2, [r3, #0]
	motor->timer.channel = channel;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]
	motor->slave_timer.htim = slave_timer;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	609a      	str	r2, [r3, #8]
	motor->DIR_port = Dir_port;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	615a      	str	r2, [r3, #20]
	motor->DIR_pin = Dir_pin;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	8bba      	ldrh	r2, [r7, #28]
 8002f1e:	831a      	strh	r2, [r3, #24]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <stepper_stop>:

// Basic stepper motor control functions

void stepper_stop(stepper_motor *motor)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
	motor->mode = IDLE;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	745a      	strb	r2, [r3, #17]
	HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2104      	movs	r1, #4
 8002f3e:	4825      	ldr	r0, [pc, #148]	; (8002fd4 <stepper_stop+0xa8>)
 8002f40:	f001 fa82 	bl	8004448 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, 0);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <stepper_stop+0x2c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2200      	movs	r2, #0
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
 8002f56:	e02c      	b.n	8002fb2 <stepper_stop+0x86>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d105      	bne.n	8002f6c <stepper_stop+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	6393      	str	r3, [r2, #56]	; 0x38
 8002f6a:	e022      	b.n	8002fb2 <stepper_stop+0x86>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d105      	bne.n	8002f80 <stepper_stop+0x54>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002f7e:	e018      	b.n	8002fb2 <stepper_stop+0x86>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b0c      	cmp	r3, #12
 8002f86:	d105      	bne.n	8002f94 <stepper_stop+0x68>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	e00e      	b.n	8002fb2 <stepper_stop+0x86>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d105      	bne.n	8002fa8 <stepper_stop+0x7c>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8002fa6:	e004      	b.n	8002fb2 <stepper_stop+0x86>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(motor->timer.htim, motor->timer.channel);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	4610      	mov	r0, r2
 8002fbe:	f003 f9db 	bl	8006378 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(motor->slave_timer.htim);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f003 f860 	bl	800608c <HAL_TIM_Base_Stop_IT>

}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	48000c00 	.word	0x48000c00

08002fd8 <stepper_set_dir>:

void stepper_set_dir(stepper_motor *motor, stepper_dir direction)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
	motor->dir = direction;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	741a      	strb	r2, [r3, #16]
	if(motor->dir == CW)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	7c1b      	ldrb	r3, [r3, #16]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d108      	bne.n	8003004 <stepper_set_dir+0x2c>
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_RESET);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6958      	ldr	r0, [r3, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	8b1b      	ldrh	r3, [r3, #24]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f001 fa23 	bl	8004448 <HAL_GPIO_WritePin>

	else
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
	}
}
 8003002:	e007      	b.n	8003014 <stepper_set_dir+0x3c>
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6958      	ldr	r0, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8b1b      	ldrh	r3, [r3, #24]
 800300c:	2201      	movs	r2, #1
 800300e:	4619      	mov	r1, r3
 8003010:	f001 fa1a 	bl	8004448 <HAL_GPIO_WritePin>
}
 8003014:	bf00      	nop
 8003016:	3708      	adds	r7, #8
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <stepper_set_speed>:

void stepper_set_speed(stepper_motor *motor, uint32_t speed)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
	uint32_t freq, counter;

	if(speed > 100)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b64      	cmp	r3, #100	; 0x64
 800302a:	d902      	bls.n	8003032 <stepper_set_speed+0x16>
	{
		speed = 100;
 800302c:	2364      	movs	r3, #100	; 0x64
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	e006      	b.n	8003040 <stepper_set_speed+0x24>
	}

	else if(speed == 0)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <stepper_set_speed+0x24>
	{
		stepper_stop(motor);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f7ff ff77 	bl	8002f2c <stepper_stop>
		return;
 800303e:	e068      	b.n	8003112 <stepper_set_speed+0xf6>
	}

	freq = (speed * (STEPEER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ)) / STEPPER_MOTOR_MAX_SPEED;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	4a33      	ldr	r2, [pc, #204]	; (8003118 <stepper_set_speed+0xfc>)
 800304c:	fba2 2303 	umull	r2, r3, r2, r3
 8003050:	095b      	lsrs	r3, r3, #5
 8003052:	60fb      	str	r3, [r7, #12]

	counter = HAL_RCC_GetPCLK1Freq() / (motor->timer.htim->Init.Prescaler * freq);
 8003054:	f002 fb28 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8003058:	4601      	mov	r1, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	fbb1 f3f3 	udiv	r3, r1, r3
 800306a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(motor->timer.htim, 0);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->timer.htim, counter - 1);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	3a01      	subs	r2, #1
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	3a01      	subs	r2, #1
 800308a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, (counter/2)-1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <stepper_set_speed+0x88>
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	085a      	lsrs	r2, r3, #1
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3a01      	subs	r2, #1
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34
 80030a2:	e036      	b.n	8003112 <stepper_set_speed+0xf6>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	2b04      	cmp	r3, #4
 80030aa:	d107      	bne.n	80030bc <stepper_set_speed+0xa0>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	6812      	ldr	r2, [r2, #0]
 80030b6:	3b01      	subs	r3, #1
 80030b8:	6393      	str	r3, [r2, #56]	; 0x38
 80030ba:	e02a      	b.n	8003112 <stepper_set_speed+0xf6>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d107      	bne.n	80030d4 <stepper_set_speed+0xb8>
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	085b      	lsrs	r3, r3, #1
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6812      	ldr	r2, [r2, #0]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	63d3      	str	r3, [r2, #60]	; 0x3c
 80030d2:	e01e      	b.n	8003112 <stepper_set_speed+0xf6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b0c      	cmp	r3, #12
 80030da:	d107      	bne.n	80030ec <stepper_set_speed+0xd0>
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	085b      	lsrs	r3, r3, #1
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6812      	ldr	r2, [r2, #0]
 80030e4:	6812      	ldr	r2, [r2, #0]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ea:	e012      	b.n	8003112 <stepper_set_speed+0xf6>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d107      	bne.n	8003104 <stepper_set_speed+0xe8>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	085b      	lsrs	r3, r3, #1
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	3b01      	subs	r3, #1
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
 8003102:	e006      	b.n	8003112 <stepper_set_speed+0xf6>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	6812      	ldr	r2, [r2, #0]
 800310e:	3b01      	subs	r3, #1
 8003110:	65d3      	str	r3, [r2, #92]	; 0x5c

}
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	51eb851f 	.word	0x51eb851f

0800311c <stepper_set_angle>:


void stepper_set_angle(stepper_motor *motor, uint32_t angle, uint32_t speed, stepper_dir dir)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	70fb      	strb	r3, [r7, #3]
	motor->mode = ANGLE;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2201      	movs	r2, #1
 800312e:	745a      	strb	r2, [r3, #17]
	stepper_set_dir(motor, dir);
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	4619      	mov	r1, r3
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f7ff ff4f 	bl	8002fd8 <stepper_set_dir>
	stepper_set_speed(motor, speed);
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f7ff ff6d 	bl	800301c <stepper_set_speed>


	// set angle
	motor->step_counter = 0;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	61da      	str	r2, [r3, #28]
	motor->steps_to_count = angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	22c8      	movs	r2, #200	; 0xc8
 800314c:	fb02 f303 	mul.w	r3, r2, r3
 8003150:	08db      	lsrs	r3, r3, #3
 8003152:	4a19      	ldr	r2, [pc, #100]	; (80031b8 <stepper_set_angle+0x9c>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	089a      	lsrs	r2, r3, #2
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	621a      	str	r2, [r3, #32]


	if(0 == motor->steps_to_count)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d102      	bne.n	800316c <stepper_set_angle+0x50>
	{
		stepper_stop(motor);
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f7ff fee0 	bl	8002f2c <stepper_stop>
	}
	__HAL_TIM_SET_COUNTER(motor->slave_timer.htim, 0);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->slave_timer.htim, motor->steps_to_count - 1);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1a      	ldr	r2, [r3, #32]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	3a01      	subs	r2, #1
 8003182:	62da      	str	r2, [r3, #44]	; 0x2c
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6a1a      	ldr	r2, [r3, #32]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	3a01      	subs	r2, #1
 800318e:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(motor->slave_timer.htim);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 ff1d 	bl	8005fd4 <HAL_TIM_Base_Start_IT>
	FIRST_MISS_FLAG = 1;
 800319a:	4b08      	ldr	r3, [pc, #32]	; (80031bc <stepper_set_angle+0xa0>)
 800319c:	2201      	movs	r2, #1
 800319e:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(motor->timer.htim, motor->timer.channel);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	4619      	mov	r1, r3
 80031aa:	4610      	mov	r0, r2
 80031ac:	f002 fffe 	bl	80061ac <HAL_TIM_PWM_Start>

}
 80031b0:	bf00      	nop
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	16c16c17 	.word	0x16c16c17
 80031bc:	20000503 	.word	0x20000503

080031c0 <stepper_centimeters_to_rotations>:


void stepper_centimeters_to_rotations(stepper_motor *motor, uint32_t centimeters, uint32_t speed, stepper_dir dir)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	70fb      	strb	r3, [r7, #3]
	uint32_t target_angle;
	target_angle = (uint32_t)centimeters / (FULL_ROTATION_LENGTH_CM);
 80031ce:	68b8      	ldr	r0, [r7, #8]
 80031d0:	f7fd f998 	bl	8000504 <__aeabi_ui2d>
 80031d4:	a30e      	add	r3, pc, #56	; (adr r3, 8003210 <stepper_centimeters_to_rotations+0x50>)
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f7fd fb37 	bl	800084c <__aeabi_ddiv>
 80031de:	4602      	mov	r2, r0
 80031e0:	460b      	mov	r3, r1
 80031e2:	4610      	mov	r0, r2
 80031e4:	4619      	mov	r1, r3
 80031e6:	f7fd fca1 	bl	8000b2c <__aeabi_d2uiz>
 80031ea:	4603      	mov	r3, r0
 80031ec:	617b      	str	r3, [r7, #20]
	target_angle *= 360;
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80031f4:	fb02 f303 	mul.w	r3, r2, r3
 80031f8:	617b      	str	r3, [r7, #20]
	stepper_set_angle(motor, target_angle, speed, dir);
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6979      	ldr	r1, [r7, #20]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f7ff ff8b 	bl	800311c <stepper_set_angle>
}
 8003206:	bf00      	nop
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	c083126f 	.word	0xc083126f
 8003214:	400ba1ca 	.word	0x400ba1ca

08003218 <stepper_grams_to_centimeters>:


uint32_t stepper_grams_to_centimeters(stepper_motor *motor, uint16_t grams, float filament_diameter, float filament_density)
{
 8003218:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800321c:	b086      	sub	sp, #24
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	460b      	mov	r3, r1
 8003224:	ed87 0a01 	vstr	s0, [r7, #4]
 8003228:	edc7 0a00 	vstr	s1, [r7]
 800322c:	817b      	strh	r3, [r7, #10]
	// dlugosc[m] = 4*waga[g]/ (density[g/cm3] * PI * srednica_fil[mm] * srednica fil[mm])
	float length;
	length = (4*grams)/ (filament_density * 3.14 * filament_diameter * filament_diameter);
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f976 	bl	8000524 <__aeabi_i2d>
 8003238:	4604      	mov	r4, r0
 800323a:	460d      	mov	r5, r1
 800323c:	6838      	ldr	r0, [r7, #0]
 800323e:	f7fd f983 	bl	8000548 <__aeabi_f2d>
 8003242:	a329      	add	r3, pc, #164	; (adr r3, 80032e8 <stepper_grams_to_centimeters+0xd0>)
 8003244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003248:	f7fd f9d6 	bl	80005f8 <__aeabi_dmul>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4690      	mov	r8, r2
 8003252:	4699      	mov	r9, r3
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7fd f977 	bl	8000548 <__aeabi_f2d>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4640      	mov	r0, r8
 8003260:	4649      	mov	r1, r9
 8003262:	f7fd f9c9 	bl	80005f8 <__aeabi_dmul>
 8003266:	4602      	mov	r2, r0
 8003268:	460b      	mov	r3, r1
 800326a:	4690      	mov	r8, r2
 800326c:	4699      	mov	r9, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7fd f96a 	bl	8000548 <__aeabi_f2d>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4640      	mov	r0, r8
 800327a:	4649      	mov	r1, r9
 800327c:	f7fd f9bc 	bl	80005f8 <__aeabi_dmul>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4620      	mov	r0, r4
 8003286:	4629      	mov	r1, r5
 8003288:	f7fd fae0 	bl	800084c <__aeabi_ddiv>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4610      	mov	r0, r2
 8003292:	4619      	mov	r1, r3
 8003294:	f7fd fc6a 	bl	8000b6c <__aeabi_d2f>
 8003298:	4603      	mov	r3, r0
 800329a:	617b      	str	r3, [r7, #20]
	FC_struct.parameters.current_length_cm = length * 100;
 800329c:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80032e0 <stepper_grams_to_centimeters+0xc8>
 80032a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ac:	ee17 3a90 	vmov	r3, s15
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <stepper_grams_to_centimeters+0xcc>)
 80032b4:	821a      	strh	r2, [r3, #16]
	return truncf(length * 100);
 80032b6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ba:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80032e0 <stepper_grams_to_centimeters+0xc8>
 80032be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032c2:	eeb0 0a67 	vmov.f32	s0, s15
 80032c6:	f005 fec3 	bl	8009050 <truncf>
 80032ca:	eef0 7a40 	vmov.f32	s15, s0
 80032ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d2:	ee17 3a90 	vmov	r3, s15
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032e0:	42c80000 	.word	0x42c80000
 80032e4:	20000518 	.word	0x20000518
 80032e8:	51eb851f 	.word	0x51eb851f
 80032ec:	40091eb8 	.word	0x40091eb8

080032f0 <stepper_extrude_weight>:

void stepper_extrude_weight(stepper_motor *motor)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	if(EXTRUDE_PROCESS_FLAG == 0)
 80032f8:	4b14      	ldr	r3, [pc, #80]	; (800334c <stepper_extrude_weight+0x5c>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d11f      	bne.n	8003342 <stepper_extrude_weight+0x52>
	{
		printf("Start Extrude\n");
 8003302:	4813      	ldr	r0, [pc, #76]	; (8003350 <stepper_extrude_weight+0x60>)
 8003304:	f004 ff5e 	bl	80081c4 <puts>
		CUTTING_PROCESS_FLAG = 0;
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <stepper_extrude_weight+0x64>)
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 1;
 800330e:	4b0f      	ldr	r3, [pc, #60]	; (800334c <stepper_extrude_weight+0x5c>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
		uint32_t centimeters;
		centimeters = stepper_grams_to_centimeters(motor, FC_struct.parameters.target_weight, FC_struct.parameters.filament_diameter, FC_struct.parameters.filament_density);
 8003314:	4b10      	ldr	r3, [pc, #64]	; (8003358 <stepper_extrude_weight+0x68>)
 8003316:	899b      	ldrh	r3, [r3, #12]
 8003318:	4a0f      	ldr	r2, [pc, #60]	; (8003358 <stepper_extrude_weight+0x68>)
 800331a:	edd2 7a02 	vldr	s15, [r2, #8]
 800331e:	4a0e      	ldr	r2, [pc, #56]	; (8003358 <stepper_extrude_weight+0x68>)
 8003320:	ed92 7a01 	vldr	s14, [r2, #4]
 8003324:	eef0 0a47 	vmov.f32	s1, s14
 8003328:	eeb0 0a67 	vmov.f32	s0, s15
 800332c:	4619      	mov	r1, r3
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f7ff ff72 	bl	8003218 <stepper_grams_to_centimeters>
 8003334:	60f8      	str	r0, [r7, #12]
		stepper_centimeters_to_rotations(motor, centimeters, 80, CW);
 8003336:	2300      	movs	r3, #0
 8003338:	2250      	movs	r2, #80	; 0x50
 800333a:	68f9      	ldr	r1, [r7, #12]
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff ff3f 	bl	80031c0 <stepper_centimeters_to_rotations>
	}

}
 8003342:	bf00      	nop
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000504 	.word	0x20000504
 8003350:	080091cc 	.word	0x080091cc
 8003354:	200000fa 	.word	0x200000fa
 8003358:	20000518 	.word	0x20000518

0800335c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003362:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <HAL_MspInit+0x44>)
 8003364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003366:	4a0e      	ldr	r2, [pc, #56]	; (80033a0 <HAL_MspInit+0x44>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6613      	str	r3, [r2, #96]	; 0x60
 800336e:	4b0c      	ldr	r3, [pc, #48]	; (80033a0 <HAL_MspInit+0x44>)
 8003370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	607b      	str	r3, [r7, #4]
 8003378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_MspInit+0x44>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_MspInit+0x44>)
 8003380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003384:	6593      	str	r3, [r2, #88]	; 0x58
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_MspInit+0x44>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033a4:	b480      	push	{r7}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033a8:	e7fe      	b.n	80033a8 <NMI_Handler+0x4>

080033aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033aa:	b480      	push	{r7}
 80033ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033ae:	e7fe      	b.n	80033ae <HardFault_Handler+0x4>

080033b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033b4:	e7fe      	b.n	80033b4 <MemManage_Handler+0x4>

080033b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033b6:	b480      	push	{r7}
 80033b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033ba:	e7fe      	b.n	80033ba <BusFault_Handler+0x4>

080033bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033c0:	e7fe      	b.n	80033c0 <UsageFault_Handler+0x4>

080033c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033c2:	b480      	push	{r7}
 80033c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033de:	b480      	push	{r7}
 80033e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033f0:	f000 fd42 	bl	8003e78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033f4:	bf00      	nop
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 80033fe:	f003 f977 	bl	80066f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000650 	.word	0x20000650

0800340c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003410:	4803      	ldr	r0, [pc, #12]	; (8003420 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003412:	f003 f96d 	bl	80066f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003416:	4803      	ldr	r0, [pc, #12]	; (8003424 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003418:	f003 f96a 	bl	80066f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800341c:	bf00      	nop
 800341e:	bd80      	pop	{r7, pc}
 8003420:	20000650 	.word	0x20000650
 8003424:	200006e8 	.word	0x200006e8

08003428 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800342c:	4802      	ldr	r0, [pc, #8]	; (8003438 <TIM1_CC_IRQHandler+0x10>)
 800342e:	f003 f95f 	bl	80066f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003432:	bf00      	nop
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	20000650 	.word	0x20000650

0800343c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003440:	4802      	ldr	r0, [pc, #8]	; (800344c <TIM2_IRQHandler+0x10>)
 8003442:	f003 f955 	bl	80066f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	2000069c 	.word	0x2000069c

08003450 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003454:	4802      	ldr	r0, [pc, #8]	; (8003460 <LPTIM1_IRQHandler+0x10>)
 8003456:	f001 f920 	bl	800469a <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20000534 	.word	0x20000534

08003464 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
 8003474:	e00a      	b.n	800348c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003476:	f3af 8000 	nop.w
 800347a:	4601      	mov	r1, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	60ba      	str	r2, [r7, #8]
 8003482:	b2ca      	uxtb	r2, r1
 8003484:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	3301      	adds	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	dbf0      	blt.n	8003476 <_read+0x12>
	}

return len;
 8003494:	687b      	ldr	r3, [r7, #4]
}
 8003496:	4618      	mov	r0, r3
 8003498:	3718      	adds	r7, #24
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b086      	sub	sp, #24
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	60f8      	str	r0, [r7, #12]
 80034a6:	60b9      	str	r1, [r7, #8]
 80034a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e009      	b.n	80034c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	60ba      	str	r2, [r7, #8]
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7fe fe48 	bl	800214e <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	3301      	adds	r3, #1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	697a      	ldr	r2, [r7, #20]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	dbf1      	blt.n	80034b0 <_write+0x12>
	}
	return len;
 80034cc:	687b      	ldr	r3, [r7, #4]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <_close>:

int _close(int file)
{
 80034d6:	b480      	push	{r7}
 80034d8:	b083      	sub	sp, #12
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
	return -1;
 80034de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	370c      	adds	r7, #12
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b083      	sub	sp, #12
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
 80034f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034fe:	605a      	str	r2, [r3, #4]
	return 0;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <_isatty>:

int _isatty(int file)
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
	return 1;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
	return 0;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
	...

08003540 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <_sbrk+0x5c>)
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <_sbrk+0x60>)
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003554:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <_sbrk+0x64>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d102      	bne.n	8003562 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <_sbrk+0x64>)
 800355e:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <_sbrk+0x68>)
 8003560:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <_sbrk+0x64>)
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4413      	add	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d207      	bcs.n	8003580 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003570:	f004 fd70 	bl	8008054 <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	220c      	movs	r2, #12
 8003578:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295
 800357e:	e009      	b.n	8003594 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003580:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <_sbrk+0x64>)
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4413      	add	r3, r2
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <_sbrk+0x64>)
 8003590:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003592:	68fb      	ldr	r3, [r7, #12]
}
 8003594:	4618      	mov	r0, r3
 8003596:	3718      	adds	r7, #24
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	20028000 	.word	0x20028000
 80035a0:	00000400 	.word	0x00000400
 80035a4:	200000ec 	.word	0x200000ec
 80035a8:	200007d0 	.word	0x200007d0

080035ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <SystemInit+0x5c>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <SystemInit+0x5c>)
 80035b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80035c0:	4b12      	ldr	r3, [pc, #72]	; (800360c <SystemInit+0x60>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a11      	ldr	r2, [pc, #68]	; (800360c <SystemInit+0x60>)
 80035c6:	f043 0301 	orr.w	r3, r3, #1
 80035ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80035cc:	4b0f      	ldr	r3, [pc, #60]	; (800360c <SystemInit+0x60>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <SystemInit+0x60>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a0d      	ldr	r2, [pc, #52]	; (800360c <SystemInit+0x60>)
 80035d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80035dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80035e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80035e2:	4b0a      	ldr	r3, [pc, #40]	; (800360c <SystemInit+0x60>)
 80035e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80035ea:	4b08      	ldr	r3, [pc, #32]	; (800360c <SystemInit+0x60>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <SystemInit+0x60>)
 80035f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80035f6:	4b05      	ldr	r3, [pc, #20]	; (800360c <SystemInit+0x60>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	619a      	str	r2, [r3, #24]
}
 80035fc:	bf00      	nop
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000ed00 	.word	0xe000ed00
 800360c:	40021000 	.word	0x40021000

08003610 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b09a      	sub	sp, #104	; 0x68
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003616:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003624:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
 8003640:	615a      	str	r2, [r3, #20]
 8003642:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003644:	1d3b      	adds	r3, r7, #4
 8003646:	222c      	movs	r2, #44	; 0x2c
 8003648:	2100      	movs	r1, #0
 800364a:	4618      	mov	r0, r3
 800364c:	f004 fd2c 	bl	80080a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003650:	4b44      	ldr	r3, [pc, #272]	; (8003764 <MX_TIM1_Init+0x154>)
 8003652:	4a45      	ldr	r2, [pc, #276]	; (8003768 <MX_TIM1_Init+0x158>)
 8003654:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 8003656:	4b43      	ldr	r3, [pc, #268]	; (8003764 <MX_TIM1_Init+0x154>)
 8003658:	2250      	movs	r2, #80	; 0x50
 800365a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365c:	4b41      	ldr	r3, [pc, #260]	; (8003764 <MX_TIM1_Init+0x154>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8003662:	4b40      	ldr	r3, [pc, #256]	; (8003764 <MX_TIM1_Init+0x154>)
 8003664:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003668:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366a:	4b3e      	ldr	r3, [pc, #248]	; (8003764 <MX_TIM1_Init+0x154>)
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003670:	4b3c      	ldr	r3, [pc, #240]	; (8003764 <MX_TIM1_Init+0x154>)
 8003672:	2200      	movs	r2, #0
 8003674:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003676:	4b3b      	ldr	r3, [pc, #236]	; (8003764 <MX_TIM1_Init+0x154>)
 8003678:	2200      	movs	r2, #0
 800367a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800367c:	4839      	ldr	r0, [pc, #228]	; (8003764 <MX_TIM1_Init+0x154>)
 800367e:	f002 fbfd 	bl	8005e7c <HAL_TIM_Base_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003688:	f7fe fe64 	bl	8002354 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003690:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003692:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003696:	4619      	mov	r1, r3
 8003698:	4832      	ldr	r0, [pc, #200]	; (8003764 <MX_TIM1_Init+0x154>)
 800369a:	f003 fa59 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80036a4:	f7fe fe56 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036a8:	482e      	ldr	r0, [pc, #184]	; (8003764 <MX_TIM1_Init+0x154>)
 80036aa:	f002 fd1e 	bl	80060ea <HAL_TIM_PWM_Init>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80036b4:	f7fe fe4e 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80036b8:	2340      	movs	r3, #64	; 0x40
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 80036bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036c0:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80036c2:	2380      	movs	r3, #128	; 0x80
 80036c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80036ca:	4619      	mov	r1, r3
 80036cc:	4825      	ldr	r0, [pc, #148]	; (8003764 <MX_TIM1_Init+0x154>)
 80036ce:	f003 ffab 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80036d8:	f7fe fe3c 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036dc:	2360      	movs	r3, #96	; 0x60
 80036de:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80036e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80036e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036e6:	2300      	movs	r3, #0
 80036e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036ea:	2300      	movs	r3, #0
 80036ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036ee:	2300      	movs	r3, #0
 80036f0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036f2:	2300      	movs	r3, #0
 80036f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036f6:	2300      	movs	r3, #0
 80036f8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80036fe:	2200      	movs	r2, #0
 8003700:	4619      	mov	r1, r3
 8003702:	4818      	ldr	r0, [pc, #96]	; (8003764 <MX_TIM1_Init+0x154>)
 8003704:	f003 f914 	bl	8006930 <HAL_TIM_PWM_ConfigChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800370e:	f7fe fe21 	bl	8002354 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003722:	2300      	movs	r3, #0
 8003724:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800372a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800372c:	2300      	movs	r3, #0
 800372e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003730:	2300      	movs	r3, #0
 8003732:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003734:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800373a:	2300      	movs	r3, #0
 800373c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800373e:	2300      	movs	r3, #0
 8003740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	4619      	mov	r1, r3
 8003746:	4807      	ldr	r0, [pc, #28]	; (8003764 <MX_TIM1_Init+0x154>)
 8003748:	f003 ffdc 	bl	8007704 <HAL_TIMEx_ConfigBreakDeadTime>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8003752:	f7fe fdff 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003756:	4803      	ldr	r0, [pc, #12]	; (8003764 <MX_TIM1_Init+0x154>)
 8003758:	f000 fa1e 	bl	8003b98 <HAL_TIM_MspPostInit>

}
 800375c:	bf00      	nop
 800375e:	3768      	adds	r7, #104	; 0x68
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000650 	.word	0x20000650
 8003768:	40012c00 	.word	0x40012c00

0800376c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	609a      	str	r2, [r3, #8]
 800377e:	60da      	str	r2, [r3, #12]
 8003780:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003782:	463b      	mov	r3, r7
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800378c:	4b1e      	ldr	r3, [pc, #120]	; (8003808 <MX_TIM2_Init+0x9c>)
 800378e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003794:	4b1c      	ldr	r3, [pc, #112]	; (8003808 <MX_TIM2_Init+0x9c>)
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800379a:	4b1b      	ldr	r3, [pc, #108]	; (8003808 <MX_TIM2_Init+0x9c>)
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80037a0:	4b19      	ldr	r3, [pc, #100]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037a2:	f04f 32ff 	mov.w	r2, #4294967295
 80037a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a8:	4b17      	ldr	r3, [pc, #92]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ae:	4b16      	ldr	r3, [pc, #88]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037b4:	4814      	ldr	r0, [pc, #80]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037b6:	f002 fb61 	bl	8005e7c <HAL_TIM_Base_Init>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d001      	beq.n	80037c4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80037c0:	f7fe fdc8 	bl	8002354 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80037c4:	2307      	movs	r3, #7
 80037c6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80037cc:	f107 030c 	add.w	r3, r7, #12
 80037d0:	4619      	mov	r1, r3
 80037d2:	480d      	ldr	r0, [pc, #52]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037d4:	f003 fa82 	bl	8006cdc <HAL_TIM_SlaveConfigSynchro>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80037de:	f7fe fdb9 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e2:	2300      	movs	r3, #0
 80037e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037e6:	2300      	movs	r3, #0
 80037e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037ea:	463b      	mov	r3, r7
 80037ec:	4619      	mov	r1, r3
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <MX_TIM2_Init+0x9c>)
 80037f0:	f003 ff1a 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80037fa:	f7fe fdab 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037fe:	bf00      	nop
 8003800:	3720      	adds	r7, #32
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	2000069c 	.word	0x2000069c

0800380c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08c      	sub	sp, #48	; 0x30
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003812:	f107 030c 	add.w	r3, r7, #12
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	2100      	movs	r1, #0
 800381a:	4618      	mov	r0, r3
 800381c:	f004 fc44 	bl	80080a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003820:	463b      	mov	r3, r7
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800382a:	4b21      	ldr	r3, [pc, #132]	; (80038b0 <MX_TIM3_Init+0xa4>)
 800382c:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <MX_TIM3_Init+0xa8>)
 800382e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003830:	4b1f      	ldr	r3, [pc, #124]	; (80038b0 <MX_TIM3_Init+0xa4>)
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <MX_TIM3_Init+0xa4>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800383c:	4b1c      	ldr	r3, [pc, #112]	; (80038b0 <MX_TIM3_Init+0xa4>)
 800383e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003842:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003844:	4b1a      	ldr	r3, [pc, #104]	; (80038b0 <MX_TIM3_Init+0xa4>)
 8003846:	2200      	movs	r2, #0
 8003848:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384a:	4b19      	ldr	r3, [pc, #100]	; (80038b0 <MX_TIM3_Init+0xa4>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003850:	2303      	movs	r3, #3
 8003852:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003858:	2301      	movs	r3, #1
 800385a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800385c:	2300      	movs	r3, #0
 800385e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8003860:	230f      	movs	r3, #15
 8003862:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003864:	2302      	movs	r3, #2
 8003866:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003868:	2301      	movs	r3, #1
 800386a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800386c:	2300      	movs	r3, #0
 800386e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8003870:	230f      	movs	r3, #15
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003874:	f107 030c 	add.w	r3, r7, #12
 8003878:	4619      	mov	r1, r3
 800387a:	480d      	ldr	r0, [pc, #52]	; (80038b0 <MX_TIM3_Init+0xa4>)
 800387c:	f002 fe04 	bl	8006488 <HAL_TIM_Encoder_Init>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8003886:	f7fe fd65 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388a:	2300      	movs	r3, #0
 800388c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800388e:	2300      	movs	r3, #0
 8003890:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003892:	463b      	mov	r3, r7
 8003894:	4619      	mov	r1, r3
 8003896:	4806      	ldr	r0, [pc, #24]	; (80038b0 <MX_TIM3_Init+0xa4>)
 8003898:	f003 fec6 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80038a2:	f7fe fd57 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038a6:	bf00      	nop
 80038a8:	3730      	adds	r7, #48	; 0x30
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200005b8 	.word	0x200005b8
 80038b4:	40000400 	.word	0x40000400

080038b8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038be:	1d3b      	adds	r3, r7, #4
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80038c8:	4b14      	ldr	r3, [pc, #80]	; (800391c <MX_TIM6_Init+0x64>)
 80038ca:	4a15      	ldr	r2, [pc, #84]	; (8003920 <MX_TIM6_Init+0x68>)
 80038cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 80038ce:	4b13      	ldr	r3, [pc, #76]	; (800391c <MX_TIM6_Init+0x64>)
 80038d0:	2250      	movs	r2, #80	; 0x50
 80038d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <MX_TIM6_Init+0x64>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80038da:	4b10      	ldr	r3, [pc, #64]	; (800391c <MX_TIM6_Init+0x64>)
 80038dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e2:	4b0e      	ldr	r3, [pc, #56]	; (800391c <MX_TIM6_Init+0x64>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <MX_TIM6_Init+0x64>)
 80038ea:	f002 fac7 	bl	8005e7c <HAL_TIM_Base_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80038f4:	f7fe fd2e 	bl	8002354 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_TIM6_Init+0x64>)
 8003906:	f003 fe8f 	bl	8007628 <HAL_TIMEx_MasterConfigSynchronization>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003910:	f7fe fd20 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3710      	adds	r7, #16
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20000604 	.word	0x20000604
 8003920:	40001000 	.word	0x40001000

08003924 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b092      	sub	sp, #72	; 0x48
 8003928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800392a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800392e:	2200      	movs	r2, #0
 8003930:	601a      	str	r2, [r3, #0]
 8003932:	605a      	str	r2, [r3, #4]
 8003934:	609a      	str	r2, [r3, #8]
 8003936:	60da      	str	r2, [r3, #12]
 8003938:	611a      	str	r2, [r3, #16]
 800393a:	615a      	str	r2, [r3, #20]
 800393c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800393e:	463b      	mov	r3, r7
 8003940:	222c      	movs	r2, #44	; 0x2c
 8003942:	2100      	movs	r1, #0
 8003944:	4618      	mov	r0, r3
 8003946:	f004 fbaf 	bl	80080a8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800394a:	4b30      	ldr	r3, [pc, #192]	; (8003a0c <MX_TIM16_Init+0xe8>)
 800394c:	4a30      	ldr	r2, [pc, #192]	; (8003a10 <MX_TIM16_Init+0xec>)
 800394e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8003950:	4b2e      	ldr	r3, [pc, #184]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003952:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003956:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003958:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <MX_TIM16_Init+0xe8>)
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 800395e:	4b2b      	ldr	r3, [pc, #172]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003960:	2263      	movs	r2, #99	; 0x63
 8003962:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003964:	4b29      	ldr	r3, [pc, #164]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800396a:	4b28      	ldr	r3, [pc, #160]	; (8003a0c <MX_TIM16_Init+0xe8>)
 800396c:	2200      	movs	r2, #0
 800396e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003970:	4b26      	ldr	r3, [pc, #152]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003972:	2200      	movs	r2, #0
 8003974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003976:	4825      	ldr	r0, [pc, #148]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003978:	f002 fa80 	bl	8005e7c <HAL_TIM_Base_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8003982:	f7fe fce7 	bl	8002354 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8003986:	4821      	ldr	r0, [pc, #132]	; (8003a0c <MX_TIM16_Init+0xe8>)
 8003988:	f002 fbaf 	bl	80060ea <HAL_TIM_PWM_Init>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8003992:	f7fe fcdf 	bl	8002354 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003996:	2360      	movs	r3, #96	; 0x60
 8003998:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 800399a:	2363      	movs	r3, #99	; 0x63
 800399c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800399e:	2300      	movs	r3, #0
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039a2:	2300      	movs	r3, #0
 80039a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039aa:	2300      	movs	r3, #0
 80039ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039ae:	2300      	movs	r3, #0
 80039b0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039b6:	2200      	movs	r2, #0
 80039b8:	4619      	mov	r1, r3
 80039ba:	4814      	ldr	r0, [pc, #80]	; (8003a0c <MX_TIM16_Init+0xe8>)
 80039bc:	f002 ffb8 	bl	8006930 <HAL_TIM_PWM_ConfigChannel>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80039c6:	f7fe fcc5 	bl	8002354 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039ca:	2300      	movs	r3, #0
 80039cc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039e2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80039e4:	2300      	movs	r3, #0
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80039e8:	463b      	mov	r3, r7
 80039ea:	4619      	mov	r1, r3
 80039ec:	4807      	ldr	r0, [pc, #28]	; (8003a0c <MX_TIM16_Init+0xe8>)
 80039ee:	f003 fe89 	bl	8007704 <HAL_TIMEx_ConfigBreakDeadTime>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 80039f8:	f7fe fcac 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80039fc:	4803      	ldr	r0, [pc, #12]	; (8003a0c <MX_TIM16_Init+0xe8>)
 80039fe:	f000 f8cb 	bl	8003b98 <HAL_TIM_MspPostInit>

}
 8003a02:	bf00      	nop
 8003a04:	3748      	adds	r7, #72	; 0x48
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200006e8 	.word	0x200006e8
 8003a10:	40014400 	.word	0x40014400

08003a14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a38      	ldr	r2, [pc, #224]	; (8003b04 <HAL_TIM_Base_MspInit+0xf0>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d124      	bne.n	8003a70 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a26:	4b38      	ldr	r3, [pc, #224]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	4a37      	ldr	r2, [pc, #220]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003a30:	6613      	str	r3, [r2, #96]	; 0x60
 8003a32:	4b35      	ldr	r3, [pc, #212]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2100      	movs	r1, #0
 8003a42:	2018      	movs	r0, #24
 8003a44:	f000 fb37 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003a48:	2018      	movs	r0, #24
 8003a4a:	f000 fb50 	bl	80040ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2100      	movs	r1, #0
 8003a52:	2019      	movs	r0, #25
 8003a54:	f000 fb2f 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a58:	2019      	movs	r0, #25
 8003a5a:	f000 fb48 	bl	80040ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	2100      	movs	r1, #0
 8003a62:	201b      	movs	r0, #27
 8003a64:	f000 fb27 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003a68:	201b      	movs	r0, #27
 8003a6a:	f000 fb40 	bl	80040ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003a6e:	e044      	b.n	8003afa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d114      	bne.n	8003aa4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a7a:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	4a22      	ldr	r2, [pc, #136]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6593      	str	r3, [r2, #88]	; 0x58
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003a92:	2200      	movs	r2, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	201c      	movs	r0, #28
 8003a98:	f000 fb0d 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003a9c:	201c      	movs	r0, #28
 8003a9e:	f000 fb26 	bl	80040ee <HAL_NVIC_EnableIRQ>
}
 8003aa2:	e02a      	b.n	8003afa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a18      	ldr	r2, [pc, #96]	; (8003b0c <HAL_TIM_Base_MspInit+0xf8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d10c      	bne.n	8003ac8 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003aae:	4b16      	ldr	r3, [pc, #88]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003ab4:	f043 0310 	orr.w	r3, r3, #16
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8003aba:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	f003 0310 	and.w	r3, r3, #16
 8003ac2:	60fb      	str	r3, [r7, #12]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
}
 8003ac6:	e018      	b.n	8003afa <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <HAL_TIM_Base_MspInit+0xfc>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d113      	bne.n	8003afa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	4a0c      	ldr	r2, [pc, #48]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003adc:	6613      	str	r3, [r2, #96]	; 0x60
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_TIM_Base_MspInit+0xf4>)
 8003ae0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003aea:	2200      	movs	r2, #0
 8003aec:	2100      	movs	r1, #0
 8003aee:	2019      	movs	r0, #25
 8003af0:	f000 fae1 	bl	80040b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003af4:	2019      	movs	r0, #25
 8003af6:	f000 fafa 	bl	80040ee <HAL_NVIC_EnableIRQ>
}
 8003afa:	bf00      	nop
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40001000 	.word	0x40001000
 8003b10:	40014400 	.word	0x40014400

08003b14 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b1c:	f107 0314 	add.w	r3, r7, #20
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	609a      	str	r2, [r3, #8]
 8003b28:	60da      	str	r2, [r3, #12]
 8003b2a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a17      	ldr	r2, [pc, #92]	; (8003b90 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d128      	bne.n	8003b88 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b36:	4b17      	ldr	r3, [pc, #92]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b3a:	4a16      	ldr	r2, [pc, #88]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6593      	str	r3, [r2, #88]	; 0x58
 8003b42:	4b14      	ldr	r3, [pc, #80]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	613b      	str	r3, [r7, #16]
 8003b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b4e:	4b11      	ldr	r3, [pc, #68]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b52:	4a10      	ldr	r2, [pc, #64]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b54:	f043 0301 	orr.w	r3, r3, #1
 8003b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b5a:	4b0e      	ldr	r3, [pc, #56]	; (8003b94 <HAL_TIM_Encoder_MspInit+0x80>)
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]
 8003b64:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003b66:	23c0      	movs	r3, #192	; 0xc0
 8003b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b72:	2300      	movs	r3, #0
 8003b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b76:	2302      	movs	r3, #2
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	4619      	mov	r1, r3
 8003b80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b84:	f000 face 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003b88:	bf00      	nop
 8003b8a:	3728      	adds	r7, #40	; 0x28
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40000400 	.word	0x40000400
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ba0:	f107 0314 	add.w	r3, r7, #20
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	609a      	str	r2, [r3, #8]
 8003bac:	60da      	str	r2, [r3, #12]
 8003bae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <HAL_TIM_MspPostInit+0xac>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d11e      	bne.n	8003bf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	4b23      	ldr	r3, [pc, #140]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bbe:	4a22      	ldr	r2, [pc, #136]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EXT_STEP_Pin;
 8003bd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bd8:	2302      	movs	r3, #2
 8003bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be0:	2300      	movs	r3, #0
 8003be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003be4:	2301      	movs	r3, #1
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_STEP_GPIO_Port, &GPIO_InitStruct);
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	4619      	mov	r1, r3
 8003bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bf2:	f000 fa97 	bl	8004124 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003bf6:	e021      	b.n	8003c3c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	; (8003c4c <HAL_TIM_MspPostInit+0xb4>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d11c      	bne.n	8003c3c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4a10      	ldr	r2, [pc, #64]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003c08:	f043 0302 	orr.w	r3, r3, #2
 8003c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	; (8003c48 <HAL_TIM_MspPostInit+0xb0>)
 8003c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CUTT_PWM_Pin;
 8003c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c20:	2302      	movs	r3, #2
 8003c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003c2c:	230e      	movs	r3, #14
 8003c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CUTT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003c30:	f107 0314 	add.w	r3, r7, #20
 8003c34:	4619      	mov	r1, r3
 8003c36:	4806      	ldr	r0, [pc, #24]	; (8003c50 <HAL_TIM_MspPostInit+0xb8>)
 8003c38:	f000 fa74 	bl	8004124 <HAL_GPIO_Init>
}
 8003c3c:	bf00      	nop
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40012c00 	.word	0x40012c00
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	40014400 	.word	0x40014400
 8003c50:	48000400 	.word	0x48000400

08003c54 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003c58:	4b14      	ldr	r3, [pc, #80]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c5a:	4a15      	ldr	r2, [pc, #84]	; (8003cb0 <MX_USART2_UART_Init+0x5c>)
 8003c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c5e:	4b13      	ldr	r3, [pc, #76]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c66:	4b11      	ldr	r3, [pc, #68]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c6c:	4b0f      	ldr	r3, [pc, #60]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c72:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c78:	4b0c      	ldr	r3, [pc, #48]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c7a:	220c      	movs	r2, #12
 8003c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7e:	4b0b      	ldr	r3, [pc, #44]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c90:	4b06      	ldr	r3, [pc, #24]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c96:	4805      	ldr	r0, [pc, #20]	; (8003cac <MX_USART2_UART_Init+0x58>)
 8003c98:	f003 fdca 	bl	8007830 <HAL_UART_Init>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003ca2:	f7fe fb57 	bl	8002354 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000734 	.word	0x20000734
 8003cb0:	40004400 	.word	0x40004400

08003cb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b0a4      	sub	sp, #144	; 0x90
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cbc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	605a      	str	r2, [r3, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
 8003cc8:	60da      	str	r2, [r3, #12]
 8003cca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	2268      	movs	r2, #104	; 0x68
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f004 f9e7 	bl	80080a8 <memset>
  if(uartHandle->Instance==USART2)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a21      	ldr	r2, [pc, #132]	; (8003d64 <HAL_UART_MspInit+0xb0>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d13a      	bne.n	8003d5a <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fd65 	bl	80057c0 <HAL_RCCEx_PeriphCLKConfig>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d001      	beq.n	8003d00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003cfc:	f7fe fb2a 	bl	8002354 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d04:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	4b16      	ldr	r3, [pc, #88]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d14:	613b      	str	r3, [r7, #16]
 8003d16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1c:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d1e:	f043 0301 	orr.w	r3, r3, #1
 8003d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d24:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <HAL_UART_MspInit+0xb4>)
 8003d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003d30:	230c      	movs	r3, #12
 8003d32:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d34:	2302      	movs	r3, #2
 8003d36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d46:	2307      	movs	r3, #7
 8003d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003d50:	4619      	mov	r1, r3
 8003d52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d56:	f000 f9e5 	bl	8004124 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	3790      	adds	r7, #144	; 0x90
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40004400 	.word	0x40004400
 8003d68:	40021000 	.word	0x40021000

08003d6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d70:	f7ff fc1c 	bl	80035ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d76:	e003      	b.n	8003d80 <LoopCopyDataInit>

08003d78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d7e:	3104      	adds	r1, #4

08003d80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d80:	480a      	ldr	r0, [pc, #40]	; (8003dac <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d82:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d88:	d3f6      	bcc.n	8003d78 <CopyDataInit>
	ldr	r2, =_sbss
 8003d8a:	4a0a      	ldr	r2, [pc, #40]	; (8003db4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d8c:	e002      	b.n	8003d94 <LoopFillZerobss>

08003d8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d90:	f842 3b04 	str.w	r3, [r2], #4

08003d94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d94:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <LoopForever+0x16>)
	cmp	r2, r3
 8003d96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d98:	d3f9      	bcc.n	8003d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d9a:	f004 f961 	bl	8008060 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d9e:	f7fe f9e3 	bl	8002168 <main>

08003da2 <LoopForever>:

LoopForever:
    b LoopForever
 8003da2:	e7fe      	b.n	8003da2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003da4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003da8:	080092cc 	.word	0x080092cc
	ldr	r0, =_sdata
 8003dac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003db0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003db4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003db8:	200007cc 	.word	0x200007cc

08003dbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003dbc:	e7fe      	b.n	8003dbc <ADC1_IRQHandler>
	...

08003dc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <HAL_Init+0x3c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a0b      	ldr	r2, [pc, #44]	; (8003dfc <HAL_Init+0x3c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dd6:	2003      	movs	r0, #3
 8003dd8:	f000 f962 	bl	80040a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f000 f80f 	bl	8003e00 <HAL_InitTick>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d002      	beq.n	8003dee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	71fb      	strb	r3, [r7, #7]
 8003dec:	e001      	b.n	8003df2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003dee:	f7ff fab5 	bl	800335c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003df2:	79fb      	ldrb	r3, [r7, #7]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40022000 	.word	0x40022000

08003e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003e0c:	4b17      	ldr	r3, [pc, #92]	; (8003e6c <HAL_InitTick+0x6c>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d023      	beq.n	8003e5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003e14:	4b16      	ldr	r3, [pc, #88]	; (8003e70 <HAL_InitTick+0x70>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b14      	ldr	r3, [pc, #80]	; (8003e6c <HAL_InitTick+0x6c>)
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f96d 	bl	800410a <HAL_SYSTICK_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d10f      	bne.n	8003e56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d809      	bhi.n	8003e50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	f04f 30ff 	mov.w	r0, #4294967295
 8003e44:	f000 f937 	bl	80040b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e48:	4a0a      	ldr	r2, [pc, #40]	; (8003e74 <HAL_InitTick+0x74>)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6013      	str	r3, [r2, #0]
 8003e4e:	e007      	b.n	8003e60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e004      	b.n	8003e60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	73fb      	strb	r3, [r7, #15]
 8003e5a:	e001      	b.n	8003e60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	2000000c 	.word	0x2000000c
 8003e70:	20000004 	.word	0x20000004
 8003e74:	20000008 	.word	0x20000008

08003e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_IncTick+0x20>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <HAL_IncTick+0x24>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4413      	add	r3, r2
 8003e88:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <HAL_IncTick+0x24>)
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2000000c 	.word	0x2000000c
 8003e9c:	200007b8 	.word	0x200007b8

08003ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ea4:	4b03      	ldr	r3, [pc, #12]	; (8003eb4 <HAL_GetTick+0x14>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200007b8 	.word	0x200007b8

08003eb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff ffee 	bl	8003ea0 <HAL_GetTick>
 8003ec4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed0:	d005      	beq.n	8003ede <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003ed2:	4b0a      	ldr	r3, [pc, #40]	; (8003efc <HAL_Delay+0x44>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ede:	bf00      	nop
 8003ee0:	f7ff ffde 	bl	8003ea0 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d8f7      	bhi.n	8003ee0 <HAL_Delay+0x28>
  {
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <__NVIC_SetPriorityGrouping>:
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__NVIC_SetPriorityGrouping+0x44>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <__NVIC_GetPriorityGrouping>:
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f4c:	4b04      	ldr	r3, [pc, #16]	; (8003f60 <__NVIC_GetPriorityGrouping+0x18>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	0a1b      	lsrs	r3, r3, #8
 8003f52:	f003 0307 	and.w	r3, r3, #7
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <__NVIC_EnableIRQ>:
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	db0b      	blt.n	8003f8e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	f003 021f 	and.w	r2, r3, #31
 8003f7c:	4907      	ldr	r1, [pc, #28]	; (8003f9c <__NVIC_EnableIRQ+0x38>)
 8003f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f82:	095b      	lsrs	r3, r3, #5
 8003f84:	2001      	movs	r0, #1
 8003f86:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	e000e100 	.word	0xe000e100

08003fa0 <__NVIC_SetPriority>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	6039      	str	r1, [r7, #0]
 8003faa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	db0a      	blt.n	8003fca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	490c      	ldr	r1, [pc, #48]	; (8003fec <__NVIC_SetPriority+0x4c>)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	0112      	lsls	r2, r2, #4
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fc8:	e00a      	b.n	8003fe0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	4908      	ldr	r1, [pc, #32]	; (8003ff0 <__NVIC_SetPriority+0x50>)
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	3b04      	subs	r3, #4
 8003fd8:	0112      	lsls	r2, r2, #4
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	440b      	add	r3, r1
 8003fde:	761a      	strb	r2, [r3, #24]
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr
 8003fec:	e000e100 	.word	0xe000e100
 8003ff0:	e000ed00 	.word	0xe000ed00

08003ff4 <NVIC_EncodePriority>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b089      	sub	sp, #36	; 0x24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f003 0307 	and.w	r3, r3, #7
 8004006:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f1c3 0307 	rsb	r3, r3, #7
 800400e:	2b04      	cmp	r3, #4
 8004010:	bf28      	it	cs
 8004012:	2304      	movcs	r3, #4
 8004014:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	3304      	adds	r3, #4
 800401a:	2b06      	cmp	r3, #6
 800401c:	d902      	bls.n	8004024 <NVIC_EncodePriority+0x30>
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	3b03      	subs	r3, #3
 8004022:	e000      	b.n	8004026 <NVIC_EncodePriority+0x32>
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	fa02 f303 	lsl.w	r3, r2, r3
 8004032:	43da      	mvns	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	401a      	ands	r2, r3
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800403c:	f04f 31ff 	mov.w	r1, #4294967295
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	fa01 f303 	lsl.w	r3, r1, r3
 8004046:	43d9      	mvns	r1, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800404c:	4313      	orrs	r3, r2
}
 800404e:	4618      	mov	r0, r3
 8004050:	3724      	adds	r7, #36	; 0x24
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <SysTick_Config>:
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	3b01      	subs	r3, #1
 8004068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800406c:	d301      	bcc.n	8004072 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800406e:	2301      	movs	r3, #1
 8004070:	e00f      	b.n	8004092 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004072:	4a0a      	ldr	r2, [pc, #40]	; (800409c <SysTick_Config+0x40>)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	3b01      	subs	r3, #1
 8004078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800407a:	210f      	movs	r1, #15
 800407c:	f04f 30ff 	mov.w	r0, #4294967295
 8004080:	f7ff ff8e 	bl	8003fa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <SysTick_Config+0x40>)
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800408a:	4b04      	ldr	r3, [pc, #16]	; (800409c <SysTick_Config+0x40>)
 800408c:	2207      	movs	r2, #7
 800408e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3708      	adds	r7, #8
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	e000e010 	.word	0xe000e010

080040a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7ff ff29 	bl	8003f00 <__NVIC_SetPriorityGrouping>
}
 80040ae:	bf00      	nop
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b086      	sub	sp, #24
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	4603      	mov	r3, r0
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80040c4:	2300      	movs	r3, #0
 80040c6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040c8:	f7ff ff3e 	bl	8003f48 <__NVIC_GetPriorityGrouping>
 80040cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	6978      	ldr	r0, [r7, #20]
 80040d4:	f7ff ff8e 	bl	8003ff4 <NVIC_EncodePriority>
 80040d8:	4602      	mov	r2, r0
 80040da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040de:	4611      	mov	r1, r2
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff ff5d 	bl	8003fa0 <__NVIC_SetPriority>
}
 80040e6:	bf00      	nop
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ee:	b580      	push	{r7, lr}
 80040f0:	b082      	sub	sp, #8
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	4603      	mov	r3, r0
 80040f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f7ff ff31 	bl	8003f64 <__NVIC_EnableIRQ>
}
 8004102:	bf00      	nop
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b082      	sub	sp, #8
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7ff ffa2 	bl	800405c <SysTick_Config>
 8004118:	4603      	mov	r3, r0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3708      	adds	r7, #8
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
	...

08004124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004124:	b480      	push	{r7}
 8004126:	b087      	sub	sp, #28
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800412e:	2300      	movs	r3, #0
 8004130:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004132:	e154      	b.n	80043de <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	2101      	movs	r1, #1
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	fa01 f303 	lsl.w	r3, r1, r3
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8146 	beq.w	80043d8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d00b      	beq.n	800416c <HAL_GPIO_Init+0x48>
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d007      	beq.n	800416c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004160:	2b11      	cmp	r3, #17
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	2b12      	cmp	r3, #18
 800416a:	d130      	bne.n	80041ce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	2203      	movs	r2, #3
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	43db      	mvns	r3, r3
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041a2:	2201      	movs	r2, #1
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	091b      	lsrs	r3, r3, #4
 80041b8:	f003 0201 	and.w	r2, r3, #1
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	2203      	movs	r2, #3
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	fa02 f303 	lsl.w	r3, r2, r3
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d003      	beq.n	800420e <HAL_GPIO_Init+0xea>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b12      	cmp	r3, #18
 800420c:	d123      	bne.n	8004256 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800421a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	220f      	movs	r2, #15
 8004226:	fa02 f303 	lsl.w	r3, r2, r3
 800422a:	43db      	mvns	r3, r3
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	4013      	ands	r3, r2
 8004230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	fa02 f303 	lsl.w	r3, r2, r3
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	4313      	orrs	r3, r2
 8004246:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	08da      	lsrs	r2, r3, #3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	3208      	adds	r2, #8
 8004250:	6939      	ldr	r1, [r7, #16]
 8004252:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	2203      	movs	r2, #3
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43db      	mvns	r3, r3
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4013      	ands	r3, r2
 800426c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	693a      	ldr	r2, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 80a0 	beq.w	80043d8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004298:	4b58      	ldr	r3, [pc, #352]	; (80043fc <HAL_GPIO_Init+0x2d8>)
 800429a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800429c:	4a57      	ldr	r2, [pc, #348]	; (80043fc <HAL_GPIO_Init+0x2d8>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6613      	str	r3, [r2, #96]	; 0x60
 80042a4:	4b55      	ldr	r3, [pc, #340]	; (80043fc <HAL_GPIO_Init+0x2d8>)
 80042a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	60bb      	str	r3, [r7, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80042b0:	4a53      	ldr	r2, [pc, #332]	; (8004400 <HAL_GPIO_Init+0x2dc>)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	089b      	lsrs	r3, r3, #2
 80042b6:	3302      	adds	r3, #2
 80042b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0303 	and.w	r3, r3, #3
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	220f      	movs	r2, #15
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4013      	ands	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80042da:	d019      	beq.n	8004310 <HAL_GPIO_Init+0x1ec>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a49      	ldr	r2, [pc, #292]	; (8004404 <HAL_GPIO_Init+0x2e0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d013      	beq.n	800430c <HAL_GPIO_Init+0x1e8>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a48      	ldr	r2, [pc, #288]	; (8004408 <HAL_GPIO_Init+0x2e4>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00d      	beq.n	8004308 <HAL_GPIO_Init+0x1e4>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a47      	ldr	r2, [pc, #284]	; (800440c <HAL_GPIO_Init+0x2e8>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <HAL_GPIO_Init+0x1e0>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a46      	ldr	r2, [pc, #280]	; (8004410 <HAL_GPIO_Init+0x2ec>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d101      	bne.n	8004300 <HAL_GPIO_Init+0x1dc>
 80042fc:	2304      	movs	r3, #4
 80042fe:	e008      	b.n	8004312 <HAL_GPIO_Init+0x1ee>
 8004300:	2307      	movs	r3, #7
 8004302:	e006      	b.n	8004312 <HAL_GPIO_Init+0x1ee>
 8004304:	2303      	movs	r3, #3
 8004306:	e004      	b.n	8004312 <HAL_GPIO_Init+0x1ee>
 8004308:	2302      	movs	r3, #2
 800430a:	e002      	b.n	8004312 <HAL_GPIO_Init+0x1ee>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_GPIO_Init+0x1ee>
 8004310:	2300      	movs	r3, #0
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	f002 0203 	and.w	r2, r2, #3
 8004318:	0092      	lsls	r2, r2, #2
 800431a:	4093      	lsls	r3, r2
 800431c:	693a      	ldr	r2, [r7, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004322:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_GPIO_Init+0x2dc>)
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	3302      	adds	r3, #2
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004330:	4b38      	ldr	r3, [pc, #224]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	43db      	mvns	r3, r3
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4013      	ands	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	4313      	orrs	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004354:	4a2f      	ldr	r2, [pc, #188]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800435a:	4b2e      	ldr	r3, [pc, #184]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	43db      	mvns	r3, r3
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4013      	ands	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4313      	orrs	r3, r2
 800437c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800437e:	4a25      	ldr	r2, [pc, #148]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	43db      	mvns	r3, r3
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4013      	ands	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80043a8:	4a1a      	ldr	r2, [pc, #104]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	43db      	mvns	r3, r3
 80043b8:	693a      	ldr	r2, [r7, #16]
 80043ba:	4013      	ands	r3, r2
 80043bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80043d2:	4a10      	ldr	r2, [pc, #64]	; (8004414 <HAL_GPIO_Init+0x2f0>)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	3301      	adds	r3, #1
 80043dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f47f aea3 	bne.w	8004134 <HAL_GPIO_Init+0x10>
  }
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	371c      	adds	r7, #28
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	40021000 	.word	0x40021000
 8004400:	40010000 	.word	0x40010000
 8004404:	48000400 	.word	0x48000400
 8004408:	48000800 	.word	0x48000800
 800440c:	48000c00 	.word	0x48000c00
 8004410:	48001000 	.word	0x48001000
 8004414:	40010400 	.word	0x40010400

08004418 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	460b      	mov	r3, r1
 8004422:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	691a      	ldr	r2, [r3, #16]
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004430:	2301      	movs	r3, #1
 8004432:	73fb      	strb	r3, [r7, #15]
 8004434:	e001      	b.n	800443a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004436:	2300      	movs	r3, #0
 8004438:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800443a:	7bfb      	ldrb	r3, [r7, #15]
}
 800443c:	4618      	mov	r0, r3
 800443e:	3714      	adds	r7, #20
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	460b      	mov	r3, r1
 8004452:	807b      	strh	r3, [r7, #2]
 8004454:	4613      	mov	r3, r2
 8004456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004458:	787b      	ldrb	r3, [r7, #1]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004464:	e002      	b.n	800446c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800446c:	bf00      	nop
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e08f      	b.n	80045aa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fd fdc5 	bl	8002034 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d004      	beq.n	80044cc <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80044ca:	d103      	bne.n	80044d4 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f023 031e 	bic.w	r3, r3, #30
 80044d2:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044dc:	4293      	cmp	r3, r2
 80044de:	d005      	beq.n	80044ec <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80044e6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044ea:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_LPTIM_Init+0x13c>)
 80044f0:	4013      	ands	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80044fc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004502:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004508:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800450e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d107      	bne.n	800452e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004526:	4313      	orrs	r3, r2
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	4313      	orrs	r3, r2
 800452c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d004      	beq.n	8004540 <HAL_LPTIM_Init+0xc8>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800453e:	d107      	bne.n	8004550 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004548:	4313      	orrs	r3, r2
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	4313      	orrs	r3, r2
 800454e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004558:	4293      	cmp	r3, r2
 800455a:	d00a      	beq.n	8004572 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8004564:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800456a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <HAL_LPTIM_Init+0x140>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d108      	bne.n	8004596 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	621a      	str	r2, [r3, #32]
 8004594:	e004      	b.n	80045a0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800459e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	ff19f1fe 	.word	0xff19f1fe
 80045b8:	40007c00 	.word	0x40007c00

080045bc <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2202      	movs	r2, #2
 80045ca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0306 	bic.w	r3, r3, #6
 80045dc:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68da      	ldr	r2, [r3, #12]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80045fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	691a      	ldr	r2, [r3, #16]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0201 	orr.w	r2, r2, #1
 800460e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2210      	movs	r2, #16
 8004616:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004620:	2110      	movs	r1, #16
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f91e 	bl	8004864 <LPTIM_WaitForFlag>
 8004628:	4603      	mov	r3, r0
 800462a:	2b03      	cmp	r3, #3
 800462c:	d101      	bne.n	8004632 <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e02f      	b.n	8004692 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f946 	bl	80048c4 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f905 	bl	8004848 <HAL_LPTIM_GetState>
 800463e:	4603      	mov	r3, r0
 8004640:	2b03      	cmp	r3, #3
 8004642:	d101      	bne.n	8004648 <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e024      	b.n	8004692 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004656:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f042 0220 	orr.w	r2, r2, #32
 8004666:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0204 	orr.w	r2, r2, #4
 8004686:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b082      	sub	sp, #8
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d10d      	bne.n	80046cc <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d106      	bne.n	80046cc <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2201      	movs	r2, #1
 80046c4:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f882 	bl	80047d0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d10d      	bne.n	80046f6 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d106      	bne.n	80046f6 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2202      	movs	r2, #2
 80046ee:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f7fd fdeb 	bl	80022cc <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d10d      	bne.n	8004720 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	2b04      	cmp	r3, #4
 8004710:	d106      	bne.n	8004720 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2204      	movs	r2, #4
 8004718:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f862 	bl	80047e4 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b08      	cmp	r3, #8
 800472c:	d10d      	bne.n	800474a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 0308 	and.w	r3, r3, #8
 8004738:	2b08      	cmp	r3, #8
 800473a:	d106      	bne.n	800474a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2208      	movs	r2, #8
 8004742:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f857 	bl	80047f8 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0310 	and.w	r3, r3, #16
 8004754:	2b10      	cmp	r3, #16
 8004756:	d10d      	bne.n	8004774 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b10      	cmp	r3, #16
 8004764:	d106      	bne.n	8004774 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2210      	movs	r2, #16
 800476c:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f84c 	bl	800480c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0320 	and.w	r3, r3, #32
 800477e:	2b20      	cmp	r3, #32
 8004780:	d10d      	bne.n	800479e <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b20      	cmp	r3, #32
 800478e:	d106      	bne.n	800479e <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2220      	movs	r2, #32
 8004796:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f841 	bl	8004820 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a8:	2b40      	cmp	r3, #64	; 0x40
 80047aa:	d10d      	bne.n	80047c8 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	d106      	bne.n	80047c8 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2240      	movs	r2, #64	; 0x40
 80047c0:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f836 	bl	8004834 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 80047c8:	bf00      	nop
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800483c:	bf00      	nop
 800483e:	370c      	adds	r7, #12
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr

08004848 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004856:	b2db      	uxtb	r3, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <LPTIM_WaitForFlag+0x58>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a12      	ldr	r2, [pc, #72]	; (80048c0 <LPTIM_WaitForFlag+0x5c>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	0b9b      	lsrs	r3, r3, #14
 800487e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	3b01      	subs	r3, #1
 800488c:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	4013      	ands	r3, r2
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d002      	beq.n	80048ae <LPTIM_WaitForFlag+0x4a>
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1ec      	bne.n	8004888 <LPTIM_WaitForFlag+0x24>

  return result;
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr
 80048bc:	20000004 	.word	0x20000004
 80048c0:	d1b71759 	.word	0xd1b71759

080048c4 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80048d0:	b672      	cpsid	i
}
 80048d2:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a71      	ldr	r2, [pc, #452]	; (8004aa0 <LPTIM_Disable+0x1dc>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d003      	beq.n	80048e6 <LPTIM_Disable+0x22>
 80048de:	4a71      	ldr	r2, [pc, #452]	; (8004aa4 <LPTIM_Disable+0x1e0>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d007      	beq.n	80048f4 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 80048e4:	e00d      	b.n	8004902 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80048e6:	4b70      	ldr	r3, [pc, #448]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80048f0:	61fb      	str	r3, [r7, #28]
      break;
 80048f2:	e006      	b.n	8004902 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 80048f4:	4b6c      	ldr	r3, [pc, #432]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80048fe:	61fb      	str	r3, [r7, #28]
      break;
 8004900:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	60fb      	str	r3, [r7, #12]
  tmpOR = hlptim->Instance->OR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	60bb      	str	r3, [r7, #8]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a5c      	ldr	r2, [pc, #368]	; (8004aa0 <LPTIM_Disable+0x1dc>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d003      	beq.n	800493c <LPTIM_Disable+0x78>
 8004934:	4a5b      	ldr	r2, [pc, #364]	; (8004aa4 <LPTIM_Disable+0x1e0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800493a:	e019      	b.n	8004970 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800493c:	4b5a      	ldr	r3, [pc, #360]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 800493e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004940:	4a59      	ldr	r2, [pc, #356]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004946:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004948:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 800494e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004952:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8004954:	e00c      	b.n	8004970 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	4a53      	ldr	r2, [pc, #332]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 800495c:	f043 0320 	orr.w	r3, r3, #32
 8004960:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8004962:	4b51      	ldr	r3, [pc, #324]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	4a50      	ldr	r2, [pc, #320]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004968:	f023 0320 	bic.w	r3, r3, #32
 800496c:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 800496e:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d102      	bne.n	800497c <LPTIM_Disable+0xb8>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d075      	beq.n	8004a68 <LPTIM_Disable+0x1a4>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a47      	ldr	r2, [pc, #284]	; (8004aa0 <LPTIM_Disable+0x1dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d003      	beq.n	800498e <LPTIM_Disable+0xca>
 8004986:	4a47      	ldr	r2, [pc, #284]	; (8004aa4 <LPTIM_Disable+0x1e0>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d009      	beq.n	80049a0 <LPTIM_Disable+0xdc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800498c:	e011      	b.n	80049b2 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 800498e:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004994:	4a44      	ldr	r2, [pc, #272]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004996:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800499a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 800499e:	e008      	b.n	80049b2 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80049a0:	4b41      	ldr	r3, [pc, #260]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	4a40      	ldr	r2, [pc, #256]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 80049a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 80049b0:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01a      	beq.n	80049ee <LPTIM_Disable+0x12a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f042 0201 	orr.w	r2, r2, #1
 80049c6:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80049d0:	2108      	movs	r1, #8
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ff46 	bl	8004864 <LPTIM_WaitForFlag>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b03      	cmp	r3, #3
 80049dc:	d103      	bne.n	80049e6 <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2203      	movs	r2, #3
 80049e2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d01a      	beq.n	8004a2a <LPTIM_Disable+0x166>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7ff ff28 	bl	8004864 <LPTIM_WaitForFlag>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d103      	bne.n	8004a22 <LPTIM_Disable+0x15e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2210      	movs	r2, #16
 8004a28:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <LPTIM_Disable+0x1dc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <LPTIM_Disable+0x178>
 8004a34:	4a1b      	ldr	r2, [pc, #108]	; (8004aa4 <LPTIM_Disable+0x1e0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00b      	beq.n	8004a52 <LPTIM_Disable+0x18e>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004a3a:	e016      	b.n	8004a6a <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004a3c:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a42:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a46:	4918      	ldr	r1, [pc, #96]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8004a50:	e00b      	b.n	8004a6a <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8004a52:	4b15      	ldr	r3, [pc, #84]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5c:	4912      	ldr	r1, [pc, #72]	; (8004aa8 <LPTIM_Disable+0x1e4>)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8004a66:	e000      	b.n	8004a6a <LPTIM_Disable+0x1a6>
    }
  }
 8004a68:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0201 	bic.w	r2, r2, #1
 8004a78:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69ba      	ldr	r2, [r7, #24]
 8004a80:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8004a92:	b662      	cpsie	i
}
 8004a94:	bf00      	nop

  __enable_irq();
}
 8004a96:	bf00      	nop
 8004a98:	3720      	adds	r7, #32
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	40007c00 	.word	0x40007c00
 8004aa4:	40009400 	.word	0x40009400
 8004aa8:	40021000 	.word	0x40021000

08004aac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ab0:	4b04      	ldr	r3, [pc, #16]	; (8004ac4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40007000 	.word	0x40007000

08004ac8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad6:	d130      	bne.n	8004b3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ad8:	4b23      	ldr	r3, [pc, #140]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ae4:	d038      	beq.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ae6:	4b20      	ldr	r3, [pc, #128]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004aee:	4a1e      	ldr	r2, [pc, #120]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004af6:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2232      	movs	r2, #50	; 0x32
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	4a1b      	ldr	r2, [pc, #108]	; (8004b70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	0c9b      	lsrs	r3, r3, #18
 8004b08:	3301      	adds	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b0c:	e002      	b.n	8004b14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b20:	d102      	bne.n	8004b28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1f2      	bne.n	8004b0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b34:	d110      	bne.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00f      	b.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b46:	d007      	beq.n	8004b58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b48:	4b07      	ldr	r3, [pc, #28]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b50:	4a05      	ldr	r2, [pc, #20]	; (8004b68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b56:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	20000004 	.word	0x20000004
 8004b70:	431bde83 	.word	0x431bde83

08004b74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f000 bc11 	b.w	80053aa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b88:	4ba0      	ldr	r3, [pc, #640]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b92:	4b9e      	ldr	r3, [pc, #632]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80e4 	beq.w	8004d72 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d007      	beq.n	8004bc0 <HAL_RCC_OscConfig+0x4c>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	2b0c      	cmp	r3, #12
 8004bb4:	f040 808b 	bne.w	8004cce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	f040 8087 	bne.w	8004cce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004bc0:	4b92      	ldr	r3, [pc, #584]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x64>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e3e8      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a1a      	ldr	r2, [r3, #32]
 8004bdc:	4b8b      	ldr	r3, [pc, #556]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x7e>
 8004be8:	4b88      	ldr	r3, [pc, #544]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bf0:	e005      	b.n	8004bfe <HAL_RCC_OscConfig+0x8a>
 8004bf2:	4b86      	ldr	r3, [pc, #536]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	091b      	lsrs	r3, r3, #4
 8004bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d223      	bcs.n	8004c4a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fd7a 	bl	8005700 <RCC_SetFlashLatencyFromMSIRange>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e3c9      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c16:	4b7d      	ldr	r3, [pc, #500]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a7c      	ldr	r2, [pc, #496]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c1c:	f043 0308 	orr.w	r3, r3, #8
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	4b7a      	ldr	r3, [pc, #488]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4977      	ldr	r1, [pc, #476]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c34:	4b75      	ldr	r3, [pc, #468]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	69db      	ldr	r3, [r3, #28]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	4972      	ldr	r1, [pc, #456]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	604b      	str	r3, [r1, #4]
 8004c48:	e025      	b.n	8004c96 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c4a:	4b70      	ldr	r3, [pc, #448]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6f      	ldr	r2, [pc, #444]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c50:	f043 0308 	orr.w	r3, r3, #8
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	4b6d      	ldr	r3, [pc, #436]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	496a      	ldr	r1, [pc, #424]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c68:	4b68      	ldr	r3, [pc, #416]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	021b      	lsls	r3, r3, #8
 8004c76:	4965      	ldr	r1, [pc, #404]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d109      	bne.n	8004c96 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 fd3a 	bl	8005700 <RCC_SetFlashLatencyFromMSIRange>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e389      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c96:	f000 fc6f 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b5b      	ldr	r3, [pc, #364]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	495a      	ldr	r1, [pc, #360]	; (8004e10 <HAL_RCC_OscConfig+0x29c>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	fa22 f303 	lsr.w	r3, r2, r3
 8004cb2:	4a58      	ldr	r2, [pc, #352]	; (8004e14 <HAL_RCC_OscConfig+0x2a0>)
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004cb6:	4b58      	ldr	r3, [pc, #352]	; (8004e18 <HAL_RCC_OscConfig+0x2a4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7ff f8a0 	bl	8003e00 <HAL_InitTick>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d052      	beq.n	8004d70 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
 8004ccc:	e36d      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d032      	beq.n	8004d3c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cd6:	4b4d      	ldr	r3, [pc, #308]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a4c      	ldr	r2, [pc, #304]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004cdc:	f043 0301 	orr.w	r3, r3, #1
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ce2:	f7ff f8dd 	bl	8003ea0 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cea:	f7ff f8d9 	bl	8003ea0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e356      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cfc:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d0f0      	beq.n	8004cea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d08:	4b40      	ldr	r3, [pc, #256]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3f      	ldr	r2, [pc, #252]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d0e:	f043 0308 	orr.w	r3, r3, #8
 8004d12:	6013      	str	r3, [r2, #0]
 8004d14:	4b3d      	ldr	r3, [pc, #244]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	493a      	ldr	r1, [pc, #232]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	021b      	lsls	r3, r3, #8
 8004d34:	4935      	ldr	r1, [pc, #212]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
 8004d3a:	e01a      	b.n	8004d72 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d3c:	4b33      	ldr	r3, [pc, #204]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d48:	f7ff f8aa 	bl	8003ea0 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d50:	f7ff f8a6 	bl	8003ea0 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e323      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d62:	4b2a      	ldr	r3, [pc, #168]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x1dc>
 8004d6e:	e000      	b.n	8004d72 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d70:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d073      	beq.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d7e:	69bb      	ldr	r3, [r7, #24]
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d005      	beq.n	8004d90 <HAL_RCC_OscConfig+0x21c>
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b0c      	cmp	r3, #12
 8004d88:	d10e      	bne.n	8004da8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2b03      	cmp	r3, #3
 8004d8e:	d10b      	bne.n	8004da8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	4b1e      	ldr	r3, [pc, #120]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d063      	beq.n	8004e64 <HAL_RCC_OscConfig+0x2f0>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d15f      	bne.n	8004e64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e300      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d106      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x24c>
 8004db2:	4b16      	ldr	r3, [pc, #88]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dbc:	6013      	str	r3, [r2, #0]
 8004dbe:	e01d      	b.n	8004dfc <HAL_RCC_OscConfig+0x288>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004dc8:	d10c      	bne.n	8004de4 <HAL_RCC_OscConfig+0x270>
 8004dca:	4b10      	ldr	r3, [pc, #64]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a0f      	ldr	r2, [pc, #60]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004dd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	4b0d      	ldr	r3, [pc, #52]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a0c      	ldr	r2, [pc, #48]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de0:	6013      	str	r3, [r2, #0]
 8004de2:	e00b      	b.n	8004dfc <HAL_RCC_OscConfig+0x288>
 8004de4:	4b09      	ldr	r3, [pc, #36]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a08      	ldr	r2, [pc, #32]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004dea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dee:	6013      	str	r3, [r2, #0]
 8004df0:	4b06      	ldr	r3, [pc, #24]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <HAL_RCC_OscConfig+0x298>)
 8004df6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01b      	beq.n	8004e3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7ff f84c 	bl	8003ea0 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e0a:	e010      	b.n	8004e2e <HAL_RCC_OscConfig+0x2ba>
 8004e0c:	40021000 	.word	0x40021000
 8004e10:	080091dc 	.word	0x080091dc
 8004e14:	20000004 	.word	0x20000004
 8004e18:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e1c:	f7ff f840 	bl	8003ea0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b64      	cmp	r3, #100	; 0x64
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e2bd      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e2e:	4baf      	ldr	r3, [pc, #700]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2a8>
 8004e3a:	e014      	b.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e3c:	f7ff f830 	bl	8003ea0 <HAL_GetTick>
 8004e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e42:	e008      	b.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e44:	f7ff f82c 	bl	8003ea0 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b64      	cmp	r3, #100	; 0x64
 8004e50:	d901      	bls.n	8004e56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	e2a9      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e56:	4ba5      	ldr	r3, [pc, #660]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1f0      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2d0>
 8004e62:	e000      	b.n	8004e66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d060      	beq.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d005      	beq.n	8004e84 <HAL_RCC_OscConfig+0x310>
 8004e78:	69bb      	ldr	r3, [r7, #24]
 8004e7a:	2b0c      	cmp	r3, #12
 8004e7c:	d119      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d116      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e84:	4b99      	ldr	r3, [pc, #612]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d005      	beq.n	8004e9c <HAL_RCC_OscConfig+0x328>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e286      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e9c:	4b93      	ldr	r3, [pc, #588]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	061b      	lsls	r3, r3, #24
 8004eaa:	4990      	ldr	r1, [pc, #576]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004eb0:	e040      	b.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d023      	beq.n	8004f02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eba:	4b8c      	ldr	r3, [pc, #560]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a8b      	ldr	r2, [pc, #556]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec6:	f7fe ffeb 	bl	8003ea0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ece:	f7fe ffe7 	bl	8003ea0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e264      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ee0:	4b82      	ldr	r3, [pc, #520]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eec:	4b7f      	ldr	r3, [pc, #508]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	497c      	ldr	r1, [pc, #496]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	604b      	str	r3, [r1, #4]
 8004f00:	e018      	b.n	8004f34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f02:	4b7a      	ldr	r3, [pc, #488]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a79      	ldr	r2, [pc, #484]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f0e:	f7fe ffc7 	bl	8003ea0 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f16:	f7fe ffc3 	bl	8003ea0 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e240      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f28:	4b70      	ldr	r3, [pc, #448]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1f0      	bne.n	8004f16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0308 	and.w	r3, r3, #8
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d03c      	beq.n	8004fba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	695b      	ldr	r3, [r3, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01c      	beq.n	8004f82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f48:	4b68      	ldr	r3, [pc, #416]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f4e:	4a67      	ldr	r2, [pc, #412]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f50:	f043 0301 	orr.w	r3, r3, #1
 8004f54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fe ffa2 	bl	8003ea0 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f5e:	e008      	b.n	8004f72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f60:	f7fe ff9e 	bl	8003ea0 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e21b      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f72:	4b5e      	ldr	r3, [pc, #376]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0ef      	beq.n	8004f60 <HAL_RCC_OscConfig+0x3ec>
 8004f80:	e01b      	b.n	8004fba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f82:	4b5a      	ldr	r3, [pc, #360]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f88:	4a58      	ldr	r2, [pc, #352]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004f8a:	f023 0301 	bic.w	r3, r3, #1
 8004f8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fe ff85 	bl	8003ea0 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f98:	e008      	b.n	8004fac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f9a:	f7fe ff81 	bl	8003ea0 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	2b02      	cmp	r3, #2
 8004fa6:	d901      	bls.n	8004fac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	e1fe      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004fac:	4b4f      	ldr	r3, [pc, #316]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004fae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1ef      	bne.n	8004f9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0304 	and.w	r3, r3, #4
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 80a6 	beq.w	8005114 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fcc:	4b47      	ldr	r3, [pc, #284]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fd8:	4b44      	ldr	r3, [pc, #272]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fdc:	4a43      	ldr	r2, [pc, #268]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	4b41      	ldr	r3, [pc, #260]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8004fe6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fec:	60bb      	str	r3, [r7, #8]
 8004fee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	; (80050f0 <HAL_RCC_OscConfig+0x57c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d118      	bne.n	8005032 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005000:	4b3b      	ldr	r3, [pc, #236]	; (80050f0 <HAL_RCC_OscConfig+0x57c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a3a      	ldr	r2, [pc, #232]	; (80050f0 <HAL_RCC_OscConfig+0x57c>)
 8005006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800500a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800500c:	f7fe ff48 	bl	8003ea0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005014:	f7fe ff44 	bl	8003ea0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e1c1      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005026:	4b32      	ldr	r3, [pc, #200]	; (80050f0 <HAL_RCC_OscConfig+0x57c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d108      	bne.n	800504c <HAL_RCC_OscConfig+0x4d8>
 800503a:	4b2c      	ldr	r3, [pc, #176]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8005042:	f043 0301 	orr.w	r3, r3, #1
 8005046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800504a:	e024      	b.n	8005096 <HAL_RCC_OscConfig+0x522>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	2b05      	cmp	r3, #5
 8005052:	d110      	bne.n	8005076 <HAL_RCC_OscConfig+0x502>
 8005054:	4b25      	ldr	r3, [pc, #148]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8005056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505a:	4a24      	ldr	r2, [pc, #144]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 800505c:	f043 0304 	orr.w	r3, r3, #4
 8005060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005064:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	4a20      	ldr	r2, [pc, #128]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 800506c:	f043 0301 	orr.w	r3, r3, #1
 8005070:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005074:	e00f      	b.n	8005096 <HAL_RCC_OscConfig+0x522>
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	4a1b      	ldr	r2, [pc, #108]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 800507e:	f023 0301 	bic.w	r3, r3, #1
 8005082:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005086:	4b19      	ldr	r3, [pc, #100]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 8005088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800508c:	4a17      	ldr	r2, [pc, #92]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 800508e:	f023 0304 	bic.w	r3, r3, #4
 8005092:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d016      	beq.n	80050cc <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509e:	f7fe feff 	bl	8003ea0 <HAL_GetTick>
 80050a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a4:	e00a      	b.n	80050bc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050a6:	f7fe fefb 	bl	8003ea0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d901      	bls.n	80050bc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e176      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050bc:	4b0b      	ldr	r3, [pc, #44]	; (80050ec <HAL_RCC_OscConfig+0x578>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f003 0302 	and.w	r3, r3, #2
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ed      	beq.n	80050a6 <HAL_RCC_OscConfig+0x532>
 80050ca:	e01a      	b.n	8005102 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fe fee8 	bl	8003ea0 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d2:	e00f      	b.n	80050f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d4:	f7fe fee4 	bl	8003ea0 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d906      	bls.n	80050f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e15f      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
 80050ea:	bf00      	nop
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050f4:	4baa      	ldr	r3, [pc, #680]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e8      	bne.n	80050d4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005102:	7ffb      	ldrb	r3, [r7, #31]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d105      	bne.n	8005114 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005108:	4ba5      	ldr	r3, [pc, #660]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	4aa4      	ldr	r2, [pc, #656]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800510e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005112:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0320 	and.w	r3, r3, #32
 800511c:	2b00      	cmp	r3, #0
 800511e:	d03c      	beq.n	800519a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	2b00      	cmp	r3, #0
 8005126:	d01c      	beq.n	8005162 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005128:	4b9d      	ldr	r3, [pc, #628]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800512a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800512e:	4a9c      	ldr	r2, [pc, #624]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005130:	f043 0301 	orr.w	r3, r3, #1
 8005134:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fe feb2 	bl	8003ea0 <HAL_GetTick>
 800513c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800513e:	e008      	b.n	8005152 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005140:	f7fe feae 	bl	8003ea0 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d901      	bls.n	8005152 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	e12b      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005152:	4b93      	ldr	r3, [pc, #588]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <HAL_RCC_OscConfig+0x5cc>
 8005160:	e01b      	b.n	800519a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005162:	4b8f      	ldr	r3, [pc, #572]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005164:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005168:	4a8d      	ldr	r2, [pc, #564]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800516a:	f023 0301 	bic.w	r3, r3, #1
 800516e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005172:	f7fe fe95 	bl	8003ea0 <HAL_GetTick>
 8005176:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005178:	e008      	b.n	800518c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800517a:	f7fe fe91 	bl	8003ea0 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	2b02      	cmp	r3, #2
 8005186:	d901      	bls.n	800518c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e10e      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800518c:	4b84      	ldr	r3, [pc, #528]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800518e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1ef      	bne.n	800517a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 8102 	beq.w	80053a8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f040 80c5 	bne.w	8005338 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80051ae:	4b7c      	ldr	r3, [pc, #496]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f003 0203 	and.w	r2, r3, #3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	429a      	cmp	r2, r3
 80051c0:	d12c      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051cc:	3b01      	subs	r3, #1
 80051ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d123      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d11b      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d113      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	085b      	lsrs	r3, r3, #1
 8005200:	3b01      	subs	r3, #1
 8005202:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005204:	429a      	cmp	r2, r3
 8005206:	d109      	bne.n	800521c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	3b01      	subs	r3, #1
 8005216:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005218:	429a      	cmp	r2, r3
 800521a:	d067      	beq.n	80052ec <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	2b0c      	cmp	r3, #12
 8005220:	d062      	beq.n	80052e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005222:	4b5f      	ldr	r3, [pc, #380]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e0bb      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005232:	4b5b      	ldr	r3, [pc, #364]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a5a      	ldr	r2, [pc, #360]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800523c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800523e:	f7fe fe2f 	bl	8003ea0 <HAL_GetTick>
 8005242:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005246:	f7fe fe2b 	bl	8003ea0 <HAL_GetTick>
 800524a:	4602      	mov	r2, r0
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0a8      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005258:	4b51      	ldr	r3, [pc, #324]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f0      	bne.n	8005246 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005264:	4b4e      	ldr	r3, [pc, #312]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	4b4e      	ldr	r3, [pc, #312]	; (80053a4 <HAL_RCC_OscConfig+0x830>)
 800526a:	4013      	ands	r3, r2
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005274:	3a01      	subs	r2, #1
 8005276:	0112      	lsls	r2, r2, #4
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800527e:	0212      	lsls	r2, r2, #8
 8005280:	4311      	orrs	r1, r2
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005286:	0852      	lsrs	r2, r2, #1
 8005288:	3a01      	subs	r2, #1
 800528a:	0552      	lsls	r2, r2, #21
 800528c:	4311      	orrs	r1, r2
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005292:	0852      	lsrs	r2, r2, #1
 8005294:	3a01      	subs	r2, #1
 8005296:	0652      	lsls	r2, r2, #25
 8005298:	4311      	orrs	r1, r2
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800529e:	06d2      	lsls	r2, r2, #27
 80052a0:	430a      	orrs	r2, r1
 80052a2:	493f      	ldr	r1, [pc, #252]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80052a8:	4b3d      	ldr	r3, [pc, #244]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a3c      	ldr	r2, [pc, #240]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052b4:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	4a39      	ldr	r2, [pc, #228]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052c0:	f7fe fdee 	bl	8003ea0 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fe fdea 	bl	8003ea0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e067      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052da:	4b31      	ldr	r3, [pc, #196]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052e6:	e05f      	b.n	80053a8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e05e      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ec:	4b2c      	ldr	r3, [pc, #176]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d157      	bne.n	80053a8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a28      	ldr	r2, [pc, #160]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 80052fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005302:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005304:	4b26      	ldr	r3, [pc, #152]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800530a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800530e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005310:	f7fe fdc6 	bl	8003ea0 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005318:	f7fe fdc2 	bl	8003ea0 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b02      	cmp	r3, #2
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e03f      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800532a:	4b1d      	ldr	r3, [pc, #116]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0f0      	beq.n	8005318 <HAL_RCC_OscConfig+0x7a4>
 8005336:	e037      	b.n	80053a8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b0c      	cmp	r3, #12
 800533c:	d02d      	beq.n	800539a <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005348:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800534a:	4b15      	ldr	r3, [pc, #84]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d105      	bne.n	8005362 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005356:	4b12      	ldr	r3, [pc, #72]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	4a11      	ldr	r2, [pc, #68]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800535c:	f023 0303 	bic.w	r3, r3, #3
 8005360:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005362:	4b0f      	ldr	r3, [pc, #60]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	4a0e      	ldr	r2, [pc, #56]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 8005368:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800536c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005370:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005372:	f7fe fd95 	bl	8003ea0 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005378:	e008      	b.n	800538c <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800537a:	f7fe fd91 	bl	8003ea0 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	2b02      	cmp	r3, #2
 8005386:	d901      	bls.n	800538c <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	e00e      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800538c:	4b04      	ldr	r3, [pc, #16]	; (80053a0 <HAL_RCC_OscConfig+0x82c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1f0      	bne.n	800537a <HAL_RCC_OscConfig+0x806>
 8005398:	e006      	b.n	80053a8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e005      	b.n	80053aa <HAL_RCC_OscConfig+0x836>
 800539e:	bf00      	nop
 80053a0:	40021000 	.word	0x40021000
 80053a4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3720      	adds	r7, #32
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop

080053b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d101      	bne.n	80053c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e0c8      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053c8:	4b66      	ldr	r3, [pc, #408]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d910      	bls.n	80053f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b63      	ldr	r3, [pc, #396]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f023 0207 	bic.w	r2, r3, #7
 80053de:	4961      	ldr	r1, [pc, #388]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053e6:	4b5f      	ldr	r3, [pc, #380]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d001      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0b0      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d04c      	beq.n	800549e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b03      	cmp	r3, #3
 800540a:	d107      	bne.n	800541c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800540c:	4b56      	ldr	r3, [pc, #344]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d121      	bne.n	800545c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e09e      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d107      	bne.n	8005434 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005424:	4b50      	ldr	r3, [pc, #320]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d115      	bne.n	800545c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e092      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d107      	bne.n	800544c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800543c:	4b4a      	ldr	r3, [pc, #296]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d109      	bne.n	800545c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e086      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544c:	4b46      	ldr	r3, [pc, #280]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e07e      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800545c:	4b42      	ldr	r3, [pc, #264]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f023 0203 	bic.w	r2, r3, #3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	493f      	ldr	r1, [pc, #252]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800546a:	4313      	orrs	r3, r2
 800546c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546e:	f7fe fd17 	bl	8003ea0 <HAL_GetTick>
 8005472:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005474:	e00a      	b.n	800548c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005476:	f7fe fd13 	bl	8003ea0 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	f241 3288 	movw	r2, #5000	; 0x1388
 8005484:	4293      	cmp	r3, r2
 8005486:	d901      	bls.n	800548c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e066      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548c:	4b36      	ldr	r3, [pc, #216]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 020c 	and.w	r2, r3, #12
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	429a      	cmp	r2, r3
 800549c:	d1eb      	bne.n	8005476 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d008      	beq.n	80054bc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054aa:	4b2f      	ldr	r3, [pc, #188]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	492c      	ldr	r1, [pc, #176]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054bc:	4b29      	ldr	r3, [pc, #164]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0307 	and.w	r3, r3, #7
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d210      	bcs.n	80054ec <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b26      	ldr	r3, [pc, #152]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 0207 	bic.w	r2, r3, #7
 80054d2:	4924      	ldr	r1, [pc, #144]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b22      	ldr	r3, [pc, #136]	; (8005564 <HAL_RCC_ClockConfig+0x1b0>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e036      	b.n	800555a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d008      	beq.n	800550a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f8:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4918      	ldr	r1, [pc, #96]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d009      	beq.n	800552a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4910      	ldr	r1, [pc, #64]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 8005526:	4313      	orrs	r3, r2
 8005528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800552a:	f000 f825 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 800552e:	4602      	mov	r2, r0
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <HAL_RCC_ClockConfig+0x1b4>)
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	490c      	ldr	r1, [pc, #48]	; (800556c <HAL_RCC_ClockConfig+0x1b8>)
 800553c:	5ccb      	ldrb	r3, [r1, r3]
 800553e:	f003 031f 	and.w	r3, r3, #31
 8005542:	fa22 f303 	lsr.w	r3, r2, r3
 8005546:	4a0a      	ldr	r2, [pc, #40]	; (8005570 <HAL_RCC_ClockConfig+0x1bc>)
 8005548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800554a:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <HAL_RCC_ClockConfig+0x1c0>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fe fc56 	bl	8003e00 <HAL_InitTick>
 8005554:	4603      	mov	r3, r0
 8005556:	72fb      	strb	r3, [r7, #11]

  return status;
 8005558:	7afb      	ldrb	r3, [r7, #11]
}
 800555a:	4618      	mov	r0, r3
 800555c:	3710      	adds	r7, #16
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	40022000 	.word	0x40022000
 8005568:	40021000 	.word	0x40021000
 800556c:	080091dc 	.word	0x080091dc
 8005570:	20000004 	.word	0x20000004
 8005574:	20000008 	.word	0x20000008

08005578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005578:	b480      	push	{r7}
 800557a:	b089      	sub	sp, #36	; 0x24
 800557c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800557e:	2300      	movs	r3, #0
 8005580:	61fb      	str	r3, [r7, #28]
 8005582:	2300      	movs	r3, #0
 8005584:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005586:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f003 030c 	and.w	r3, r3, #12
 800558e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005590:	4b3b      	ldr	r3, [pc, #236]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f003 0303 	and.w	r3, r3, #3
 8005598:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d005      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0x34>
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d121      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d11e      	bne.n	80055ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055ac:	4b34      	ldr	r3, [pc, #208]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d107      	bne.n	80055c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055be:	0a1b      	lsrs	r3, r3, #8
 80055c0:	f003 030f 	and.w	r3, r3, #15
 80055c4:	61fb      	str	r3, [r7, #28]
 80055c6:	e005      	b.n	80055d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055c8:	4b2d      	ldr	r3, [pc, #180]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	091b      	lsrs	r3, r3, #4
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055d4:	4a2b      	ldr	r2, [pc, #172]	; (8005684 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10d      	bne.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e8:	e00a      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	2b04      	cmp	r3, #4
 80055ee:	d102      	bne.n	80055f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055f0:	4b25      	ldr	r3, [pc, #148]	; (8005688 <HAL_RCC_GetSysClockFreq+0x110>)
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	e004      	b.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d101      	bne.n	8005600 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80055fc:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCC_GetSysClockFreq+0x114>)
 80055fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b0c      	cmp	r3, #12
 8005604:	d134      	bne.n	8005670 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005606:	4b1e      	ldr	r3, [pc, #120]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d003      	beq.n	800561e <HAL_RCC_GetSysClockFreq+0xa6>
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b03      	cmp	r3, #3
 800561a:	d003      	beq.n	8005624 <HAL_RCC_GetSysClockFreq+0xac>
 800561c:	e005      	b.n	800562a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800561e:	4b1a      	ldr	r3, [pc, #104]	; (8005688 <HAL_RCC_GetSysClockFreq+0x110>)
 8005620:	617b      	str	r3, [r7, #20]
      break;
 8005622:	e005      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005624:	4b19      	ldr	r3, [pc, #100]	; (800568c <HAL_RCC_GetSysClockFreq+0x114>)
 8005626:	617b      	str	r3, [r7, #20]
      break;
 8005628:	e002      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	617b      	str	r3, [r7, #20]
      break;
 800562e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005630:	4b13      	ldr	r3, [pc, #76]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	3301      	adds	r3, #1
 800563c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800563e:	4b10      	ldr	r3, [pc, #64]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	fb02 f203 	mul.w	r2, r2, r3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	fbb2 f3f3 	udiv	r3, r2, r3
 8005654:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005656:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <HAL_RCC_GetSysClockFreq+0x108>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	0e5b      	lsrs	r3, r3, #25
 800565c:	f003 0303 	and.w	r3, r3, #3
 8005660:	3301      	adds	r3, #1
 8005662:	005b      	lsls	r3, r3, #1
 8005664:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	fbb2 f3f3 	udiv	r3, r2, r3
 800566e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005670:	69bb      	ldr	r3, [r7, #24]
}
 8005672:	4618      	mov	r0, r3
 8005674:	3724      	adds	r7, #36	; 0x24
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	080091f4 	.word	0x080091f4
 8005688:	00f42400 	.word	0x00f42400
 800568c:	007a1200 	.word	0x007a1200

08005690 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000004 	.word	0x20000004

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b06      	ldr	r3, [pc, #24]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a1b      	lsrs	r3, r3, #8
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4904      	ldr	r1, [pc, #16]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	f003 031f 	and.w	r3, r3, #31
 80056c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	40021000 	.word	0x40021000
 80056d0:	080091ec 	.word	0x080091ec

080056d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056d8:	f7ff ffda 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056dc:	4602      	mov	r2, r0
 80056de:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	0adb      	lsrs	r3, r3, #11
 80056e4:	f003 0307 	and.w	r3, r3, #7
 80056e8:	4904      	ldr	r1, [pc, #16]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ea:	5ccb      	ldrb	r3, [r1, r3]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000
 80056fc:	080091ec 	.word	0x080091ec

08005700 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005708:	2300      	movs	r3, #0
 800570a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800570c:	4b2a      	ldr	r3, [pc, #168]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d003      	beq.n	8005720 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005718:	f7ff f9c8 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 800571c:	6178      	str	r0, [r7, #20]
 800571e:	e014      	b.n	800574a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005720:	4b25      	ldr	r3, [pc, #148]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	4a24      	ldr	r2, [pc, #144]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572a:	6593      	str	r3, [r2, #88]	; 0x58
 800572c:	4b22      	ldr	r3, [pc, #136]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800572e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005738:	f7ff f9b8 	bl	8004aac <HAL_PWREx_GetVoltageRange>
 800573c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005750:	d10b      	bne.n	800576a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b80      	cmp	r3, #128	; 0x80
 8005756:	d919      	bls.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2ba0      	cmp	r3, #160	; 0xa0
 800575c:	d902      	bls.n	8005764 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800575e:	2302      	movs	r3, #2
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e013      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005764:	2301      	movs	r3, #1
 8005766:	613b      	str	r3, [r7, #16]
 8005768:	e010      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b80      	cmp	r3, #128	; 0x80
 800576e:	d902      	bls.n	8005776 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005770:	2303      	movs	r3, #3
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e00a      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2b80      	cmp	r3, #128	; 0x80
 800577a:	d102      	bne.n	8005782 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800577c:	2302      	movs	r3, #2
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	e004      	b.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b70      	cmp	r3, #112	; 0x70
 8005786:	d101      	bne.n	800578c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005788:	2301      	movs	r3, #1
 800578a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800578c:	4b0b      	ldr	r3, [pc, #44]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f023 0207 	bic.w	r2, r3, #7
 8005794:	4909      	ldr	r1, [pc, #36]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800579c:	4b07      	ldr	r3, [pc, #28]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	d001      	beq.n	80057ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	40021000 	.word	0x40021000
 80057bc:	40022000 	.word	0x40022000

080057c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057c8:	2300      	movs	r3, #0
 80057ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d031      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057e4:	d01a      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ea:	d814      	bhi.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f4:	d10f      	bne.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057f6:	4b5d      	ldr	r3, [pc, #372]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	4a5c      	ldr	r2, [pc, #368]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005800:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005802:	e00c      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3304      	adds	r3, #4
 8005808:	2100      	movs	r1, #0
 800580a:	4618      	mov	r0, r3
 800580c:	f000 fa44 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005810:	4603      	mov	r3, r0
 8005812:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005814:	e003      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	74fb      	strb	r3, [r7, #19]
      break;
 800581a:	e000      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800581c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800581e:	7cfb      	ldrb	r3, [r7, #19]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005824:	4b51      	ldr	r3, [pc, #324]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005832:	494e      	ldr	r1, [pc, #312]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800583a:	e001      	b.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	7cfb      	ldrb	r3, [r7, #19]
 800583e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 809e 	beq.w	800598a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800584e:	2300      	movs	r3, #0
 8005850:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005852:	4b46      	ldr	r3, [pc, #280]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800585e:	2301      	movs	r3, #1
 8005860:	e000      	b.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005862:	2300      	movs	r3, #0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00d      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005868:	4b40      	ldr	r3, [pc, #256]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800586a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800586c:	4a3f      	ldr	r2, [pc, #252]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800586e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005872:	6593      	str	r3, [r2, #88]	; 0x58
 8005874:	4b3d      	ldr	r3, [pc, #244]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800587c:	60bb      	str	r3, [r7, #8]
 800587e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005880:	2301      	movs	r3, #1
 8005882:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005884:	4b3a      	ldr	r3, [pc, #232]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a39      	ldr	r2, [pc, #228]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800588a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005890:	f7fe fb06 	bl	8003ea0 <HAL_GetTick>
 8005894:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005896:	e009      	b.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005898:	f7fe fb02 	bl	8003ea0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d902      	bls.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	74fb      	strb	r3, [r7, #19]
        break;
 80058aa:	e005      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ac:	4b30      	ldr	r3, [pc, #192]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0ef      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80058b8:	7cfb      	ldrb	r3, [r7, #19]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d15a      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058be:	4b2b      	ldr	r3, [pc, #172]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01e      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058d4:	697a      	ldr	r2, [r7, #20]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d019      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058da:	4b24      	ldr	r3, [pc, #144]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058e6:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058f6:	4b1d      	ldr	r3, [pc, #116]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005906:	4a19      	ldr	r2, [pc, #100]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d016      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fe fac2 	bl	8003ea0 <HAL_GetTick>
 800591c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591e:	e00b      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005920:	f7fe fabe 	bl	8003ea0 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	f241 3288 	movw	r2, #5000	; 0x1388
 800592e:	4293      	cmp	r3, r2
 8005930:	d902      	bls.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005932:	2303      	movs	r3, #3
 8005934:	74fb      	strb	r3, [r7, #19]
            break;
 8005936:	e006      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800593a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0ec      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005946:	7cfb      	ldrb	r3, [r7, #19]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594c:	4b07      	ldr	r3, [pc, #28]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800594e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005952:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800595a:	4904      	ldr	r1, [pc, #16]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595c:	4313      	orrs	r3, r2
 800595e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005962:	e009      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	74bb      	strb	r3, [r7, #18]
 8005968:	e006      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000
 8005970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005978:	7c7b      	ldrb	r3, [r7, #17]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800597e:	4b9e      	ldr	r3, [pc, #632]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	4a9d      	ldr	r2, [pc, #628]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005988:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005996:	4b98      	ldr	r3, [pc, #608]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f023 0203 	bic.w	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	4994      	ldr	r1, [pc, #592]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0302 	and.w	r3, r3, #2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059b8:	4b8f      	ldr	r3, [pc, #572]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 020c 	bic.w	r2, r3, #12
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	498c      	ldr	r1, [pc, #560]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80059da:	4b87      	ldr	r3, [pc, #540]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e8:	4983      	ldr	r1, [pc, #524]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00a      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059fc:	4b7e      	ldr	r3, [pc, #504]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0a:	497b      	ldr	r1, [pc, #492]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00a      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a1e:	4b76      	ldr	r3, [pc, #472]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4972      	ldr	r1, [pc, #456]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00a      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a40:	4b6d      	ldr	r3, [pc, #436]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a46:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	496a      	ldr	r1, [pc, #424]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00a      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a62:	4b65      	ldr	r3, [pc, #404]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a70:	4961      	ldr	r1, [pc, #388]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00a      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a84:	4b5c      	ldr	r3, [pc, #368]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a92:	4959      	ldr	r1, [pc, #356]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005aa6:	4b54      	ldr	r3, [pc, #336]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	4950      	ldr	r1, [pc, #320]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ace:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad6:	4948      	ldr	r1, [pc, #288]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005aea:	4b43      	ldr	r3, [pc, #268]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005af0:	f023 0203 	bic.w	r2, r3, #3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af8:	493f      	ldr	r1, [pc, #252]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d028      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b0c:	4b3a      	ldr	r3, [pc, #232]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1a:	4937      	ldr	r1, [pc, #220]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d106      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b32      	ldr	r3, [pc, #200]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
 8005b38:	e011      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3304      	adds	r3, #4
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 f8a4 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d001      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005b5a:	7cfb      	ldrb	r3, [r7, #19]
 8005b5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d028      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005b6a:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	491f      	ldr	r1, [pc, #124]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b88:	d106      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b8a:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b94:	60d3      	str	r3, [r2, #12]
 8005b96:	e011      	b.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ba0:	d10c      	bne.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 f875 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005bb8:	7cfb      	ldrb	r3, [r7, #19]
 8005bba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d02b      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd6:	4908      	ldr	r1, [pc, #32]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be6:	d109      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b03      	ldr	r3, [pc, #12]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a02      	ldr	r2, [pc, #8]	; (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
 8005bf4:	e014      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c04:	d10c      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	3304      	adds	r3, #4
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 f843 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005c12:	4603      	mov	r3, r0
 8005c14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c16:	7cfb      	ldrb	r3, [r7, #19]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d001      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005c1c:	7cfb      	ldrb	r3, [r7, #19]
 8005c1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01c      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c2c:	4b19      	ldr	r3, [pc, #100]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c3a:	4916      	ldr	r1, [pc, #88]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4a:	d10c      	bne.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 f820 	bl	8005c98 <RCCEx_PLLSAI1_Config>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c5c:	7cfb      	ldrb	r3, [r7, #19]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005c62:	7cfb      	ldrb	r3, [r7, #19]
 8005c64:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00a      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c72:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c78:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	4904      	ldr	r1, [pc, #16]	; (8005c94 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c88:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3718      	adds	r7, #24
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	40021000 	.word	0x40021000

08005c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005ca6:	4b74      	ldr	r3, [pc, #464]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cb2:	4b71      	ldr	r3, [pc, #452]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f003 0203 	and.w	r2, r3, #3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d10d      	bne.n	8005cde <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
       ||
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005cca:	4b6b      	ldr	r3, [pc, #428]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	091b      	lsrs	r3, r3, #4
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
       ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d047      	beq.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	73fb      	strb	r3, [r7, #15]
 8005ce2:	e044      	b.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d018      	beq.n	8005d1e <RCCEx_PLLSAI1_Config+0x86>
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d825      	bhi.n	8005d3c <RCCEx_PLLSAI1_Config+0xa4>
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d002      	beq.n	8005cfa <RCCEx_PLLSAI1_Config+0x62>
 8005cf4:	2b02      	cmp	r3, #2
 8005cf6:	d009      	beq.n	8005d0c <RCCEx_PLLSAI1_Config+0x74>
 8005cf8:	e020      	b.n	8005d3c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cfa:	4b5f      	ldr	r3, [pc, #380]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d11d      	bne.n	8005d42 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d0a:	e01a      	b.n	8005d42 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d0c:	4b5a      	ldr	r3, [pc, #360]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d116      	bne.n	8005d46 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d1c:	e013      	b.n	8005d46 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d10f      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d2a:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d109      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d3a:	e006      	b.n	8005d4a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e004      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d42:	bf00      	nop
 8005d44:	e002      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d46:	bf00      	nop
 8005d48:	e000      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005d4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d10d      	bne.n	8005d6e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005d52:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	011b      	lsls	r3, r3, #4
 8005d66:	430b      	orrs	r3, r1
 8005d68:	4943      	ldr	r1, [pc, #268]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d17c      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d74:	4b40      	ldr	r3, [pc, #256]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fe f88e 	bl	8003ea0 <HAL_GetTick>
 8005d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d86:	e009      	b.n	8005d9c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d88:	f7fe f88a 	bl	8003ea0 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
        break;
 8005d9a:	e005      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d9c:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ef      	bne.n	8005d88 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d15f      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d110      	bne.n	8005dd6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db4:	4b30      	ldr	r3, [pc, #192]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005dbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	6892      	ldr	r2, [r2, #8]
 8005dc4:	0211      	lsls	r1, r2, #8
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	68d2      	ldr	r2, [r2, #12]
 8005dca:	06d2      	lsls	r2, r2, #27
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	492a      	ldr	r1, [pc, #168]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
 8005dd4:	e027      	b.n	8005e26 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d112      	bne.n	8005e02 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6892      	ldr	r2, [r2, #8]
 8005dec:	0211      	lsls	r1, r2, #8
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	6912      	ldr	r2, [r2, #16]
 8005df2:	0852      	lsrs	r2, r2, #1
 8005df4:	3a01      	subs	r2, #1
 8005df6:	0552      	lsls	r2, r2, #21
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	491f      	ldr	r1, [pc, #124]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	610b      	str	r3, [r1, #16]
 8005e00:	e011      	b.n	8005e26 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e02:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e0a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	0211      	lsls	r1, r2, #8
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6952      	ldr	r2, [r2, #20]
 8005e18:	0852      	lsrs	r2, r2, #1
 8005e1a:	3a01      	subs	r2, #1
 8005e1c:	0652      	lsls	r2, r2, #25
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	4915      	ldr	r1, [pc, #84]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e30:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e32:	f7fe f835 	bl	8003ea0 <HAL_GetTick>
 8005e36:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e38:	e009      	b.n	8005e4e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e3a:	f7fe f831 	bl	8003ea0 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d902      	bls.n	8005e4e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005e4c:	e005      	b.n	8005e5a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e4e:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d0ef      	beq.n	8005e3a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005e5a:	7bfb      	ldrb	r3, [r7, #15]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d106      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e60:	4b05      	ldr	r3, [pc, #20]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e62:	691a      	ldr	r2, [r3, #16]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	4903      	ldr	r1, [pc, #12]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40021000 	.word	0x40021000

08005e7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b082      	sub	sp, #8
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e049      	b.n	8005f22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d106      	bne.n	8005ea8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7fd fdb6 	bl	8003a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2202      	movs	r2, #2
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	3304      	adds	r3, #4
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4610      	mov	r0, r2
 8005ebc:	f000 ff78 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d001      	beq.n	8005f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e038      	b.n	8005fb6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2202      	movs	r2, #2
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIM_Base_Start+0x98>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_TIM_Base_Start+0x48>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d009      	beq.n	8005f74 <HAL_TIM_Base_Start+0x48>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <HAL_TIM_Base_Start+0x9c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIM_Base_Start+0x48>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_TIM_Base_Start+0xa0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d115      	bne.n	8005fa0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <HAL_TIM_Base_Start+0xa4>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d015      	beq.n	8005fb2 <HAL_TIM_Base_Start+0x86>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d011      	beq.n	8005fb2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e008      	b.n	8005fb2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e000      	b.n	8005fb4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	00010007 	.word	0x00010007

08005fd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b085      	sub	sp, #20
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d001      	beq.n	8005fec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e040      	b.n	800606e <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2202      	movs	r2, #2
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0201 	orr.w	r2, r2, #1
 8006002:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1c      	ldr	r2, [pc, #112]	; (800607c <HAL_TIM_Base_Start_IT+0xa8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x58>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006016:	d009      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x58>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a18      	ldr	r2, [pc, #96]	; (8006080 <HAL_TIM_Base_Start_IT+0xac>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <HAL_TIM_Base_Start_IT+0x58>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a17      	ldr	r2, [pc, #92]	; (8006084 <HAL_TIM_Base_Start_IT+0xb0>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d115      	bne.n	8006058 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_TIM_Base_Start_IT+0xb4>)
 8006034:	4013      	ands	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b06      	cmp	r3, #6
 800603c:	d015      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x96>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006044:	d011      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0201 	orr.w	r2, r2, #1
 8006054:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006056:	e008      	b.n	800606a <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0201 	orr.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]
 8006068:	e000      	b.n	800606c <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40012c00 	.word	0x40012c00
 8006080:	40000400 	.word	0x40000400
 8006084:	40014000 	.word	0x40014000
 8006088:	00010007 	.word	0x00010007

0800608c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68da      	ldr	r2, [r3, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6a1a      	ldr	r2, [r3, #32]
 80060aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80060ae:	4013      	ands	r3, r2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10f      	bne.n	80060d4 <HAL_TIM_Base_Stop_IT+0x48>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6a1a      	ldr	r2, [r3, #32]
 80060ba:	f240 4344 	movw	r3, #1092	; 0x444
 80060be:	4013      	ands	r3, r2
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_TIM_Base_Stop_IT+0x48>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0201 	bic.w	r2, r2, #1
 80060d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060ea:	b580      	push	{r7, lr}
 80060ec:	b082      	sub	sp, #8
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e049      	b.n	8006190 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	d106      	bne.n	8006116 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f841 	bl	8006198 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2202      	movs	r2, #2
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3304      	adds	r3, #4
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f000 fe41 	bl	8006db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2201      	movs	r2, #1
 8006142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2201      	movs	r2, #1
 800615a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2201      	movs	r2, #1
 800616a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3708      	adds	r7, #8
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d109      	bne.n	80061d0 <HAL_TIM_PWM_Start+0x24>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	bf14      	ite	ne
 80061c8:	2301      	movne	r3, #1
 80061ca:	2300      	moveq	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e03c      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d109      	bne.n	80061ea <HAL_TIM_PWM_Start+0x3e>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	bf14      	ite	ne
 80061e2:	2301      	movne	r3, #1
 80061e4:	2300      	moveq	r3, #0
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	e02f      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b08      	cmp	r3, #8
 80061ee:	d109      	bne.n	8006204 <HAL_TIM_PWM_Start+0x58>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	bf14      	ite	ne
 80061fc:	2301      	movne	r3, #1
 80061fe:	2300      	moveq	r3, #0
 8006200:	b2db      	uxtb	r3, r3
 8006202:	e022      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b0c      	cmp	r3, #12
 8006208:	d109      	bne.n	800621e <HAL_TIM_PWM_Start+0x72>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b01      	cmp	r3, #1
 8006214:	bf14      	ite	ne
 8006216:	2301      	movne	r3, #1
 8006218:	2300      	moveq	r3, #0
 800621a:	b2db      	uxtb	r3, r3
 800621c:	e015      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b10      	cmp	r3, #16
 8006222:	d109      	bne.n	8006238 <HAL_TIM_PWM_Start+0x8c>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800622a:	b2db      	uxtb	r3, r3
 800622c:	2b01      	cmp	r3, #1
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e008      	b.n	800624a <HAL_TIM_PWM_Start+0x9e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800623e:	b2db      	uxtb	r3, r3
 8006240:	2b01      	cmp	r3, #1
 8006242:	bf14      	ite	ne
 8006244:	2301      	movne	r3, #1
 8006246:	2300      	moveq	r3, #0
 8006248:	b2db      	uxtb	r3, r3
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e083      	b.n	800635a <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <HAL_TIM_PWM_Start+0xb6>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2202      	movs	r2, #2
 800625c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006260:	e023      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b04      	cmp	r3, #4
 8006266:	d104      	bne.n	8006272 <HAL_TIM_PWM_Start+0xc6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2202      	movs	r2, #2
 800626c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006270:	e01b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d104      	bne.n	8006282 <HAL_TIM_PWM_Start+0xd6>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2202      	movs	r2, #2
 800627c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006280:	e013      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b0c      	cmp	r3, #12
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0xe6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006290:	e00b      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b10      	cmp	r3, #16
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0xf6>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062a0:	e003      	b.n	80062aa <HAL_TIM_PWM_Start+0xfe>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2202      	movs	r2, #2
 80062a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f001 f992 	bl	80075dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a29      	ldr	r2, [pc, #164]	; (8006364 <HAL_TIM_PWM_Start+0x1b8>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d009      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x12a>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a28      	ldr	r2, [pc, #160]	; (8006368 <HAL_TIM_PWM_Start+0x1bc>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d004      	beq.n	80062d6 <HAL_TIM_PWM_Start+0x12a>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a26      	ldr	r2, [pc, #152]	; (800636c <HAL_TIM_PWM_Start+0x1c0>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d101      	bne.n	80062da <HAL_TIM_PWM_Start+0x12e>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <HAL_TIM_PWM_Start+0x130>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1b      	ldr	r2, [pc, #108]	; (8006364 <HAL_TIM_PWM_Start+0x1b8>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_TIM_PWM_Start+0x16c>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d009      	beq.n	8006318 <HAL_TIM_PWM_Start+0x16c>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_TIM_PWM_Start+0x1c4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_PWM_Start+0x16c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a15      	ldr	r2, [pc, #84]	; (8006368 <HAL_TIM_PWM_Start+0x1bc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d115      	bne.n	8006344 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_TIM_PWM_Start+0x1c8>)
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d015      	beq.n	8006356 <HAL_TIM_PWM_Start+0x1aa>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d011      	beq.n	8006356 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e008      	b.n	8006356 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e000      	b.n	8006358 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	40012c00 	.word	0x40012c00
 8006368:	40014000 	.word	0x40014000
 800636c:	40014400 	.word	0x40014400
 8006370:	40000400 	.word	0x40000400
 8006374:	00010007 	.word	0x00010007

08006378 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2200      	movs	r2, #0
 8006388:	6839      	ldr	r1, [r7, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 f926 	bl	80075dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a39      	ldr	r2, [pc, #228]	; (800647c <HAL_TIM_PWM_Stop+0x104>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d009      	beq.n	80063ae <HAL_TIM_PWM_Stop+0x36>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a38      	ldr	r2, [pc, #224]	; (8006480 <HAL_TIM_PWM_Stop+0x108>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d004      	beq.n	80063ae <HAL_TIM_PWM_Stop+0x36>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a36      	ldr	r2, [pc, #216]	; (8006484 <HAL_TIM_PWM_Stop+0x10c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d101      	bne.n	80063b2 <HAL_TIM_PWM_Stop+0x3a>
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <HAL_TIM_PWM_Stop+0x3c>
 80063b2:	2300      	movs	r3, #0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d017      	beq.n	80063e8 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	f241 1311 	movw	r3, #4369	; 0x1111
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10f      	bne.n	80063e8 <HAL_TIM_PWM_Stop+0x70>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6a1a      	ldr	r2, [r3, #32]
 80063ce:	f240 4344 	movw	r3, #1092	; 0x444
 80063d2:	4013      	ands	r3, r2
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d107      	bne.n	80063e8 <HAL_TIM_PWM_Stop+0x70>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6a1a      	ldr	r2, [r3, #32]
 80063ee:	f241 1311 	movw	r3, #4369	; 0x1111
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10f      	bne.n	8006418 <HAL_TIM_PWM_Stop+0xa0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6a1a      	ldr	r2, [r3, #32]
 80063fe:	f240 4344 	movw	r3, #1092	; 0x444
 8006402:	4013      	ands	r3, r2
 8006404:	2b00      	cmp	r3, #0
 8006406:	d107      	bne.n	8006418 <HAL_TIM_PWM_Stop+0xa0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f022 0201 	bic.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d104      	bne.n	8006428 <HAL_TIM_PWM_Stop+0xb0>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006426:	e023      	b.n	8006470 <HAL_TIM_PWM_Stop+0xf8>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b04      	cmp	r3, #4
 800642c:	d104      	bne.n	8006438 <HAL_TIM_PWM_Stop+0xc0>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2201      	movs	r2, #1
 8006432:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006436:	e01b      	b.n	8006470 <HAL_TIM_PWM_Stop+0xf8>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b08      	cmp	r3, #8
 800643c:	d104      	bne.n	8006448 <HAL_TIM_PWM_Stop+0xd0>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006446:	e013      	b.n	8006470 <HAL_TIM_PWM_Stop+0xf8>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b0c      	cmp	r3, #12
 800644c:	d104      	bne.n	8006458 <HAL_TIM_PWM_Stop+0xe0>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2201      	movs	r2, #1
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006456:	e00b      	b.n	8006470 <HAL_TIM_PWM_Stop+0xf8>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b10      	cmp	r3, #16
 800645c:	d104      	bne.n	8006468 <HAL_TIM_PWM_Stop+0xf0>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2201      	movs	r2, #1
 8006462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006466:	e003      	b.n	8006470 <HAL_TIM_PWM_Stop+0xf8>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	40012c00 	.word	0x40012c00
 8006480:	40014000 	.word	0x40014000
 8006484:	40014400 	.word	0x40014400

08006488 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d101      	bne.n	800649c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e097      	b.n	80065cc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d106      	bne.n	80064b6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f7fd fb2f 	bl	8003b14 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2202      	movs	r2, #2
 80064ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	6812      	ldr	r2, [r2, #0]
 80064c8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80064cc:	f023 0307 	bic.w	r3, r3, #7
 80064d0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	3304      	adds	r3, #4
 80064da:	4619      	mov	r1, r3
 80064dc:	4610      	mov	r0, r2
 80064de:	f000 fc67 	bl	8006db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	6a1b      	ldr	r3, [r3, #32]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	4313      	orrs	r3, r2
 8006502:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650a:	f023 0303 	bic.w	r3, r3, #3
 800650e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	021b      	lsls	r3, r3, #8
 800651a:	4313      	orrs	r3, r2
 800651c:	693a      	ldr	r2, [r7, #16]
 800651e:	4313      	orrs	r3, r2
 8006520:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006528:	f023 030c 	bic.w	r3, r3, #12
 800652c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006534:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006538:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68da      	ldr	r2, [r3, #12]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	021b      	lsls	r3, r3, #8
 8006544:	4313      	orrs	r3, r2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	011a      	lsls	r2, r3, #4
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	031b      	lsls	r3, r3, #12
 8006558:	4313      	orrs	r3, r2
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006566:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800656e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685a      	ldr	r2, [r3, #4]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	695b      	ldr	r3, [r3, #20]
 8006578:	011b      	lsls	r3, r3, #4
 800657a:	4313      	orrs	r3, r2
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065ca:	2300      	movs	r3, #0
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80065e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80065ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d110      	bne.n	8006626 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d102      	bne.n	8006610 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800660a:	7b7b      	ldrb	r3, [r7, #13]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d001      	beq.n	8006614 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e069      	b.n	80066e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2202      	movs	r2, #2
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006624:	e031      	b.n	800668a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	2b04      	cmp	r3, #4
 800662a:	d110      	bne.n	800664e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800662c:	7bbb      	ldrb	r3, [r7, #14]
 800662e:	2b01      	cmp	r3, #1
 8006630:	d102      	bne.n	8006638 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006632:	7b3b      	ldrb	r3, [r7, #12]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d001      	beq.n	800663c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e055      	b.n	80066e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2202      	movs	r2, #2
 8006648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800664c:	e01d      	b.n	800668a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800664e:	7bfb      	ldrb	r3, [r7, #15]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d108      	bne.n	8006666 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	2b01      	cmp	r3, #1
 8006658:	d105      	bne.n	8006666 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800665a:	7b7b      	ldrb	r3, [r7, #13]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d102      	bne.n	8006666 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006660:	7b3b      	ldrb	r3, [r7, #12]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e03e      	b.n	80066e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2202      	movs	r2, #2
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2202      	movs	r2, #2
 8006676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2202      	movs	r2, #2
 8006686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <HAL_TIM_Encoder_Start+0xc4>
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	2b04      	cmp	r3, #4
 8006694:	d008      	beq.n	80066a8 <HAL_TIM_Encoder_Start+0xd4>
 8006696:	e00f      	b.n	80066b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2201      	movs	r2, #1
 800669e:	2100      	movs	r1, #0
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 ff9b 	bl	80075dc <TIM_CCxChannelCmd>
      break;
 80066a6:	e016      	b.n	80066d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2201      	movs	r2, #1
 80066ae:	2104      	movs	r1, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ff93 	bl	80075dc <TIM_CCxChannelCmd>
      break;
 80066b6:	e00e      	b.n	80066d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2201      	movs	r2, #1
 80066be:	2100      	movs	r1, #0
 80066c0:	4618      	mov	r0, r3
 80066c2:	f000 ff8b 	bl	80075dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2201      	movs	r2, #1
 80066cc:	2104      	movs	r1, #4
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 ff84 	bl	80075dc <TIM_CCxChannelCmd>
      break;
 80066d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f042 0201 	orr.w	r2, r2, #1
 80066e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b02      	cmp	r3, #2
 8006704:	d122      	bne.n	800674c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0302 	and.w	r3, r3, #2
 8006710:	2b02      	cmp	r3, #2
 8006712:	d11b      	bne.n	800674c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0202 	mvn.w	r2, #2
 800671c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d003      	beq.n	800673a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 fb1e 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 8006738:	e005      	b.n	8006746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 fb10 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fb21 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b04      	cmp	r3, #4
 8006758:	d122      	bne.n	80067a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b04      	cmp	r3, #4
 8006766:	d11b      	bne.n	80067a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0204 	mvn.w	r2, #4
 8006770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 faf4 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fae6 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 faf7 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	d122      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f003 0308 	and.w	r3, r3, #8
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d11b      	bne.n	80067f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f06f 0208 	mvn.w	r2, #8
 80067c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2204      	movs	r2, #4
 80067ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0303 	and.w	r3, r3, #3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 faca 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 80067e0:	e005      	b.n	80067ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 fabc 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f000 facd 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	f003 0310 	and.w	r3, r3, #16
 80067fe:	2b10      	cmp	r3, #16
 8006800:	d122      	bne.n	8006848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f003 0310 	and.w	r3, r3, #16
 800680c:	2b10      	cmp	r3, #16
 800680e:	d11b      	bne.n	8006848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f06f 0210 	mvn.w	r2, #16
 8006818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2208      	movs	r2, #8
 800681e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 faa0 	bl	8006d74 <HAL_TIM_IC_CaptureCallback>
 8006834:	e005      	b.n	8006842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa92 	bl	8006d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 faa3 	bl	8006d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	f003 0301 	and.w	r3, r3, #1
 8006852:	2b01      	cmp	r3, #1
 8006854:	d10e      	bne.n	8006874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b01      	cmp	r3, #1
 8006862:	d107      	bne.n	8006874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f06f 0201 	mvn.w	r2, #1
 800686c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb fd48 	bl	8002304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	691b      	ldr	r3, [r3, #16]
 800687a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687e:	2b80      	cmp	r3, #128	; 0x80
 8006880:	d10e      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688c:	2b80      	cmp	r3, #128	; 0x80
 800688e:	d107      	bne.n	80068a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 ffb4 	bl	8007808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068ae:	d10e      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d107      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 ffa7 	bl	800781c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d10e      	bne.n	80068fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e6:	2b40      	cmp	r3, #64	; 0x40
 80068e8:	d107      	bne.n	80068fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fa51 	bl	8006d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	f003 0320 	and.w	r3, r3, #32
 8006904:	2b20      	cmp	r3, #32
 8006906:	d10e      	bne.n	8006926 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b20      	cmp	r3, #32
 8006914:	d107      	bne.n	8006926 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f06f 0220 	mvn.w	r2, #32
 800691e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 ff67 	bl	80077f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006926:	bf00      	nop
 8006928:	3708      	adds	r7, #8
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
	...

08006930 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006942:	2b01      	cmp	r3, #1
 8006944:	d101      	bne.n	800694a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006946:	2302      	movs	r3, #2
 8006948:	e0fd      	b.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x216>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b14      	cmp	r3, #20
 8006956:	f200 80f0 	bhi.w	8006b3a <HAL_TIM_PWM_ConfigChannel+0x20a>
 800695a:	a201      	add	r2, pc, #4	; (adr r2, 8006960 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800695c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006960:	080069b5 	.word	0x080069b5
 8006964:	08006b3b 	.word	0x08006b3b
 8006968:	08006b3b 	.word	0x08006b3b
 800696c:	08006b3b 	.word	0x08006b3b
 8006970:	080069f5 	.word	0x080069f5
 8006974:	08006b3b 	.word	0x08006b3b
 8006978:	08006b3b 	.word	0x08006b3b
 800697c:	08006b3b 	.word	0x08006b3b
 8006980:	08006a37 	.word	0x08006a37
 8006984:	08006b3b 	.word	0x08006b3b
 8006988:	08006b3b 	.word	0x08006b3b
 800698c:	08006b3b 	.word	0x08006b3b
 8006990:	08006a77 	.word	0x08006a77
 8006994:	08006b3b 	.word	0x08006b3b
 8006998:	08006b3b 	.word	0x08006b3b
 800699c:	08006b3b 	.word	0x08006b3b
 80069a0:	08006ab9 	.word	0x08006ab9
 80069a4:	08006b3b 	.word	0x08006b3b
 80069a8:	08006b3b 	.word	0x08006b3b
 80069ac:	08006b3b 	.word	0x08006b3b
 80069b0:	08006af9 	.word	0x08006af9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 fa66 	bl	8006e8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f042 0208 	orr.w	r2, r2, #8
 80069ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0204 	bic.w	r2, r2, #4
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6999      	ldr	r1, [r3, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691a      	ldr	r2, [r3, #16]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	619a      	str	r2, [r3, #24]
      break;
 80069f2:	e0a3      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68b9      	ldr	r1, [r7, #8]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fac2 	bl	8006f84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	699a      	ldr	r2, [r3, #24]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	6999      	ldr	r1, [r3, #24]
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	021a      	lsls	r2, r3, #8
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	619a      	str	r2, [r3, #24]
      break;
 8006a34:	e082      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fb1b 	bl	8007078 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f042 0208 	orr.w	r2, r2, #8
 8006a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0204 	bic.w	r2, r2, #4
 8006a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691a      	ldr	r2, [r3, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	430a      	orrs	r2, r1
 8006a72:	61da      	str	r2, [r3, #28]
      break;
 8006a74:	e062      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68b9      	ldr	r1, [r7, #8]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f000 fb73 	bl	8007168 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69da      	ldr	r2, [r3, #28]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69da      	ldr	r2, [r3, #28]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69d9      	ldr	r1, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	691b      	ldr	r3, [r3, #16]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	61da      	str	r2, [r3, #28]
      break;
 8006ab6:	e041      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68b9      	ldr	r1, [r7, #8]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f000 fbb0 	bl	8007224 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f042 0208 	orr.w	r2, r2, #8
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 0204 	bic.w	r2, r2, #4
 8006ae2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	691a      	ldr	r2, [r3, #16]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006af6:	e021      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68b9      	ldr	r1, [r7, #8]
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fbe8 	bl	80072d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	691b      	ldr	r3, [r3, #16]
 8006b2e:	021a      	lsls	r2, r3, #8
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006b38:	e000      	b.n	8006b3c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006b3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop

08006b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIM_ConfigClockSource+0x18>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e0b5      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x184>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ba4:	d03e      	beq.n	8006c24 <HAL_TIM_ConfigClockSource+0xd4>
 8006ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006baa:	f200 8087 	bhi.w	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bb2:	f000 8085 	beq.w	8006cc0 <HAL_TIM_ConfigClockSource+0x170>
 8006bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bba:	d87f      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bbc:	2b70      	cmp	r3, #112	; 0x70
 8006bbe:	d01a      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8006bc0:	2b70      	cmp	r3, #112	; 0x70
 8006bc2:	d87b      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bc4:	2b60      	cmp	r3, #96	; 0x60
 8006bc6:	d050      	beq.n	8006c6a <HAL_TIM_ConfigClockSource+0x11a>
 8006bc8:	2b60      	cmp	r3, #96	; 0x60
 8006bca:	d877      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bcc:	2b50      	cmp	r3, #80	; 0x50
 8006bce:	d03c      	beq.n	8006c4a <HAL_TIM_ConfigClockSource+0xfa>
 8006bd0:	2b50      	cmp	r3, #80	; 0x50
 8006bd2:	d873      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bd4:	2b40      	cmp	r3, #64	; 0x40
 8006bd6:	d058      	beq.n	8006c8a <HAL_TIM_ConfigClockSource+0x13a>
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d86f      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b30      	cmp	r3, #48	; 0x30
 8006bde:	d064      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x15a>
 8006be0:	2b30      	cmp	r3, #48	; 0x30
 8006be2:	d86b      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d060      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x15a>
 8006be8:	2b20      	cmp	r3, #32
 8006bea:	d867      	bhi.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d05c      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x15a>
 8006bf0:	2b10      	cmp	r3, #16
 8006bf2:	d05a      	beq.n	8006caa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bf4:	e062      	b.n	8006cbc <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6818      	ldr	r0, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	6899      	ldr	r1, [r3, #8]
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f000 fcc9 	bl	800759c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c18:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	609a      	str	r2, [r3, #8]
      break;
 8006c22:	e04e      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6899      	ldr	r1, [r3, #8]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	685a      	ldr	r2, [r3, #4]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	f000 fcb2 	bl	800759c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	689a      	ldr	r2, [r3, #8]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c46:	609a      	str	r2, [r3, #8]
      break;
 8006c48:	e03b      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6818      	ldr	r0, [r3, #0]
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	6859      	ldr	r1, [r3, #4]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	461a      	mov	r2, r3
 8006c58:	f000 fc26 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	2150      	movs	r1, #80	; 0x50
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fc7f 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006c68:	e02b      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6818      	ldr	r0, [r3, #0]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	6859      	ldr	r1, [r3, #4]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f000 fc45 	bl	8007506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2160      	movs	r1, #96	; 0x60
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fc6f 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006c88:	e01b      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6818      	ldr	r0, [r3, #0]
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	6859      	ldr	r1, [r3, #4]
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	461a      	mov	r2, r3
 8006c98:	f000 fc06 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2140      	movs	r1, #64	; 0x40
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fc5f 	bl	8007566 <TIM_ITRx_SetConfig>
      break;
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	4610      	mov	r0, r2
 8006cb6:	f000 fc56 	bl	8007566 <TIM_ITRx_SetConfig>
        break;
 8006cba:	e002      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006cbc:	bf00      	nop
 8006cbe:	e000      	b.n	8006cc2 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006cc0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d101      	bne.n	8006cf4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	e031      	b.n	8006d58 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006d04:	6839      	ldr	r1, [r7, #0]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 fb3e 	bl	8007388 <TIM_SlaveTimer_SetConfig>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e018      	b.n	8006d58 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d34:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68da      	ldr	r2, [r3, #12]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d44:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d68:	bf00      	nop
 8006d6a:	370c      	adds	r7, #12
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	4a2e      	ldr	r2, [pc, #184]	; (8006e7c <TIM_Base_SetConfig+0xcc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d007      	beq.n	8006dd8 <TIM_Base_SetConfig+0x28>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dce:	d003      	beq.n	8006dd8 <TIM_Base_SetConfig+0x28>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a2b      	ldr	r2, [pc, #172]	; (8006e80 <TIM_Base_SetConfig+0xd0>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d108      	bne.n	8006dea <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4a23      	ldr	r2, [pc, #140]	; (8006e7c <TIM_Base_SetConfig+0xcc>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d00f      	beq.n	8006e12 <TIM_Base_SetConfig+0x62>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df8:	d00b      	beq.n	8006e12 <TIM_Base_SetConfig+0x62>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a20      	ldr	r2, [pc, #128]	; (8006e80 <TIM_Base_SetConfig+0xd0>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d007      	beq.n	8006e12 <TIM_Base_SetConfig+0x62>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <TIM_Base_SetConfig+0xd4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d003      	beq.n	8006e12 <TIM_Base_SetConfig+0x62>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	4a1e      	ldr	r2, [pc, #120]	; (8006e88 <TIM_Base_SetConfig+0xd8>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d108      	bne.n	8006e24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	68fa      	ldr	r2, [r7, #12]
 8006e36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a0c      	ldr	r2, [pc, #48]	; (8006e7c <TIM_Base_SetConfig+0xcc>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d007      	beq.n	8006e60 <TIM_Base_SetConfig+0xb0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a0c      	ldr	r2, [pc, #48]	; (8006e84 <TIM_Base_SetConfig+0xd4>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_Base_SetConfig+0xb0>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a0b      	ldr	r2, [pc, #44]	; (8006e88 <TIM_Base_SetConfig+0xd8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d103      	bne.n	8006e68 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	691a      	ldr	r2, [r3, #16]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	615a      	str	r2, [r3, #20]
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	40012c00 	.word	0x40012c00
 8006e80:	40000400 	.word	0x40000400
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400

08006e8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	f023 0201 	bic.w	r2, r3, #1
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f023 0303 	bic.w	r3, r3, #3
 8006ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f023 0302 	bic.w	r3, r3, #2
 8006ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <TIM_OC1_SetConfig+0xec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d007      	beq.n	8006efc <TIM_OC1_SetConfig+0x70>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <TIM_OC1_SetConfig+0xf0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d003      	beq.n	8006efc <TIM_OC1_SetConfig+0x70>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a22      	ldr	r2, [pc, #136]	; (8006f80 <TIM_OC1_SetConfig+0xf4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d10c      	bne.n	8006f16 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	f023 0308 	bic.w	r3, r3, #8
 8006f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	68db      	ldr	r3, [r3, #12]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f023 0304 	bic.w	r3, r3, #4
 8006f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	4a17      	ldr	r2, [pc, #92]	; (8006f78 <TIM_OC1_SetConfig+0xec>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d007      	beq.n	8006f2e <TIM_OC1_SetConfig+0xa2>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	4a16      	ldr	r2, [pc, #88]	; (8006f7c <TIM_OC1_SetConfig+0xf0>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d003      	beq.n	8006f2e <TIM_OC1_SetConfig+0xa2>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a15      	ldr	r2, [pc, #84]	; (8006f80 <TIM_OC1_SetConfig+0xf4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d111      	bne.n	8006f52 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	4313      	orrs	r3, r2
 8006f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	693a      	ldr	r2, [r7, #16]
 8006f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	685a      	ldr	r2, [r3, #4]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	621a      	str	r2, [r3, #32]
}
 8006f6c:	bf00      	nop
 8006f6e:	371c      	adds	r7, #28
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40014400 	.word	0x40014400

08006f84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b087      	sub	sp, #28
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	f023 0210 	bic.w	r2, r3, #16
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a1b      	ldr	r3, [r3, #32]
 8006f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0320 	bic.w	r3, r3, #32
 8006fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	4a22      	ldr	r2, [pc, #136]	; (800706c <TIM_OC2_SetConfig+0xe8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d10d      	bne.n	8007004 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	011b      	lsls	r3, r3, #4
 8006ff6:	697a      	ldr	r2, [r7, #20]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007002:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a19      	ldr	r2, [pc, #100]	; (800706c <TIM_OC2_SetConfig+0xe8>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d007      	beq.n	800701c <TIM_OC2_SetConfig+0x98>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	4a18      	ldr	r2, [pc, #96]	; (8007070 <TIM_OC2_SetConfig+0xec>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d003      	beq.n	800701c <TIM_OC2_SetConfig+0x98>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	4a17      	ldr	r2, [pc, #92]	; (8007074 <TIM_OC2_SetConfig+0xf0>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d113      	bne.n	8007044 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007022:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800702a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	695b      	ldr	r3, [r3, #20]
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	693a      	ldr	r2, [r7, #16]
 8007034:	4313      	orrs	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	699b      	ldr	r3, [r3, #24]
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	693a      	ldr	r2, [r7, #16]
 8007040:	4313      	orrs	r3, r2
 8007042:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	697a      	ldr	r2, [r7, #20]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40014000 	.word	0x40014000
 8007074:	40014400 	.word	0x40014400

08007078 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6a1b      	ldr	r3, [r3, #32]
 8007092:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0303 	bic.w	r3, r3, #3
 80070b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80070be:	697b      	ldr	r3, [r7, #20]
 80070c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a21      	ldr	r2, [pc, #132]	; (800715c <TIM_OC3_SetConfig+0xe4>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d10d      	bne.n	80070f6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070da:	697b      	ldr	r3, [r7, #20]
 80070dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80070e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	021b      	lsls	r3, r3, #8
 80070e8:	697a      	ldr	r2, [r7, #20]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80070f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a18      	ldr	r2, [pc, #96]	; (800715c <TIM_OC3_SetConfig+0xe4>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d007      	beq.n	800710e <TIM_OC3_SetConfig+0x96>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <TIM_OC3_SetConfig+0xe8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d003      	beq.n	800710e <TIM_OC3_SetConfig+0x96>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a16      	ldr	r2, [pc, #88]	; (8007164 <TIM_OC3_SetConfig+0xec>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d113      	bne.n	8007136 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007114:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800711c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	011b      	lsls	r3, r3, #4
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	4313      	orrs	r3, r2
 8007128:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	699b      	ldr	r3, [r3, #24]
 800712e:	011b      	lsls	r3, r3, #4
 8007130:	693a      	ldr	r2, [r7, #16]
 8007132:	4313      	orrs	r3, r2
 8007134:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	685a      	ldr	r2, [r3, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	621a      	str	r2, [r3, #32]
}
 8007150:	bf00      	nop
 8007152:	371c      	adds	r7, #28
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	40012c00 	.word	0x40012c00
 8007160:	40014000 	.word	0x40014000
 8007164:	40014400 	.word	0x40014400

08007168 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007168:	b480      	push	{r7}
 800716a:	b087      	sub	sp, #28
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a1b      	ldr	r3, [r3, #32]
 8007182:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	021b      	lsls	r3, r3, #8
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	4313      	orrs	r3, r2
 80071ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80071b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	031b      	lsls	r3, r3, #12
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <TIM_OC4_SetConfig+0xb0>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_OC4_SetConfig+0x74>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a13      	ldr	r2, [pc, #76]	; (800721c <TIM_OC4_SetConfig+0xb4>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC4_SetConfig+0x74>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a12      	ldr	r2, [pc, #72]	; (8007220 <TIM_OC4_SetConfig+0xb8>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d109      	bne.n	80071f0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80071e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	019b      	lsls	r3, r3, #6
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	693a      	ldr	r2, [r7, #16]
 8007208:	621a      	str	r2, [r3, #32]
}
 800720a:	bf00      	nop
 800720c:	371c      	adds	r7, #28
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40012c00 	.word	0x40012c00
 800721c:	40014000 	.word	0x40014000
 8007220:	40014400 	.word	0x40014400

08007224 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6a1b      	ldr	r3, [r3, #32]
 8007232:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6a1b      	ldr	r3, [r3, #32]
 800723e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	4313      	orrs	r3, r2
 8007260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007268:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	4313      	orrs	r3, r2
 8007274:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <TIM_OC5_SetConfig+0xa4>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d007      	beq.n	800728e <TIM_OC5_SetConfig+0x6a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a12      	ldr	r2, [pc, #72]	; (80072cc <TIM_OC5_SetConfig+0xa8>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d003      	beq.n	800728e <TIM_OC5_SetConfig+0x6a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	4a11      	ldr	r2, [pc, #68]	; (80072d0 <TIM_OC5_SetConfig+0xac>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d109      	bne.n	80072a2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007294:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	021b      	lsls	r3, r3, #8
 800729c:	697a      	ldr	r2, [r7, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	685a      	ldr	r2, [r3, #4]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	621a      	str	r2, [r3, #32]
}
 80072bc:	bf00      	nop
 80072be:	371c      	adds	r7, #28
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40014000 	.word	0x40014000
 80072d0:	40014400 	.word	0x40014400

080072d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	68fa      	ldr	r2, [r7, #12]
 8007310:	4313      	orrs	r3, r2
 8007312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800731a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	051b      	lsls	r3, r3, #20
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a14      	ldr	r2, [pc, #80]	; (800737c <TIM_OC6_SetConfig+0xa8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d007      	beq.n	8007340 <TIM_OC6_SetConfig+0x6c>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a13      	ldr	r2, [pc, #76]	; (8007380 <TIM_OC6_SetConfig+0xac>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC6_SetConfig+0x6c>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <TIM_OC6_SetConfig+0xb0>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d109      	bne.n	8007354 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	695b      	ldr	r3, [r3, #20]
 800734c:	029b      	lsls	r3, r3, #10
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40012c00 	.word	0x40012c00
 8007380:	40014000 	.word	0x40014000
 8007384:	40014400 	.word	0x40014400

08007388 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	4313      	orrs	r3, r2
 80073aa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	4313      	orrs	r3, r2
 80073c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	2b70      	cmp	r3, #112	; 0x70
 80073d0:	d01a      	beq.n	8007408 <TIM_SlaveTimer_SetConfig+0x80>
 80073d2:	2b70      	cmp	r3, #112	; 0x70
 80073d4:	d860      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073d6:	2b60      	cmp	r3, #96	; 0x60
 80073d8:	d054      	beq.n	8007484 <TIM_SlaveTimer_SetConfig+0xfc>
 80073da:	2b60      	cmp	r3, #96	; 0x60
 80073dc:	d85c      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073de:	2b50      	cmp	r3, #80	; 0x50
 80073e0:	d046      	beq.n	8007470 <TIM_SlaveTimer_SetConfig+0xe8>
 80073e2:	2b50      	cmp	r3, #80	; 0x50
 80073e4:	d858      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073e6:	2b40      	cmp	r3, #64	; 0x40
 80073e8:	d019      	beq.n	800741e <TIM_SlaveTimer_SetConfig+0x96>
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d854      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073ee:	2b30      	cmp	r3, #48	; 0x30
 80073f0:	d054      	beq.n	800749c <TIM_SlaveTimer_SetConfig+0x114>
 80073f2:	2b30      	cmp	r3, #48	; 0x30
 80073f4:	d850      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073f6:	2b20      	cmp	r3, #32
 80073f8:	d050      	beq.n	800749c <TIM_SlaveTimer_SetConfig+0x114>
 80073fa:	2b20      	cmp	r3, #32
 80073fc:	d84c      	bhi.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d04c      	beq.n	800749c <TIM_SlaveTimer_SetConfig+0x114>
 8007402:	2b10      	cmp	r3, #16
 8007404:	d04a      	beq.n	800749c <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007406:	e047      	b.n	8007498 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6818      	ldr	r0, [r3, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68d9      	ldr	r1, [r3, #12]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	f000 f8c0 	bl	800759c <TIM_ETR_SetConfig>
      break;
 800741c:	e03f      	b.n	800749e <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b05      	cmp	r3, #5
 8007424:	d101      	bne.n	800742a <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e03a      	b.n	80074a0 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6a1b      	ldr	r3, [r3, #32]
 8007430:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a1a      	ldr	r2, [r3, #32]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	699b      	ldr	r3, [r3, #24]
 8007448:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007450:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	011b      	lsls	r3, r3, #4
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	4313      	orrs	r3, r2
 800745c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	621a      	str	r2, [r3, #32]
      break;
 800746e:	e016      	b.n	800749e <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	6899      	ldr	r1, [r3, #8]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	461a      	mov	r2, r3
 800747e:	f000 f813 	bl	80074a8 <TIM_TI1_ConfigInputStage>
      break;
 8007482:	e00c      	b.n	800749e <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6818      	ldr	r0, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	6899      	ldr	r1, [r3, #8]
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	461a      	mov	r2, r3
 8007492:	f000 f838 	bl	8007506 <TIM_TI2_ConfigInputStage>
      break;
 8007496:	e002      	b.n	800749e <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8007498:	bf00      	nop
 800749a:	e000      	b.n	800749e <TIM_SlaveTimer_SetConfig+0x116>
        break;
 800749c:	bf00      	nop
  }
  return HAL_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3718      	adds	r7, #24
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	60f8      	str	r0, [r7, #12]
 80074b0:	60b9      	str	r1, [r7, #8]
 80074b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	f023 0201 	bic.w	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	699b      	ldr	r3, [r3, #24]
 80074ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	f023 030a 	bic.w	r3, r3, #10
 80074e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	621a      	str	r2, [r3, #32]
}
 80074fa:	bf00      	nop
 80074fc:	371c      	adds	r7, #28
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007506:	b480      	push	{r7}
 8007508:	b087      	sub	sp, #28
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0210 	bic.w	r2, r3, #16
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007530:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	4313      	orrs	r3, r2
 800753a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007542:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	693a      	ldr	r2, [r7, #16]
 800754a:	4313      	orrs	r3, r2
 800754c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	693a      	ldr	r2, [r7, #16]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007566:	b480      	push	{r7}
 8007568:	b085      	sub	sp, #20
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
 800756e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800757e:	683a      	ldr	r2, [r7, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4313      	orrs	r3, r2
 8007584:	f043 0307 	orr.w	r3, r3, #7
 8007588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	68fa      	ldr	r2, [r7, #12]
 800758e:	609a      	str	r2, [r3, #8]
}
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	021a      	lsls	r2, r3, #8
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	431a      	orrs	r2, r3
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	697a      	ldr	r2, [r7, #20]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	371c      	adds	r7, #28
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	f003 031f 	and.w	r3, r3, #31
 80075ee:	2201      	movs	r2, #1
 80075f0:	fa02 f303 	lsl.w	r3, r2, r3
 80075f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1a      	ldr	r2, [r3, #32]
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	43db      	mvns	r3, r3
 80075fe:	401a      	ands	r2, r3
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a1a      	ldr	r2, [r3, #32]
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f003 031f 	and.w	r3, r3, #31
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	fa01 f303 	lsl.w	r3, r1, r3
 8007614:	431a      	orrs	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007638:	2b01      	cmp	r3, #1
 800763a:	d101      	bne.n	8007640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800763c:	2302      	movs	r3, #2
 800763e:	e054      	b.n	80076ea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2202      	movs	r2, #2
 800764c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a24      	ldr	r2, [pc, #144]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d108      	bne.n	800767c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007670:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	4313      	orrs	r3, r2
 800768c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	68fa      	ldr	r2, [r7, #12]
 8007694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00e      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a8:	d009      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a13      	ldr	r2, [pc, #76]	; (80076fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d004      	beq.n	80076be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a11      	ldr	r2, [pc, #68]	; (8007700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d10c      	bne.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	689b      	ldr	r3, [r3, #8]
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00
 80076fc:	40000400 	.word	0x40000400
 8007700:	40014000 	.word	0x40014000

08007704 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800771c:	2302      	movs	r3, #2
 800771e:	e060      	b.n	80077e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	4313      	orrs	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	4313      	orrs	r3, r2
 8007742:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	4313      	orrs	r3, r2
 8007750:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	4313      	orrs	r3, r2
 800776c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	695b      	ldr	r3, [r3, #20]
 8007778:	4313      	orrs	r3, r2
 800777a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007786:	4313      	orrs	r3, r2
 8007788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	041b      	lsls	r3, r3, #16
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a14      	ldr	r2, [pc, #80]	; (80077f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d115      	bne.n	80077d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ae:	051b      	lsls	r3, r3, #20
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	69db      	ldr	r3, [r3, #28]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40012c00 	.word	0x40012c00

080077f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b083      	sub	sp, #12
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077fc:	bf00      	nop
 80077fe:	370c      	adds	r7, #12
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr

08007808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007824:	bf00      	nop
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b082      	sub	sp, #8
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d101      	bne.n	8007842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e040      	b.n	80078c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fc fa2e 	bl	8003cb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	; 0x24
 800785c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0201 	bic.w	r2, r2, #1
 800786c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f82c 	bl	80078cc <UART_SetConfig>
 8007874:	4603      	mov	r3, r0
 8007876:	2b01      	cmp	r3, #1
 8007878:	d101      	bne.n	800787e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e022      	b.n	80078c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa7c 	bl	8007d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800789a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	689a      	ldr	r2, [r3, #8]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fb03 	bl	8007ec8 <UART_CheckIdleState>
 80078c2:	4603      	mov	r3, r0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3708      	adds	r7, #8
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078cc:	b5b0      	push	{r4, r5, r7, lr}
 80078ce:	b088      	sub	sp, #32
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	431a      	orrs	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	431a      	orrs	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	681a      	ldr	r2, [r3, #0]
 80078f6:	4ba4      	ldr	r3, [pc, #656]	; (8007b88 <UART_SetConfig+0x2bc>)
 80078f8:	4013      	ands	r3, r2
 80078fa:	687a      	ldr	r2, [r7, #4]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	69f9      	ldr	r1, [r7, #28]
 8007900:	430b      	orrs	r3, r1
 8007902:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a99      	ldr	r2, [pc, #612]	; (8007b8c <UART_SetConfig+0x2c0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	69fa      	ldr	r2, [r7, #28]
 8007930:	4313      	orrs	r3, r2
 8007932:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	69fa      	ldr	r2, [r7, #28]
 8007944:	430a      	orrs	r2, r1
 8007946:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a90      	ldr	r2, [pc, #576]	; (8007b90 <UART_SetConfig+0x2c4>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d121      	bne.n	8007996 <UART_SetConfig+0xca>
 8007952:	4b90      	ldr	r3, [pc, #576]	; (8007b94 <UART_SetConfig+0x2c8>)
 8007954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007958:	f003 0303 	and.w	r3, r3, #3
 800795c:	2b03      	cmp	r3, #3
 800795e:	d817      	bhi.n	8007990 <UART_SetConfig+0xc4>
 8007960:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <UART_SetConfig+0x9c>)
 8007962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007966:	bf00      	nop
 8007968:	08007979 	.word	0x08007979
 800796c:	08007985 	.word	0x08007985
 8007970:	0800797f 	.word	0x0800797f
 8007974:	0800798b 	.word	0x0800798b
 8007978:	2301      	movs	r3, #1
 800797a:	76fb      	strb	r3, [r7, #27]
 800797c:	e0bc      	b.n	8007af8 <UART_SetConfig+0x22c>
 800797e:	2302      	movs	r3, #2
 8007980:	76fb      	strb	r3, [r7, #27]
 8007982:	e0b9      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007984:	2304      	movs	r3, #4
 8007986:	76fb      	strb	r3, [r7, #27]
 8007988:	e0b6      	b.n	8007af8 <UART_SetConfig+0x22c>
 800798a:	2308      	movs	r3, #8
 800798c:	76fb      	strb	r3, [r7, #27]
 800798e:	e0b3      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007990:	2310      	movs	r3, #16
 8007992:	76fb      	strb	r3, [r7, #27]
 8007994:	e0b0      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a7f      	ldr	r2, [pc, #508]	; (8007b98 <UART_SetConfig+0x2cc>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d132      	bne.n	8007a06 <UART_SetConfig+0x13a>
 80079a0:	4b7c      	ldr	r3, [pc, #496]	; (8007b94 <UART_SetConfig+0x2c8>)
 80079a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	d828      	bhi.n	8007a00 <UART_SetConfig+0x134>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0xe8>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079e9 	.word	0x080079e9
 80079b8:	08007a01 	.word	0x08007a01
 80079bc:	08007a01 	.word	0x08007a01
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	08007a01 	.word	0x08007a01
 80079cc:	08007a01 	.word	0x08007a01
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	080079ef 	.word	0x080079ef
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	080079fb 	.word	0x080079fb
 80079e8:	2300      	movs	r3, #0
 80079ea:	76fb      	strb	r3, [r7, #27]
 80079ec:	e084      	b.n	8007af8 <UART_SetConfig+0x22c>
 80079ee:	2302      	movs	r3, #2
 80079f0:	76fb      	strb	r3, [r7, #27]
 80079f2:	e081      	b.n	8007af8 <UART_SetConfig+0x22c>
 80079f4:	2304      	movs	r3, #4
 80079f6:	76fb      	strb	r3, [r7, #27]
 80079f8:	e07e      	b.n	8007af8 <UART_SetConfig+0x22c>
 80079fa:	2308      	movs	r3, #8
 80079fc:	76fb      	strb	r3, [r7, #27]
 80079fe:	e07b      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a00:	2310      	movs	r3, #16
 8007a02:	76fb      	strb	r3, [r7, #27]
 8007a04:	e078      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a64      	ldr	r2, [pc, #400]	; (8007b9c <UART_SetConfig+0x2d0>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d120      	bne.n	8007a52 <UART_SetConfig+0x186>
 8007a10:	4b60      	ldr	r3, [pc, #384]	; (8007b94 <UART_SetConfig+0x2c8>)
 8007a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a1a:	2b30      	cmp	r3, #48	; 0x30
 8007a1c:	d013      	beq.n	8007a46 <UART_SetConfig+0x17a>
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d814      	bhi.n	8007a4c <UART_SetConfig+0x180>
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d009      	beq.n	8007a3a <UART_SetConfig+0x16e>
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d810      	bhi.n	8007a4c <UART_SetConfig+0x180>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <UART_SetConfig+0x168>
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d006      	beq.n	8007a40 <UART_SetConfig+0x174>
 8007a32:	e00b      	b.n	8007a4c <UART_SetConfig+0x180>
 8007a34:	2300      	movs	r3, #0
 8007a36:	76fb      	strb	r3, [r7, #27]
 8007a38:	e05e      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	76fb      	strb	r3, [r7, #27]
 8007a3e:	e05b      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a40:	2304      	movs	r3, #4
 8007a42:	76fb      	strb	r3, [r7, #27]
 8007a44:	e058      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a46:	2308      	movs	r3, #8
 8007a48:	76fb      	strb	r3, [r7, #27]
 8007a4a:	e055      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	76fb      	strb	r3, [r7, #27]
 8007a50:	e052      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a52      	ldr	r2, [pc, #328]	; (8007ba0 <UART_SetConfig+0x2d4>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d120      	bne.n	8007a9e <UART_SetConfig+0x1d2>
 8007a5c:	4b4d      	ldr	r3, [pc, #308]	; (8007b94 <UART_SetConfig+0x2c8>)
 8007a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a66:	2bc0      	cmp	r3, #192	; 0xc0
 8007a68:	d013      	beq.n	8007a92 <UART_SetConfig+0x1c6>
 8007a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6c:	d814      	bhi.n	8007a98 <UART_SetConfig+0x1cc>
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d009      	beq.n	8007a86 <UART_SetConfig+0x1ba>
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d810      	bhi.n	8007a98 <UART_SetConfig+0x1cc>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <UART_SetConfig+0x1b4>
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d006      	beq.n	8007a8c <UART_SetConfig+0x1c0>
 8007a7e:	e00b      	b.n	8007a98 <UART_SetConfig+0x1cc>
 8007a80:	2300      	movs	r3, #0
 8007a82:	76fb      	strb	r3, [r7, #27]
 8007a84:	e038      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a86:	2302      	movs	r3, #2
 8007a88:	76fb      	strb	r3, [r7, #27]
 8007a8a:	e035      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	76fb      	strb	r3, [r7, #27]
 8007a90:	e032      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a92:	2308      	movs	r3, #8
 8007a94:	76fb      	strb	r3, [r7, #27]
 8007a96:	e02f      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	76fb      	strb	r3, [r7, #27]
 8007a9c:	e02c      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a3a      	ldr	r2, [pc, #232]	; (8007b8c <UART_SetConfig+0x2c0>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d125      	bne.n	8007af4 <UART_SetConfig+0x228>
 8007aa8:	4b3a      	ldr	r3, [pc, #232]	; (8007b94 <UART_SetConfig+0x2c8>)
 8007aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ab2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ab6:	d017      	beq.n	8007ae8 <UART_SetConfig+0x21c>
 8007ab8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007abc:	d817      	bhi.n	8007aee <UART_SetConfig+0x222>
 8007abe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac2:	d00b      	beq.n	8007adc <UART_SetConfig+0x210>
 8007ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ac8:	d811      	bhi.n	8007aee <UART_SetConfig+0x222>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <UART_SetConfig+0x20a>
 8007ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ad2:	d006      	beq.n	8007ae2 <UART_SetConfig+0x216>
 8007ad4:	e00b      	b.n	8007aee <UART_SetConfig+0x222>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	76fb      	strb	r3, [r7, #27]
 8007ada:	e00d      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007adc:	2302      	movs	r3, #2
 8007ade:	76fb      	strb	r3, [r7, #27]
 8007ae0:	e00a      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	76fb      	strb	r3, [r7, #27]
 8007ae6:	e007      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	76fb      	strb	r3, [r7, #27]
 8007aec:	e004      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007aee:	2310      	movs	r3, #16
 8007af0:	76fb      	strb	r3, [r7, #27]
 8007af2:	e001      	b.n	8007af8 <UART_SetConfig+0x22c>
 8007af4:	2310      	movs	r3, #16
 8007af6:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a23      	ldr	r2, [pc, #140]	; (8007b8c <UART_SetConfig+0x2c0>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	f040 8084 	bne.w	8007c0c <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b04:	7efb      	ldrb	r3, [r7, #27]
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d823      	bhi.n	8007b52 <UART_SetConfig+0x286>
 8007b0a:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <UART_SetConfig+0x244>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b35 	.word	0x08007b35
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b3d 	.word	0x08007b3d
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b43 	.word	0x08007b43
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b53 	.word	0x08007b53
 8007b2c:	08007b53 	.word	0x08007b53
 8007b30:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b34:	f7fd fdb8 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007b38:	6178      	str	r0, [r7, #20]
        break;
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <UART_SetConfig+0x2d8>)
 8007b3e:	617b      	str	r3, [r7, #20]
        break;
 8007b40:	e00c      	b.n	8007b5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fd fd19 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8007b46:	6178      	str	r0, [r7, #20]
        break;
 8007b48:	e008      	b.n	8007b5c <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	617b      	str	r3, [r7, #20]
        break;
 8007b50:	e004      	b.n	8007b5c <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	76bb      	strb	r3, [r7, #26]
        break;
 8007b5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8102 	beq.w	8007d68 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685a      	ldr	r2, [r3, #4]
 8007b68:	4613      	mov	r3, r2
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	697a      	ldr	r2, [r7, #20]
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d305      	bcc.n	8007b80 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d913      	bls.n	8007ba8 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	76bb      	strb	r3, [r7, #26]
 8007b84:	e0f0      	b.n	8007d68 <UART_SetConfig+0x49c>
 8007b86:	bf00      	nop
 8007b88:	efff69f3 	.word	0xefff69f3
 8007b8c:	40008000 	.word	0x40008000
 8007b90:	40013800 	.word	0x40013800
 8007b94:	40021000 	.word	0x40021000
 8007b98:	40004400 	.word	0x40004400
 8007b9c:	40004800 	.word	0x40004800
 8007ba0:	40004c00 	.word	0x40004c00
 8007ba4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	4618      	mov	r0, r3
 8007bac:	f04f 0100 	mov.w	r1, #0
 8007bb0:	f04f 0200 	mov.w	r2, #0
 8007bb4:	f04f 0300 	mov.w	r3, #0
 8007bb8:	020b      	lsls	r3, r1, #8
 8007bba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007bbe:	0202      	lsls	r2, r0, #8
 8007bc0:	6879      	ldr	r1, [r7, #4]
 8007bc2:	6849      	ldr	r1, [r1, #4]
 8007bc4:	0849      	lsrs	r1, r1, #1
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	f04f 0100 	mov.w	r1, #0
 8007bcc:	1814      	adds	r4, r2, r0
 8007bce:	eb43 0501 	adc.w	r5, r3, r1
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f9 f814 	bl	8000c0c <__aeabi_uldivmod>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4613      	mov	r3, r2
 8007bea:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bf2:	d308      	bcc.n	8007c06 <UART_SetConfig+0x33a>
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bfa:	d204      	bcs.n	8007c06 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	60da      	str	r2, [r3, #12]
 8007c04:	e0b0      	b.n	8007d68 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	76bb      	strb	r3, [r7, #26]
 8007c0a:	e0ad      	b.n	8007d68 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	69db      	ldr	r3, [r3, #28]
 8007c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c14:	d15c      	bne.n	8007cd0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007c16:	7efb      	ldrb	r3, [r7, #27]
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	d828      	bhi.n	8007c6e <UART_SetConfig+0x3a2>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <UART_SetConfig+0x358>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	08007c6f 	.word	0x08007c6f
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c6f 	.word	0x08007c6f
 8007c3c:	08007c6f 	.word	0x08007c6f
 8007c40:	08007c6f 	.word	0x08007c6f
 8007c44:	08007c67 	.word	0x08007c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c48:	f7fd fd2e 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007c4c:	6178      	str	r0, [r7, #20]
        break;
 8007c4e:	e013      	b.n	8007c78 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c50:	f7fd fd40 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007c54:	6178      	str	r0, [r7, #20]
        break;
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c58:	4b49      	ldr	r3, [pc, #292]	; (8007d80 <UART_SetConfig+0x4b4>)
 8007c5a:	617b      	str	r3, [r7, #20]
        break;
 8007c5c:	e00c      	b.n	8007c78 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c5e:	f7fd fc8b 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8007c62:	6178      	str	r0, [r7, #20]
        break;
 8007c64:	e008      	b.n	8007c78 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6a:	617b      	str	r3, [r7, #20]
        break;
 8007c6c:	e004      	b.n	8007c78 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	76bb      	strb	r3, [r7, #26]
        break;
 8007c76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d074      	beq.n	8007d68 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	005a      	lsls	r2, r3, #1
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	085b      	lsrs	r3, r3, #1
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	2b0f      	cmp	r3, #15
 8007c9a:	d916      	bls.n	8007cca <UART_SetConfig+0x3fe>
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca2:	d212      	bcs.n	8007cca <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	f023 030f 	bic.w	r3, r3, #15
 8007cac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f003 0307 	and.w	r3, r3, #7
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	89fb      	ldrh	r3, [r7, #14]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	89fa      	ldrh	r2, [r7, #14]
 8007cc6:	60da      	str	r2, [r3, #12]
 8007cc8:	e04e      	b.n	8007d68 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	76bb      	strb	r3, [r7, #26]
 8007cce:	e04b      	b.n	8007d68 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007cd0:	7efb      	ldrb	r3, [r7, #27]
 8007cd2:	2b08      	cmp	r3, #8
 8007cd4:	d827      	bhi.n	8007d26 <UART_SetConfig+0x45a>
 8007cd6:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x410>)
 8007cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d27 	.word	0x08007d27
 8007cec:	08007d17 	.word	0x08007d17
 8007cf0:	08007d27 	.word	0x08007d27
 8007cf4:	08007d27 	.word	0x08007d27
 8007cf8:	08007d27 	.word	0x08007d27
 8007cfc:	08007d1f 	.word	0x08007d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fd fcd2 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8007d04:	6178      	str	r0, [r7, #20]
        break;
 8007d06:	e013      	b.n	8007d30 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d08:	f7fd fce4 	bl	80056d4 <HAL_RCC_GetPCLK2Freq>
 8007d0c:	6178      	str	r0, [r7, #20]
        break;
 8007d0e:	e00f      	b.n	8007d30 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <UART_SetConfig+0x4b4>)
 8007d12:	617b      	str	r3, [r7, #20]
        break;
 8007d14:	e00c      	b.n	8007d30 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d16:	f7fd fc2f 	bl	8005578 <HAL_RCC_GetSysClockFreq>
 8007d1a:	6178      	str	r0, [r7, #20]
        break;
 8007d1c:	e008      	b.n	8007d30 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d22:	617b      	str	r3, [r7, #20]
        break;
 8007d24:	e004      	b.n	8007d30 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	76bb      	strb	r3, [r7, #26]
        break;
 8007d2e:	bf00      	nop
    }

    if (pclk != 0U)
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d018      	beq.n	8007d68 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	085a      	lsrs	r2, r3, #1
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	441a      	add	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b0f      	cmp	r3, #15
 8007d50:	d908      	bls.n	8007d64 <UART_SetConfig+0x498>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d58:	d204      	bcs.n	8007d64 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	60da      	str	r2, [r3, #12]
 8007d62:	e001      	b.n	8007d68 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2200      	movs	r2, #0
 8007d72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007d74:	7ebb      	ldrb	r3, [r7, #26]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3720      	adds	r7, #32
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d7e:	bf00      	nop
 8007d80:	00f42400 	.word	0x00f42400

08007d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00a      	beq.n	8007dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00a      	beq.n	8007df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	430a      	orrs	r2, r1
 8007df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d00a      	beq.n	8007e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	430a      	orrs	r2, r1
 8007e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d00a      	beq.n	8007e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	430a      	orrs	r2, r1
 8007e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	f003 0320 	and.w	r3, r3, #32
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00a      	beq.n	8007e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01a      	beq.n	8007e9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e82:	d10a      	bne.n	8007e9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d00a      	beq.n	8007ebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	605a      	str	r2, [r3, #4]
  }
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ed8:	f7fb ffe2 	bl	8003ea0 <HAL_GetTick>
 8007edc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
 8007ee8:	2b08      	cmp	r3, #8
 8007eea:	d10e      	bne.n	8007f0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ef0:	9300      	str	r3, [sp, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 f82d 	bl	8007f5a <UART_WaitOnFlagUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e023      	b.n	8007f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b04      	cmp	r3, #4
 8007f16:	d10e      	bne.n	8007f36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f817 	bl	8007f5a <UART_WaitOnFlagUntilTimeout>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d001      	beq.n	8007f36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e00d      	b.n	8007f52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2220      	movs	r2, #32
 8007f3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}

08007f5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f5a:	b580      	push	{r7, lr}
 8007f5c:	b084      	sub	sp, #16
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	60f8      	str	r0, [r7, #12]
 8007f62:	60b9      	str	r1, [r7, #8]
 8007f64:	603b      	str	r3, [r7, #0]
 8007f66:	4613      	mov	r3, r2
 8007f68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6a:	e05e      	b.n	800802a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f72:	d05a      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f74:	f7fb ff94 	bl	8003ea0 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d302      	bcc.n	8007f8a <UART_WaitOnFlagUntilTimeout+0x30>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d11b      	bne.n	8007fc2 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681a      	ldr	r2, [r3, #0]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f98:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	689a      	ldr	r2, [r3, #8]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f022 0201 	bic.w	r2, r2, #1
 8007fa8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2220      	movs	r2, #32
 8007fae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2220      	movs	r2, #32
 8007fb4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e043      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d02c      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	69db      	ldr	r3, [r3, #28]
 8007fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fde:	d124      	bne.n	800802a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe8:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ff8:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0201 	bic.w	r2, r2, #1
 8008008:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2220      	movs	r2, #32
 800800e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2220      	movs	r2, #32
 8008014:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e00f      	b.n	800804a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	69da      	ldr	r2, [r3, #28]
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	4013      	ands	r3, r2
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	429a      	cmp	r2, r3
 8008038:	bf0c      	ite	eq
 800803a:	2301      	moveq	r3, #1
 800803c:	2300      	movne	r3, #0
 800803e:	b2db      	uxtb	r3, r3
 8008040:	461a      	mov	r2, r3
 8008042:	79fb      	ldrb	r3, [r7, #7]
 8008044:	429a      	cmp	r2, r3
 8008046:	d091      	beq.n	8007f6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <__errno>:
 8008054:	4b01      	ldr	r3, [pc, #4]	; (800805c <__errno+0x8>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	20000010 	.word	0x20000010

08008060 <__libc_init_array>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	4d0d      	ldr	r5, [pc, #52]	; (8008098 <__libc_init_array+0x38>)
 8008064:	4c0d      	ldr	r4, [pc, #52]	; (800809c <__libc_init_array+0x3c>)
 8008066:	1b64      	subs	r4, r4, r5
 8008068:	10a4      	asrs	r4, r4, #2
 800806a:	2600      	movs	r6, #0
 800806c:	42a6      	cmp	r6, r4
 800806e:	d109      	bne.n	8008084 <__libc_init_array+0x24>
 8008070:	4d0b      	ldr	r5, [pc, #44]	; (80080a0 <__libc_init_array+0x40>)
 8008072:	4c0c      	ldr	r4, [pc, #48]	; (80080a4 <__libc_init_array+0x44>)
 8008074:	f001 f802 	bl	800907c <_init>
 8008078:	1b64      	subs	r4, r4, r5
 800807a:	10a4      	asrs	r4, r4, #2
 800807c:	2600      	movs	r6, #0
 800807e:	42a6      	cmp	r6, r4
 8008080:	d105      	bne.n	800808e <__libc_init_array+0x2e>
 8008082:	bd70      	pop	{r4, r5, r6, pc}
 8008084:	f855 3b04 	ldr.w	r3, [r5], #4
 8008088:	4798      	blx	r3
 800808a:	3601      	adds	r6, #1
 800808c:	e7ee      	b.n	800806c <__libc_init_array+0xc>
 800808e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008092:	4798      	blx	r3
 8008094:	3601      	adds	r6, #1
 8008096:	e7f2      	b.n	800807e <__libc_init_array+0x1e>
 8008098:	080092c4 	.word	0x080092c4
 800809c:	080092c4 	.word	0x080092c4
 80080a0:	080092c4 	.word	0x080092c4
 80080a4:	080092c8 	.word	0x080092c8

080080a8 <memset>:
 80080a8:	4402      	add	r2, r0
 80080aa:	4603      	mov	r3, r0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d100      	bne.n	80080b2 <memset+0xa>
 80080b0:	4770      	bx	lr
 80080b2:	f803 1b01 	strb.w	r1, [r3], #1
 80080b6:	e7f9      	b.n	80080ac <memset+0x4>

080080b8 <iprintf>:
 80080b8:	b40f      	push	{r0, r1, r2, r3}
 80080ba:	4b0a      	ldr	r3, [pc, #40]	; (80080e4 <iprintf+0x2c>)
 80080bc:	b513      	push	{r0, r1, r4, lr}
 80080be:	681c      	ldr	r4, [r3, #0]
 80080c0:	b124      	cbz	r4, 80080cc <iprintf+0x14>
 80080c2:	69a3      	ldr	r3, [r4, #24]
 80080c4:	b913      	cbnz	r3, 80080cc <iprintf+0x14>
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fa5e 	bl	8008588 <__sinit>
 80080cc:	ab05      	add	r3, sp, #20
 80080ce:	9a04      	ldr	r2, [sp, #16]
 80080d0:	68a1      	ldr	r1, [r4, #8]
 80080d2:	9301      	str	r3, [sp, #4]
 80080d4:	4620      	mov	r0, r4
 80080d6:	f000 fc2f 	bl	8008938 <_vfiprintf_r>
 80080da:	b002      	add	sp, #8
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	b004      	add	sp, #16
 80080e2:	4770      	bx	lr
 80080e4:	20000010 	.word	0x20000010

080080e8 <_puts_r>:
 80080e8:	b570      	push	{r4, r5, r6, lr}
 80080ea:	460e      	mov	r6, r1
 80080ec:	4605      	mov	r5, r0
 80080ee:	b118      	cbz	r0, 80080f8 <_puts_r+0x10>
 80080f0:	6983      	ldr	r3, [r0, #24]
 80080f2:	b90b      	cbnz	r3, 80080f8 <_puts_r+0x10>
 80080f4:	f000 fa48 	bl	8008588 <__sinit>
 80080f8:	69ab      	ldr	r3, [r5, #24]
 80080fa:	68ac      	ldr	r4, [r5, #8]
 80080fc:	b913      	cbnz	r3, 8008104 <_puts_r+0x1c>
 80080fe:	4628      	mov	r0, r5
 8008100:	f000 fa42 	bl	8008588 <__sinit>
 8008104:	4b2c      	ldr	r3, [pc, #176]	; (80081b8 <_puts_r+0xd0>)
 8008106:	429c      	cmp	r4, r3
 8008108:	d120      	bne.n	800814c <_puts_r+0x64>
 800810a:	686c      	ldr	r4, [r5, #4]
 800810c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800810e:	07db      	lsls	r3, r3, #31
 8008110:	d405      	bmi.n	800811e <_puts_r+0x36>
 8008112:	89a3      	ldrh	r3, [r4, #12]
 8008114:	0598      	lsls	r0, r3, #22
 8008116:	d402      	bmi.n	800811e <_puts_r+0x36>
 8008118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800811a:	f000 fad3 	bl	80086c4 <__retarget_lock_acquire_recursive>
 800811e:	89a3      	ldrh	r3, [r4, #12]
 8008120:	0719      	lsls	r1, r3, #28
 8008122:	d51d      	bpl.n	8008160 <_puts_r+0x78>
 8008124:	6923      	ldr	r3, [r4, #16]
 8008126:	b1db      	cbz	r3, 8008160 <_puts_r+0x78>
 8008128:	3e01      	subs	r6, #1
 800812a:	68a3      	ldr	r3, [r4, #8]
 800812c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008130:	3b01      	subs	r3, #1
 8008132:	60a3      	str	r3, [r4, #8]
 8008134:	bb39      	cbnz	r1, 8008186 <_puts_r+0x9e>
 8008136:	2b00      	cmp	r3, #0
 8008138:	da38      	bge.n	80081ac <_puts_r+0xc4>
 800813a:	4622      	mov	r2, r4
 800813c:	210a      	movs	r1, #10
 800813e:	4628      	mov	r0, r5
 8008140:	f000 f848 	bl	80081d4 <__swbuf_r>
 8008144:	3001      	adds	r0, #1
 8008146:	d011      	beq.n	800816c <_puts_r+0x84>
 8008148:	250a      	movs	r5, #10
 800814a:	e011      	b.n	8008170 <_puts_r+0x88>
 800814c:	4b1b      	ldr	r3, [pc, #108]	; (80081bc <_puts_r+0xd4>)
 800814e:	429c      	cmp	r4, r3
 8008150:	d101      	bne.n	8008156 <_puts_r+0x6e>
 8008152:	68ac      	ldr	r4, [r5, #8]
 8008154:	e7da      	b.n	800810c <_puts_r+0x24>
 8008156:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <_puts_r+0xd8>)
 8008158:	429c      	cmp	r4, r3
 800815a:	bf08      	it	eq
 800815c:	68ec      	ldreq	r4, [r5, #12]
 800815e:	e7d5      	b.n	800810c <_puts_r+0x24>
 8008160:	4621      	mov	r1, r4
 8008162:	4628      	mov	r0, r5
 8008164:	f000 f888 	bl	8008278 <__swsetup_r>
 8008168:	2800      	cmp	r0, #0
 800816a:	d0dd      	beq.n	8008128 <_puts_r+0x40>
 800816c:	f04f 35ff 	mov.w	r5, #4294967295
 8008170:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008172:	07da      	lsls	r2, r3, #31
 8008174:	d405      	bmi.n	8008182 <_puts_r+0x9a>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	059b      	lsls	r3, r3, #22
 800817a:	d402      	bmi.n	8008182 <_puts_r+0x9a>
 800817c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817e:	f000 faa2 	bl	80086c6 <__retarget_lock_release_recursive>
 8008182:	4628      	mov	r0, r5
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	2b00      	cmp	r3, #0
 8008188:	da04      	bge.n	8008194 <_puts_r+0xac>
 800818a:	69a2      	ldr	r2, [r4, #24]
 800818c:	429a      	cmp	r2, r3
 800818e:	dc06      	bgt.n	800819e <_puts_r+0xb6>
 8008190:	290a      	cmp	r1, #10
 8008192:	d004      	beq.n	800819e <_puts_r+0xb6>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	7019      	strb	r1, [r3, #0]
 800819c:	e7c5      	b.n	800812a <_puts_r+0x42>
 800819e:	4622      	mov	r2, r4
 80081a0:	4628      	mov	r0, r5
 80081a2:	f000 f817 	bl	80081d4 <__swbuf_r>
 80081a6:	3001      	adds	r0, #1
 80081a8:	d1bf      	bne.n	800812a <_puts_r+0x42>
 80081aa:	e7df      	b.n	800816c <_puts_r+0x84>
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	250a      	movs	r5, #10
 80081b0:	1c5a      	adds	r2, r3, #1
 80081b2:	6022      	str	r2, [r4, #0]
 80081b4:	701d      	strb	r5, [r3, #0]
 80081b6:	e7db      	b.n	8008170 <_puts_r+0x88>
 80081b8:	08009248 	.word	0x08009248
 80081bc:	08009268 	.word	0x08009268
 80081c0:	08009228 	.word	0x08009228

080081c4 <puts>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	; (80081d0 <puts+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f7ff bf8d 	b.w	80080e8 <_puts_r>
 80081ce:	bf00      	nop
 80081d0:	20000010 	.word	0x20000010

080081d4 <__swbuf_r>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	460e      	mov	r6, r1
 80081d8:	4614      	mov	r4, r2
 80081da:	4605      	mov	r5, r0
 80081dc:	b118      	cbz	r0, 80081e6 <__swbuf_r+0x12>
 80081de:	6983      	ldr	r3, [r0, #24]
 80081e0:	b90b      	cbnz	r3, 80081e6 <__swbuf_r+0x12>
 80081e2:	f000 f9d1 	bl	8008588 <__sinit>
 80081e6:	4b21      	ldr	r3, [pc, #132]	; (800826c <__swbuf_r+0x98>)
 80081e8:	429c      	cmp	r4, r3
 80081ea:	d12b      	bne.n	8008244 <__swbuf_r+0x70>
 80081ec:	686c      	ldr	r4, [r5, #4]
 80081ee:	69a3      	ldr	r3, [r4, #24]
 80081f0:	60a3      	str	r3, [r4, #8]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	071a      	lsls	r2, r3, #28
 80081f6:	d52f      	bpl.n	8008258 <__swbuf_r+0x84>
 80081f8:	6923      	ldr	r3, [r4, #16]
 80081fa:	b36b      	cbz	r3, 8008258 <__swbuf_r+0x84>
 80081fc:	6923      	ldr	r3, [r4, #16]
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	1ac0      	subs	r0, r0, r3
 8008202:	6963      	ldr	r3, [r4, #20]
 8008204:	b2f6      	uxtb	r6, r6
 8008206:	4283      	cmp	r3, r0
 8008208:	4637      	mov	r7, r6
 800820a:	dc04      	bgt.n	8008216 <__swbuf_r+0x42>
 800820c:	4621      	mov	r1, r4
 800820e:	4628      	mov	r0, r5
 8008210:	f000 f926 	bl	8008460 <_fflush_r>
 8008214:	bb30      	cbnz	r0, 8008264 <__swbuf_r+0x90>
 8008216:	68a3      	ldr	r3, [r4, #8]
 8008218:	3b01      	subs	r3, #1
 800821a:	60a3      	str	r3, [r4, #8]
 800821c:	6823      	ldr	r3, [r4, #0]
 800821e:	1c5a      	adds	r2, r3, #1
 8008220:	6022      	str	r2, [r4, #0]
 8008222:	701e      	strb	r6, [r3, #0]
 8008224:	6963      	ldr	r3, [r4, #20]
 8008226:	3001      	adds	r0, #1
 8008228:	4283      	cmp	r3, r0
 800822a:	d004      	beq.n	8008236 <__swbuf_r+0x62>
 800822c:	89a3      	ldrh	r3, [r4, #12]
 800822e:	07db      	lsls	r3, r3, #31
 8008230:	d506      	bpl.n	8008240 <__swbuf_r+0x6c>
 8008232:	2e0a      	cmp	r6, #10
 8008234:	d104      	bne.n	8008240 <__swbuf_r+0x6c>
 8008236:	4621      	mov	r1, r4
 8008238:	4628      	mov	r0, r5
 800823a:	f000 f911 	bl	8008460 <_fflush_r>
 800823e:	b988      	cbnz	r0, 8008264 <__swbuf_r+0x90>
 8008240:	4638      	mov	r0, r7
 8008242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008244:	4b0a      	ldr	r3, [pc, #40]	; (8008270 <__swbuf_r+0x9c>)
 8008246:	429c      	cmp	r4, r3
 8008248:	d101      	bne.n	800824e <__swbuf_r+0x7a>
 800824a:	68ac      	ldr	r4, [r5, #8]
 800824c:	e7cf      	b.n	80081ee <__swbuf_r+0x1a>
 800824e:	4b09      	ldr	r3, [pc, #36]	; (8008274 <__swbuf_r+0xa0>)
 8008250:	429c      	cmp	r4, r3
 8008252:	bf08      	it	eq
 8008254:	68ec      	ldreq	r4, [r5, #12]
 8008256:	e7ca      	b.n	80081ee <__swbuf_r+0x1a>
 8008258:	4621      	mov	r1, r4
 800825a:	4628      	mov	r0, r5
 800825c:	f000 f80c 	bl	8008278 <__swsetup_r>
 8008260:	2800      	cmp	r0, #0
 8008262:	d0cb      	beq.n	80081fc <__swbuf_r+0x28>
 8008264:	f04f 37ff 	mov.w	r7, #4294967295
 8008268:	e7ea      	b.n	8008240 <__swbuf_r+0x6c>
 800826a:	bf00      	nop
 800826c:	08009248 	.word	0x08009248
 8008270:	08009268 	.word	0x08009268
 8008274:	08009228 	.word	0x08009228

08008278 <__swsetup_r>:
 8008278:	4b32      	ldr	r3, [pc, #200]	; (8008344 <__swsetup_r+0xcc>)
 800827a:	b570      	push	{r4, r5, r6, lr}
 800827c:	681d      	ldr	r5, [r3, #0]
 800827e:	4606      	mov	r6, r0
 8008280:	460c      	mov	r4, r1
 8008282:	b125      	cbz	r5, 800828e <__swsetup_r+0x16>
 8008284:	69ab      	ldr	r3, [r5, #24]
 8008286:	b913      	cbnz	r3, 800828e <__swsetup_r+0x16>
 8008288:	4628      	mov	r0, r5
 800828a:	f000 f97d 	bl	8008588 <__sinit>
 800828e:	4b2e      	ldr	r3, [pc, #184]	; (8008348 <__swsetup_r+0xd0>)
 8008290:	429c      	cmp	r4, r3
 8008292:	d10f      	bne.n	80082b4 <__swsetup_r+0x3c>
 8008294:	686c      	ldr	r4, [r5, #4]
 8008296:	89a3      	ldrh	r3, [r4, #12]
 8008298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800829c:	0719      	lsls	r1, r3, #28
 800829e:	d42c      	bmi.n	80082fa <__swsetup_r+0x82>
 80082a0:	06dd      	lsls	r5, r3, #27
 80082a2:	d411      	bmi.n	80082c8 <__swsetup_r+0x50>
 80082a4:	2309      	movs	r3, #9
 80082a6:	6033      	str	r3, [r6, #0]
 80082a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80082ac:	81a3      	strh	r3, [r4, #12]
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295
 80082b2:	e03e      	b.n	8008332 <__swsetup_r+0xba>
 80082b4:	4b25      	ldr	r3, [pc, #148]	; (800834c <__swsetup_r+0xd4>)
 80082b6:	429c      	cmp	r4, r3
 80082b8:	d101      	bne.n	80082be <__swsetup_r+0x46>
 80082ba:	68ac      	ldr	r4, [r5, #8]
 80082bc:	e7eb      	b.n	8008296 <__swsetup_r+0x1e>
 80082be:	4b24      	ldr	r3, [pc, #144]	; (8008350 <__swsetup_r+0xd8>)
 80082c0:	429c      	cmp	r4, r3
 80082c2:	bf08      	it	eq
 80082c4:	68ec      	ldreq	r4, [r5, #12]
 80082c6:	e7e6      	b.n	8008296 <__swsetup_r+0x1e>
 80082c8:	0758      	lsls	r0, r3, #29
 80082ca:	d512      	bpl.n	80082f2 <__swsetup_r+0x7a>
 80082cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ce:	b141      	cbz	r1, 80082e2 <__swsetup_r+0x6a>
 80082d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082d4:	4299      	cmp	r1, r3
 80082d6:	d002      	beq.n	80082de <__swsetup_r+0x66>
 80082d8:	4630      	mov	r0, r6
 80082da:	f000 fa59 	bl	8008790 <_free_r>
 80082de:	2300      	movs	r3, #0
 80082e0:	6363      	str	r3, [r4, #52]	; 0x34
 80082e2:	89a3      	ldrh	r3, [r4, #12]
 80082e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	2300      	movs	r3, #0
 80082ec:	6063      	str	r3, [r4, #4]
 80082ee:	6923      	ldr	r3, [r4, #16]
 80082f0:	6023      	str	r3, [r4, #0]
 80082f2:	89a3      	ldrh	r3, [r4, #12]
 80082f4:	f043 0308 	orr.w	r3, r3, #8
 80082f8:	81a3      	strh	r3, [r4, #12]
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	b94b      	cbnz	r3, 8008312 <__swsetup_r+0x9a>
 80082fe:	89a3      	ldrh	r3, [r4, #12]
 8008300:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008308:	d003      	beq.n	8008312 <__swsetup_r+0x9a>
 800830a:	4621      	mov	r1, r4
 800830c:	4630      	mov	r0, r6
 800830e:	f000 f9ff 	bl	8008710 <__smakebuf_r>
 8008312:	89a0      	ldrh	r0, [r4, #12]
 8008314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008318:	f010 0301 	ands.w	r3, r0, #1
 800831c:	d00a      	beq.n	8008334 <__swsetup_r+0xbc>
 800831e:	2300      	movs	r3, #0
 8008320:	60a3      	str	r3, [r4, #8]
 8008322:	6963      	ldr	r3, [r4, #20]
 8008324:	425b      	negs	r3, r3
 8008326:	61a3      	str	r3, [r4, #24]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	b943      	cbnz	r3, 800833e <__swsetup_r+0xc6>
 800832c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008330:	d1ba      	bne.n	80082a8 <__swsetup_r+0x30>
 8008332:	bd70      	pop	{r4, r5, r6, pc}
 8008334:	0781      	lsls	r1, r0, #30
 8008336:	bf58      	it	pl
 8008338:	6963      	ldrpl	r3, [r4, #20]
 800833a:	60a3      	str	r3, [r4, #8]
 800833c:	e7f4      	b.n	8008328 <__swsetup_r+0xb0>
 800833e:	2000      	movs	r0, #0
 8008340:	e7f7      	b.n	8008332 <__swsetup_r+0xba>
 8008342:	bf00      	nop
 8008344:	20000010 	.word	0x20000010
 8008348:	08009248 	.word	0x08009248
 800834c:	08009268 	.word	0x08009268
 8008350:	08009228 	.word	0x08009228

08008354 <__sflush_r>:
 8008354:	898a      	ldrh	r2, [r1, #12]
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	4605      	mov	r5, r0
 800835c:	0710      	lsls	r0, r2, #28
 800835e:	460c      	mov	r4, r1
 8008360:	d458      	bmi.n	8008414 <__sflush_r+0xc0>
 8008362:	684b      	ldr	r3, [r1, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	dc05      	bgt.n	8008374 <__sflush_r+0x20>
 8008368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc02      	bgt.n	8008374 <__sflush_r+0x20>
 800836e:	2000      	movs	r0, #0
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008376:	2e00      	cmp	r6, #0
 8008378:	d0f9      	beq.n	800836e <__sflush_r+0x1a>
 800837a:	2300      	movs	r3, #0
 800837c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008380:	682f      	ldr	r7, [r5, #0]
 8008382:	602b      	str	r3, [r5, #0]
 8008384:	d032      	beq.n	80083ec <__sflush_r+0x98>
 8008386:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	075a      	lsls	r2, r3, #29
 800838c:	d505      	bpl.n	800839a <__sflush_r+0x46>
 800838e:	6863      	ldr	r3, [r4, #4]
 8008390:	1ac0      	subs	r0, r0, r3
 8008392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008394:	b10b      	cbz	r3, 800839a <__sflush_r+0x46>
 8008396:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008398:	1ac0      	subs	r0, r0, r3
 800839a:	2300      	movs	r3, #0
 800839c:	4602      	mov	r2, r0
 800839e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a0:	6a21      	ldr	r1, [r4, #32]
 80083a2:	4628      	mov	r0, r5
 80083a4:	47b0      	blx	r6
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	d106      	bne.n	80083ba <__sflush_r+0x66>
 80083ac:	6829      	ldr	r1, [r5, #0]
 80083ae:	291d      	cmp	r1, #29
 80083b0:	d82c      	bhi.n	800840c <__sflush_r+0xb8>
 80083b2:	4a2a      	ldr	r2, [pc, #168]	; (800845c <__sflush_r+0x108>)
 80083b4:	40ca      	lsrs	r2, r1
 80083b6:	07d6      	lsls	r6, r2, #31
 80083b8:	d528      	bpl.n	800840c <__sflush_r+0xb8>
 80083ba:	2200      	movs	r2, #0
 80083bc:	6062      	str	r2, [r4, #4]
 80083be:	04d9      	lsls	r1, r3, #19
 80083c0:	6922      	ldr	r2, [r4, #16]
 80083c2:	6022      	str	r2, [r4, #0]
 80083c4:	d504      	bpl.n	80083d0 <__sflush_r+0x7c>
 80083c6:	1c42      	adds	r2, r0, #1
 80083c8:	d101      	bne.n	80083ce <__sflush_r+0x7a>
 80083ca:	682b      	ldr	r3, [r5, #0]
 80083cc:	b903      	cbnz	r3, 80083d0 <__sflush_r+0x7c>
 80083ce:	6560      	str	r0, [r4, #84]	; 0x54
 80083d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d2:	602f      	str	r7, [r5, #0]
 80083d4:	2900      	cmp	r1, #0
 80083d6:	d0ca      	beq.n	800836e <__sflush_r+0x1a>
 80083d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083dc:	4299      	cmp	r1, r3
 80083de:	d002      	beq.n	80083e6 <__sflush_r+0x92>
 80083e0:	4628      	mov	r0, r5
 80083e2:	f000 f9d5 	bl	8008790 <_free_r>
 80083e6:	2000      	movs	r0, #0
 80083e8:	6360      	str	r0, [r4, #52]	; 0x34
 80083ea:	e7c1      	b.n	8008370 <__sflush_r+0x1c>
 80083ec:	6a21      	ldr	r1, [r4, #32]
 80083ee:	2301      	movs	r3, #1
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b0      	blx	r6
 80083f4:	1c41      	adds	r1, r0, #1
 80083f6:	d1c7      	bne.n	8008388 <__sflush_r+0x34>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0c4      	beq.n	8008388 <__sflush_r+0x34>
 80083fe:	2b1d      	cmp	r3, #29
 8008400:	d001      	beq.n	8008406 <__sflush_r+0xb2>
 8008402:	2b16      	cmp	r3, #22
 8008404:	d101      	bne.n	800840a <__sflush_r+0xb6>
 8008406:	602f      	str	r7, [r5, #0]
 8008408:	e7b1      	b.n	800836e <__sflush_r+0x1a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	e7ad      	b.n	8008370 <__sflush_r+0x1c>
 8008414:	690f      	ldr	r7, [r1, #16]
 8008416:	2f00      	cmp	r7, #0
 8008418:	d0a9      	beq.n	800836e <__sflush_r+0x1a>
 800841a:	0793      	lsls	r3, r2, #30
 800841c:	680e      	ldr	r6, [r1, #0]
 800841e:	bf08      	it	eq
 8008420:	694b      	ldreq	r3, [r1, #20]
 8008422:	600f      	str	r7, [r1, #0]
 8008424:	bf18      	it	ne
 8008426:	2300      	movne	r3, #0
 8008428:	eba6 0807 	sub.w	r8, r6, r7
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	dd9c      	ble.n	800836e <__sflush_r+0x1a>
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008438:	4643      	mov	r3, r8
 800843a:	463a      	mov	r2, r7
 800843c:	4628      	mov	r0, r5
 800843e:	47b0      	blx	r6
 8008440:	2800      	cmp	r0, #0
 8008442:	dc06      	bgt.n	8008452 <__sflush_r+0xfe>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e78e      	b.n	8008370 <__sflush_r+0x1c>
 8008452:	4407      	add	r7, r0
 8008454:	eba8 0800 	sub.w	r8, r8, r0
 8008458:	e7e9      	b.n	800842e <__sflush_r+0xda>
 800845a:	bf00      	nop
 800845c:	20400001 	.word	0x20400001

08008460 <_fflush_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	b913      	cbnz	r3, 8008470 <_fflush_r+0x10>
 800846a:	2500      	movs	r5, #0
 800846c:	4628      	mov	r0, r5
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	b118      	cbz	r0, 800847a <_fflush_r+0x1a>
 8008472:	6983      	ldr	r3, [r0, #24]
 8008474:	b90b      	cbnz	r3, 800847a <_fflush_r+0x1a>
 8008476:	f000 f887 	bl	8008588 <__sinit>
 800847a:	4b14      	ldr	r3, [pc, #80]	; (80084cc <_fflush_r+0x6c>)
 800847c:	429c      	cmp	r4, r3
 800847e:	d11b      	bne.n	80084b8 <_fflush_r+0x58>
 8008480:	686c      	ldr	r4, [r5, #4]
 8008482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0ef      	beq.n	800846a <_fflush_r+0xa>
 800848a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800848c:	07d0      	lsls	r0, r2, #31
 800848e:	d404      	bmi.n	800849a <_fflush_r+0x3a>
 8008490:	0599      	lsls	r1, r3, #22
 8008492:	d402      	bmi.n	800849a <_fflush_r+0x3a>
 8008494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008496:	f000 f915 	bl	80086c4 <__retarget_lock_acquire_recursive>
 800849a:	4628      	mov	r0, r5
 800849c:	4621      	mov	r1, r4
 800849e:	f7ff ff59 	bl	8008354 <__sflush_r>
 80084a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084a4:	07da      	lsls	r2, r3, #31
 80084a6:	4605      	mov	r5, r0
 80084a8:	d4e0      	bmi.n	800846c <_fflush_r+0xc>
 80084aa:	89a3      	ldrh	r3, [r4, #12]
 80084ac:	059b      	lsls	r3, r3, #22
 80084ae:	d4dd      	bmi.n	800846c <_fflush_r+0xc>
 80084b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084b2:	f000 f908 	bl	80086c6 <__retarget_lock_release_recursive>
 80084b6:	e7d9      	b.n	800846c <_fflush_r+0xc>
 80084b8:	4b05      	ldr	r3, [pc, #20]	; (80084d0 <_fflush_r+0x70>)
 80084ba:	429c      	cmp	r4, r3
 80084bc:	d101      	bne.n	80084c2 <_fflush_r+0x62>
 80084be:	68ac      	ldr	r4, [r5, #8]
 80084c0:	e7df      	b.n	8008482 <_fflush_r+0x22>
 80084c2:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <_fflush_r+0x74>)
 80084c4:	429c      	cmp	r4, r3
 80084c6:	bf08      	it	eq
 80084c8:	68ec      	ldreq	r4, [r5, #12]
 80084ca:	e7da      	b.n	8008482 <_fflush_r+0x22>
 80084cc:	08009248 	.word	0x08009248
 80084d0:	08009268 	.word	0x08009268
 80084d4:	08009228 	.word	0x08009228

080084d8 <std>:
 80084d8:	2300      	movs	r3, #0
 80084da:	b510      	push	{r4, lr}
 80084dc:	4604      	mov	r4, r0
 80084de:	e9c0 3300 	strd	r3, r3, [r0]
 80084e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e6:	6083      	str	r3, [r0, #8]
 80084e8:	8181      	strh	r1, [r0, #12]
 80084ea:	6643      	str	r3, [r0, #100]	; 0x64
 80084ec:	81c2      	strh	r2, [r0, #14]
 80084ee:	6183      	str	r3, [r0, #24]
 80084f0:	4619      	mov	r1, r3
 80084f2:	2208      	movs	r2, #8
 80084f4:	305c      	adds	r0, #92	; 0x5c
 80084f6:	f7ff fdd7 	bl	80080a8 <memset>
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x38>)
 80084fc:	6263      	str	r3, [r4, #36]	; 0x24
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x3c>)
 8008500:	62a3      	str	r3, [r4, #40]	; 0x28
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <std+0x40>)
 8008504:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008506:	4b05      	ldr	r3, [pc, #20]	; (800851c <std+0x44>)
 8008508:	6224      	str	r4, [r4, #32]
 800850a:	6323      	str	r3, [r4, #48]	; 0x30
 800850c:	bd10      	pop	{r4, pc}
 800850e:	bf00      	nop
 8008510:	08008ee1 	.word	0x08008ee1
 8008514:	08008f03 	.word	0x08008f03
 8008518:	08008f3b 	.word	0x08008f3b
 800851c:	08008f5f 	.word	0x08008f5f

08008520 <_cleanup_r>:
 8008520:	4901      	ldr	r1, [pc, #4]	; (8008528 <_cleanup_r+0x8>)
 8008522:	f000 b8af 	b.w	8008684 <_fwalk_reent>
 8008526:	bf00      	nop
 8008528:	08008461 	.word	0x08008461

0800852c <__sfmoreglue>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	1e4a      	subs	r2, r1, #1
 8008530:	2568      	movs	r5, #104	; 0x68
 8008532:	4355      	muls	r5, r2
 8008534:	460e      	mov	r6, r1
 8008536:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800853a:	f000 f979 	bl	8008830 <_malloc_r>
 800853e:	4604      	mov	r4, r0
 8008540:	b140      	cbz	r0, 8008554 <__sfmoreglue+0x28>
 8008542:	2100      	movs	r1, #0
 8008544:	e9c0 1600 	strd	r1, r6, [r0]
 8008548:	300c      	adds	r0, #12
 800854a:	60a0      	str	r0, [r4, #8]
 800854c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008550:	f7ff fdaa 	bl	80080a8 <memset>
 8008554:	4620      	mov	r0, r4
 8008556:	bd70      	pop	{r4, r5, r6, pc}

08008558 <__sfp_lock_acquire>:
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <__sfp_lock_acquire+0x8>)
 800855a:	f000 b8b3 	b.w	80086c4 <__retarget_lock_acquire_recursive>
 800855e:	bf00      	nop
 8008560:	200007c4 	.word	0x200007c4

08008564 <__sfp_lock_release>:
 8008564:	4801      	ldr	r0, [pc, #4]	; (800856c <__sfp_lock_release+0x8>)
 8008566:	f000 b8ae 	b.w	80086c6 <__retarget_lock_release_recursive>
 800856a:	bf00      	nop
 800856c:	200007c4 	.word	0x200007c4

08008570 <__sinit_lock_acquire>:
 8008570:	4801      	ldr	r0, [pc, #4]	; (8008578 <__sinit_lock_acquire+0x8>)
 8008572:	f000 b8a7 	b.w	80086c4 <__retarget_lock_acquire_recursive>
 8008576:	bf00      	nop
 8008578:	200007bf 	.word	0x200007bf

0800857c <__sinit_lock_release>:
 800857c:	4801      	ldr	r0, [pc, #4]	; (8008584 <__sinit_lock_release+0x8>)
 800857e:	f000 b8a2 	b.w	80086c6 <__retarget_lock_release_recursive>
 8008582:	bf00      	nop
 8008584:	200007bf 	.word	0x200007bf

08008588 <__sinit>:
 8008588:	b510      	push	{r4, lr}
 800858a:	4604      	mov	r4, r0
 800858c:	f7ff fff0 	bl	8008570 <__sinit_lock_acquire>
 8008590:	69a3      	ldr	r3, [r4, #24]
 8008592:	b11b      	cbz	r3, 800859c <__sinit+0x14>
 8008594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008598:	f7ff bff0 	b.w	800857c <__sinit_lock_release>
 800859c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80085a0:	6523      	str	r3, [r4, #80]	; 0x50
 80085a2:	4b13      	ldr	r3, [pc, #76]	; (80085f0 <__sinit+0x68>)
 80085a4:	4a13      	ldr	r2, [pc, #76]	; (80085f4 <__sinit+0x6c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80085aa:	42a3      	cmp	r3, r4
 80085ac:	bf04      	itt	eq
 80085ae:	2301      	moveq	r3, #1
 80085b0:	61a3      	streq	r3, [r4, #24]
 80085b2:	4620      	mov	r0, r4
 80085b4:	f000 f820 	bl	80085f8 <__sfp>
 80085b8:	6060      	str	r0, [r4, #4]
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 f81c 	bl	80085f8 <__sfp>
 80085c0:	60a0      	str	r0, [r4, #8]
 80085c2:	4620      	mov	r0, r4
 80085c4:	f000 f818 	bl	80085f8 <__sfp>
 80085c8:	2200      	movs	r2, #0
 80085ca:	60e0      	str	r0, [r4, #12]
 80085cc:	2104      	movs	r1, #4
 80085ce:	6860      	ldr	r0, [r4, #4]
 80085d0:	f7ff ff82 	bl	80084d8 <std>
 80085d4:	68a0      	ldr	r0, [r4, #8]
 80085d6:	2201      	movs	r2, #1
 80085d8:	2109      	movs	r1, #9
 80085da:	f7ff ff7d 	bl	80084d8 <std>
 80085de:	68e0      	ldr	r0, [r4, #12]
 80085e0:	2202      	movs	r2, #2
 80085e2:	2112      	movs	r1, #18
 80085e4:	f7ff ff78 	bl	80084d8 <std>
 80085e8:	2301      	movs	r3, #1
 80085ea:	61a3      	str	r3, [r4, #24]
 80085ec:	e7d2      	b.n	8008594 <__sinit+0xc>
 80085ee:	bf00      	nop
 80085f0:	08009224 	.word	0x08009224
 80085f4:	08008521 	.word	0x08008521

080085f8 <__sfp>:
 80085f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085fa:	4607      	mov	r7, r0
 80085fc:	f7ff ffac 	bl	8008558 <__sfp_lock_acquire>
 8008600:	4b1e      	ldr	r3, [pc, #120]	; (800867c <__sfp+0x84>)
 8008602:	681e      	ldr	r6, [r3, #0]
 8008604:	69b3      	ldr	r3, [r6, #24]
 8008606:	b913      	cbnz	r3, 800860e <__sfp+0x16>
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff ffbd 	bl	8008588 <__sinit>
 800860e:	3648      	adds	r6, #72	; 0x48
 8008610:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008614:	3b01      	subs	r3, #1
 8008616:	d503      	bpl.n	8008620 <__sfp+0x28>
 8008618:	6833      	ldr	r3, [r6, #0]
 800861a:	b30b      	cbz	r3, 8008660 <__sfp+0x68>
 800861c:	6836      	ldr	r6, [r6, #0]
 800861e:	e7f7      	b.n	8008610 <__sfp+0x18>
 8008620:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008624:	b9d5      	cbnz	r5, 800865c <__sfp+0x64>
 8008626:	4b16      	ldr	r3, [pc, #88]	; (8008680 <__sfp+0x88>)
 8008628:	60e3      	str	r3, [r4, #12]
 800862a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800862e:	6665      	str	r5, [r4, #100]	; 0x64
 8008630:	f000 f847 	bl	80086c2 <__retarget_lock_init_recursive>
 8008634:	f7ff ff96 	bl	8008564 <__sfp_lock_release>
 8008638:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800863c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008640:	6025      	str	r5, [r4, #0]
 8008642:	61a5      	str	r5, [r4, #24]
 8008644:	2208      	movs	r2, #8
 8008646:	4629      	mov	r1, r5
 8008648:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800864c:	f7ff fd2c 	bl	80080a8 <memset>
 8008650:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008654:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008658:	4620      	mov	r0, r4
 800865a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800865c:	3468      	adds	r4, #104	; 0x68
 800865e:	e7d9      	b.n	8008614 <__sfp+0x1c>
 8008660:	2104      	movs	r1, #4
 8008662:	4638      	mov	r0, r7
 8008664:	f7ff ff62 	bl	800852c <__sfmoreglue>
 8008668:	4604      	mov	r4, r0
 800866a:	6030      	str	r0, [r6, #0]
 800866c:	2800      	cmp	r0, #0
 800866e:	d1d5      	bne.n	800861c <__sfp+0x24>
 8008670:	f7ff ff78 	bl	8008564 <__sfp_lock_release>
 8008674:	230c      	movs	r3, #12
 8008676:	603b      	str	r3, [r7, #0]
 8008678:	e7ee      	b.n	8008658 <__sfp+0x60>
 800867a:	bf00      	nop
 800867c:	08009224 	.word	0x08009224
 8008680:	ffff0001 	.word	0xffff0001

08008684 <_fwalk_reent>:
 8008684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008688:	4606      	mov	r6, r0
 800868a:	4688      	mov	r8, r1
 800868c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008690:	2700      	movs	r7, #0
 8008692:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008696:	f1b9 0901 	subs.w	r9, r9, #1
 800869a:	d505      	bpl.n	80086a8 <_fwalk_reent+0x24>
 800869c:	6824      	ldr	r4, [r4, #0]
 800869e:	2c00      	cmp	r4, #0
 80086a0:	d1f7      	bne.n	8008692 <_fwalk_reent+0xe>
 80086a2:	4638      	mov	r0, r7
 80086a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086a8:	89ab      	ldrh	r3, [r5, #12]
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d907      	bls.n	80086be <_fwalk_reent+0x3a>
 80086ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80086b2:	3301      	adds	r3, #1
 80086b4:	d003      	beq.n	80086be <_fwalk_reent+0x3a>
 80086b6:	4629      	mov	r1, r5
 80086b8:	4630      	mov	r0, r6
 80086ba:	47c0      	blx	r8
 80086bc:	4307      	orrs	r7, r0
 80086be:	3568      	adds	r5, #104	; 0x68
 80086c0:	e7e9      	b.n	8008696 <_fwalk_reent+0x12>

080086c2 <__retarget_lock_init_recursive>:
 80086c2:	4770      	bx	lr

080086c4 <__retarget_lock_acquire_recursive>:
 80086c4:	4770      	bx	lr

080086c6 <__retarget_lock_release_recursive>:
 80086c6:	4770      	bx	lr

080086c8 <__swhatbuf_r>:
 80086c8:	b570      	push	{r4, r5, r6, lr}
 80086ca:	460e      	mov	r6, r1
 80086cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d0:	2900      	cmp	r1, #0
 80086d2:	b096      	sub	sp, #88	; 0x58
 80086d4:	4614      	mov	r4, r2
 80086d6:	461d      	mov	r5, r3
 80086d8:	da07      	bge.n	80086ea <__swhatbuf_r+0x22>
 80086da:	2300      	movs	r3, #0
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	89b3      	ldrh	r3, [r6, #12]
 80086e0:	061a      	lsls	r2, r3, #24
 80086e2:	d410      	bmi.n	8008706 <__swhatbuf_r+0x3e>
 80086e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086e8:	e00e      	b.n	8008708 <__swhatbuf_r+0x40>
 80086ea:	466a      	mov	r2, sp
 80086ec:	f000 fc5e 	bl	8008fac <_fstat_r>
 80086f0:	2800      	cmp	r0, #0
 80086f2:	dbf2      	blt.n	80086da <__swhatbuf_r+0x12>
 80086f4:	9a01      	ldr	r2, [sp, #4]
 80086f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086fe:	425a      	negs	r2, r3
 8008700:	415a      	adcs	r2, r3
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	e7ee      	b.n	80086e4 <__swhatbuf_r+0x1c>
 8008706:	2340      	movs	r3, #64	; 0x40
 8008708:	2000      	movs	r0, #0
 800870a:	6023      	str	r3, [r4, #0]
 800870c:	b016      	add	sp, #88	; 0x58
 800870e:	bd70      	pop	{r4, r5, r6, pc}

08008710 <__smakebuf_r>:
 8008710:	898b      	ldrh	r3, [r1, #12]
 8008712:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008714:	079d      	lsls	r5, r3, #30
 8008716:	4606      	mov	r6, r0
 8008718:	460c      	mov	r4, r1
 800871a:	d507      	bpl.n	800872c <__smakebuf_r+0x1c>
 800871c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	6123      	str	r3, [r4, #16]
 8008724:	2301      	movs	r3, #1
 8008726:	6163      	str	r3, [r4, #20]
 8008728:	b002      	add	sp, #8
 800872a:	bd70      	pop	{r4, r5, r6, pc}
 800872c:	ab01      	add	r3, sp, #4
 800872e:	466a      	mov	r2, sp
 8008730:	f7ff ffca 	bl	80086c8 <__swhatbuf_r>
 8008734:	9900      	ldr	r1, [sp, #0]
 8008736:	4605      	mov	r5, r0
 8008738:	4630      	mov	r0, r6
 800873a:	f000 f879 	bl	8008830 <_malloc_r>
 800873e:	b948      	cbnz	r0, 8008754 <__smakebuf_r+0x44>
 8008740:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008744:	059a      	lsls	r2, r3, #22
 8008746:	d4ef      	bmi.n	8008728 <__smakebuf_r+0x18>
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	f043 0302 	orr.w	r3, r3, #2
 8008750:	81a3      	strh	r3, [r4, #12]
 8008752:	e7e3      	b.n	800871c <__smakebuf_r+0xc>
 8008754:	4b0d      	ldr	r3, [pc, #52]	; (800878c <__smakebuf_r+0x7c>)
 8008756:	62b3      	str	r3, [r6, #40]	; 0x28
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	6020      	str	r0, [r4, #0]
 800875c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008760:	81a3      	strh	r3, [r4, #12]
 8008762:	9b00      	ldr	r3, [sp, #0]
 8008764:	6163      	str	r3, [r4, #20]
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	6120      	str	r0, [r4, #16]
 800876a:	b15b      	cbz	r3, 8008784 <__smakebuf_r+0x74>
 800876c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008770:	4630      	mov	r0, r6
 8008772:	f000 fc2d 	bl	8008fd0 <_isatty_r>
 8008776:	b128      	cbz	r0, 8008784 <__smakebuf_r+0x74>
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	f023 0303 	bic.w	r3, r3, #3
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	81a3      	strh	r3, [r4, #12]
 8008784:	89a0      	ldrh	r0, [r4, #12]
 8008786:	4305      	orrs	r5, r0
 8008788:	81a5      	strh	r5, [r4, #12]
 800878a:	e7cd      	b.n	8008728 <__smakebuf_r+0x18>
 800878c:	08008521 	.word	0x08008521

08008790 <_free_r>:
 8008790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008792:	2900      	cmp	r1, #0
 8008794:	d048      	beq.n	8008828 <_free_r+0x98>
 8008796:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800879a:	9001      	str	r0, [sp, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	f1a1 0404 	sub.w	r4, r1, #4
 80087a2:	bfb8      	it	lt
 80087a4:	18e4      	addlt	r4, r4, r3
 80087a6:	f000 fc35 	bl	8009014 <__malloc_lock>
 80087aa:	4a20      	ldr	r2, [pc, #128]	; (800882c <_free_r+0x9c>)
 80087ac:	9801      	ldr	r0, [sp, #4]
 80087ae:	6813      	ldr	r3, [r2, #0]
 80087b0:	4615      	mov	r5, r2
 80087b2:	b933      	cbnz	r3, 80087c2 <_free_r+0x32>
 80087b4:	6063      	str	r3, [r4, #4]
 80087b6:	6014      	str	r4, [r2, #0]
 80087b8:	b003      	add	sp, #12
 80087ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80087be:	f000 bc2f 	b.w	8009020 <__malloc_unlock>
 80087c2:	42a3      	cmp	r3, r4
 80087c4:	d90b      	bls.n	80087de <_free_r+0x4e>
 80087c6:	6821      	ldr	r1, [r4, #0]
 80087c8:	1862      	adds	r2, r4, r1
 80087ca:	4293      	cmp	r3, r2
 80087cc:	bf04      	itt	eq
 80087ce:	681a      	ldreq	r2, [r3, #0]
 80087d0:	685b      	ldreq	r3, [r3, #4]
 80087d2:	6063      	str	r3, [r4, #4]
 80087d4:	bf04      	itt	eq
 80087d6:	1852      	addeq	r2, r2, r1
 80087d8:	6022      	streq	r2, [r4, #0]
 80087da:	602c      	str	r4, [r5, #0]
 80087dc:	e7ec      	b.n	80087b8 <_free_r+0x28>
 80087de:	461a      	mov	r2, r3
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	b10b      	cbz	r3, 80087e8 <_free_r+0x58>
 80087e4:	42a3      	cmp	r3, r4
 80087e6:	d9fa      	bls.n	80087de <_free_r+0x4e>
 80087e8:	6811      	ldr	r1, [r2, #0]
 80087ea:	1855      	adds	r5, r2, r1
 80087ec:	42a5      	cmp	r5, r4
 80087ee:	d10b      	bne.n	8008808 <_free_r+0x78>
 80087f0:	6824      	ldr	r4, [r4, #0]
 80087f2:	4421      	add	r1, r4
 80087f4:	1854      	adds	r4, r2, r1
 80087f6:	42a3      	cmp	r3, r4
 80087f8:	6011      	str	r1, [r2, #0]
 80087fa:	d1dd      	bne.n	80087b8 <_free_r+0x28>
 80087fc:	681c      	ldr	r4, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	6053      	str	r3, [r2, #4]
 8008802:	4421      	add	r1, r4
 8008804:	6011      	str	r1, [r2, #0]
 8008806:	e7d7      	b.n	80087b8 <_free_r+0x28>
 8008808:	d902      	bls.n	8008810 <_free_r+0x80>
 800880a:	230c      	movs	r3, #12
 800880c:	6003      	str	r3, [r0, #0]
 800880e:	e7d3      	b.n	80087b8 <_free_r+0x28>
 8008810:	6825      	ldr	r5, [r4, #0]
 8008812:	1961      	adds	r1, r4, r5
 8008814:	428b      	cmp	r3, r1
 8008816:	bf04      	itt	eq
 8008818:	6819      	ldreq	r1, [r3, #0]
 800881a:	685b      	ldreq	r3, [r3, #4]
 800881c:	6063      	str	r3, [r4, #4]
 800881e:	bf04      	itt	eq
 8008820:	1949      	addeq	r1, r1, r5
 8008822:	6021      	streq	r1, [r4, #0]
 8008824:	6054      	str	r4, [r2, #4]
 8008826:	e7c7      	b.n	80087b8 <_free_r+0x28>
 8008828:	b003      	add	sp, #12
 800882a:	bd30      	pop	{r4, r5, pc}
 800882c:	200000f0 	.word	0x200000f0

08008830 <_malloc_r>:
 8008830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008832:	1ccd      	adds	r5, r1, #3
 8008834:	f025 0503 	bic.w	r5, r5, #3
 8008838:	3508      	adds	r5, #8
 800883a:	2d0c      	cmp	r5, #12
 800883c:	bf38      	it	cc
 800883e:	250c      	movcc	r5, #12
 8008840:	2d00      	cmp	r5, #0
 8008842:	4606      	mov	r6, r0
 8008844:	db01      	blt.n	800884a <_malloc_r+0x1a>
 8008846:	42a9      	cmp	r1, r5
 8008848:	d903      	bls.n	8008852 <_malloc_r+0x22>
 800884a:	230c      	movs	r3, #12
 800884c:	6033      	str	r3, [r6, #0]
 800884e:	2000      	movs	r0, #0
 8008850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008852:	f000 fbdf 	bl	8009014 <__malloc_lock>
 8008856:	4921      	ldr	r1, [pc, #132]	; (80088dc <_malloc_r+0xac>)
 8008858:	680a      	ldr	r2, [r1, #0]
 800885a:	4614      	mov	r4, r2
 800885c:	b99c      	cbnz	r4, 8008886 <_malloc_r+0x56>
 800885e:	4f20      	ldr	r7, [pc, #128]	; (80088e0 <_malloc_r+0xb0>)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	b923      	cbnz	r3, 800886e <_malloc_r+0x3e>
 8008864:	4621      	mov	r1, r4
 8008866:	4630      	mov	r0, r6
 8008868:	f000 fb2a 	bl	8008ec0 <_sbrk_r>
 800886c:	6038      	str	r0, [r7, #0]
 800886e:	4629      	mov	r1, r5
 8008870:	4630      	mov	r0, r6
 8008872:	f000 fb25 	bl	8008ec0 <_sbrk_r>
 8008876:	1c43      	adds	r3, r0, #1
 8008878:	d123      	bne.n	80088c2 <_malloc_r+0x92>
 800887a:	230c      	movs	r3, #12
 800887c:	6033      	str	r3, [r6, #0]
 800887e:	4630      	mov	r0, r6
 8008880:	f000 fbce 	bl	8009020 <__malloc_unlock>
 8008884:	e7e3      	b.n	800884e <_malloc_r+0x1e>
 8008886:	6823      	ldr	r3, [r4, #0]
 8008888:	1b5b      	subs	r3, r3, r5
 800888a:	d417      	bmi.n	80088bc <_malloc_r+0x8c>
 800888c:	2b0b      	cmp	r3, #11
 800888e:	d903      	bls.n	8008898 <_malloc_r+0x68>
 8008890:	6023      	str	r3, [r4, #0]
 8008892:	441c      	add	r4, r3
 8008894:	6025      	str	r5, [r4, #0]
 8008896:	e004      	b.n	80088a2 <_malloc_r+0x72>
 8008898:	6863      	ldr	r3, [r4, #4]
 800889a:	42a2      	cmp	r2, r4
 800889c:	bf0c      	ite	eq
 800889e:	600b      	streq	r3, [r1, #0]
 80088a0:	6053      	strne	r3, [r2, #4]
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 fbbc 	bl	8009020 <__malloc_unlock>
 80088a8:	f104 000b 	add.w	r0, r4, #11
 80088ac:	1d23      	adds	r3, r4, #4
 80088ae:	f020 0007 	bic.w	r0, r0, #7
 80088b2:	1ac2      	subs	r2, r0, r3
 80088b4:	d0cc      	beq.n	8008850 <_malloc_r+0x20>
 80088b6:	1a1b      	subs	r3, r3, r0
 80088b8:	50a3      	str	r3, [r4, r2]
 80088ba:	e7c9      	b.n	8008850 <_malloc_r+0x20>
 80088bc:	4622      	mov	r2, r4
 80088be:	6864      	ldr	r4, [r4, #4]
 80088c0:	e7cc      	b.n	800885c <_malloc_r+0x2c>
 80088c2:	1cc4      	adds	r4, r0, #3
 80088c4:	f024 0403 	bic.w	r4, r4, #3
 80088c8:	42a0      	cmp	r0, r4
 80088ca:	d0e3      	beq.n	8008894 <_malloc_r+0x64>
 80088cc:	1a21      	subs	r1, r4, r0
 80088ce:	4630      	mov	r0, r6
 80088d0:	f000 faf6 	bl	8008ec0 <_sbrk_r>
 80088d4:	3001      	adds	r0, #1
 80088d6:	d1dd      	bne.n	8008894 <_malloc_r+0x64>
 80088d8:	e7cf      	b.n	800887a <_malloc_r+0x4a>
 80088da:	bf00      	nop
 80088dc:	200000f0 	.word	0x200000f0
 80088e0:	200000f4 	.word	0x200000f4

080088e4 <__sfputc_r>:
 80088e4:	6893      	ldr	r3, [r2, #8]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	b410      	push	{r4}
 80088ec:	6093      	str	r3, [r2, #8]
 80088ee:	da08      	bge.n	8008902 <__sfputc_r+0x1e>
 80088f0:	6994      	ldr	r4, [r2, #24]
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	db01      	blt.n	80088fa <__sfputc_r+0x16>
 80088f6:	290a      	cmp	r1, #10
 80088f8:	d103      	bne.n	8008902 <__sfputc_r+0x1e>
 80088fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088fe:	f7ff bc69 	b.w	80081d4 <__swbuf_r>
 8008902:	6813      	ldr	r3, [r2, #0]
 8008904:	1c58      	adds	r0, r3, #1
 8008906:	6010      	str	r0, [r2, #0]
 8008908:	7019      	strb	r1, [r3, #0]
 800890a:	4608      	mov	r0, r1
 800890c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008910:	4770      	bx	lr

08008912 <__sfputs_r>:
 8008912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008914:	4606      	mov	r6, r0
 8008916:	460f      	mov	r7, r1
 8008918:	4614      	mov	r4, r2
 800891a:	18d5      	adds	r5, r2, r3
 800891c:	42ac      	cmp	r4, r5
 800891e:	d101      	bne.n	8008924 <__sfputs_r+0x12>
 8008920:	2000      	movs	r0, #0
 8008922:	e007      	b.n	8008934 <__sfputs_r+0x22>
 8008924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008928:	463a      	mov	r2, r7
 800892a:	4630      	mov	r0, r6
 800892c:	f7ff ffda 	bl	80088e4 <__sfputc_r>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d1f3      	bne.n	800891c <__sfputs_r+0xa>
 8008934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008938 <_vfiprintf_r>:
 8008938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800893c:	460d      	mov	r5, r1
 800893e:	b09d      	sub	sp, #116	; 0x74
 8008940:	4614      	mov	r4, r2
 8008942:	4698      	mov	r8, r3
 8008944:	4606      	mov	r6, r0
 8008946:	b118      	cbz	r0, 8008950 <_vfiprintf_r+0x18>
 8008948:	6983      	ldr	r3, [r0, #24]
 800894a:	b90b      	cbnz	r3, 8008950 <_vfiprintf_r+0x18>
 800894c:	f7ff fe1c 	bl	8008588 <__sinit>
 8008950:	4b89      	ldr	r3, [pc, #548]	; (8008b78 <_vfiprintf_r+0x240>)
 8008952:	429d      	cmp	r5, r3
 8008954:	d11b      	bne.n	800898e <_vfiprintf_r+0x56>
 8008956:	6875      	ldr	r5, [r6, #4]
 8008958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800895a:	07d9      	lsls	r1, r3, #31
 800895c:	d405      	bmi.n	800896a <_vfiprintf_r+0x32>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	059a      	lsls	r2, r3, #22
 8008962:	d402      	bmi.n	800896a <_vfiprintf_r+0x32>
 8008964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008966:	f7ff fead 	bl	80086c4 <__retarget_lock_acquire_recursive>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	071b      	lsls	r3, r3, #28
 800896e:	d501      	bpl.n	8008974 <_vfiprintf_r+0x3c>
 8008970:	692b      	ldr	r3, [r5, #16]
 8008972:	b9eb      	cbnz	r3, 80089b0 <_vfiprintf_r+0x78>
 8008974:	4629      	mov	r1, r5
 8008976:	4630      	mov	r0, r6
 8008978:	f7ff fc7e 	bl	8008278 <__swsetup_r>
 800897c:	b1c0      	cbz	r0, 80089b0 <_vfiprintf_r+0x78>
 800897e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008980:	07dc      	lsls	r4, r3, #31
 8008982:	d50e      	bpl.n	80089a2 <_vfiprintf_r+0x6a>
 8008984:	f04f 30ff 	mov.w	r0, #4294967295
 8008988:	b01d      	add	sp, #116	; 0x74
 800898a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898e:	4b7b      	ldr	r3, [pc, #492]	; (8008b7c <_vfiprintf_r+0x244>)
 8008990:	429d      	cmp	r5, r3
 8008992:	d101      	bne.n	8008998 <_vfiprintf_r+0x60>
 8008994:	68b5      	ldr	r5, [r6, #8]
 8008996:	e7df      	b.n	8008958 <_vfiprintf_r+0x20>
 8008998:	4b79      	ldr	r3, [pc, #484]	; (8008b80 <_vfiprintf_r+0x248>)
 800899a:	429d      	cmp	r5, r3
 800899c:	bf08      	it	eq
 800899e:	68f5      	ldreq	r5, [r6, #12]
 80089a0:	e7da      	b.n	8008958 <_vfiprintf_r+0x20>
 80089a2:	89ab      	ldrh	r3, [r5, #12]
 80089a4:	0598      	lsls	r0, r3, #22
 80089a6:	d4ed      	bmi.n	8008984 <_vfiprintf_r+0x4c>
 80089a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089aa:	f7ff fe8c 	bl	80086c6 <__retarget_lock_release_recursive>
 80089ae:	e7e9      	b.n	8008984 <_vfiprintf_r+0x4c>
 80089b0:	2300      	movs	r3, #0
 80089b2:	9309      	str	r3, [sp, #36]	; 0x24
 80089b4:	2320      	movs	r3, #32
 80089b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80089be:	2330      	movs	r3, #48	; 0x30
 80089c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008b84 <_vfiprintf_r+0x24c>
 80089c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089c8:	f04f 0901 	mov.w	r9, #1
 80089cc:	4623      	mov	r3, r4
 80089ce:	469a      	mov	sl, r3
 80089d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089d4:	b10a      	cbz	r2, 80089da <_vfiprintf_r+0xa2>
 80089d6:	2a25      	cmp	r2, #37	; 0x25
 80089d8:	d1f9      	bne.n	80089ce <_vfiprintf_r+0x96>
 80089da:	ebba 0b04 	subs.w	fp, sl, r4
 80089de:	d00b      	beq.n	80089f8 <_vfiprintf_r+0xc0>
 80089e0:	465b      	mov	r3, fp
 80089e2:	4622      	mov	r2, r4
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7ff ff93 	bl	8008912 <__sfputs_r>
 80089ec:	3001      	adds	r0, #1
 80089ee:	f000 80aa 	beq.w	8008b46 <_vfiprintf_r+0x20e>
 80089f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f4:	445a      	add	r2, fp
 80089f6:	9209      	str	r2, [sp, #36]	; 0x24
 80089f8:	f89a 3000 	ldrb.w	r3, [sl]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	f000 80a2 	beq.w	8008b46 <_vfiprintf_r+0x20e>
 8008a02:	2300      	movs	r3, #0
 8008a04:	f04f 32ff 	mov.w	r2, #4294967295
 8008a08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a0c:	f10a 0a01 	add.w	sl, sl, #1
 8008a10:	9304      	str	r3, [sp, #16]
 8008a12:	9307      	str	r3, [sp, #28]
 8008a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a18:	931a      	str	r3, [sp, #104]	; 0x68
 8008a1a:	4654      	mov	r4, sl
 8008a1c:	2205      	movs	r2, #5
 8008a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a22:	4858      	ldr	r0, [pc, #352]	; (8008b84 <_vfiprintf_r+0x24c>)
 8008a24:	f7f7 fbdc 	bl	80001e0 <memchr>
 8008a28:	9a04      	ldr	r2, [sp, #16]
 8008a2a:	b9d8      	cbnz	r0, 8008a64 <_vfiprintf_r+0x12c>
 8008a2c:	06d1      	lsls	r1, r2, #27
 8008a2e:	bf44      	itt	mi
 8008a30:	2320      	movmi	r3, #32
 8008a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a36:	0713      	lsls	r3, r2, #28
 8008a38:	bf44      	itt	mi
 8008a3a:	232b      	movmi	r3, #43	; 0x2b
 8008a3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a40:	f89a 3000 	ldrb.w	r3, [sl]
 8008a44:	2b2a      	cmp	r3, #42	; 0x2a
 8008a46:	d015      	beq.n	8008a74 <_vfiprintf_r+0x13c>
 8008a48:	9a07      	ldr	r2, [sp, #28]
 8008a4a:	4654      	mov	r4, sl
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	f04f 0c0a 	mov.w	ip, #10
 8008a52:	4621      	mov	r1, r4
 8008a54:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a58:	3b30      	subs	r3, #48	; 0x30
 8008a5a:	2b09      	cmp	r3, #9
 8008a5c:	d94e      	bls.n	8008afc <_vfiprintf_r+0x1c4>
 8008a5e:	b1b0      	cbz	r0, 8008a8e <_vfiprintf_r+0x156>
 8008a60:	9207      	str	r2, [sp, #28]
 8008a62:	e014      	b.n	8008a8e <_vfiprintf_r+0x156>
 8008a64:	eba0 0308 	sub.w	r3, r0, r8
 8008a68:	fa09 f303 	lsl.w	r3, r9, r3
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	9304      	str	r3, [sp, #16]
 8008a70:	46a2      	mov	sl, r4
 8008a72:	e7d2      	b.n	8008a1a <_vfiprintf_r+0xe2>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	1d19      	adds	r1, r3, #4
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	9103      	str	r1, [sp, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfbb      	ittet	lt
 8008a80:	425b      	neglt	r3, r3
 8008a82:	f042 0202 	orrlt.w	r2, r2, #2
 8008a86:	9307      	strge	r3, [sp, #28]
 8008a88:	9307      	strlt	r3, [sp, #28]
 8008a8a:	bfb8      	it	lt
 8008a8c:	9204      	strlt	r2, [sp, #16]
 8008a8e:	7823      	ldrb	r3, [r4, #0]
 8008a90:	2b2e      	cmp	r3, #46	; 0x2e
 8008a92:	d10c      	bne.n	8008aae <_vfiprintf_r+0x176>
 8008a94:	7863      	ldrb	r3, [r4, #1]
 8008a96:	2b2a      	cmp	r3, #42	; 0x2a
 8008a98:	d135      	bne.n	8008b06 <_vfiprintf_r+0x1ce>
 8008a9a:	9b03      	ldr	r3, [sp, #12]
 8008a9c:	1d1a      	adds	r2, r3, #4
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	9203      	str	r2, [sp, #12]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	bfb8      	it	lt
 8008aa6:	f04f 33ff 	movlt.w	r3, #4294967295
 8008aaa:	3402      	adds	r4, #2
 8008aac:	9305      	str	r3, [sp, #20]
 8008aae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008b94 <_vfiprintf_r+0x25c>
 8008ab2:	7821      	ldrb	r1, [r4, #0]
 8008ab4:	2203      	movs	r2, #3
 8008ab6:	4650      	mov	r0, sl
 8008ab8:	f7f7 fb92 	bl	80001e0 <memchr>
 8008abc:	b140      	cbz	r0, 8008ad0 <_vfiprintf_r+0x198>
 8008abe:	2340      	movs	r3, #64	; 0x40
 8008ac0:	eba0 000a 	sub.w	r0, r0, sl
 8008ac4:	fa03 f000 	lsl.w	r0, r3, r0
 8008ac8:	9b04      	ldr	r3, [sp, #16]
 8008aca:	4303      	orrs	r3, r0
 8008acc:	3401      	adds	r4, #1
 8008ace:	9304      	str	r3, [sp, #16]
 8008ad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ad4:	482c      	ldr	r0, [pc, #176]	; (8008b88 <_vfiprintf_r+0x250>)
 8008ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ada:	2206      	movs	r2, #6
 8008adc:	f7f7 fb80 	bl	80001e0 <memchr>
 8008ae0:	2800      	cmp	r0, #0
 8008ae2:	d03f      	beq.n	8008b64 <_vfiprintf_r+0x22c>
 8008ae4:	4b29      	ldr	r3, [pc, #164]	; (8008b8c <_vfiprintf_r+0x254>)
 8008ae6:	bb1b      	cbnz	r3, 8008b30 <_vfiprintf_r+0x1f8>
 8008ae8:	9b03      	ldr	r3, [sp, #12]
 8008aea:	3307      	adds	r3, #7
 8008aec:	f023 0307 	bic.w	r3, r3, #7
 8008af0:	3308      	adds	r3, #8
 8008af2:	9303      	str	r3, [sp, #12]
 8008af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008af6:	443b      	add	r3, r7
 8008af8:	9309      	str	r3, [sp, #36]	; 0x24
 8008afa:	e767      	b.n	80089cc <_vfiprintf_r+0x94>
 8008afc:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b00:	460c      	mov	r4, r1
 8008b02:	2001      	movs	r0, #1
 8008b04:	e7a5      	b.n	8008a52 <_vfiprintf_r+0x11a>
 8008b06:	2300      	movs	r3, #0
 8008b08:	3401      	adds	r4, #1
 8008b0a:	9305      	str	r3, [sp, #20]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f04f 0c0a 	mov.w	ip, #10
 8008b12:	4620      	mov	r0, r4
 8008b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b18:	3a30      	subs	r2, #48	; 0x30
 8008b1a:	2a09      	cmp	r2, #9
 8008b1c:	d903      	bls.n	8008b26 <_vfiprintf_r+0x1ee>
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d0c5      	beq.n	8008aae <_vfiprintf_r+0x176>
 8008b22:	9105      	str	r1, [sp, #20]
 8008b24:	e7c3      	b.n	8008aae <_vfiprintf_r+0x176>
 8008b26:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e7f0      	b.n	8008b12 <_vfiprintf_r+0x1da>
 8008b30:	ab03      	add	r3, sp, #12
 8008b32:	9300      	str	r3, [sp, #0]
 8008b34:	462a      	mov	r2, r5
 8008b36:	4b16      	ldr	r3, [pc, #88]	; (8008b90 <_vfiprintf_r+0x258>)
 8008b38:	a904      	add	r1, sp, #16
 8008b3a:	4630      	mov	r0, r6
 8008b3c:	f3af 8000 	nop.w
 8008b40:	4607      	mov	r7, r0
 8008b42:	1c78      	adds	r0, r7, #1
 8008b44:	d1d6      	bne.n	8008af4 <_vfiprintf_r+0x1bc>
 8008b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008b48:	07d9      	lsls	r1, r3, #31
 8008b4a:	d405      	bmi.n	8008b58 <_vfiprintf_r+0x220>
 8008b4c:	89ab      	ldrh	r3, [r5, #12]
 8008b4e:	059a      	lsls	r2, r3, #22
 8008b50:	d402      	bmi.n	8008b58 <_vfiprintf_r+0x220>
 8008b52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b54:	f7ff fdb7 	bl	80086c6 <__retarget_lock_release_recursive>
 8008b58:	89ab      	ldrh	r3, [r5, #12]
 8008b5a:	065b      	lsls	r3, r3, #25
 8008b5c:	f53f af12 	bmi.w	8008984 <_vfiprintf_r+0x4c>
 8008b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b62:	e711      	b.n	8008988 <_vfiprintf_r+0x50>
 8008b64:	ab03      	add	r3, sp, #12
 8008b66:	9300      	str	r3, [sp, #0]
 8008b68:	462a      	mov	r2, r5
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <_vfiprintf_r+0x258>)
 8008b6c:	a904      	add	r1, sp, #16
 8008b6e:	4630      	mov	r0, r6
 8008b70:	f000 f880 	bl	8008c74 <_printf_i>
 8008b74:	e7e4      	b.n	8008b40 <_vfiprintf_r+0x208>
 8008b76:	bf00      	nop
 8008b78:	08009248 	.word	0x08009248
 8008b7c:	08009268 	.word	0x08009268
 8008b80:	08009228 	.word	0x08009228
 8008b84:	08009288 	.word	0x08009288
 8008b88:	08009292 	.word	0x08009292
 8008b8c:	00000000 	.word	0x00000000
 8008b90:	08008913 	.word	0x08008913
 8008b94:	0800928e 	.word	0x0800928e

08008b98 <_printf_common>:
 8008b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9c:	4616      	mov	r6, r2
 8008b9e:	4699      	mov	r9, r3
 8008ba0:	688a      	ldr	r2, [r1, #8]
 8008ba2:	690b      	ldr	r3, [r1, #16]
 8008ba4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	bfb8      	it	lt
 8008bac:	4613      	movlt	r3, r2
 8008bae:	6033      	str	r3, [r6, #0]
 8008bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb4:	4607      	mov	r7, r0
 8008bb6:	460c      	mov	r4, r1
 8008bb8:	b10a      	cbz	r2, 8008bbe <_printf_common+0x26>
 8008bba:	3301      	adds	r3, #1
 8008bbc:	6033      	str	r3, [r6, #0]
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	0699      	lsls	r1, r3, #26
 8008bc2:	bf42      	ittt	mi
 8008bc4:	6833      	ldrmi	r3, [r6, #0]
 8008bc6:	3302      	addmi	r3, #2
 8008bc8:	6033      	strmi	r3, [r6, #0]
 8008bca:	6825      	ldr	r5, [r4, #0]
 8008bcc:	f015 0506 	ands.w	r5, r5, #6
 8008bd0:	d106      	bne.n	8008be0 <_printf_common+0x48>
 8008bd2:	f104 0a19 	add.w	sl, r4, #25
 8008bd6:	68e3      	ldr	r3, [r4, #12]
 8008bd8:	6832      	ldr	r2, [r6, #0]
 8008bda:	1a9b      	subs	r3, r3, r2
 8008bdc:	42ab      	cmp	r3, r5
 8008bde:	dc26      	bgt.n	8008c2e <_printf_common+0x96>
 8008be0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be4:	1e13      	subs	r3, r2, #0
 8008be6:	6822      	ldr	r2, [r4, #0]
 8008be8:	bf18      	it	ne
 8008bea:	2301      	movne	r3, #1
 8008bec:	0692      	lsls	r2, r2, #26
 8008bee:	d42b      	bmi.n	8008c48 <_printf_common+0xb0>
 8008bf0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf4:	4649      	mov	r1, r9
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	47c0      	blx	r8
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d01e      	beq.n	8008c3c <_printf_common+0xa4>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	68e5      	ldr	r5, [r4, #12]
 8008c02:	6832      	ldr	r2, [r6, #0]
 8008c04:	f003 0306 	and.w	r3, r3, #6
 8008c08:	2b04      	cmp	r3, #4
 8008c0a:	bf08      	it	eq
 8008c0c:	1aad      	subeq	r5, r5, r2
 8008c0e:	68a3      	ldr	r3, [r4, #8]
 8008c10:	6922      	ldr	r2, [r4, #16]
 8008c12:	bf0c      	ite	eq
 8008c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c18:	2500      	movne	r5, #0
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	bfc4      	itt	gt
 8008c1e:	1a9b      	subgt	r3, r3, r2
 8008c20:	18ed      	addgt	r5, r5, r3
 8008c22:	2600      	movs	r6, #0
 8008c24:	341a      	adds	r4, #26
 8008c26:	42b5      	cmp	r5, r6
 8008c28:	d11a      	bne.n	8008c60 <_printf_common+0xc8>
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	e008      	b.n	8008c40 <_printf_common+0xa8>
 8008c2e:	2301      	movs	r3, #1
 8008c30:	4652      	mov	r2, sl
 8008c32:	4649      	mov	r1, r9
 8008c34:	4638      	mov	r0, r7
 8008c36:	47c0      	blx	r8
 8008c38:	3001      	adds	r0, #1
 8008c3a:	d103      	bne.n	8008c44 <_printf_common+0xac>
 8008c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c44:	3501      	adds	r5, #1
 8008c46:	e7c6      	b.n	8008bd6 <_printf_common+0x3e>
 8008c48:	18e1      	adds	r1, r4, r3
 8008c4a:	1c5a      	adds	r2, r3, #1
 8008c4c:	2030      	movs	r0, #48	; 0x30
 8008c4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c52:	4422      	add	r2, r4
 8008c54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	e7c7      	b.n	8008bf0 <_printf_common+0x58>
 8008c60:	2301      	movs	r3, #1
 8008c62:	4622      	mov	r2, r4
 8008c64:	4649      	mov	r1, r9
 8008c66:	4638      	mov	r0, r7
 8008c68:	47c0      	blx	r8
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d0e6      	beq.n	8008c3c <_printf_common+0xa4>
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7d9      	b.n	8008c26 <_printf_common+0x8e>
	...

08008c74 <_printf_i>:
 8008c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c78:	460c      	mov	r4, r1
 8008c7a:	4691      	mov	r9, r2
 8008c7c:	7e27      	ldrb	r7, [r4, #24]
 8008c7e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008c80:	2f78      	cmp	r7, #120	; 0x78
 8008c82:	4680      	mov	r8, r0
 8008c84:	469a      	mov	sl, r3
 8008c86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c8a:	d807      	bhi.n	8008c9c <_printf_i+0x28>
 8008c8c:	2f62      	cmp	r7, #98	; 0x62
 8008c8e:	d80a      	bhi.n	8008ca6 <_printf_i+0x32>
 8008c90:	2f00      	cmp	r7, #0
 8008c92:	f000 80d8 	beq.w	8008e46 <_printf_i+0x1d2>
 8008c96:	2f58      	cmp	r7, #88	; 0x58
 8008c98:	f000 80a3 	beq.w	8008de2 <_printf_i+0x16e>
 8008c9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008ca0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca4:	e03a      	b.n	8008d1c <_printf_i+0xa8>
 8008ca6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008caa:	2b15      	cmp	r3, #21
 8008cac:	d8f6      	bhi.n	8008c9c <_printf_i+0x28>
 8008cae:	a001      	add	r0, pc, #4	; (adr r0, 8008cb4 <_printf_i+0x40>)
 8008cb0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008cb4:	08008d0d 	.word	0x08008d0d
 8008cb8:	08008d21 	.word	0x08008d21
 8008cbc:	08008c9d 	.word	0x08008c9d
 8008cc0:	08008c9d 	.word	0x08008c9d
 8008cc4:	08008c9d 	.word	0x08008c9d
 8008cc8:	08008c9d 	.word	0x08008c9d
 8008ccc:	08008d21 	.word	0x08008d21
 8008cd0:	08008c9d 	.word	0x08008c9d
 8008cd4:	08008c9d 	.word	0x08008c9d
 8008cd8:	08008c9d 	.word	0x08008c9d
 8008cdc:	08008c9d 	.word	0x08008c9d
 8008ce0:	08008e2d 	.word	0x08008e2d
 8008ce4:	08008d51 	.word	0x08008d51
 8008ce8:	08008e0f 	.word	0x08008e0f
 8008cec:	08008c9d 	.word	0x08008c9d
 8008cf0:	08008c9d 	.word	0x08008c9d
 8008cf4:	08008e4f 	.word	0x08008e4f
 8008cf8:	08008c9d 	.word	0x08008c9d
 8008cfc:	08008d51 	.word	0x08008d51
 8008d00:	08008c9d 	.word	0x08008c9d
 8008d04:	08008c9d 	.word	0x08008c9d
 8008d08:	08008e17 	.word	0x08008e17
 8008d0c:	680b      	ldr	r3, [r1, #0]
 8008d0e:	1d1a      	adds	r2, r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	600a      	str	r2, [r1, #0]
 8008d14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0a3      	b.n	8008e68 <_printf_i+0x1f4>
 8008d20:	6825      	ldr	r5, [r4, #0]
 8008d22:	6808      	ldr	r0, [r1, #0]
 8008d24:	062e      	lsls	r6, r5, #24
 8008d26:	f100 0304 	add.w	r3, r0, #4
 8008d2a:	d50a      	bpl.n	8008d42 <_printf_i+0xce>
 8008d2c:	6805      	ldr	r5, [r0, #0]
 8008d2e:	600b      	str	r3, [r1, #0]
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	da03      	bge.n	8008d3c <_printf_i+0xc8>
 8008d34:	232d      	movs	r3, #45	; 0x2d
 8008d36:	426d      	negs	r5, r5
 8008d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d3c:	485e      	ldr	r0, [pc, #376]	; (8008eb8 <_printf_i+0x244>)
 8008d3e:	230a      	movs	r3, #10
 8008d40:	e019      	b.n	8008d76 <_printf_i+0x102>
 8008d42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008d46:	6805      	ldr	r5, [r0, #0]
 8008d48:	600b      	str	r3, [r1, #0]
 8008d4a:	bf18      	it	ne
 8008d4c:	b22d      	sxthne	r5, r5
 8008d4e:	e7ef      	b.n	8008d30 <_printf_i+0xbc>
 8008d50:	680b      	ldr	r3, [r1, #0]
 8008d52:	6825      	ldr	r5, [r4, #0]
 8008d54:	1d18      	adds	r0, r3, #4
 8008d56:	6008      	str	r0, [r1, #0]
 8008d58:	0628      	lsls	r0, r5, #24
 8008d5a:	d501      	bpl.n	8008d60 <_printf_i+0xec>
 8008d5c:	681d      	ldr	r5, [r3, #0]
 8008d5e:	e002      	b.n	8008d66 <_printf_i+0xf2>
 8008d60:	0669      	lsls	r1, r5, #25
 8008d62:	d5fb      	bpl.n	8008d5c <_printf_i+0xe8>
 8008d64:	881d      	ldrh	r5, [r3, #0]
 8008d66:	4854      	ldr	r0, [pc, #336]	; (8008eb8 <_printf_i+0x244>)
 8008d68:	2f6f      	cmp	r7, #111	; 0x6f
 8008d6a:	bf0c      	ite	eq
 8008d6c:	2308      	moveq	r3, #8
 8008d6e:	230a      	movne	r3, #10
 8008d70:	2100      	movs	r1, #0
 8008d72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d76:	6866      	ldr	r6, [r4, #4]
 8008d78:	60a6      	str	r6, [r4, #8]
 8008d7a:	2e00      	cmp	r6, #0
 8008d7c:	bfa2      	ittt	ge
 8008d7e:	6821      	ldrge	r1, [r4, #0]
 8008d80:	f021 0104 	bicge.w	r1, r1, #4
 8008d84:	6021      	strge	r1, [r4, #0]
 8008d86:	b90d      	cbnz	r5, 8008d8c <_printf_i+0x118>
 8008d88:	2e00      	cmp	r6, #0
 8008d8a:	d04d      	beq.n	8008e28 <_printf_i+0x1b4>
 8008d8c:	4616      	mov	r6, r2
 8008d8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008d92:	fb03 5711 	mls	r7, r3, r1, r5
 8008d96:	5dc7      	ldrb	r7, [r0, r7]
 8008d98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008d9c:	462f      	mov	r7, r5
 8008d9e:	42bb      	cmp	r3, r7
 8008da0:	460d      	mov	r5, r1
 8008da2:	d9f4      	bls.n	8008d8e <_printf_i+0x11a>
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d10b      	bne.n	8008dc0 <_printf_i+0x14c>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	07df      	lsls	r7, r3, #31
 8008dac:	d508      	bpl.n	8008dc0 <_printf_i+0x14c>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	6861      	ldr	r1, [r4, #4]
 8008db2:	4299      	cmp	r1, r3
 8008db4:	bfde      	ittt	le
 8008db6:	2330      	movle	r3, #48	; 0x30
 8008db8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008dbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008dc0:	1b92      	subs	r2, r2, r6
 8008dc2:	6122      	str	r2, [r4, #16]
 8008dc4:	f8cd a000 	str.w	sl, [sp]
 8008dc8:	464b      	mov	r3, r9
 8008dca:	aa03      	add	r2, sp, #12
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4640      	mov	r0, r8
 8008dd0:	f7ff fee2 	bl	8008b98 <_printf_common>
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d14c      	bne.n	8008e72 <_printf_i+0x1fe>
 8008dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ddc:	b004      	add	sp, #16
 8008dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008de2:	4835      	ldr	r0, [pc, #212]	; (8008eb8 <_printf_i+0x244>)
 8008de4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	680e      	ldr	r6, [r1, #0]
 8008dec:	061f      	lsls	r7, r3, #24
 8008dee:	f856 5b04 	ldr.w	r5, [r6], #4
 8008df2:	600e      	str	r6, [r1, #0]
 8008df4:	d514      	bpl.n	8008e20 <_printf_i+0x1ac>
 8008df6:	07d9      	lsls	r1, r3, #31
 8008df8:	bf44      	itt	mi
 8008dfa:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfe:	6023      	strmi	r3, [r4, #0]
 8008e00:	b91d      	cbnz	r5, 8008e0a <_printf_i+0x196>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f023 0320 	bic.w	r3, r3, #32
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	2310      	movs	r3, #16
 8008e0c:	e7b0      	b.n	8008d70 <_printf_i+0xfc>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	f043 0320 	orr.w	r3, r3, #32
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	2378      	movs	r3, #120	; 0x78
 8008e18:	4828      	ldr	r0, [pc, #160]	; (8008ebc <_printf_i+0x248>)
 8008e1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e1e:	e7e3      	b.n	8008de8 <_printf_i+0x174>
 8008e20:	065e      	lsls	r6, r3, #25
 8008e22:	bf48      	it	mi
 8008e24:	b2ad      	uxthmi	r5, r5
 8008e26:	e7e6      	b.n	8008df6 <_printf_i+0x182>
 8008e28:	4616      	mov	r6, r2
 8008e2a:	e7bb      	b.n	8008da4 <_printf_i+0x130>
 8008e2c:	680b      	ldr	r3, [r1, #0]
 8008e2e:	6826      	ldr	r6, [r4, #0]
 8008e30:	6960      	ldr	r0, [r4, #20]
 8008e32:	1d1d      	adds	r5, r3, #4
 8008e34:	600d      	str	r5, [r1, #0]
 8008e36:	0635      	lsls	r5, r6, #24
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	d501      	bpl.n	8008e40 <_printf_i+0x1cc>
 8008e3c:	6018      	str	r0, [r3, #0]
 8008e3e:	e002      	b.n	8008e46 <_printf_i+0x1d2>
 8008e40:	0671      	lsls	r1, r6, #25
 8008e42:	d5fb      	bpl.n	8008e3c <_printf_i+0x1c8>
 8008e44:	8018      	strh	r0, [r3, #0]
 8008e46:	2300      	movs	r3, #0
 8008e48:	6123      	str	r3, [r4, #16]
 8008e4a:	4616      	mov	r6, r2
 8008e4c:	e7ba      	b.n	8008dc4 <_printf_i+0x150>
 8008e4e:	680b      	ldr	r3, [r1, #0]
 8008e50:	1d1a      	adds	r2, r3, #4
 8008e52:	600a      	str	r2, [r1, #0]
 8008e54:	681e      	ldr	r6, [r3, #0]
 8008e56:	6862      	ldr	r2, [r4, #4]
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4630      	mov	r0, r6
 8008e5c:	f7f7 f9c0 	bl	80001e0 <memchr>
 8008e60:	b108      	cbz	r0, 8008e66 <_printf_i+0x1f2>
 8008e62:	1b80      	subs	r0, r0, r6
 8008e64:	6060      	str	r0, [r4, #4]
 8008e66:	6863      	ldr	r3, [r4, #4]
 8008e68:	6123      	str	r3, [r4, #16]
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e70:	e7a8      	b.n	8008dc4 <_printf_i+0x150>
 8008e72:	6923      	ldr	r3, [r4, #16]
 8008e74:	4632      	mov	r2, r6
 8008e76:	4649      	mov	r1, r9
 8008e78:	4640      	mov	r0, r8
 8008e7a:	47d0      	blx	sl
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d0ab      	beq.n	8008dd8 <_printf_i+0x164>
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	079b      	lsls	r3, r3, #30
 8008e84:	d413      	bmi.n	8008eae <_printf_i+0x23a>
 8008e86:	68e0      	ldr	r0, [r4, #12]
 8008e88:	9b03      	ldr	r3, [sp, #12]
 8008e8a:	4298      	cmp	r0, r3
 8008e8c:	bfb8      	it	lt
 8008e8e:	4618      	movlt	r0, r3
 8008e90:	e7a4      	b.n	8008ddc <_printf_i+0x168>
 8008e92:	2301      	movs	r3, #1
 8008e94:	4632      	mov	r2, r6
 8008e96:	4649      	mov	r1, r9
 8008e98:	4640      	mov	r0, r8
 8008e9a:	47d0      	blx	sl
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d09b      	beq.n	8008dd8 <_printf_i+0x164>
 8008ea0:	3501      	adds	r5, #1
 8008ea2:	68e3      	ldr	r3, [r4, #12]
 8008ea4:	9903      	ldr	r1, [sp, #12]
 8008ea6:	1a5b      	subs	r3, r3, r1
 8008ea8:	42ab      	cmp	r3, r5
 8008eaa:	dcf2      	bgt.n	8008e92 <_printf_i+0x21e>
 8008eac:	e7eb      	b.n	8008e86 <_printf_i+0x212>
 8008eae:	2500      	movs	r5, #0
 8008eb0:	f104 0619 	add.w	r6, r4, #25
 8008eb4:	e7f5      	b.n	8008ea2 <_printf_i+0x22e>
 8008eb6:	bf00      	nop
 8008eb8:	08009299 	.word	0x08009299
 8008ebc:	080092aa 	.word	0x080092aa

08008ec0 <_sbrk_r>:
 8008ec0:	b538      	push	{r3, r4, r5, lr}
 8008ec2:	4d06      	ldr	r5, [pc, #24]	; (8008edc <_sbrk_r+0x1c>)
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4608      	mov	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7fa fb38 	bl	8003540 <_sbrk>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d102      	bne.n	8008eda <_sbrk_r+0x1a>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	b103      	cbz	r3, 8008eda <_sbrk_r+0x1a>
 8008ed8:	6023      	str	r3, [r4, #0]
 8008eda:	bd38      	pop	{r3, r4, r5, pc}
 8008edc:	200007c8 	.word	0x200007c8

08008ee0 <__sread>:
 8008ee0:	b510      	push	{r4, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	f000 f8a0 	bl	800902c <_read_r>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	bfab      	itete	ge
 8008ef0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8008ef4:	181b      	addge	r3, r3, r0
 8008ef6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008efa:	bfac      	ite	ge
 8008efc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008efe:	81a3      	strhlt	r3, [r4, #12]
 8008f00:	bd10      	pop	{r4, pc}

08008f02 <__swrite>:
 8008f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f06:	461f      	mov	r7, r3
 8008f08:	898b      	ldrh	r3, [r1, #12]
 8008f0a:	05db      	lsls	r3, r3, #23
 8008f0c:	4605      	mov	r5, r0
 8008f0e:	460c      	mov	r4, r1
 8008f10:	4616      	mov	r6, r2
 8008f12:	d505      	bpl.n	8008f20 <__swrite+0x1e>
 8008f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f18:	2302      	movs	r3, #2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f000 f868 	bl	8008ff0 <_lseek_r>
 8008f20:	89a3      	ldrh	r3, [r4, #12]
 8008f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f2a:	81a3      	strh	r3, [r4, #12]
 8008f2c:	4632      	mov	r2, r6
 8008f2e:	463b      	mov	r3, r7
 8008f30:	4628      	mov	r0, r5
 8008f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f36:	f000 b817 	b.w	8008f68 <_write_r>

08008f3a <__sseek>:
 8008f3a:	b510      	push	{r4, lr}
 8008f3c:	460c      	mov	r4, r1
 8008f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f42:	f000 f855 	bl	8008ff0 <_lseek_r>
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	bf15      	itete	ne
 8008f4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f56:	81a3      	strheq	r3, [r4, #12]
 8008f58:	bf18      	it	ne
 8008f5a:	81a3      	strhne	r3, [r4, #12]
 8008f5c:	bd10      	pop	{r4, pc}

08008f5e <__sclose>:
 8008f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f62:	f000 b813 	b.w	8008f8c <_close_r>
	...

08008f68 <_write_r>:
 8008f68:	b538      	push	{r3, r4, r5, lr}
 8008f6a:	4d07      	ldr	r5, [pc, #28]	; (8008f88 <_write_r+0x20>)
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	4608      	mov	r0, r1
 8008f70:	4611      	mov	r1, r2
 8008f72:	2200      	movs	r2, #0
 8008f74:	602a      	str	r2, [r5, #0]
 8008f76:	461a      	mov	r2, r3
 8008f78:	f7fa fa91 	bl	800349e <_write>
 8008f7c:	1c43      	adds	r3, r0, #1
 8008f7e:	d102      	bne.n	8008f86 <_write_r+0x1e>
 8008f80:	682b      	ldr	r3, [r5, #0]
 8008f82:	b103      	cbz	r3, 8008f86 <_write_r+0x1e>
 8008f84:	6023      	str	r3, [r4, #0]
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
 8008f88:	200007c8 	.word	0x200007c8

08008f8c <_close_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_close_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7fa fa9d 	bl	80034d6 <_close>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_close_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_close_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	200007c8 	.word	0x200007c8

08008fac <_fstat_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_fstat_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7fa fa98 	bl	80034ee <_fstat>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_fstat_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_fstat_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	200007c8 	.word	0x200007c8

08008fd0 <_isatty_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	; (8008fec <_isatty_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7fa fa97 	bl	800350e <_isatty>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_isatty_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_isatty_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	200007c8 	.word	0x200007c8

08008ff0 <_lseek_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	; (8009010 <_lseek_r+0x20>)
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f7fa fa90 	bl	8003524 <_lseek>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_lseek_r+0x1e>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_lseek_r+0x1e>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	200007c8 	.word	0x200007c8

08009014 <__malloc_lock>:
 8009014:	4801      	ldr	r0, [pc, #4]	; (800901c <__malloc_lock+0x8>)
 8009016:	f7ff bb55 	b.w	80086c4 <__retarget_lock_acquire_recursive>
 800901a:	bf00      	nop
 800901c:	200007c0 	.word	0x200007c0

08009020 <__malloc_unlock>:
 8009020:	4801      	ldr	r0, [pc, #4]	; (8009028 <__malloc_unlock+0x8>)
 8009022:	f7ff bb50 	b.w	80086c6 <__retarget_lock_release_recursive>
 8009026:	bf00      	nop
 8009028:	200007c0 	.word	0x200007c0

0800902c <_read_r>:
 800902c:	b538      	push	{r3, r4, r5, lr}
 800902e:	4d07      	ldr	r5, [pc, #28]	; (800904c <_read_r+0x20>)
 8009030:	4604      	mov	r4, r0
 8009032:	4608      	mov	r0, r1
 8009034:	4611      	mov	r1, r2
 8009036:	2200      	movs	r2, #0
 8009038:	602a      	str	r2, [r5, #0]
 800903a:	461a      	mov	r2, r3
 800903c:	f7fa fa12 	bl	8003464 <_read>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_read_r+0x1e>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_read_r+0x1e>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	200007c8 	.word	0x200007c8

08009050 <truncf>:
 8009050:	ee10 3a10 	vmov	r3, s0
 8009054:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8009058:	3a7f      	subs	r2, #127	; 0x7f
 800905a:	2a16      	cmp	r2, #22
 800905c:	ee10 1a10 	vmov	r1, s0
 8009060:	dc07      	bgt.n	8009072 <truncf+0x22>
 8009062:	2a00      	cmp	r2, #0
 8009064:	bfa5      	ittet	ge
 8009066:	4b04      	ldrge	r3, [pc, #16]	; (8009078 <truncf+0x28>)
 8009068:	4113      	asrge	r3, r2
 800906a:	f003 4300 	andlt.w	r3, r3, #2147483648	; 0x80000000
 800906e:	ea21 0303 	bicge.w	r3, r1, r3
 8009072:	ee00 3a10 	vmov	s0, r3
 8009076:	4770      	bx	lr
 8009078:	007fffff 	.word	0x007fffff

0800907c <_init>:
 800907c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907e:	bf00      	nop
 8009080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009082:	bc08      	pop	{r3}
 8009084:	469e      	mov	lr, r3
 8009086:	4770      	bx	lr

08009088 <_fini>:
 8009088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800908a:	bf00      	nop
 800908c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908e:	bc08      	pop	{r3}
 8009090:	469e      	mov	lr, r3
 8009092:	4770      	bx	lr
