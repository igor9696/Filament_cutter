
Filament_cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074c0  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08007658  08007658  00017658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007730  08007730  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000010  08007748  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08007748  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a017  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033db  00000000  00000000  0003a057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012c0  00000000  00000000  0003d438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001170  00000000  00000000  0003e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000249c8  00000000  00000000  0003f868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c7e  00000000  00000000  00064230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc7f6  00000000  00000000  00079eae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001566a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d60  00000000  00000000  001566f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007640 	.word	0x08007640

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007640 	.word	0x08007640

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <DC_motor_encoder_Init>:
 *      Author: DELL
 */

#include "L298_dc.h"

void DC_motor_encoder_Init(dc_motor *motor) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_AUTORELOAD(motor->encoder_timer, FULL_ROTATION_PULSE);
	//HAL_TIM_Encoder_Start(motor->encoder_timer, TIM_CHANNEL_ALL);
	HAL_LPTIM_Encoder_Start_IT(motor->encoder_timer, FULL_ROTATION_PULSE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f241 1192 	movw	r1, #4498	; 0x1192
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 ff47 	bl	8003b50 <HAL_LPTIM_Encoder_Start_IT>
	/* Enable Autoreload match interrupt */
	__HAL_LPTIM_ENABLE_IT(motor->encoder_timer, LPTIM_IT_ARRM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0202 	orr.w	r2, r2, #2
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <DC_motor_Init>:

void DC_motor_Init(dc_motor *motor, TIM_HandleTypeDef *Timer,
		uint32_t PWM_Channel, GPIO_TypeDef *Port_IN1, uint16_t IN1_Pin,
		GPIO_TypeDef *Port_IN2, uint16_t IN2_Pin,
		LPTIM_HandleTypeDef *Encoder_timer) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	603b      	str	r3, [r7, #0]
	motor->pwm_timer.htim = Timer;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	601a      	str	r2, [r3, #0]
	motor->pwm_timer.channel = PWM_Channel;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	605a      	str	r2, [r3, #4]

	motor->Port_IN1 = Port_IN1;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	609a      	str	r2, [r3, #8]
	motor->Port_IN2 = Port_IN2;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	69fa      	ldr	r2, [r7, #28]
 8000d02:	60da      	str	r2, [r3, #12]
	motor->Pin_IN1 = IN1_Pin;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	8b3a      	ldrh	r2, [r7, #24]
 8000d08:	821a      	strh	r2, [r3, #16]
	motor->Pin_IN2 = IN2_Pin;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	8c3a      	ldrh	r2, [r7, #32]
 8000d0e:	825a      	strh	r2, [r3, #18]
	motor->encoder_timer = Encoder_timer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	619a      	str	r2, [r3, #24]

	DC_motor_encoder_Init(motor);
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff ffc8 	bl	8000cac <DC_motor_encoder_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <DC_set_speed>:

void DC_set_speed(dc_motor *motor, uint8_t speed) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	if (speed > 100) speed = 100;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	d901      	bls.n	8000d3a <DC_set_speed+0x16>
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COUNTER(motor->pwm_timer.htim, 0);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <DC_set_speed+0x34>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d56:	e02c      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d105      	bne.n	8000d6c <DC_set_speed+0x48>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d6a:	e022      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d105      	bne.n	8000d80 <DC_set_speed+0x5c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000d7e:	e018      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	d105      	bne.n	8000d94 <DC_set_speed+0x70>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d92:	e00e      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d105      	bne.n	8000da8 <DC_set_speed+0x84>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000da6:	e004      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DC_set_direction>:

void DC_set_direction(dc_motor *motor, DC_direction DIR) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
	motor->DIR = DIR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	751a      	strb	r2, [r3, #20]

	if (motor->DIR == LEFT) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7d1b      	ldrb	r3, [r3, #20]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d110      	bne.n	8000dfa <DC_set_direction+0x3c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_RESET);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	8a1b      	ldrh	r3, [r3, #16]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	f002 fdfa 	bl	80039dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68d8      	ldr	r0, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	8a5b      	ldrh	r3, [r3, #18]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	f002 fdf2 	bl	80039dc <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
	}
}
 8000df8:	e00f      	b.n	8000e1a <DC_set_direction+0x5c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6898      	ldr	r0, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	8a1b      	ldrh	r3, [r3, #16]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	f002 fde9 	bl	80039dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68d8      	ldr	r0, [r3, #12]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	8a5b      	ldrh	r3, [r3, #18]
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	f002 fde1 	bl	80039dc <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <DC_rotate>:

void DC_rotate(dc_motor *motor, DC_direction DIR, uint8_t speed) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	70bb      	strb	r3, [r7, #2]
	DC_set_direction(motor, DIR);
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffc1 	bl	8000dbe <DC_set_direction>
	DC_set_speed(motor, speed);
 8000e3c:	78bb      	ldrb	r3, [r7, #2]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff6f 	bl	8000d24 <DC_set_speed>

	HAL_TIM_PWM_Start(motor->pwm_timer.htim, motor->pwm_timer.channel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f004 fc75 	bl	8005740 <HAL_TIM_PWM_Start>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <DC_stop>:

void DC_stop(dc_motor *motor) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6898      	ldr	r0, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	8a1b      	ldrh	r3, [r3, #16]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f002 fdb3 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68d8      	ldr	r0, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8a5b      	ldrh	r3, [r3, #18]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f002 fdab 	bl	80039dc <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <DC_stop+0x3c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2264      	movs	r2, #100	; 0x64
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e98:	e02c      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d105      	bne.n	8000eae <DC_stop+0x50>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000eac:	e022      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d105      	bne.n	8000ec2 <DC_stop+0x64>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ec0:	e018      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d105      	bne.n	8000ed6 <DC_stop+0x78>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed4:	e00e      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d105      	bne.n	8000eea <DC_stop+0x8c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ee8:	e004      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DC_set_angle>:
{
	return __HAL_TIM_GET_COUNTER(motor->encoder_timer);
}

void DC_set_angle(dc_motor *motor, uint16_t angle, uint8_t speed, DC_direction DIR)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	707b      	strb	r3, [r7, #1]
 8000f12:	4613      	mov	r3, r2
 8000f14:	703b      	strb	r3, [r7, #0]
	if(CUTTING_PROCESS_FLAG == 0)
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <DC_set_angle+0x64>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d11a      	bne.n	8000f56 <DC_set_angle+0x5a>
	{
		CUTTING_PROCESS_FLAG = 1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <DC_set_angle+0x64>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	701a      	strb	r2, [r3, #0]
		uint16_t pulses_to_count;
		pulses_to_count = (angle * FULL_ROTATION_PULSE) / 360;
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	f241 1292 	movw	r2, #4498	; 0x1192
 8000f2c:	fb02 f303 	mul.w	r3, r2, r3
 8000f30:	4a0c      	ldr	r2, [pc, #48]	; (8000f64 <DC_set_angle+0x68>)
 8000f32:	fb82 1203 	smull	r1, r2, r2, r3
 8000f36:	441a      	add	r2, r3
 8000f38:	1212      	asrs	r2, r2, #8
 8000f3a:	17db      	asrs	r3, r3, #31
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	81fb      	strh	r3, [r7, #14]
		__HAL_LPTIM_AUTORELOAD_SET(motor->encoder_timer, pulses_to_count);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	89fa      	ldrh	r2, [r7, #14]
 8000f48:	619a      	str	r2, [r3, #24]
		DC_rotate(motor, DIR, speed);
 8000f4a:	787a      	ldrb	r2, [r7, #1]
 8000f4c:	783b      	ldrb	r3, [r7, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff66 	bl	8000e22 <DC_rotate>
	}

}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000088 	.word	0x20000088
 8000f64:	b60b60b7 	.word	0xb60b60b7

08000f68 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e01f      	b.n	8000fb8 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000f78:	79fa      	ldrb	r2, [r7, #7]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d005      	beq.n	8000f94 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	480e      	ldr	r0, [pc, #56]	; (8000fc8 <SendByteSPI+0x60>)
 8000f8e:	f002 fd25 	bl	80039dc <HAL_GPIO_WritePin>
 8000f92:	e004      	b.n	8000f9e <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	480b      	ldr	r0, [pc, #44]	; (8000fc8 <SendByteSPI+0x60>)
 8000f9a:	f002 fd1f 	bl	80039dc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <SendByteSPI+0x60>)
 8000fa4:	f002 fd1a 	bl	80039dc <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2108      	movs	r1, #8
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <SendByteSPI+0x60>)
 8000fae:	f002 fd15 	bl	80039dc <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60fb      	str	r3, [r7, #12]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	dddc      	ble.n	8000f78 <SendByteSPI+0x10>

	}
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	48000800 	.word	0x48000800

08000fcc <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	2104      	movs	r1, #4
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <ST7920_SendCmd+0x4c>)
 8000fdc:	f002 fcfe 	bl	80039dc <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000fe0:	20f8      	movs	r0, #248	; 0xf8
 8000fe2:	f7ff ffc1 	bl	8000f68 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f023 030f 	bic.w	r3, r3, #15
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ffba 	bl	8000f68 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	011b      	lsls	r3, r3, #4
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffb4 	bl	8000f68 <SendByteSPI>
	delay_us(50);
 8001000:	2032      	movs	r0, #50	; 0x32
 8001002:	f000 fb87 	bl	8001714 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001006:	2200      	movs	r2, #0
 8001008:	2104      	movs	r1, #4
 800100a:	4803      	ldr	r0, [pc, #12]	; (8001018 <ST7920_SendCmd+0x4c>)
 800100c:	f002 fce6 	bl	80039dc <HAL_GPIO_WritePin>

}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	48000800 	.word	0x48000800

0800101c <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001026:	2201      	movs	r2, #1
 8001028:	2104      	movs	r1, #4
 800102a:	480f      	ldr	r0, [pc, #60]	; (8001068 <ST7920_SendData+0x4c>)
 800102c:	f002 fcd6 	bl	80039dc <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 8001030:	20fa      	movs	r0, #250	; 0xfa
 8001032:	f7ff ff99 	bl	8000f68 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	f023 030f 	bic.w	r3, r3, #15
 800103c:	b2db      	uxtb	r3, r3
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff ff92 	bl	8000f68 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff8c 	bl	8000f68 <SendByteSPI>
	delay_us(50);
 8001050:	2032      	movs	r0, #50	; 0x32
 8001052:	f000 fb5f 	bl	8001714 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001056:	2200      	movs	r2, #0
 8001058:	2104      	movs	r1, #4
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <ST7920_SendData+0x4c>)
 800105c:	f002 fcbe 	bl	80039dc <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	48000800 	.word	0x48000800

0800106c <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b03      	cmp	r3, #3
 800107c:	d81e      	bhi.n	80010bc <ST7920_SendString+0x50>
 800107e:	a201      	add	r2, pc, #4	; (adr r2, 8001084 <ST7920_SendString+0x18>)
 8001080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001084:	08001095 	.word	0x08001095
 8001088:	0800109f 	.word	0x0800109f
 800108c:	080010a9 	.word	0x080010a9
 8001090:	080010b3 	.word	0x080010b3
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800109a:	60bb      	str	r3, [r7, #8]
            break;
 800109c:	e013      	b.n	80010c6 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80010a4:	60bb      	str	r3, [r7, #8]
            break;
 80010a6:	e00e      	b.n	80010c6 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 80010ae:	60bb      	str	r3, [r7, #8]
            break;
 80010b0:	e009      	b.n	80010c6 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80010b8:	60bb      	str	r3, [r7, #8]
            break;
 80010ba:	e004      	b.n	80010c6 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	60bb      	str	r3, [r7, #8]
            break;
 80010c4:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff ff7e 	bl	8000fcc <ST7920_SendCmd>

    while (*string)
 80010d0:	e006      	b.n	80010e0 <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	1c5a      	adds	r2, r3, #1
 80010d6:	607a      	str	r2, [r7, #4]
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff9e 	bl	800101c <ST7920_SendData>
    while (*string)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f4      	bne.n	80010d2 <ST7920_SendString+0x66>
    	}
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop

080010f4 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d115      	bne.n	800112e <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 8001102:	2030      	movs	r0, #48	; 0x30
 8001104:	f7ff ff62 	bl	8000fcc <ST7920_SendCmd>
		HAL_Delay (1);
 8001108:	2001      	movs	r0, #1
 800110a:	f002 f99f 	bl	800344c <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800110e:	2034      	movs	r0, #52	; 0x34
 8001110:	f7ff ff5c 	bl	8000fcc <ST7920_SendCmd>
		HAL_Delay (1);
 8001114:	2001      	movs	r0, #1
 8001116:	f002 f999 	bl	800344c <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 800111a:	2036      	movs	r0, #54	; 0x36
 800111c:	f7ff ff56 	bl	8000fcc <ST7920_SendCmd>
		HAL_Delay (1);
 8001120:	2001      	movs	r0, #1
 8001122:	f002 f993 	bl	800344c <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <ST7920_GraphicMode+0x5c>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 800112c:	e00b      	b.n	8001146 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d108      	bne.n	8001146 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8001134:	2030      	movs	r0, #48	; 0x30
 8001136:	f7ff ff49 	bl	8000fcc <ST7920_SendCmd>
		HAL_Delay (1);
 800113a:	2001      	movs	r0, #1
 800113c:	f002 f986 	bl	800344c <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <ST7920_GraphicMode+0x5c>)
 8001142:	2200      	movs	r2, #0
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	2000002c 	.word	0x2000002c

08001154 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800115c:	2300      	movs	r3, #0
 800115e:	73bb      	strb	r3, [r7, #14]
 8001160:	e06a      	b.n	8001238 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8001162:	7bbb      	ldrb	r3, [r7, #14]
 8001164:	2b1f      	cmp	r3, #31
 8001166:	d830      	bhi.n	80011ca <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e029      	b.n	80011c2 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800116e:	7bbb      	ldrb	r3, [r7, #14]
 8001170:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001174:	b2db      	uxtb	r3, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ff28 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff ff21 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	7bbb      	ldrb	r3, [r7, #14]
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff3d 	bl	800101c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff30 	bl	800101c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	3301      	adds	r3, #1
 80011c0:	73fb      	strb	r3, [r7, #15]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b07      	cmp	r3, #7
 80011c6:	d9d2      	bls.n	800116e <ST7920_DrawBitmap+0x1a>
 80011c8:	e033      	b.n	8001232 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e02d      	b.n	800122c <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80011d0:	7bbb      	ldrb	r3, [r7, #14]
 80011d2:	3b20      	subs	r3, #32
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b25b      	sxtb	r3, r3
 80011d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fef3 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feec 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80011f4:	7bfa      	ldrb	r2, [r7, #15]
 80011f6:	7bbb      	ldrb	r3, [r7, #14]
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	461a      	mov	r2, r3
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4413      	add	r3, r2
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff08 	bl	800101c <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	1c5a      	adds	r2, r3, #1
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4413      	add	r3, r2
 8001218:	461a      	mov	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fefb 	bl	800101c <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001226:	7bfb      	ldrb	r3, [r7, #15]
 8001228:	3301      	adds	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b07      	cmp	r3, #7
 8001230:	d9ce      	bls.n	80011d0 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	3301      	adds	r3, #1
 8001236:	73bb      	strb	r3, [r7, #14]
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	2b3f      	cmp	r3, #63	; 0x3f
 800123c:	d991      	bls.n	8001162 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <ST7920_Update+0x10>)
 800124e:	f7ff ff81 	bl	8001154 <ST7920_DrawBitmap>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000090 	.word	0x20000090

0800125c <ST7920_Clear>:



void ST7920_Clear()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <ST7920_Clear+0x98>)
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d13a      	bne.n	80012e0 <ST7920_Clear+0x84>
	{
		uint8_t x, y;
		memset(image, 0, sizeof(image));
 800126a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126e:	2100      	movs	r1, #0
 8001270:	4821      	ldr	r0, [pc, #132]	; (80012f8 <ST7920_Clear+0x9c>)
 8001272:	f006 f9dd 	bl	8007630 <memset>
		for(y = 0; y < 64; y++)
 8001276:	2300      	movs	r3, #0
 8001278:	71bb      	strb	r3, [r7, #6]
 800127a:	e02d      	b.n	80012d8 <ST7920_Clear+0x7c>
		{
			if(y < 32)
 800127c:	79bb      	ldrb	r3, [r7, #6]
 800127e:	2b1f      	cmp	r3, #31
 8001280:	d80a      	bhi.n	8001298 <ST7920_Clear+0x3c>
			{
				ST7920_SendCmd(0x80 | y);
 8001282:	79bb      	ldrb	r3, [r7, #6]
 8001284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fe9e 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8001290:	2080      	movs	r0, #128	; 0x80
 8001292:	f7ff fe9b 	bl	8000fcc <ST7920_SendCmd>
 8001296:	e00d      	b.n	80012b4 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	3b20      	subs	r3, #32
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fe8f 	bl	8000fcc <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 80012ae:	2088      	movs	r0, #136	; 0x88
 80012b0:	f7ff fe8c 	bl	8000fcc <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 80012b4:	2300      	movs	r3, #0
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	e008      	b.n	80012cc <ST7920_Clear+0x70>
			{
				ST7920_SendData(0);
 80012ba:	2000      	movs	r0, #0
 80012bc:	f7ff feae 	bl	800101c <ST7920_SendData>
				ST7920_SendData(0);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff feab 	bl	800101c <ST7920_SendData>
			for(x = 0; x < 8; x++)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3301      	adds	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b07      	cmp	r3, #7
 80012d0:	d9f3      	bls.n	80012ba <ST7920_Clear+0x5e>
		for(y = 0; y < 64; y++)
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	3301      	adds	r3, #1
 80012d6:	71bb      	strb	r3, [r7, #6]
 80012d8:	79bb      	ldrb	r3, [r7, #6]
 80012da:	2b3f      	cmp	r3, #63	; 0x3f
 80012dc:	d9ce      	bls.n	800127c <ST7920_Clear+0x20>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80012de:	e005      	b.n	80012ec <ST7920_Clear+0x90>
		ST7920_SendCmd(0x01);   // clear the display using command
 80012e0:	2001      	movs	r0, #1
 80012e2:	f7ff fe73 	bl	8000fcc <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80012e6:	2002      	movs	r0, #2
 80012e8:	f002 f8b0 	bl	800344c <HAL_Delay>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	2000002c 	.word	0x2000002c
 80012f8:	20000090 	.word	0x20000090

080012fc <ST7920_Init>:


void ST7920_Init (void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 8001300:	2200      	movs	r2, #0
 8001302:	2101      	movs	r1, #1
 8001304:	481c      	ldr	r0, [pc, #112]	; (8001378 <ST7920_Init+0x7c>)
 8001306:	f002 fb69 	bl	80039dc <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 800130a:	200a      	movs	r0, #10
 800130c:	f002 f89e 	bl	800344c <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8001310:	2201      	movs	r2, #1
 8001312:	2101      	movs	r1, #1
 8001314:	4818      	ldr	r0, [pc, #96]	; (8001378 <ST7920_Init+0x7c>)
 8001316:	f002 fb61 	bl	80039dc <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 800131a:	2032      	movs	r0, #50	; 0x32
 800131c:	f002 f896 	bl	800344c <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8001320:	2030      	movs	r0, #48	; 0x30
 8001322:	f7ff fe53 	bl	8000fcc <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8001326:	206e      	movs	r0, #110	; 0x6e
 8001328:	f000 f9f4 	bl	8001714 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 800132c:	2030      	movs	r0, #48	; 0x30
 800132e:	f7ff fe4d 	bl	8000fcc <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 8001332:	2028      	movs	r0, #40	; 0x28
 8001334:	f000 f9ee 	bl	8001714 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8001338:	2008      	movs	r0, #8
 800133a:	f7ff fe47 	bl	8000fcc <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 800133e:	206e      	movs	r0, #110	; 0x6e
 8001340:	f000 f9e8 	bl	8001714 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fe41 	bl	8000fcc <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800134a:	200c      	movs	r0, #12
 800134c:	f002 f87e 	bl	800344c <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8001350:	2006      	movs	r0, #6
 8001352:	f7ff fe3b 	bl	8000fcc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8001356:	2001      	movs	r0, #1
 8001358:	f002 f878 	bl	800344c <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 800135c:	200c      	movs	r0, #12
 800135e:	f7ff fe35 	bl	8000fcc <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8001362:	2001      	movs	r0, #1
 8001364:	f002 f872 	bl	800344c <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8001368:	2002      	movs	r0, #2
 800136a:	f7ff fe2f 	bl	8000fcc <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800136e:	2001      	movs	r0, #1
 8001370:	f002 f86c 	bl	800344c <HAL_Delay>

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	48000800 	.word	0x48000800

0800137c <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	4613      	mov	r3, r2
 800138a:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 800138c:	4b29      	ldr	r3, [pc, #164]	; (8001434 <SetPixel+0xb8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	79ba      	ldrb	r2, [r7, #6]
 8001392:	429a      	cmp	r2, r3
 8001394:	d248      	bcs.n	8001428 <SetPixel+0xac>
 8001396:	4b28      	ldr	r3, [pc, #160]	; (8001438 <SetPixel+0xbc>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	429a      	cmp	r2, r3
 800139e:	d243      	bcs.n	8001428 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 80013a0:	79bb      	ldrb	r3, [r7, #6]
 80013a2:	4a25      	ldr	r2, [pc, #148]	; (8001438 <SetPixel+0xbc>)
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	08d2      	lsrs	r2, r2, #3
 80013a8:	b2d2      	uxtb	r2, r2
 80013aa:	fb02 f303 	mul.w	r3, r2, r3
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	08d2      	lsrs	r2, r2, #3
 80013b2:	b2d2      	uxtb	r2, r2
 80013b4:	4413      	add	r3, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b20      	ldr	r3, [pc, #128]	; (800143c <SetPixel+0xc0>)
 80013ba:	4413      	add	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	2180      	movs	r1, #128	; 0x80
 80013ca:	fa21 f303 	lsr.w	r3, r1, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	701a      	strb	r2, [r3, #0]

    *image = *p;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	781a      	ldrb	r2, [r3, #0]
 80013dc:	4b17      	ldr	r3, [pc, #92]	; (800143c <SetPixel+0xc0>)
 80013de:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 80013e0:	4b17      	ldr	r3, [pc, #92]	; (8001440 <SetPixel+0xc4>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	79ba      	ldrb	r2, [r7, #6]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d202      	bcs.n	80013f0 <SetPixel+0x74>
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <SetPixel+0xc4>)
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <SetPixel+0xc8>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	79ba      	ldrb	r2, [r7, #6]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d304      	bcc.n	8001404 <SetPixel+0x88>
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b10      	ldr	r3, [pc, #64]	; (8001444 <SetPixel+0xc8>)
 8001402:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <SetPixel+0xcc>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	79fa      	ldrb	r2, [r7, #7]
 800140a:	429a      	cmp	r2, r3
 800140c:	d202      	bcs.n	8001414 <SetPixel+0x98>
 800140e:	4a0e      	ldr	r2, [pc, #56]	; (8001448 <SetPixel+0xcc>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8001414:	4b0d      	ldr	r3, [pc, #52]	; (800144c <SetPixel+0xd0>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	429a      	cmp	r2, r3
 800141c:	d304      	bcc.n	8001428 <SetPixel+0xac>
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <SetPixel+0xd0>)
 8001426:	701a      	strb	r2, [r3, #0]


  }

}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	20000000 	.word	0x20000000
 8001438:	20000001 	.word	0x20000001
 800143c:	20000090 	.word	0x20000090
 8001440:	20000490 	.word	0x20000490
 8001444:	20000492 	.word	0x20000492
 8001448:	2000008c 	.word	0x2000008c
 800144c:	20000491 	.word	0x20000491

08001450 <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8001450:	b590      	push	{r4, r7, lr}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	4604      	mov	r4, r0
 8001458:	4608      	mov	r0, r1
 800145a:	4611      	mov	r1, r2
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	71fb      	strb	r3, [r7, #7]
 8001462:	4603      	mov	r3, r0
 8001464:	71bb      	strb	r3, [r7, #6]
 8001466:	460b      	mov	r3, r1
 8001468:	717b      	strb	r3, [r7, #5]
 800146a:	4613      	mov	r3, r2
 800146c:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 800146e:	797a      	ldrb	r2, [r7, #5]
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	429a      	cmp	r2, r3
 8001474:	d303      	bcc.n	800147e <DrawLine+0x2e>
 8001476:	797a      	ldrb	r2, [r7, #5]
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	e002      	b.n	8001484 <DrawLine+0x34>
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	797b      	ldrb	r3, [r7, #5]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 8001486:	793a      	ldrb	r2, [r7, #4]
 8001488:	79bb      	ldrb	r3, [r7, #6]
 800148a:	429a      	cmp	r2, r3
 800148c:	d303      	bcc.n	8001496 <DrawLine+0x46>
 800148e:	793a      	ldrb	r2, [r7, #4]
 8001490:	79bb      	ldrb	r3, [r7, #6]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	e002      	b.n	800149c <DrawLine+0x4c>
 8001496:	79ba      	ldrb	r2, [r7, #6]
 8001498:	793b      	ldrb	r3, [r7, #4]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 800149e:	79fa      	ldrb	r2, [r7, #7]
 80014a0:	797b      	ldrb	r3, [r7, #5]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d201      	bcs.n	80014aa <DrawLine+0x5a>
 80014a6:	2301      	movs	r3, #1
 80014a8:	e001      	b.n	80014ae <DrawLine+0x5e>
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	793b      	ldrb	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d201      	bcs.n	80014bc <DrawLine+0x6c>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e001      	b.n	80014c0 <DrawLine+0x70>
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
 80014c0:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 80014ca:	79ba      	ldrb	r2, [r7, #6]
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff ff53 	bl	800137c <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 80014d6:	79fa      	ldrb	r2, [r7, #7]
 80014d8:	797b      	ldrb	r3, [r7, #5]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d103      	bne.n	80014e6 <DrawLine+0x96>
 80014de:	79ba      	ldrb	r2, [r7, #6]
 80014e0:	793b      	ldrb	r3, [r7, #4]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d01e      	beq.n	8001524 <DrawLine+0xd4>
    int e2 = err + err;
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	425b      	negs	r3, r3
 80014f0:	68ba      	ldr	r2, [r7, #8]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	dd08      	ble.n	8001508 <DrawLine+0xb8>
    {
      err -= dy;
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	4413      	add	r3, r2
 8001506:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	429a      	cmp	r2, r3
 800150e:	dadc      	bge.n	80014ca <DrawLine+0x7a>
    {
      err += dx;
 8001510:	69fa      	ldr	r2, [r7, #28]
 8001512:	69bb      	ldr	r3, [r7, #24]
 8001514:	4413      	add	r3, r2
 8001516:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	79bb      	ldrb	r3, [r7, #6]
 800151e:	4413      	add	r3, r2
 8001520:	71bb      	strb	r3, [r7, #6]
  {
 8001522:	e7d2      	b.n	80014ca <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8001524:	bf00      	nop
    }
  }
}
 8001526:	bf00      	nop
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd90      	pop	{r4, r7, pc}
	...

08001530 <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8001530:	b590      	push	{r4, r7, lr}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4604      	mov	r4, r0
 8001538:	4608      	mov	r0, r1
 800153a:	4611      	mov	r1, r2
 800153c:	461a      	mov	r2, r3
 800153e:	4623      	mov	r3, r4
 8001540:	80fb      	strh	r3, [r7, #6]
 8001542:	4603      	mov	r3, r0
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <DrawRectangle+0x10c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	b29b      	uxth	r3, r3
	if (
 8001554:	88fa      	ldrh	r2, [r7, #6]
 8001556:	429a      	cmp	r2, r3
 8001558:	d26b      	bcs.n	8001632 <DrawRectangle+0x102>
		y >= numRows
 800155a:	4b39      	ldr	r3, [pc, #228]	; (8001640 <DrawRectangle+0x110>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b29b      	uxth	r3, r3
		x >= numCols ||
 8001560:	88ba      	ldrh	r2, [r7, #4]
 8001562:	429a      	cmp	r2, r3
 8001564:	d265      	bcs.n	8001632 <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8001566:	88fa      	ldrh	r2, [r7, #6]
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	4413      	add	r3, r2
 800156c:	4a33      	ldr	r2, [pc, #204]	; (800163c <DrawRectangle+0x10c>)
 800156e:	7812      	ldrb	r2, [r2, #0]
 8001570:	4293      	cmp	r3, r2
 8001572:	db05      	blt.n	8001580 <DrawRectangle+0x50>
		w = numCols - x;
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <DrawRectangle+0x10c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	b29a      	uxth	r2, r3
 800157a:	88fb      	ldrh	r3, [r7, #6]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001580:	88ba      	ldrh	r2, [r7, #4]
 8001582:	883b      	ldrh	r3, [r7, #0]
 8001584:	4413      	add	r3, r2
 8001586:	4a2e      	ldr	r2, [pc, #184]	; (8001640 <DrawRectangle+0x110>)
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	4293      	cmp	r3, r2
 800158c:	db05      	blt.n	800159a <DrawRectangle+0x6a>
		h = numRows - y;
 800158e:	4b2c      	ldr	r3, [pc, #176]	; (8001640 <DrawRectangle+0x110>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	b29a      	uxth	r2, r3
 8001594:	88bb      	ldrh	r3, [r7, #4]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	b2d8      	uxtb	r0, r3
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	b2d9      	uxtb	r1, r3
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b2da      	uxtb	r2, r3
 80015ae:	88bb      	ldrh	r3, [r7, #4]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f7ff ff4d 	bl	8001450 <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	b2d8      	uxtb	r0, r3
 80015ba:	88bb      	ldrh	r3, [r7, #4]
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	883b      	ldrh	r3, [r7, #0]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	4413      	add	r3, r2
 80015c4:	b2d9      	uxtb	r1, r3
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	887b      	ldrh	r3, [r7, #2]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4413      	add	r3, r2
 80015d0:	b2dc      	uxtb	r4, r3
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	883b      	ldrh	r3, [r7, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4413      	add	r3, r2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	4622      	mov	r2, r4
 80015e0:	f7ff ff36 	bl	8001450 <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	b2d8      	uxtb	r0, r3
 80015e8:	88bb      	ldrh	r3, [r7, #4]
 80015ea:	b2d9      	uxtb	r1, r3
 80015ec:	88fb      	ldrh	r3, [r7, #6]
 80015ee:	b2dc      	uxtb	r4, r3
 80015f0:	88bb      	ldrh	r3, [r7, #4]
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	883b      	ldrh	r3, [r7, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4413      	add	r3, r2
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4622      	mov	r2, r4
 80015fe:	f7ff ff27 	bl	8001450 <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	887b      	ldrh	r3, [r7, #2]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b2d8      	uxtb	r0, r3
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	b2d9      	uxtb	r1, r3
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	887b      	ldrh	r3, [r7, #2]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	4413      	add	r3, r2
 800161c:	b2dc      	uxtb	r4, r3
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	b2da      	uxtb	r2, r3
 8001622:	883b      	ldrh	r3, [r7, #0]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	4413      	add	r3, r2
 8001628:	b2db      	uxtb	r3, r3
 800162a:	4622      	mov	r2, r4
 800162c:	f7ff ff10 	bl	8001450 <DrawLine>
 8001630:	e000      	b.n	8001634 <DrawRectangle+0x104>
		return;
 8001632:	bf00      	nop
}
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	bd90      	pop	{r4, r7, pc}
 800163a:	bf00      	nop
 800163c:	20000001 	.word	0x20000001
 8001640:	20000000 	.word	0x20000000

08001644 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8001644:	b590      	push	{r4, r7, lr}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	4604      	mov	r4, r0
 800164c:	4608      	mov	r0, r1
 800164e:	4611      	mov	r1, r2
 8001650:	461a      	mov	r2, r3
 8001652:	4623      	mov	r3, r4
 8001654:	80fb      	strh	r3, [r7, #6]
 8001656:	4603      	mov	r3, r0
 8001658:	80bb      	strh	r3, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	807b      	strh	r3, [r7, #2]
 800165e:	4613      	mov	r3, r2
 8001660:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 8001662:	4b25      	ldr	r3, [pc, #148]	; (80016f8 <DrawFilledRectangle+0xb4>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b29b      	uxth	r3, r3
	if (
 8001668:	88fa      	ldrh	r2, [r7, #6]
 800166a:	429a      	cmp	r2, r3
 800166c:	d240      	bcs.n	80016f0 <DrawFilledRectangle+0xac>
		y >= numRows
 800166e:	4b23      	ldr	r3, [pc, #140]	; (80016fc <DrawFilledRectangle+0xb8>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
		x >= numCols ||
 8001674:	88ba      	ldrh	r2, [r7, #4]
 8001676:	429a      	cmp	r2, r3
 8001678:	d23a      	bcs.n	80016f0 <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	4413      	add	r3, r2
 8001680:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <DrawFilledRectangle+0xb4>)
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	4293      	cmp	r3, r2
 8001686:	db05      	blt.n	8001694 <DrawFilledRectangle+0x50>
		w = numCols - x;
 8001688:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <DrawFilledRectangle+0xb4>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	b29a      	uxth	r2, r3
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001694:	88ba      	ldrh	r2, [r7, #4]
 8001696:	883b      	ldrh	r3, [r7, #0]
 8001698:	4413      	add	r3, r2
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <DrawFilledRectangle+0xb8>)
 800169c:	7812      	ldrb	r2, [r2, #0]
 800169e:	4293      	cmp	r3, r2
 80016a0:	db05      	blt.n	80016ae <DrawFilledRectangle+0x6a>
		h = numRows - y;
 80016a2:	4b16      	ldr	r3, [pc, #88]	; (80016fc <DrawFilledRectangle+0xb8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	88bb      	ldrh	r3, [r7, #4]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
 80016b2:	e017      	b.n	80016e4 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 80016b4:	88fb      	ldrh	r3, [r7, #6]
 80016b6:	b2d8      	uxtb	r0, r3
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	4413      	add	r3, r2
 80016c0:	b2d9      	uxtb	r1, r3
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	887b      	ldrh	r3, [r7, #2]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	b2dc      	uxtb	r4, r3
 80016ce:	88bb      	ldrh	r3, [r7, #4]
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	7bfb      	ldrb	r3, [r7, #15]
 80016d4:	4413      	add	r3, r2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4622      	mov	r2, r4
 80016da:	f7ff feb9 	bl	8001450 <DrawLine>
	for (i = 0; i <= h; i++) {
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	3301      	adds	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	883a      	ldrh	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d2e2      	bcs.n	80016b4 <DrawFilledRectangle+0x70>
 80016ee:	e000      	b.n	80016f2 <DrawFilledRectangle+0xae>
		return;
 80016f0:	bf00      	nop
	}
}
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}
 80016f8:	20000001 	.word	0x20000001
 80016fc:	20000000 	.word	0x20000000

08001700 <delay_init>:
//#include "stm32f1xx.h"



void delay_init ()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <delay_init+0x10>)
 8001706:	f003 fedb 	bl	80054c0 <HAL_TIM_Base_Start>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	2000058c 	.word	0x2000058c

08001714 <delay_us>:

void delay_us (uint16_t delay)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(_TIMER, 0);  // reset the counter
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <delay_us+0x30>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(_TIMER))<delay);  // wait for the delay to complete
 8001726:	bf00      	nop
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <delay_us+0x30>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	429a      	cmp	r2, r3
 8001732:	d3f9      	bcc.n	8001728 <delay_us+0x14>
}
 8001734:	bf00      	nop
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	2000058c 	.word	0x2000058c

08001748 <encoder_init>:
extern stepper_motor extruder;
extern dc_motor DC_motor;
extern filament_cutter FC_struct;

void encoder_init(GPIO_TypeDef* GPIO_BTN_PORT, uint16_t Button_Pin, uint32_t debounce_time)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	460b      	mov	r3, r1
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	817b      	strh	r3, [r7, #10]
	enc_btn.PORT = GPIO_BTN_PORT;
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <encoder_init+0x50>)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6013      	str	r3, [r2, #0]
	enc_btn.PIN = Button_Pin;
 800175c:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <encoder_init+0x50>)
 800175e:	897b      	ldrh	r3, [r7, #10]
 8001760:	8093      	strh	r3, [r2, #4]
	enc_btn.debounce_time = debounce_time;
 8001762:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <encoder_init+0x50>)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60d3      	str	r3, [r2, #12]
	enc_btn.BTN_state = DEFA;
 8001768:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <encoder_init+0x50>)
 800176a:	2200      	movs	r2, #0
 800176c:	741a      	strb	r2, [r3, #16]
	enc_btn.last_tick = 0;
 800176e:	4b0a      	ldr	r3, [pc, #40]	; (8001798 <encoder_init+0x50>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]

	ENC_Button_RegisterPressCallback(&ENC_Button_PressedTask);
 8001774:	4809      	ldr	r0, [pc, #36]	; (800179c <encoder_init+0x54>)
 8001776:	f000 f821 	bl	80017bc <ENC_Button_RegisterPressCallback>

	__HAL_TIM_SET_AUTORELOAD(_ENC_TIMER, 19);
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <encoder_init+0x58>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2213      	movs	r2, #19
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <encoder_init+0x58>)
 8001784:	2213      	movs	r2, #19
 8001786:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(_ENC_TIMER, TIM_CHANNEL_ALL);
 8001788:	213c      	movs	r1, #60	; 0x3c
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <encoder_init+0x58>)
 800178c:	f004 f9ec 	bl	8005b68 <HAL_TIM_Encoder_Start>
}
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	20000030 	.word	0x20000030
 800179c:	080018c9 	.word	0x080018c9
 80017a0:	20000540 	.word	0x20000540

080017a4 <enc_get_counter>:


uint32_t enc_get_counter()
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_ENC_TIMER);
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <enc_get_counter+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	20000540 	.word	0x20000540

080017bc <ENC_Button_RegisterPressCallback>:


void ENC_Button_RegisterPressCallback(void *callback)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	enc_btn.ButtonPressed = callback;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a04      	ldr	r2, [pc, #16]	; (80017d8 <ENC_Button_RegisterPressCallback+0x1c>)
 80017c8:	6153      	str	r3, [r2, #20]

}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	20000030 	.word	0x20000030

080017dc <ENC_Button_DebounceRoutine>:


void ENC_Button_DebounceRoutine(cursor_position* cur_postion)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - enc_btn.last_tick) > enc_btn.debounce_time)
 80017e4:	f001 fe26 	bl	8003434 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	1ad2      	subs	r2, r2, r3
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d915      	bls.n	8001824 <ENC_Button_DebounceRoutine+0x48>
	{
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 80017f8:	2140      	movs	r1, #64	; 0x40
 80017fa:	480d      	ldr	r0, [pc, #52]	; (8001830 <ENC_Button_DebounceRoutine+0x54>)
 80017fc:	f002 f8d6 	bl	80039ac <HAL_GPIO_ReadPin>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10b      	bne.n	800181e <ENC_Button_DebounceRoutine+0x42>
		{
			enc_btn.BTN_state = PRESSED;
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 8001808:	2202      	movs	r2, #2
 800180a:	741a      	strb	r2, [r3, #16]
			if(enc_btn.ButtonPressed != NULL)
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d007      	beq.n	8001824 <ENC_Button_DebounceRoutine+0x48>
			{
				enc_btn.ButtonPressed(cur_postion);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	4798      	blx	r3
			enc_btn.BTN_state = DEFA;
		}

	}

}
 800181c:	e002      	b.n	8001824 <ENC_Button_DebounceRoutine+0x48>
			enc_btn.BTN_state = DEFA;
 800181e:	4b03      	ldr	r3, [pc, #12]	; (800182c <ENC_Button_DebounceRoutine+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	741a      	strb	r2, [r3, #16]
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000030 	.word	0x20000030
 8001830:	48000400 	.word	0x48000400

08001834 <ENC_Button_IdleRoutine>:


void ENC_Button_IdleRoutine()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001838:	2140      	movs	r1, #64	; 0x40
 800183a:	4808      	ldr	r0, [pc, #32]	; (800185c <ENC_Button_IdleRoutine+0x28>)
 800183c:	f002 f8b6 	bl	80039ac <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <ENC_Button_IdleRoutine+0x22>
	{
		enc_btn.last_tick = HAL_GetTick();
 8001846:	f001 fdf5 	bl	8003434 <HAL_GetTick>
 800184a:	4603      	mov	r3, r0
 800184c:	4a04      	ldr	r2, [pc, #16]	; (8001860 <ENC_Button_IdleRoutine+0x2c>)
 800184e:	6093      	str	r3, [r2, #8]
		enc_btn.BTN_state = DEBOUNCE;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <ENC_Button_IdleRoutine+0x2c>)
 8001852:	2201      	movs	r2, #1
 8001854:	741a      	strb	r2, [r3, #16]
	}
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	48000400 	.word	0x48000400
 8001860:	20000030 	.word	0x20000030

08001864 <ENC_Button_PressedRoutine>:


void ENC_Button_PressedRoutine()
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_SET)
 8001868:	2140      	movs	r1, #64	; 0x40
 800186a:	4805      	ldr	r0, [pc, #20]	; (8001880 <ENC_Button_PressedRoutine+0x1c>)
 800186c:	f002 f89e 	bl	80039ac <HAL_GPIO_ReadPin>
 8001870:	4603      	mov	r3, r0
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <ENC_Button_PressedRoutine+0x18>
	{
		enc_btn.BTN_state = DEFA;
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <ENC_Button_PressedRoutine+0x20>)
 8001878:	2200      	movs	r2, #0
 800187a:	741a      	strb	r2, [r3, #16]
	}
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	48000400 	.word	0x48000400
 8001884:	20000030 	.word	0x20000030

08001888 <ENC_Button_Action>:


void ENC_Button_Action(cursor_position* cur_postion)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	switch(enc_btn.BTN_state)
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <ENC_Button_Action+0x3c>)
 8001892:	7c1b      	ldrb	r3, [r3, #16]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d00d      	beq.n	80018b4 <ENC_Button_Action+0x2c>
 8001898:	2b02      	cmp	r3, #2
 800189a:	dc0e      	bgt.n	80018ba <ENC_Button_Action+0x32>
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <ENC_Button_Action+0x1e>
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d003      	beq.n	80018ac <ENC_Button_Action+0x24>
		break;
	case PRESSED:
		ENC_Button_PressedRoutine();
		break;
	}
}
 80018a4:	e009      	b.n	80018ba <ENC_Button_Action+0x32>
		ENC_Button_IdleRoutine();
 80018a6:	f7ff ffc5 	bl	8001834 <ENC_Button_IdleRoutine>
		break;
 80018aa:	e006      	b.n	80018ba <ENC_Button_Action+0x32>
		ENC_Button_DebounceRoutine(cur_postion);
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f7ff ff95 	bl	80017dc <ENC_Button_DebounceRoutine>
		break;
 80018b2:	e002      	b.n	80018ba <ENC_Button_Action+0x32>
		ENC_Button_PressedRoutine();
 80018b4:	f7ff ffd6 	bl	8001864 <ENC_Button_PressedRoutine>
		break;
 80018b8:	bf00      	nop
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000030 	.word	0x20000030

080018c8 <ENC_Button_PressedTask>:



//void ENC_Button_PressedTask(encoder_button* enc_btn, cursor_position* cursor_pos)
void ENC_Button_PressedTask(cursor_position* cursor_pos)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
	if(cursor_pos->current_layer == FIRST_LAYER)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	799b      	ldrb	r3, [r3, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d12d      	bne.n	8001934 <ENC_Button_PressedTask+0x6c>
	{
		if(cursor_pos->FL_position == SETTINGS)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	d107      	bne.n	80018f0 <ENC_Button_PressedTask+0x28>
		{
			cursor_pos->current_layer = SECOND_LAYER;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 80018e6:	4b50      	ldr	r3, [pc, #320]	; (8001a28 <ENC_Button_PressedTask+0x160>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24


	}


}
 80018ee:	e096      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->FL_position == START)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d10a      	bne.n	800190e <ENC_Button_PressedTask+0x46>
			FC_struct.mode = EXTRUDE;
 80018f8:	4b4c      	ldr	r3, [pc, #304]	; (8001a2c <ENC_Button_PressedTask+0x164>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 80018fe:	4b4a      	ldr	r3, [pc, #296]	; (8001a28 <ENC_Button_PressedTask+0x160>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
}
 800190c:	e087      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->FL_position == STOP)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b02      	cmp	r3, #2
 8001914:	f040 8083 	bne.w	8001a1e <ENC_Button_PressedTask+0x156>
			stepper_stop(&extruder);
 8001918:	4845      	ldr	r0, [pc, #276]	; (8001a30 <ENC_Button_PressedTask+0x168>)
 800191a:	f000 fea5 	bl	8002668 <stepper_stop>
			DC_stop(&DC_motor);
 800191e:	4845      	ldr	r0, [pc, #276]	; (8001a34 <ENC_Button_PressedTask+0x16c>)
 8001920:	f7ff fa9d 	bl	8000e5e <DC_stop>
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001924:	4b40      	ldr	r3, [pc, #256]	; (8001a28 <ENC_Button_PressedTask+0x160>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
}
 8001932:	e074      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
	else if(cursor_pos->current_layer == SECOND_LAYER)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	799b      	ldrb	r3, [r3, #6]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d120      	bne.n	800197e <ENC_Button_PressedTask+0xb6>
		if(cursor_pos->SL_position == BACK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <ENC_Button_PressedTask+0x8a>
			cursor_pos->current_layer = FIRST_LAYER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	719a      	strb	r2, [r3, #6]
			cursor_pos->FL_position = DEFAULT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	e065      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->SL_position == FIL_DIA)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	789b      	ldrb	r3, [r3, #2]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <ENC_Button_PressedTask+0xa0>
			cursor_pos->current_layer = THIRD_LAYER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2202      	movs	r2, #2
 800195e:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	711a      	strb	r2, [r3, #4]
}
 8001966:	e05a      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->SL_position == FIL_DEN)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d156      	bne.n	8001a1e <ENC_Button_PressedTask+0x156>
			cursor_pos->current_layer = THIRD_LAYER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	711a      	strb	r2, [r3, #4]
}
 800197c:	e04f      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
	else if(cursor_pos->current_layer == THIRD_LAYER)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	799b      	ldrb	r3, [r3, #6]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d14b      	bne.n	8001a1e <ENC_Button_PressedTask+0x156>
		if(cursor_pos->TL_position == DIAMETER_175)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	791b      	ldrb	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d106      	bne.n	800199c <ENC_Button_PressedTask+0xd4>
			cursor_pos->current_layer = SECOND_LAYER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2201      	movs	r2, #1
 8001992:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	709a      	strb	r2, [r3, #2]
}
 800199a:	e040      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == DIAMETER_285)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	791b      	ldrb	r3, [r3, #4]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d106      	bne.n	80019b2 <ENC_Button_PressedTask+0xea>
			cursor_pos->current_layer = SECOND_LAYER;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	709a      	strb	r2, [r3, #2]
}
 80019b0:	e035      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == DENSITY_PLA)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d106      	bne.n	80019c8 <ENC_Button_PressedTask+0x100>
			cursor_pos->current_layer = SECOND_LAYER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	709a      	strb	r2, [r3, #2]
}
 80019c6:	e02a      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == DENSITY_ABS)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	791b      	ldrb	r3, [r3, #4]
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d106      	bne.n	80019de <ENC_Button_PressedTask+0x116>
			cursor_pos->current_layer = SECOND_LAYER;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2201      	movs	r2, #1
 80019d4:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2202      	movs	r2, #2
 80019da:	709a      	strb	r2, [r3, #2]
}
 80019dc:	e01f      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == DENSITY_PETG)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	791b      	ldrb	r3, [r3, #4]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d106      	bne.n	80019f4 <ENC_Button_PressedTask+0x12c>
			cursor_pos->current_layer = SECOND_LAYER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2201      	movs	r2, #1
 80019ea:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = FIL_DEN;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2202      	movs	r2, #2
 80019f0:	711a      	strb	r2, [r3, #4]
}
 80019f2:	e014      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == WEIGHT)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d106      	bne.n	8001a0a <ENC_Button_PressedTask+0x142>
			cursor_pos->current_layer = SECOND_LAYER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2200      	movs	r2, #0
 8001a06:	711a      	strb	r2, [r3, #4]
}
 8001a08:	e009      	b.n	8001a1e <ENC_Button_PressedTask+0x156>
		else if(cursor_pos->TL_position == QTY)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	791b      	ldrb	r3, [r3, #4]
 8001a0e:	2b06      	cmp	r3, #6
 8001a10:	d105      	bne.n	8001a1e <ENC_Button_PressedTask+0x156>
			cursor_pos->current_layer = SECOND_LAYER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	711a      	strb	r2, [r3, #4]
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000540 	.word	0x20000540
 8001a2c:	200004a4 	.word	0x200004a4
 8001a30:	20000048 	.word	0x20000048
 8001a34:	2000006c 	.word	0x2000006c

08001a38 <Filament_Cutter_Init>:

filament_cutter FC_struct;
FC_parameters FC_params;

void Filament_Cutter_Init(stepper_motor *motor, dc_motor* dc_motor)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	FC_struct.motor = motor;
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <Filament_Cutter_Init+0x4c>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6153      	str	r3, [r2, #20]
	FC_struct.dc_motor = dc_motor;
 8001a48:	4a0e      	ldr	r2, [pc, #56]	; (8001a84 <Filament_Cutter_Init+0x4c>)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	6113      	str	r3, [r2, #16]
	FC_struct.mode = STANDBY;
 8001a4e:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <Filament_Cutter_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	701a      	strb	r2, [r3, #0]
	FC_params.filament_density = 1.24;
 8001a54:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <Filament_Cutter_Init+0x50>)
 8001a56:	4a0d      	ldr	r2, [pc, #52]	; (8001a8c <Filament_Cutter_Init+0x54>)
 8001a58:	601a      	str	r2, [r3, #0]
	FC_params.filament_diameter = 1.75;
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <Filament_Cutter_Init+0x50>)
 8001a5c:	4a0c      	ldr	r2, [pc, #48]	; (8001a90 <Filament_Cutter_Init+0x58>)
 8001a5e:	605a      	str	r2, [r3, #4]
	FC_params.sample_quantities = 1;
 8001a60:	4b09      	ldr	r3, [pc, #36]	; (8001a88 <Filament_Cutter_Init+0x50>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	729a      	strb	r2, [r3, #10]
	FC_params.target_weight = 5;
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <Filament_Cutter_Init+0x50>)
 8001a68:	2205      	movs	r2, #5
 8001a6a:	811a      	strh	r2, [r3, #8]
	FC_struct.parameters = FC_params;
 8001a6c:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <Filament_Cutter_Init+0x4c>)
 8001a6e:	4a06      	ldr	r2, [pc, #24]	; (8001a88 <Filament_Cutter_Init+0x50>)
 8001a70:	3304      	adds	r3, #4
 8001a72:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a74:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	200004a4 	.word	0x200004a4
 8001a88:	20000498 	.word	0x20000498
 8001a8c:	3f9eb852 	.word	0x3f9eb852
 8001a90:	3fe00000 	.word	0x3fe00000

08001a94 <motors_update>:



void motors_update(stepper_motor *motor, dc_motor* dc_motor)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
	switch(FC_struct.mode)
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <motors_update+0x48>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d00d      	beq.n	8001ac2 <motors_update+0x2e>
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	dc14      	bgt.n	8001ad4 <motors_update+0x40>
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d011      	beq.n	8001ad2 <motors_update+0x3e>
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d000      	beq.n	8001ab4 <motors_update+0x20>

	case CUTTING:
		DC_set_angle(dc_motor, 360, 50, RIGHT);
		break;
	}
}
 8001ab2:	e00f      	b.n	8001ad4 <motors_update+0x40>
		stepper_extrude_weight(motor, FC_struct.parameters.target_weight);
 8001ab4:	4b09      	ldr	r3, [pc, #36]	; (8001adc <motors_update+0x48>)
 8001ab6:	899b      	ldrh	r3, [r3, #12]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 ff94 	bl	80029e8 <stepper_extrude_weight>
		break;
 8001ac0:	e008      	b.n	8001ad4 <motors_update+0x40>
		DC_set_angle(dc_motor, 360, 50, RIGHT);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2232      	movs	r2, #50	; 0x32
 8001ac6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001aca:	6838      	ldr	r0, [r7, #0]
 8001acc:	f7ff fa16 	bl	8000efc <DC_set_angle>
		break;
 8001ad0:	e000      	b.n	8001ad4 <motors_update+0x40>
		break;
 8001ad2:	bf00      	nop
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200004a4 	.word	0x200004a4

08001ae0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af6:	4b3b      	ldr	r3, [pc, #236]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	4a3a      	ldr	r2, [pc, #232]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b02:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	4b35      	ldr	r3, [pc, #212]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	4a34      	ldr	r2, [pc, #208]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b1a:	4b32      	ldr	r3, [pc, #200]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b2f      	ldr	r3, [pc, #188]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a2e      	ldr	r2, [pc, #184]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b2c      	ldr	r3, [pc, #176]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	4b29      	ldr	r3, [pc, #164]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b42:	4a28      	ldr	r2, [pc, #160]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4a:	4b26      	ldr	r3, [pc, #152]	; (8001be4 <MX_GPIO_Init+0x104>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b56:	2200      	movs	r2, #0
 8001b58:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001b5c:	4822      	ldr	r0, [pc, #136]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b5e:	f001 ff3d 	bl	80039dc <HAL_GPIO_WritePin>
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2120      	movs	r1, #32
 8001b66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b6a:	f001 ff37 	bl	80039dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_GPIO_Init+0x10c>)
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	4619      	mov	r1, r3
 8001b82:	4819      	ldr	r0, [pc, #100]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001b84:	f001 fd98 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b88:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001b8c:	617b      	str	r3, [r7, #20]
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9a:	f107 0314 	add.w	r3, r7, #20
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4811      	ldr	r0, [pc, #68]	; (8001be8 <MX_GPIO_Init+0x108>)
 8001ba2:	f001 fd89 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc0:	f001 fd7a 	bl	80036b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001bc4:	2340      	movs	r3, #64	; 0x40
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <MX_GPIO_Init+0x110>)
 8001bd8:	f001 fd6e 	bl	80036b8 <HAL_GPIO_Init>

}
 8001bdc:	bf00      	nop
 8001bde:	3728      	adds	r7, #40	; 0x28
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48000800 	.word	0x48000800
 8001bec:	10210000 	.word	0x10210000
 8001bf0:	48000400 	.word	0x48000400

08001bf4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001bfa:	4a17      	ldr	r2, [pc, #92]	; (8001c58 <MX_LPTIM1_Init+0x64>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001bfe:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001c10:	4b10      	ldr	r3, [pc, #64]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c2c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c30:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001c32:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001c3e:	4805      	ldr	r0, [pc, #20]	; (8001c54 <MX_LPTIM1_Init+0x60>)
 8001c40:	f001 fee4 	bl	8003a0c <HAL_LPTIM_Init>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8001c4a:	f000 f95d 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200004bc 	.word	0x200004bc
 8001c58:	40007c00 	.word	0x40007c00

08001c5c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b0a4      	sub	sp, #144	; 0x90
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	60da      	str	r2, [r3, #12]
 8001c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2268      	movs	r2, #104	; 0x68
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f005 fcd7 	bl	8007630 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a25      	ldr	r2, [pc, #148]	; (8001d1c <HAL_LPTIM_MspInit+0xc0>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d142      	bne.n	8001d12 <HAL_LPTIM_MspInit+0xb6>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c90:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 f85a 	bl	8004d54 <HAL_RCCEx_PeriphCLKConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8001ca6:	f000 f92f 	bl	8001f08 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001caa:	4b1d      	ldr	r3, [pc, #116]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001cb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cbe:	613b      	str	r3, [r7, #16]
 8001cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	4b17      	ldr	r3, [pc, #92]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cc6:	4a16      	ldr	r2, [pc, #88]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cc8:	f043 0302 	orr.w	r3, r3, #2
 8001ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cce:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <HAL_LPTIM_MspInit+0xc4>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	60fb      	str	r3, [r7, #12]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = DC_ENC_B_Pin|DC_ENC_A_Pin;
 8001cda:	23a0      	movs	r3, #160	; 0xa0
 8001cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4809      	ldr	r0, [pc, #36]	; (8001d24 <HAL_LPTIM_MspInit+0xc8>)
 8001cfe:	f001 fcdb 	bl	80036b8 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	2041      	movs	r0, #65	; 0x41
 8001d08:	f001 fc9f 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001d0c:	2041      	movs	r0, #65	; 0x41
 8001d0e:	f001 fcb8 	bl	8003682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3790      	adds	r7, #144	; 0x90
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40007c00 	.word	0x40007c00
 8001d20:	40021000 	.word	0x40021000
 8001d24:	48000400 	.word	0x48000400

08001d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d2e:	f001 fb11 	bl	8003354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d32:	f000 f859 	bl	8001de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d36:	f7ff fed3 	bl	8001ae0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d3a:	f001 fa55 	bl	80031e8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001d3e:	f000 ff31 	bl	8002ba4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d42:	f000 ffdd 	bl	8002d00 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d46:	f001 f82b 	bl	8002da0 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001d4a:	f001 f87f 	bl	8002e4c <MX_TIM6_Init>
  MX_TIM16_Init();
 8001d4e:	f001 f8b3 	bl	8002eb8 <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8001d52:	f7ff ff4f 	bl	8001bf4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  encoder_init(ENC_BTN_GPIO_Port, ENC_BTN_Pin, 20);
 8001d56:	2214      	movs	r2, #20
 8001d58:	2140      	movs	r1, #64	; 0x40
 8001d5a:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <main+0x9c>)
 8001d5c:	f7ff fcf4 	bl	8001748 <encoder_init>
  delay_init();
 8001d60:	f7ff fcce 	bl	8001700 <delay_init>
  ST7920_Init();
 8001d64:	f7ff faca 	bl	80012fc <ST7920_Init>
  stepper_init(&extruder, &htim1, TIM_CHANNEL_1, &htim2, EXT_DIR_GPIO_Port,
 8001d68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d6c:	9301      	str	r3, [sp, #4]
 8001d6e:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <main+0xa0>)
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <main+0xa4>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	4916      	ldr	r1, [pc, #88]	; (8001dd0 <main+0xa8>)
 8001d78:	4816      	ldr	r0, [pc, #88]	; (8001dd4 <main+0xac>)
 8001d7a:	f000 fc59 	bl	8002630 <stepper_init>
  EXT_DIR_Pin);
  DC_motor_Init(&DC_motor, &htim16, TIM_CHANNEL_1, CUT_DIR_IN1_GPIO_Port,
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <main+0xb0>)
 8001d80:	9303      	str	r3, [sp, #12]
 8001d82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <main+0xa0>)
 8001d8a:	9301      	str	r3, [sp, #4]
 8001d8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	4b0d      	ldr	r3, [pc, #52]	; (8001dc8 <main+0xa0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	4911      	ldr	r1, [pc, #68]	; (8001ddc <main+0xb4>)
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <main+0xb8>)
 8001d9a:	f7fe ffa0 	bl	8000cde <DC_motor_Init>
  CUT_DIR_IN1_Pin, CUT_DIR_IN2_GPIO_Port, CUT_DIR_IN2_Pin, &hlptim1);
  Init_menu(&cursor_pos);
 8001d9e:	4811      	ldr	r0, [pc, #68]	; (8001de4 <main+0xbc>)
 8001da0:	f000 fa9e 	bl	80022e0 <Init_menu>
  Filament_Cutter_Init(&extruder, &DC_motor);
 8001da4:	490e      	ldr	r1, [pc, #56]	; (8001de0 <main+0xb8>)
 8001da6:	480b      	ldr	r0, [pc, #44]	; (8001dd4 <main+0xac>)
 8001da8:	f7ff fe46 	bl	8001a38 <Filament_Cutter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		ENC_Button_Action(&cursor_pos);
 8001dac:	480d      	ldr	r0, [pc, #52]	; (8001de4 <main+0xbc>)
 8001dae:	f7ff fd6b 	bl	8001888 <ENC_Button_Action>
		menu_update(&cursor_pos);
 8001db2:	480c      	ldr	r0, [pc, #48]	; (8001de4 <main+0xbc>)
 8001db4:	f000 fa72 	bl	800229c <menu_update>
		motors_update(&extruder, &DC_motor);
 8001db8:	4909      	ldr	r1, [pc, #36]	; (8001de0 <main+0xb8>)
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <main+0xac>)
 8001dbc:	f7ff fe6a 	bl	8001a94 <motors_update>
		ENC_Button_Action(&cursor_pos);
 8001dc0:	e7f4      	b.n	8001dac <main+0x84>
 8001dc2:	bf00      	nop
 8001dc4:	48000400 	.word	0x48000400
 8001dc8:	48000800 	.word	0x48000800
 8001dcc:	20000624 	.word	0x20000624
 8001dd0:	200005d8 	.word	0x200005d8
 8001dd4:	20000048 	.word	0x20000048
 8001dd8:	200004bc 	.word	0x200004bc
 8001ddc:	20000670 	.word	0x20000670
 8001de0:	2000006c 	.word	0x2000006c
 8001de4:	20000538 	.word	0x20000538

08001de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b096      	sub	sp, #88	; 0x58
 8001dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dee:	f107 0314 	add.w	r3, r7, #20
 8001df2:	2244      	movs	r2, #68	; 0x44
 8001df4:	2100      	movs	r1, #0
 8001df6:	4618      	mov	r0, r3
 8001df8:	f005 fc1a 	bl	8007630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dfc:	463b      	mov	r3, r7
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	60da      	str	r2, [r3, #12]
 8001e08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001e0e:	f002 f925 	bl	800405c <HAL_PWREx_ControlVoltageScaling>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e18:	f000 f876 	bl	8001f08 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e26:	2340      	movs	r3, #64	; 0x40
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001e36:	230a      	movs	r3, #10
 8001e38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001e3a:	2307      	movs	r3, #7
 8001e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e3e:	2302      	movs	r3, #2
 8001e40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e42:	2302      	movs	r3, #2
 8001e44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e46:	f107 0314 	add.w	r3, r7, #20
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f002 f95c 	bl	8004108 <HAL_RCC_OscConfig>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001e56:	f000 f857 	bl	8001f08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e5a:	230f      	movs	r3, #15
 8001e5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2104      	movs	r1, #4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 fd68 	bl	8004948 <HAL_RCC_ClockConfig>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001e7e:	f000 f843 	bl	8001f08 <Error_Handler>
  }
}
 8001e82:	bf00      	nop
 8001e84:	3758      	adds	r7, #88	; 0x58
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hlptim);
	DC_stop(&DC_motor);
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 8001e96:	f7fe ffe2 	bl	8000e5e <DC_stop>
	CUTTING_PROCESS_FLAG = 0;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
	FC_struct.mode = STANDBY;
 8001ea0:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_LPTIM_AutoReloadMatchCallback+0x2c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	701a      	strb	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000006c 	.word	0x2000006c
 8001eb4:	20000088 	.word	0x20000088
 8001eb8:	200004a4 	.word	0x200004a4

08001ebc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	if(FIRST_MISS_FLAG == 1)
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d10f      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		if (htim->Instance == extruder.slave_timer.htim->Instance)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d108      	bne.n	8001eee <HAL_TIM_PeriodElapsedCallback+0x32>
		{
			stepper_stop(&extruder);
 8001edc:	4807      	ldr	r0, [pc, #28]	; (8001efc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001ede:	f000 fbc3 	bl	8002668 <stepper_stop>
			EXTRUDE_PROCESS_FLAG = 0;
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = CUTTING;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eea:	2202      	movs	r2, #2
 8001eec:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000493 	.word	0x20000493
 8001efc:	20000048 	.word	0x20000048
 8001f00:	20000494 	.word	0x20000494
 8001f04:	200004a4 	.word	0x200004a4

08001f08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f0c:	b672      	cpsid	i
}
 8001f0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001f10:	e7fe      	b.n	8001f10 <Error_Handler+0x8>
	...

08001f14 <update_first_layer>:
#include "menu_LCD.h"
#include "ST7920_SERIAL.h"
#include "encoder.h"

void update_first_layer(cursor_position* curr_position)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
	if(curr_position->FL_position != curr_position->FL_prev_position)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	781a      	ldrb	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	785b      	ldrb	r3, [r3, #1]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d054      	beq.n	8001fd2 <update_first_layer+0xbe>
	{
		switch(curr_position->FL_position)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d84b      	bhi.n	8001fc8 <update_first_layer+0xb4>
 8001f30:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <update_first_layer+0x24>)
 8001f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f36:	bf00      	nop
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f63 	.word	0x08001f63
 8001f40:	08001f85 	.word	0x08001f85
 8001f44:	08001fa7 	.word	0x08001fa7
		{
			case DEFAULT:
			ST7920_GraphicMode(1);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7ff f8d3 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f4e:	f7ff f985 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f7ff f8ce 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f58:	f7ff f980 	bl	800125c <ST7920_Clear>

			default_screen();
 8001f5c:	f000 fae4 	bl	8002528 <default_screen>
			break;
 8001f60:	e033      	b.n	8001fca <update_first_layer+0xb6>

			case START:
			default_screen();
 8001f62:	f000 fae1 	bl	8002528 <default_screen>

			// highlighting "START"
			ST7920_GraphicMode(1);
 8001f66:	2001      	movs	r0, #1
 8001f68:	f7ff f8c4 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(88, 48, 80, 16);
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	2250      	movs	r2, #80	; 0x50
 8001f70:	2130      	movs	r1, #48	; 0x30
 8001f72:	2058      	movs	r0, #88	; 0x58
 8001f74:	f7ff fb66 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8001f78:	f7ff f966 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff f8b9 	bl	80010f4 <ST7920_GraphicMode>
			break;
 8001f82:	e022      	b.n	8001fca <update_first_layer+0xb6>

			case STOP:
			default_screen();
 8001f84:	f000 fad0 	bl	8002528 <default_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7ff f8b3 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 50, 35, 16);
 8001f8e:	2310      	movs	r3, #16
 8001f90:	2223      	movs	r2, #35	; 0x23
 8001f92:	2132      	movs	r1, #50	; 0x32
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff fb55 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8001f9a:	f7ff f955 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001f9e:	2000      	movs	r0, #0
 8001fa0:	f7ff f8a8 	bl	80010f4 <ST7920_GraphicMode>
			break;
 8001fa4:	e011      	b.n	8001fca <update_first_layer+0xb6>

			case SETTINGS:
			default_screen();
 8001fa6:	f000 fabf 	bl	8002528 <default_screen>
			// highlighting "SETTINGS"
			ST7920_GraphicMode(1);
 8001faa:	2001      	movs	r0, #1
 8001fac:	f7ff f8a2 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 16, 80, 16);
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	2250      	movs	r2, #80	; 0x50
 8001fb4:	2110      	movs	r1, #16
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f7ff fb44 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8001fbc:	f7ff f944 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff f897 	bl	80010f4 <ST7920_GraphicMode>
			break;
 8001fc6:	e000      	b.n	8001fca <update_first_layer+0xb6>

			default:

			break;
 8001fc8:	bf00      	nop

		}

		curr_position->FL_prev_position = curr_position->FL_position;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	781a      	ldrb	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	705a      	strb	r2, [r3, #1]
	}
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop

08001fdc <update_second_layer>:


void update_second_layer(cursor_position* curr_position)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
	if(curr_position->SL_position != curr_position->SL_prev_position)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	789a      	ldrb	r2, [r3, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	78db      	ldrb	r3, [r3, #3]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	f000 809e 	beq.w	800212e <update_second_layer+0x152>
	{

		switch(curr_position->SL_position)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	789b      	ldrb	r3, [r3, #2]
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	f200 8094 	bhi.w	8002124 <update_second_layer+0x148>
 8001ffc:	a201      	add	r2, pc, #4	; (adr r2, 8002004 <update_second_layer+0x28>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	080020f1 	.word	0x080020f1
 8002008:	08002019 	.word	0x08002019
 800200c:	0800204f 	.word	0x0800204f
 8002010:	08002085 	.word	0x08002085
 8002014:	080020bb 	.word	0x080020bb
		{
		case FIL_DIA:
			ST7920_GraphicMode(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff f86b 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800201e:	f7ff f91d 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff f866 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002028:	f7ff f918 	bl	800125c <ST7920_Clear>


			settings_screen();
 800202c:	f000 faac 	bl	8002588 <settings_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff f85f 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 8002036:	230e      	movs	r3, #14
 8002038:	224f      	movs	r2, #79	; 0x4f
 800203a:	2100      	movs	r1, #0
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff fb01 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8002042:	f7ff f901 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002046:	2000      	movs	r0, #0
 8002048:	f7ff f854 	bl	80010f4 <ST7920_GraphicMode>

			break;
 800204c:	e06b      	b.n	8002126 <update_second_layer+0x14a>

		case FIL_DEN:
			ST7920_GraphicMode(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff f850 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002054:	f7ff f902 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002058:	2000      	movs	r0, #0
 800205a:	f7ff f84b 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800205e:	f7ff f8fd 	bl	800125c <ST7920_Clear>

			// highlighting
			settings_screen();
 8002062:	f000 fa91 	bl	8002588 <settings_screen>
			ST7920_GraphicMode(1);
 8002066:	2001      	movs	r0, #1
 8002068:	f7ff f844 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 800206c:	230f      	movs	r3, #15
 800206e:	224f      	movs	r2, #79	; 0x4f
 8002070:	210f      	movs	r1, #15
 8002072:	2000      	movs	r0, #0
 8002074:	f7ff fae6 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8002078:	f7ff f8e6 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff f839 	bl	80010f4 <ST7920_GraphicMode>

			break;
 8002082:	e050      	b.n	8002126 <update_second_layer+0x14a>

		case SAMPLE_WEIGHT:
			ST7920_GraphicMode(1);
 8002084:	2001      	movs	r0, #1
 8002086:	f7ff f835 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800208a:	f7ff f8e7 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff f830 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002094:	f7ff f8e2 	bl	800125c <ST7920_Clear>


			settings_screen();
 8002098:	f000 fa76 	bl	8002588 <settings_screen>

			ST7920_GraphicMode(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff f829 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 15);
 80020a2:	230f      	movs	r3, #15
 80020a4:	224f      	movs	r2, #79	; 0x4f
 80020a6:	211e      	movs	r1, #30
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff facb 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 80020ae:	f7ff f8cb 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 80020b2:	2000      	movs	r0, #0
 80020b4:	f7ff f81e 	bl	80010f4 <ST7920_GraphicMode>
			break;
 80020b8:	e035      	b.n	8002126 <update_second_layer+0x14a>

		case QUANTITY:
			ST7920_GraphicMode(1);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff f81a 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80020c0:	f7ff f8cc 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 80020c4:	2000      	movs	r0, #0
 80020c6:	f7ff f815 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80020ca:	f7ff f8c7 	bl	800125c <ST7920_Clear>


			settings_screen();
 80020ce:	f000 fa5b 	bl	8002588 <settings_screen>

			ST7920_GraphicMode(1);
 80020d2:	2001      	movs	r0, #1
 80020d4:	f7ff f80e 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 15);
 80020d8:	230f      	movs	r3, #15
 80020da:	224f      	movs	r2, #79	; 0x4f
 80020dc:	2130      	movs	r1, #48	; 0x30
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fab0 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 80020e4:	f7ff f8b0 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f7ff f803 	bl	80010f4 <ST7920_GraphicMode>
			break;
 80020ee:	e01a      	b.n	8002126 <update_second_layer+0x14a>

		case BACK:
			ST7920_GraphicMode(1);
 80020f0:	2001      	movs	r0, #1
 80020f2:	f7fe ffff 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80020f6:	f7ff f8b1 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 80020fa:	2000      	movs	r0, #0
 80020fc:	f7fe fffa 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002100:	f7ff f8ac 	bl	800125c <ST7920_Clear>


			settings_screen();
 8002104:	f000 fa40 	bl	8002588 <settings_screen>

			ST7920_GraphicMode(1);
 8002108:	2001      	movs	r0, #1
 800210a:	f7fe fff3 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(80, 48, 79, 15);
 800210e:	230f      	movs	r3, #15
 8002110:	224f      	movs	r2, #79	; 0x4f
 8002112:	2130      	movs	r1, #48	; 0x30
 8002114:	2050      	movs	r0, #80	; 0x50
 8002116:	f7ff fa95 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 800211a:	f7ff f895 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe ffe8 	bl	80010f4 <ST7920_GraphicMode>


		default:

			break;
 8002124:	bf00      	nop
		}

		curr_position->SL_prev_position = curr_position->SL_position;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	789a      	ldrb	r2, [r3, #2]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	70da      	strb	r2, [r3, #3]
	}

}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop

08002138 <update_third_layer>:


void update_third_layer(cursor_position* curr_position)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
	if(curr_position->TL_position != curr_position->TL_prev_position)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	791a      	ldrb	r2, [r3, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	795b      	ldrb	r3, [r3, #5]
 8002148:	429a      	cmp	r2, r3
 800214a:	f000 80a3 	beq.w	8002294 <update_third_layer+0x15c>
	{
		switch(curr_position->TL_position)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	791b      	ldrb	r3, [r3, #4]
 8002152:	2b06      	cmp	r3, #6
 8002154:	f200 8099 	bhi.w	800228a <update_third_layer+0x152>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <update_third_layer+0x28>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	0800217d 	.word	0x0800217d
 8002164:	080021b3 	.word	0x080021b3
 8002168:	080021e9 	.word	0x080021e9
 800216c:	0800221f 	.word	0x0800221f
 8002170:	08002255 	.word	0x08002255
 8002174:	0800228b 	.word	0x0800228b
 8002178:	0800228b 	.word	0x0800228b
		{
		case DIAMETER_175:
			ST7920_GraphicMode(1);
 800217c:	2001      	movs	r0, #1
 800217e:	f7fe ffb9 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002182:	f7ff f86b 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002186:	2000      	movs	r0, #0
 8002188:	f7fe ffb4 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800218c:	f7ff f866 	bl	800125c <ST7920_Clear>
			diameter_screen();
 8002190:	f000 fa22 	bl	80025d8 <diameter_screen>

			ST7920_GraphicMode(1);
 8002194:	2001      	movs	r0, #1
 8002196:	f7fe ffad 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800219a:	230e      	movs	r3, #14
 800219c:	224f      	movs	r2, #79	; 0x4f
 800219e:	2100      	movs	r1, #0
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff fa4f 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 80021a6:	f7ff f84f 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7fe ffa2 	bl	80010f4 <ST7920_GraphicMode>
			break;
 80021b0:	e06c      	b.n	800228c <update_third_layer+0x154>

		case DIAMETER_285:
			ST7920_GraphicMode(1);
 80021b2:	2001      	movs	r0, #1
 80021b4:	f7fe ff9e 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80021b8:	f7ff f850 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7fe ff99 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80021c2:	f7ff f84b 	bl	800125c <ST7920_Clear>
			diameter_screen();
 80021c6:	f000 fa07 	bl	80025d8 <diameter_screen>

			ST7920_GraphicMode(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f7fe ff92 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 80021d0:	230f      	movs	r3, #15
 80021d2:	224f      	movs	r2, #79	; 0x4f
 80021d4:	210f      	movs	r1, #15
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7ff fa34 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 80021dc:	f7ff f834 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 80021e0:	2000      	movs	r0, #0
 80021e2:	f7fe ff87 	bl	80010f4 <ST7920_GraphicMode>
			break;
 80021e6:	e051      	b.n	800228c <update_third_layer+0x154>

		case DENSITY_PLA:
			ST7920_GraphicMode(1);
 80021e8:	2001      	movs	r0, #1
 80021ea:	f7fe ff83 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80021ee:	f7ff f835 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe ff7e 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 80021f8:	f7ff f830 	bl	800125c <ST7920_Clear>
			density_screen();
 80021fc:	f000 f9fe 	bl	80025fc <density_screen>

			ST7920_GraphicMode(1);
 8002200:	2001      	movs	r0, #1
 8002202:	f7fe ff77 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 8002206:	230e      	movs	r3, #14
 8002208:	224f      	movs	r2, #79	; 0x4f
 800220a:	2100      	movs	r1, #0
 800220c:	2000      	movs	r0, #0
 800220e:	f7ff fa19 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8002212:	f7ff f819 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe ff6c 	bl	80010f4 <ST7920_GraphicMode>
			break;
 800221c:	e036      	b.n	800228c <update_third_layer+0x154>

		case DENSITY_ABS:
			ST7920_GraphicMode(1);
 800221e:	2001      	movs	r0, #1
 8002220:	f7fe ff68 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002224:	f7ff f81a 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe ff63 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800222e:	f7ff f815 	bl	800125c <ST7920_Clear>
			density_screen();
 8002232:	f000 f9e3 	bl	80025fc <density_screen>

			ST7920_GraphicMode(1);
 8002236:	2001      	movs	r0, #1
 8002238:	f7fe ff5c 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 800223c:	230e      	movs	r3, #14
 800223e:	224f      	movs	r2, #79	; 0x4f
 8002240:	210f      	movs	r1, #15
 8002242:	2000      	movs	r0, #0
 8002244:	f7ff f9fe 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 8002248:	f7fe fffe 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe ff51 	bl	80010f4 <ST7920_GraphicMode>
			break;
 8002252:	e01b      	b.n	800228c <update_third_layer+0x154>

		case DENSITY_PETG:
			ST7920_GraphicMode(1);
 8002254:	2001      	movs	r0, #1
 8002256:	f7fe ff4d 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 800225a:	f7fe ffff 	bl	800125c <ST7920_Clear>
			ST7920_GraphicMode(0);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe ff48 	bl	80010f4 <ST7920_GraphicMode>
			ST7920_Clear();
 8002264:	f7fe fffa 	bl	800125c <ST7920_Clear>
			density_screen();
 8002268:	f000 f9c8 	bl	80025fc <density_screen>

			ST7920_GraphicMode(1);
 800226c:	2001      	movs	r0, #1
 800226e:	f7fe ff41 	bl	80010f4 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 14);
 8002272:	230e      	movs	r3, #14
 8002274:	224f      	movs	r2, #79	; 0x4f
 8002276:	211e      	movs	r1, #30
 8002278:	2000      	movs	r0, #0
 800227a:	f7ff f9e3 	bl	8001644 <DrawFilledRectangle>
			ST7920_Update();
 800227e:	f7fe ffe3 	bl	8001248 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe ff36 	bl	80010f4 <ST7920_GraphicMode>
			break;
 8002288:	e000      	b.n	800228c <update_third_layer+0x154>
		case WEIGHT:
			break;
		case QTY:
			break;
		default:
			break;
 800228a:	bf00      	nop

		}

		curr_position->TL_prev_position = curr_position->TL_position;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	791a      	ldrb	r2, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	715a      	strb	r2, [r3, #5]

	}

}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <menu_update>:




void menu_update(cursor_position* curr_position)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]

	update_enc(curr_position);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 f83b 	bl	8002320 <update_enc>

	if(curr_position->current_layer == FIRST_LAYER)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	799b      	ldrb	r3, [r3, #6]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <menu_update+0x1e>
	{

		update_first_layer(curr_position);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff fe2e 	bl	8001f14 <update_first_layer>
	}




}
 80022b8:	e00e      	b.n	80022d8 <menu_update+0x3c>
	else if(curr_position->current_layer == SECOND_LAYER)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	799b      	ldrb	r3, [r3, #6]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d103      	bne.n	80022ca <menu_update+0x2e>
		update_second_layer(curr_position);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fe8a 	bl	8001fdc <update_second_layer>
}
 80022c8:	e006      	b.n	80022d8 <menu_update+0x3c>
	else if(curr_position->current_layer == THIRD_LAYER)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d102      	bne.n	80022d8 <menu_update+0x3c>
		update_third_layer(curr_position);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff ff30 	bl	8002138 <update_third_layer>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}

080022e0 <Init_menu>:


void Init_menu(cursor_position* curr_position)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	curr_position->FL_position = DEFAULT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]

	curr_position->SL_position = FIL_DIA;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	709a      	strb	r2, [r3, #2]

	curr_position->TL_position = DIAMETER_175;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	711a      	strb	r2, [r3, #4]

	curr_position->FL_prev_position = START;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	705a      	strb	r2, [r3, #1]

	curr_position->SL_prev_position = NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2205      	movs	r2, #5
 8002304:	70da      	strb	r2, [r3, #3]

	curr_position->TL_prev_position = NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2205      	movs	r2, #5
 800230a:	715a      	strb	r2, [r3, #5]


	curr_position->current_layer = FIRST_LAYER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	719a      	strb	r2, [r3, #6]

	menu_update(curr_position);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffc2 	bl	800229c <menu_update>

}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}

08002320 <update_enc>:



void update_enc(cursor_position* curr_position)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

	uint8_t enc_value;
	enc_value = enc_get_counter();
 8002328:	f7ff fa3c 	bl	80017a4 <enc_get_counter>
 800232c:	4603      	mov	r3, r0
 800232e:	73fb      	strb	r3, [r7, #15]

	if(curr_position->current_layer == FIRST_LAYER)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	799b      	ldrb	r3, [r3, #6]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d143      	bne.n	80023c0 <update_enc+0xa0>
	{

			if((enc_value >=0) & (enc_value < 4))
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b03      	cmp	r3, #3
 800233c:	d803      	bhi.n	8002346 <update_enc+0x26>
			{
				curr_position->FL_position = DEFAULT;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]


	}


}
 8002344:	e0eb      	b.n	800251e <update_enc+0x1fe>
			else if((enc_value >= 4) & (enc_value < 8))
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	2b03      	cmp	r3, #3
 800234a:	bf8c      	ite	hi
 800234c:	2301      	movhi	r3, #1
 800234e:	2300      	movls	r3, #0
 8002350:	b2da      	uxtb	r2, r3
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b07      	cmp	r3, #7
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	4013      	ands	r3, r2
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <update_enc+0x4e>
				curr_position->FL_position = SETTINGS;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2203      	movs	r2, #3
 800236a:	701a      	strb	r2, [r3, #0]
}
 800236c:	e0d7      	b.n	800251e <update_enc+0x1fe>
			else if((enc_value >= 8) & (enc_value < 12))
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b07      	cmp	r3, #7
 8002372:	bf8c      	ite	hi
 8002374:	2301      	movhi	r3, #1
 8002376:	2300      	movls	r3, #0
 8002378:	b2da      	uxtb	r2, r3
 800237a:	7bfb      	ldrb	r3, [r7, #15]
 800237c:	2b0b      	cmp	r3, #11
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	4013      	ands	r3, r2
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d003      	beq.n	8002396 <update_enc+0x76>
				curr_position->FL_position = START;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	e0c3      	b.n	800251e <update_enc+0x1fe>
			else if((enc_value >= 12) & (enc_value < 16))
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b0b      	cmp	r3, #11
 800239a:	bf8c      	ite	hi
 800239c:	2301      	movhi	r3, #1
 800239e:	2300      	movls	r3, #0
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b0f      	cmp	r3, #15
 80023a6:	bf94      	ite	ls
 80023a8:	2301      	movls	r3, #1
 80023aa:	2300      	movhi	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	4013      	ands	r3, r2
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80b3 	beq.w	800251e <update_enc+0x1fe>
				curr_position->FL_position = STOP;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2202      	movs	r2, #2
 80023bc:	701a      	strb	r2, [r3, #0]
}
 80023be:	e0ae      	b.n	800251e <update_enc+0x1fe>
	else if(curr_position->current_layer == SECOND_LAYER)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	799b      	ldrb	r3, [r3, #6]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d156      	bne.n	8002476 <update_enc+0x156>
		if((enc_value >=0) & (enc_value < 4))
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d803      	bhi.n	80023d6 <update_enc+0xb6>
			curr_position->SL_position = FIL_DIA;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	709a      	strb	r2, [r3, #2]
}
 80023d4:	e0a3      	b.n	800251e <update_enc+0x1fe>
		else if((enc_value >= 4) & (enc_value < 8))
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	2b03      	cmp	r3, #3
 80023da:	bf8c      	ite	hi
 80023dc:	2301      	movhi	r3, #1
 80023de:	2300      	movls	r3, #0
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b07      	cmp	r3, #7
 80023e6:	bf94      	ite	ls
 80023e8:	2301      	movls	r3, #1
 80023ea:	2300      	movhi	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	4013      	ands	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <update_enc+0xde>
			curr_position->SL_position = FIL_DEN;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	709a      	strb	r2, [r3, #2]
}
 80023fc:	e08f      	b.n	800251e <update_enc+0x1fe>
		else if((enc_value >= 8) & (enc_value < 12))
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b07      	cmp	r3, #7
 8002402:	bf8c      	ite	hi
 8002404:	2301      	movhi	r3, #1
 8002406:	2300      	movls	r3, #0
 8002408:	b2da      	uxtb	r2, r3
 800240a:	7bfb      	ldrb	r3, [r7, #15]
 800240c:	2b0b      	cmp	r3, #11
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4013      	ands	r3, r2
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <update_enc+0x106>
			curr_position->SL_position = SAMPLE_WEIGHT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2203      	movs	r2, #3
 8002422:	709a      	strb	r2, [r3, #2]
}
 8002424:	e07b      	b.n	800251e <update_enc+0x1fe>
		else if((enc_value >= 12) & (enc_value < 16))
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	2b0b      	cmp	r3, #11
 800242a:	bf8c      	ite	hi
 800242c:	2301      	movhi	r3, #1
 800242e:	2300      	movls	r3, #0
 8002430:	b2da      	uxtb	r2, r3
 8002432:	7bfb      	ldrb	r3, [r7, #15]
 8002434:	2b0f      	cmp	r3, #15
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4013      	ands	r3, r2
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <update_enc+0x12e>
			curr_position->SL_position = QUANTITY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2204      	movs	r2, #4
 800244a:	709a      	strb	r2, [r3, #2]
}
 800244c:	e067      	b.n	800251e <update_enc+0x1fe>
		else if((enc_value >= 16) & (enc_value < 21))
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	bf8c      	ite	hi
 8002454:	2301      	movhi	r3, #1
 8002456:	2300      	movls	r3, #0
 8002458:	b2da      	uxtb	r2, r3
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	2b14      	cmp	r3, #20
 800245e:	bf94      	ite	ls
 8002460:	2301      	movls	r3, #1
 8002462:	2300      	movhi	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4013      	ands	r3, r2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d057      	beq.n	800251e <update_enc+0x1fe>
			curr_position->SL_position = BACK;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	709a      	strb	r2, [r3, #2]
}
 8002474:	e053      	b.n	800251e <update_enc+0x1fe>
	else if(curr_position->current_layer == THIRD_LAYER)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	799b      	ldrb	r3, [r3, #6]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d14f      	bne.n	800251e <update_enc+0x1fe>
		if(curr_position->SL_position == FIL_DIA)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	789b      	ldrb	r3, [r3, #2]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d119      	bne.n	80024ba <update_enc+0x19a>
			if((enc_value >= 0) & (enc_value < 4))
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b03      	cmp	r3, #3
 800248a:	d803      	bhi.n	8002494 <update_enc+0x174>
				curr_position->TL_position = DIAMETER_175;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	711a      	strb	r2, [r3, #4]
 8002492:	e012      	b.n	80024ba <update_enc+0x19a>
			else if((enc_value >= 4) & (enc_value <= 8))
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	2b03      	cmp	r3, #3
 8002498:	bf8c      	ite	hi
 800249a:	2301      	movhi	r3, #1
 800249c:	2300      	movls	r3, #0
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	bf94      	ite	ls
 80024a6:	2301      	movls	r3, #1
 80024a8:	2300      	movhi	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d002      	beq.n	80024ba <update_enc+0x19a>
				curr_position->TL_position = DIAMETER_285;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	711a      	strb	r2, [r3, #4]
		if(curr_position->SL_position == FIL_DEN)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	789b      	ldrb	r3, [r3, #2]
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d12d      	bne.n	800251e <update_enc+0x1fe>
			if((enc_value >= 0) & (enc_value < 4))
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d803      	bhi.n	80024d0 <update_enc+0x1b0>
				curr_position->TL_position = DENSITY_PLA;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	711a      	strb	r2, [r3, #4]
}
 80024ce:	e026      	b.n	800251e <update_enc+0x1fe>
			else if((enc_value >= 4) & (enc_value < 8))
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	bf8c      	ite	hi
 80024d6:	2301      	movhi	r3, #1
 80024d8:	2300      	movls	r3, #0
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b07      	cmp	r3, #7
 80024e0:	bf94      	ite	ls
 80024e2:	2301      	movls	r3, #1
 80024e4:	2300      	movhi	r3, #0
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <update_enc+0x1d8>
				curr_position->TL_position = DENSITY_ABS;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2203      	movs	r2, #3
 80024f4:	711a      	strb	r2, [r3, #4]
}
 80024f6:	e012      	b.n	800251e <update_enc+0x1fe>
			else if((enc_value >= 8) & (enc_value <= 20))
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	bf8c      	ite	hi
 80024fe:	2301      	movhi	r3, #1
 8002500:	2300      	movls	r3, #0
 8002502:	b2da      	uxtb	r2, r3
 8002504:	7bfb      	ldrb	r3, [r7, #15]
 8002506:	2b14      	cmp	r3, #20
 8002508:	bf94      	ite	ls
 800250a:	2301      	movls	r3, #1
 800250c:	2300      	movhi	r3, #0
 800250e:	b2db      	uxtb	r3, r3
 8002510:	4013      	ands	r3, r2
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b00      	cmp	r3, #0
 8002516:	d002      	beq.n	800251e <update_enc+0x1fe>
				curr_position->TL_position = DENSITY_PETG;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	711a      	strb	r2, [r3, #4]
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
	...

08002528 <default_screen>:




void default_screen()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"FILAMENT CUTTER");
 800252c:	4a12      	ldr	r2, [pc, #72]	; (8002578 <default_screen+0x50>)
 800252e:	2100      	movs	r1, #0
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe fd9b 	bl	800106c <ST7920_SendString>
	ST7920_GraphicMode(1);
 8002536:	2001      	movs	r0, #1
 8002538:	f7fe fddc 	bl	80010f4 <ST7920_GraphicMode>
	ST7920_Clear();
 800253c:	f7fe fe8e 	bl	800125c <ST7920_Clear>
	DrawRectangle(0, 0, 127, 14);
 8002540:	230e      	movs	r3, #14
 8002542:	227f      	movs	r2, #127	; 0x7f
 8002544:	2100      	movs	r1, #0
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fff2 	bl	8001530 <DrawRectangle>
	ST7920_Update();
 800254c:	f7fe fe7c 	bl	8001248 <ST7920_Update>
	ST7920_GraphicMode(0);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fdcf 	bl	80010f4 <ST7920_GraphicMode>
	ST7920_SendString(1,0,"1.Settings");
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <default_screen+0x54>)
 8002558:	2100      	movs	r1, #0
 800255a:	2001      	movs	r0, #1
 800255c:	f7fe fd86 	bl	800106c <ST7920_SendString>
	ST7920_SendString(3,0,"STOP");
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <default_screen+0x58>)
 8002562:	2100      	movs	r1, #0
 8002564:	2003      	movs	r0, #3
 8002566:	f7fe fd81 	bl	800106c <ST7920_SendString>
	ST7920_SendString(3,5," START");
 800256a:	4a06      	ldr	r2, [pc, #24]	; (8002584 <default_screen+0x5c>)
 800256c:	2105      	movs	r1, #5
 800256e:	2003      	movs	r0, #3
 8002570:	f7fe fd7c 	bl	800106c <ST7920_SendString>

}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	08007658 	.word	0x08007658
 800257c:	08007668 	.word	0x08007668
 8002580:	08007674 	.word	0x08007674
 8002584:	0800767c 	.word	0x0800767c

08002588 <settings_screen>:



void settings_screen()
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"1.Diameter");
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <settings_screen+0x3c>)
 800258e:	2100      	movs	r1, #0
 8002590:	2000      	movs	r0, #0
 8002592:	f7fe fd6b 	bl	800106c <ST7920_SendString>
	ST7920_SendString(1,0,"2.Density");
 8002596:	4a0c      	ldr	r2, [pc, #48]	; (80025c8 <settings_screen+0x40>)
 8002598:	2100      	movs	r1, #0
 800259a:	2001      	movs	r0, #1
 800259c:	f7fe fd66 	bl	800106c <ST7920_SendString>
	ST7920_SendString(2,0,"3.Weight");
 80025a0:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <settings_screen+0x44>)
 80025a2:	2100      	movs	r1, #0
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7fe fd61 	bl	800106c <ST7920_SendString>
	ST7920_SendString(3,0,"4.QTY");
 80025aa:	4a09      	ldr	r2, [pc, #36]	; (80025d0 <settings_screen+0x48>)
 80025ac:	2100      	movs	r1, #0
 80025ae:	2003      	movs	r0, #3
 80025b0:	f7fe fd5c 	bl	800106c <ST7920_SendString>
	ST7920_SendString(3,5,"5.BACK");
 80025b4:	4a07      	ldr	r2, [pc, #28]	; (80025d4 <settings_screen+0x4c>)
 80025b6:	2105      	movs	r1, #5
 80025b8:	2003      	movs	r0, #3
 80025ba:	f7fe fd57 	bl	800106c <ST7920_SendString>

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	08007684 	.word	0x08007684
 80025c8:	08007690 	.word	0x08007690
 80025cc:	0800769c 	.word	0x0800769c
 80025d0:	080076a8 	.word	0x080076a8
 80025d4:	080076b0 	.word	0x080076b0

080025d8 <diameter_screen>:


void diameter_screen()
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "1.75 mm");
 80025dc:	4a05      	ldr	r2, [pc, #20]	; (80025f4 <diameter_screen+0x1c>)
 80025de:	2100      	movs	r1, #0
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe fd43 	bl	800106c <ST7920_SendString>
	ST7920_SendString(1, 0, "2.85 mm");
 80025e6:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <diameter_screen+0x20>)
 80025e8:	2100      	movs	r1, #0
 80025ea:	2001      	movs	r0, #1
 80025ec:	f7fe fd3e 	bl	800106c <ST7920_SendString>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	080076b8 	.word	0x080076b8
 80025f8:	080076c0 	.word	0x080076c0

080025fc <density_screen>:


void density_screen()
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "1. PLA");
 8002600:	4a08      	ldr	r2, [pc, #32]	; (8002624 <density_screen+0x28>)
 8002602:	2100      	movs	r1, #0
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe fd31 	bl	800106c <ST7920_SendString>
	ST7920_SendString(1, 0, "2. ABS");
 800260a:	4a07      	ldr	r2, [pc, #28]	; (8002628 <density_screen+0x2c>)
 800260c:	2100      	movs	r1, #0
 800260e:	2001      	movs	r0, #1
 8002610:	f7fe fd2c 	bl	800106c <ST7920_SendString>
	ST7920_SendString(2, 0, "3. PETG");
 8002614:	4a05      	ldr	r2, [pc, #20]	; (800262c <density_screen+0x30>)
 8002616:	2100      	movs	r1, #0
 8002618:	2002      	movs	r0, #2
 800261a:	f7fe fd27 	bl	800106c <ST7920_SendString>
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	080076c8 	.word	0x080076c8
 8002628:	080076d0 	.word	0x080076d0
 800262c:	080076d8 	.word	0x080076d8

08002630 <stepper_init>:
#include "filament_cutter.h"


void stepper_init(stepper_motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		TIM_HandleTypeDef *slave_timer, GPIO_TypeDef* Dir_port, uint16_t Dir_pin)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
 800263c:	603b      	str	r3, [r7, #0]
	motor->timer.htim = htim;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	601a      	str	r2, [r3, #0]
	motor->timer.channel = channel;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	605a      	str	r2, [r3, #4]
	motor->slave_timer.htim = slave_timer;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	609a      	str	r2, [r3, #8]
	motor->DIR_port = Dir_port;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	615a      	str	r2, [r3, #20]
	motor->DIR_pin = Dir_pin;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8bba      	ldrh	r2, [r7, #28]
 800265a:	831a      	strh	r2, [r3, #24]
}
 800265c:	bf00      	nop
 800265e:	3714      	adds	r7, #20
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <stepper_stop>:

// Basic stepper motor control functions

void stepper_stop(stepper_motor *motor)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
	motor->mode = IDLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	745a      	strb	r2, [r3, #17]

	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, 0);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d105      	bne.n	800268a <stepper_stop+0x22>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2200      	movs	r2, #0
 8002686:	635a      	str	r2, [r3, #52]	; 0x34
 8002688:	e02c      	b.n	80026e4 <stepper_stop+0x7c>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	2b04      	cmp	r3, #4
 8002690:	d105      	bne.n	800269e <stepper_stop+0x36>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	2300      	movs	r3, #0
 800269a:	6393      	str	r3, [r2, #56]	; 0x38
 800269c:	e022      	b.n	80026e4 <stepper_stop+0x7c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d105      	bne.n	80026b2 <stepper_stop+0x4a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	2300      	movs	r3, #0
 80026ae:	63d3      	str	r3, [r2, #60]	; 0x3c
 80026b0:	e018      	b.n	80026e4 <stepper_stop+0x7c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	2b0c      	cmp	r3, #12
 80026b8:	d105      	bne.n	80026c6 <stepper_stop+0x5e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	6413      	str	r3, [r2, #64]	; 0x40
 80026c4:	e00e      	b.n	80026e4 <stepper_stop+0x7c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	2b10      	cmp	r3, #16
 80026cc:	d105      	bne.n	80026da <stepper_stop+0x72>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	6593      	str	r3, [r2, #88]	; 0x58
 80026d8:	e004      	b.n	80026e4 <stepper_stop+0x7c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(motor->timer.htim, motor->timer.channel);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	4610      	mov	r0, r2
 80026f0:	f003 f90c 	bl	800590c <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(motor->slave_timer.htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f002 ff91 	bl	8005620 <HAL_TIM_Base_Stop_IT>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <stepper_set_dir>:

void stepper_set_dir(stepper_motor *motor, stepper_dir direction)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	460b      	mov	r3, r1
 8002710:	70fb      	strb	r3, [r7, #3]
	motor->dir = direction;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	741a      	strb	r2, [r3, #16]
	if(motor->dir == CW)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	7c1b      	ldrb	r3, [r3, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d108      	bne.n	8002732 <stepper_set_dir+0x2c>
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_RESET);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6958      	ldr	r0, [r3, #20]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	8b1b      	ldrh	r3, [r3, #24]
 8002728:	2200      	movs	r2, #0
 800272a:	4619      	mov	r1, r3
 800272c:	f001 f956 	bl	80039dc <HAL_GPIO_WritePin>

	else
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
	}
}
 8002730:	e007      	b.n	8002742 <stepper_set_dir+0x3c>
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6958      	ldr	r0, [r3, #20]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	8b1b      	ldrh	r3, [r3, #24]
 800273a:	2201      	movs	r2, #1
 800273c:	4619      	mov	r1, r3
 800273e:	f001 f94d 	bl	80039dc <HAL_GPIO_WritePin>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <stepper_set_speed>:

void stepper_set_speed(stepper_motor *motor, uint32_t speed)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	uint32_t freq, counter;

	if(speed > 100)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d902      	bls.n	8002762 <stepper_set_speed+0x16>
	{
		speed = 100;
 800275c:	2364      	movs	r3, #100	; 0x64
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	e006      	b.n	8002770 <stepper_set_speed+0x24>
	}

	else if(speed == 0)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d103      	bne.n	8002770 <stepper_set_speed+0x24>
	{
		stepper_stop(motor);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff7d 	bl	8002668 <stepper_stop>
		return;
 800276e:	e068      	b.n	8002842 <stepper_set_speed+0xf6>
	}

	freq = (speed * (STEPEER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ)) / STEPPER_MOTOR_MAX_SPEED;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002776:	fb02 f303 	mul.w	r3, r2, r3
 800277a:	4a33      	ldr	r2, [pc, #204]	; (8002848 <stepper_set_speed+0xfc>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	095b      	lsrs	r3, r3, #5
 8002782:	60fb      	str	r3, [r7, #12]

	counter = HAL_RCC_GetPCLK1Freq() / (motor->timer.htim->Init.Prescaler * freq);
 8002784:	f002 fa5a 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8002788:	4601      	mov	r1, r0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	fb02 f303 	mul.w	r3, r2, r3
 8002796:	fbb1 f3f3 	udiv	r3, r1, r3
 800279a:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(motor->timer.htim, 0);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->timer.htim, counter - 1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	3a01      	subs	r2, #1
 80027b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	3a01      	subs	r2, #1
 80027ba:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, (counter/2)-1);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d107      	bne.n	80027d4 <stepper_set_speed+0x88>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	085a      	lsrs	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	3a01      	subs	r2, #1
 80027d0:	635a      	str	r2, [r3, #52]	; 0x34
 80027d2:	e036      	b.n	8002842 <stepper_set_speed+0xf6>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b04      	cmp	r3, #4
 80027da:	d107      	bne.n	80027ec <stepper_set_speed+0xa0>
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	085b      	lsrs	r3, r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	6393      	str	r3, [r2, #56]	; 0x38
 80027ea:	e02a      	b.n	8002842 <stepper_set_speed+0xf6>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b08      	cmp	r3, #8
 80027f2:	d107      	bne.n	8002804 <stepper_set_speed+0xb8>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	085b      	lsrs	r3, r3, #1
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	6812      	ldr	r2, [r2, #0]
 80027fe:	3b01      	subs	r3, #1
 8002800:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002802:	e01e      	b.n	8002842 <stepper_set_speed+0xf6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d107      	bne.n	800281c <stepper_set_speed+0xd0>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	085b      	lsrs	r3, r3, #1
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	6812      	ldr	r2, [r2, #0]
 8002816:	3b01      	subs	r3, #1
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	e012      	b.n	8002842 <stepper_set_speed+0xf6>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b10      	cmp	r3, #16
 8002822:	d107      	bne.n	8002834 <stepper_set_speed+0xe8>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	085b      	lsrs	r3, r3, #1
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	3b01      	subs	r3, #1
 8002830:	6593      	str	r3, [r2, #88]	; 0x58
 8002832:	e006      	b.n	8002842 <stepper_set_speed+0xf6>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	085b      	lsrs	r3, r3, #1
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	3b01      	subs	r3, #1
 8002840:	65d3      	str	r3, [r2, #92]	; 0x5c

}
 8002842:	3710      	adds	r7, #16
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	51eb851f 	.word	0x51eb851f

0800284c <stepper_set_angle>:


void stepper_set_angle(stepper_motor *motor, uint32_t angle, uint32_t speed, stepper_dir dir)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	70fb      	strb	r3, [r7, #3]
	motor->mode = ANGLE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2201      	movs	r2, #1
 800285e:	745a      	strb	r2, [r3, #17]
	stepper_set_dir(motor, dir);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	4619      	mov	r1, r3
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7ff ff4e 	bl	8002706 <stepper_set_dir>
	stepper_set_speed(motor, speed);
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff ff6d 	bl	800274c <stepper_set_speed>


	// set angle
	motor->step_counter = 0;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2200      	movs	r2, #0
 8002876:	61da      	str	r2, [r3, #28]
	motor->steps_to_count = angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	22c8      	movs	r2, #200	; 0xc8
 800287c:	fb02 f303 	mul.w	r3, r2, r3
 8002880:	08db      	lsrs	r3, r3, #3
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <stepper_set_angle+0x9c>)
 8002884:	fba2 2303 	umull	r2, r3, r2, r3
 8002888:	089a      	lsrs	r2, r3, #2
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	621a      	str	r2, [r3, #32]


	if(0 == motor->steps_to_count)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <stepper_set_angle+0x50>
	{
		stepper_stop(motor);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff fee6 	bl	8002668 <stepper_stop>
	}
	__HAL_TIM_SET_COUNTER(motor->slave_timer.htim, 0);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2200      	movs	r2, #0
 80028a4:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->slave_timer.htim, motor->steps_to_count - 1);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6a1a      	ldr	r2, [r3, #32]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3a01      	subs	r2, #1
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	3a01      	subs	r2, #1
 80028be:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(motor->slave_timer.htim);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f002 fe4f 	bl	8005568 <HAL_TIM_Base_Start_IT>
	FIRST_MISS_FLAG = 1;
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <stepper_set_angle+0xa0>)
 80028cc:	2201      	movs	r2, #1
 80028ce:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(motor->timer.htim, motor->timer.channel);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f002 ff30 	bl	8005740 <HAL_TIM_PWM_Start>

}
 80028e0:	bf00      	nop
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	16c16c17 	.word	0x16c16c17
 80028ec:	20000493 	.word	0x20000493

080028f0 <stepper_meters_to_rotations>:


void stepper_meters_to_rotations(stepper_motor *motor, uint32_t meters, uint32_t speed, stepper_dir dir)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	70fb      	strb	r3, [r7, #3]
	// 1 rotate = 0,069 m
	// 2*pi*0.0006[m]

	uint32_t target_angle;
	target_angle = (uint32_t)meters / FULL_ROTATION_LENGTH;
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f7fd fdac 	bl	800045c <__aeabi_ui2d>
 8002904:	a30e      	add	r3, pc, #56	; (adr r3, 8002940 <stepper_meters_to_rotations+0x50>)
 8002906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290a:	f7fd ff4b 	bl	80007a4 <__aeabi_ddiv>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4610      	mov	r0, r2
 8002914:	4619      	mov	r1, r3
 8002916:	f7fe f82d 	bl	8000974 <__aeabi_d2uiz>
 800291a:	4603      	mov	r3, r0
 800291c:	617b      	str	r3, [r7, #20]
	target_angle *= 360;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
	stepper_set_angle(motor, target_angle, speed, dir);
 800292a:	78fb      	ldrb	r3, [r7, #3]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6979      	ldr	r1, [r7, #20]
 8002930:	68f8      	ldr	r0, [r7, #12]
 8002932:	f7ff ff8b 	bl	800284c <stepper_set_angle>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	4189374c 	.word	0x4189374c
 8002944:	3fa0e560 	.word	0x3fa0e560

08002948 <stepper_grams_to_meters>:


uint32_t stepper_grams_to_meters(stepper_motor *motor, uint16_t grams, float filament_diameter, float filament_density, uint32_t speed)
{
 8002948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800294c:	b088      	sub	sp, #32
 800294e:	af00      	add	r7, sp, #0
 8002950:	6178      	str	r0, [r7, #20]
 8002952:	460b      	mov	r3, r1
 8002954:	ed87 0a03 	vstr	s0, [r7, #12]
 8002958:	edc7 0a02 	vstr	s1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	827b      	strh	r3, [r7, #18]

	// dlugosc = 4*waga/ (density * PI * srednica_fil * srednica fil)
	uint32_t length;
	length = 4*grams / (filament_density * 3.14 * filament_diameter * filament_diameter);
 8002960:	8a7b      	ldrh	r3, [r7, #18]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fd89 	bl	800047c <__aeabi_i2d>
 800296a:	4604      	mov	r4, r0
 800296c:	460d      	mov	r5, r1
 800296e:	68b8      	ldr	r0, [r7, #8]
 8002970:	f7fd fd96 	bl	80004a0 <__aeabi_f2d>
 8002974:	a31a      	add	r3, pc, #104	; (adr r3, 80029e0 <stepper_grams_to_meters+0x98>)
 8002976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297a:	f7fd fde9 	bl	8000550 <__aeabi_dmul>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4690      	mov	r8, r2
 8002984:	4699      	mov	r9, r3
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f7fd fd8a 	bl	80004a0 <__aeabi_f2d>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4640      	mov	r0, r8
 8002992:	4649      	mov	r1, r9
 8002994:	f7fd fddc 	bl	8000550 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4690      	mov	r8, r2
 800299e:	4699      	mov	r9, r3
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7fd fd7d 	bl	80004a0 <__aeabi_f2d>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	4640      	mov	r0, r8
 80029ac:	4649      	mov	r1, r9
 80029ae:	f7fd fdcf 	bl	8000550 <__aeabi_dmul>
 80029b2:	4602      	mov	r2, r0
 80029b4:	460b      	mov	r3, r1
 80029b6:	4620      	mov	r0, r4
 80029b8:	4629      	mov	r1, r5
 80029ba:	f7fd fef3 	bl	80007a4 <__aeabi_ddiv>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4610      	mov	r0, r2
 80029c4:	4619      	mov	r1, r3
 80029c6:	f7fd ffd5 	bl	8000974 <__aeabi_d2uiz>
 80029ca:	4603      	mov	r3, r0
 80029cc:	61fb      	str	r3, [r7, #28]
	return length;
 80029ce:	69fb      	ldr	r3, [r7, #28]

}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80029da:	bf00      	nop
 80029dc:	f3af 8000 	nop.w
 80029e0:	51eb851f 	.word	0x51eb851f
 80029e4:	40091eb8 	.word	0x40091eb8

080029e8 <stepper_extrude_weight>:

void stepper_extrude_weight(stepper_motor *motor, uint16_t weight)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	460b      	mov	r3, r1
 80029f2:	807b      	strh	r3, [r7, #2]
	if(EXTRUDE_PROCESS_FLAG == 0)
 80029f4:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <stepper_extrude_weight+0x48>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <stepper_extrude_weight+0x3e>
	{
		EXTRUDE_PROCESS_FLAG = 1;
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <stepper_extrude_weight+0x48>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
		uint32_t meters;
		meters = stepper_grams_to_meters(motor, weight, 1.75, 1.24, 15);
 8002a04:	887b      	ldrh	r3, [r7, #2]
 8002a06:	220f      	movs	r2, #15
 8002a08:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002a34 <stepper_extrude_weight+0x4c>
 8002a0c:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ff98 	bl	8002948 <stepper_grams_to_meters>
 8002a18:	60f8      	str	r0, [r7, #12]
		stepper_meters_to_rotations(motor, meters, 20, CW);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	2214      	movs	r2, #20
 8002a1e:	68f9      	ldr	r1, [r7, #12]
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff ff65 	bl	80028f0 <stepper_meters_to_rotations>

	}

}
 8002a26:	bf00      	nop
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	20000494 	.word	0x20000494
 8002a34:	3f9eb852 	.word	0x3f9eb852

08002a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_MspInit+0x44>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	4a0e      	ldr	r2, [pc, #56]	; (8002a7c <HAL_MspInit+0x44>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	6613      	str	r3, [r2, #96]	; 0x60
 8002a4a:	4b0c      	ldr	r3, [pc, #48]	; (8002a7c <HAL_MspInit+0x44>)
 8002a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_MspInit+0x44>)
 8002a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a5a:	4a08      	ldr	r2, [pc, #32]	; (8002a7c <HAL_MspInit+0x44>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6593      	str	r3, [r2, #88]	; 0x58
 8002a62:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_MspInit+0x44>)
 8002a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	603b      	str	r3, [r7, #0]
 8002a6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a84:	e7fe      	b.n	8002a84 <NMI_Handler+0x4>

08002a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a8a:	e7fe      	b.n	8002a8a <HardFault_Handler+0x4>

08002a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <MemManage_Handler+0x4>

08002a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a96:	e7fe      	b.n	8002a96 <BusFault_Handler+0x4>

08002a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a9c:	e7fe      	b.n	8002a9c <UsageFault_Handler+0x4>

08002a9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002acc:	f000 fc9e 	bl	800340c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ad8:	4802      	ldr	r0, [pc, #8]	; (8002ae4 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002ada:	f003 f8d3 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	200005d8 	.word	0x200005d8

08002ae8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002aec:	4803      	ldr	r0, [pc, #12]	; (8002afc <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002aee:	f003 f8c9 	bl	8005c84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002af2:	4803      	ldr	r0, [pc, #12]	; (8002b00 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002af4:	f003 f8c6 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200005d8 	.word	0x200005d8
 8002b00:	20000670 	.word	0x20000670

08002b04 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b08:	4802      	ldr	r0, [pc, #8]	; (8002b14 <TIM1_CC_IRQHandler+0x10>)
 8002b0a:	f003 f8bb 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	200005d8 	.word	0x200005d8

08002b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b1c:	4802      	ldr	r0, [pc, #8]	; (8002b28 <TIM2_IRQHandler+0x10>)
 8002b1e:	f003 f8b1 	bl	8005c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	20000624 	.word	0x20000624

08002b2c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <LPTIM1_IRQHandler+0x10>)
 8002b32:	f001 f87c 	bl	8003c2e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200004bc 	.word	0x200004bc

08002b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <SystemInit+0x5c>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	4a14      	ldr	r2, [pc, #80]	; (8002b9c <SystemInit+0x5c>)
 8002b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <SystemInit+0x60>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <SystemInit+0x60>)
 8002b5a:	f043 0301 	orr.w	r3, r3, #1
 8002b5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002b60:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <SystemInit+0x60>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8002b66:	4b0e      	ldr	r3, [pc, #56]	; (8002ba0 <SystemInit+0x60>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <SystemInit+0x60>)
 8002b6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002b76:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <SystemInit+0x60>)
 8002b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <SystemInit+0x60>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <SystemInit+0x60>)
 8002b84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <SystemInit+0x60>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
}
 8002b90:	bf00      	nop
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	e000ed00 	.word	0xe000ed00
 8002ba0:	40021000 	.word	0x40021000

08002ba4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b09a      	sub	sp, #104	; 0x68
 8002ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002baa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002bc4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	605a      	str	r2, [r3, #4]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	60da      	str	r2, [r3, #12]
 8002bd2:	611a      	str	r2, [r3, #16]
 8002bd4:	615a      	str	r2, [r3, #20]
 8002bd6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bd8:	1d3b      	adds	r3, r7, #4
 8002bda:	222c      	movs	r2, #44	; 0x2c
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fd26 	bl	8007630 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002be4:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002be6:	4a45      	ldr	r2, [pc, #276]	; (8002cfc <MX_TIM1_Init+0x158>)
 8002be8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002bec:	2250      	movs	r2, #80	; 0x50
 8002bee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bf0:	4b41      	ldr	r3, [pc, #260]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8002bf6:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002bfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c0a:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002c10:	4839      	ldr	r0, [pc, #228]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c12:	f002 fbfd 	bl	8005410 <HAL_TIM_Base_Init>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002c1c:	f7ff f974 	bl	8001f08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c24:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002c26:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c2a:	4619      	mov	r1, r3
 8002c2c:	4832      	ldr	r0, [pc, #200]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c2e:	f003 fa59 	bl	80060e4 <HAL_TIM_ConfigClockSource>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002c38:	f7ff f966 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002c3c:	482e      	ldr	r0, [pc, #184]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c3e:	f002 fd1e 	bl	800567e <HAL_TIM_PWM_Init>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002c48:	f7ff f95e 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8002c4c:	2340      	movs	r3, #64	; 0x40
 8002c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8002c50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c54:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002c5a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	4825      	ldr	r0, [pc, #148]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c62:	f003 ffab 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8002c6c:	f7ff f94c 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c70:	2360      	movs	r3, #96	; 0x60
 8002c72:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8002c74:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002c78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c86:	2300      	movs	r3, #0
 8002c88:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c92:	2200      	movs	r2, #0
 8002c94:	4619      	mov	r1, r3
 8002c96:	4818      	ldr	r0, [pc, #96]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002c98:	f003 f914 	bl	8005ec4 <HAL_TIM_PWM_ConfigChannel>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8002ca2:	f7ff f931 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cbe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002cd6:	1d3b      	adds	r3, r7, #4
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4807      	ldr	r0, [pc, #28]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002cdc:	f003 ffdc 	bl	8006c98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002ce6:	f7ff f90f 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002cea:	4803      	ldr	r0, [pc, #12]	; (8002cf8 <MX_TIM1_Init+0x154>)
 8002cec:	f000 fa1e 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002cf0:	bf00      	nop
 8002cf2:	3768      	adds	r7, #104	; 0x68
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	200005d8 	.word	0x200005d8
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002d06:	f107 030c 	add.w	r3, r7, #12
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]
 8002d0e:	605a      	str	r2, [r3, #4]
 8002d10:	609a      	str	r2, [r3, #8]
 8002d12:	60da      	str	r2, [r3, #12]
 8002d14:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d16:	463b      	mov	r3, r7
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d20:	4b1e      	ldr	r3, [pc, #120]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d28:	4b1c      	ldr	r3, [pc, #112]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2e:	4b1b      	ldr	r3, [pc, #108]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d36:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d3c:	4b17      	ldr	r3, [pc, #92]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b16      	ldr	r3, [pc, #88]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d48:	4814      	ldr	r0, [pc, #80]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d4a:	f002 fb61 	bl	8005410 <HAL_TIM_Base_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002d54:	f7ff f8d8 	bl	8001f08 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002d60:	f107 030c 	add.w	r3, r7, #12
 8002d64:	4619      	mov	r1, r3
 8002d66:	480d      	ldr	r0, [pc, #52]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d68:	f003 fa82 	bl	8006270 <HAL_TIM_SlaveConfigSynchro>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002d72:	f7ff f8c9 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d7e:	463b      	mov	r3, r7
 8002d80:	4619      	mov	r1, r3
 8002d82:	4806      	ldr	r0, [pc, #24]	; (8002d9c <MX_TIM2_Init+0x9c>)
 8002d84:	f003 ff1a 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002d8e:	f7ff f8bb 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002d92:	bf00      	nop
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000624 	.word	0x20000624

08002da0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08c      	sub	sp, #48	; 0x30
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	2224      	movs	r2, #36	; 0x24
 8002dac:	2100      	movs	r1, #0
 8002dae:	4618      	mov	r0, r3
 8002db0:	f004 fc3e 	bl	8007630 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002db4:	463b      	mov	r3, r7
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
 8002dba:	605a      	str	r2, [r3, #4]
 8002dbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002dbe:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dc0:	4a21      	ldr	r2, [pc, #132]	; (8002e48 <MX_TIM3_Init+0xa8>)
 8002dc2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002dc4:	4b1f      	ldr	r3, [pc, #124]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002dd0:	4b1c      	ldr	r3, [pc, #112]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dd8:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dde:	4b19      	ldr	r3, [pc, #100]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002de4:	2303      	movs	r3, #3
 8002de6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002de8:	2300      	movs	r3, #0
 8002dea:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002dec:	2301      	movs	r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002df4:	230f      	movs	r3, #15
 8002df6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002e04:	230f      	movs	r3, #15
 8002e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002e08:	f107 030c 	add.w	r3, r7, #12
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	480d      	ldr	r0, [pc, #52]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002e10:	f002 fe04 	bl	8005a1c <HAL_TIM_Encoder_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002e1a:	f7ff f875 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e26:	463b      	mov	r3, r7
 8002e28:	4619      	mov	r1, r3
 8002e2a:	4806      	ldr	r0, [pc, #24]	; (8002e44 <MX_TIM3_Init+0xa4>)
 8002e2c:	f003 fec6 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002e36:	f7ff f867 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002e3a:	bf00      	nop
 8002e3c:	3730      	adds	r7, #48	; 0x30
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	20000540 	.word	0x20000540
 8002e48:	40000400 	.word	0x40000400

08002e4c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002e5c:	4b14      	ldr	r3, [pc, #80]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e5e:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <MX_TIM6_Init+0x68>)
 8002e60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8002e62:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e64:	2250      	movs	r2, #80	; 0x50
 8002e66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e68:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002e6e:	4b10      	ldr	r3, [pc, #64]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e76:	4b0e      	ldr	r3, [pc, #56]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002e7c:	480c      	ldr	r0, [pc, #48]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e7e:	f002 fac7 	bl	8005410 <HAL_TIM_Base_Init>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002e88:	f7ff f83e 	bl	8001f08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e94:	1d3b      	adds	r3, r7, #4
 8002e96:	4619      	mov	r1, r3
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <MX_TIM6_Init+0x64>)
 8002e9a:	f003 fe8f 	bl	8006bbc <HAL_TIMEx_MasterConfigSynchronization>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002ea4:	f7ff f830 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002ea8:	bf00      	nop
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	2000058c 	.word	0x2000058c
 8002eb4:	40001000 	.word	0x40001000

08002eb8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b092      	sub	sp, #72	; 0x48
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ebe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
 8002ec8:	609a      	str	r2, [r3, #8]
 8002eca:	60da      	str	r2, [r3, #12]
 8002ecc:	611a      	str	r2, [r3, #16]
 8002ece:	615a      	str	r2, [r3, #20]
 8002ed0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002ed2:	463b      	mov	r3, r7
 8002ed4:	222c      	movs	r2, #44	; 0x2c
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fba9 	bl	8007630 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002ede:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <MX_TIM16_Init+0xec>)
 8002ee2:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8002ee4:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002ee6:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002eea:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8002ef2:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002ef4:	2263      	movs	r2, #99	; 0x63
 8002ef6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b29      	ldr	r3, [pc, #164]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f04:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f0a:	4825      	ldr	r0, [pc, #148]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f0c:	f002 fa80 	bl	8005410 <HAL_TIM_Base_Init>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002f16:	f7fe fff7 	bl	8001f08 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002f1a:	4821      	ldr	r0, [pc, #132]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f1c:	f002 fbaf 	bl	800567e <HAL_TIM_PWM_Init>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002f26:	f7fe ffef 	bl	8001f08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f2a:	2360      	movs	r3, #96	; 0x60
 8002f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 8002f2e:	2363      	movs	r3, #99	; 0x63
 8002f30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f32:	2300      	movs	r3, #0
 8002f34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f36:	2300      	movs	r3, #0
 8002f38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4814      	ldr	r0, [pc, #80]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f50:	f002 ffb8 	bl	8005ec4 <HAL_TIM_PWM_ConfigChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002f5a:	f7fe ffd5 	bl	8001f08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002f7c:	463b      	mov	r3, r7
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4807      	ldr	r0, [pc, #28]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f82:	f003 fe89 	bl	8006c98 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002f8c:	f7fe ffbc 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002f90:	4803      	ldr	r0, [pc, #12]	; (8002fa0 <MX_TIM16_Init+0xe8>)
 8002f92:	f000 f8cb 	bl	800312c <HAL_TIM_MspPostInit>

}
 8002f96:	bf00      	nop
 8002f98:	3748      	adds	r7, #72	; 0x48
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000670 	.word	0x20000670
 8002fa4:	40014400 	.word	0x40014400

08002fa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a38      	ldr	r2, [pc, #224]	; (8003098 <HAL_TIM_Base_MspInit+0xf0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d124      	bne.n	8003004 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002fba:	4b38      	ldr	r3, [pc, #224]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8002fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fbe:	4a37      	ldr	r2, [pc, #220]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8002fc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002fc6:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	2018      	movs	r0, #24
 8002fd8:	f000 fb37 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002fdc:	2018      	movs	r0, #24
 8002fde:	f000 fb50 	bl	8003682 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	2019      	movs	r0, #25
 8002fe8:	f000 fb2f 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002fec:	2019      	movs	r0, #25
 8002fee:	f000 fb48 	bl	8003682 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	201b      	movs	r0, #27
 8002ff8:	f000 fb27 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ffc:	201b      	movs	r0, #27
 8002ffe:	f000 fb40 	bl	8003682 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8003002:	e044      	b.n	800308e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800300c:	d114      	bne.n	8003038 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800300e:	4b23      	ldr	r3, [pc, #140]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003014:	f043 0301 	orr.w	r3, r3, #1
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003026:	2200      	movs	r2, #0
 8003028:	2100      	movs	r1, #0
 800302a:	201c      	movs	r0, #28
 800302c:	f000 fb0d 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003030:	201c      	movs	r0, #28
 8003032:	f000 fb26 	bl	8003682 <HAL_NVIC_EnableIRQ>
}
 8003036:	e02a      	b.n	800308e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a18      	ldr	r2, [pc, #96]	; (80030a0 <HAL_TIM_Base_MspInit+0xf8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d10c      	bne.n	800305c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003046:	4a15      	ldr	r2, [pc, #84]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003048:	f043 0310 	orr.w	r3, r3, #16
 800304c:	6593      	str	r3, [r2, #88]	; 0x58
 800304e:	4b13      	ldr	r3, [pc, #76]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
}
 800305a:	e018      	b.n	800308e <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a10      	ldr	r2, [pc, #64]	; (80030a4 <HAL_TIM_Base_MspInit+0xfc>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d113      	bne.n	800308e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003066:	4b0d      	ldr	r3, [pc, #52]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800306a:	4a0c      	ldr	r2, [pc, #48]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 800306c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003070:	6613      	str	r3, [r2, #96]	; 0x60
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <HAL_TIM_Base_MspInit+0xf4>)
 8003074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	60bb      	str	r3, [r7, #8]
 800307c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2019      	movs	r0, #25
 8003084:	f000 fae1 	bl	800364a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003088:	2019      	movs	r0, #25
 800308a:	f000 fafa 	bl	8003682 <HAL_NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40021000 	.word	0x40021000
 80030a0:	40001000 	.word	0x40001000
 80030a4:	40014400 	.word	0x40014400

080030a8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08a      	sub	sp, #40	; 0x28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b0:	f107 0314 	add.w	r3, r7, #20
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
 80030b8:	605a      	str	r2, [r3, #4]
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	60da      	str	r2, [r3, #12]
 80030be:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <HAL_TIM_Encoder_MspInit+0x7c>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d128      	bne.n	800311c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030ca:	4b17      	ldr	r3, [pc, #92]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ce:	4a16      	ldr	r2, [pc, #88]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030d0:	f043 0302 	orr.w	r3, r3, #2
 80030d4:	6593      	str	r3, [r2, #88]	; 0x58
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_TIM_Encoder_MspInit+0x80>)
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800310a:	2302      	movs	r3, #2
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003118:	f000 face 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800311c:	bf00      	nop
 800311e:	3728      	adds	r7, #40	; 0x28
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40000400 	.word	0x40000400
 8003128:	40021000 	.word	0x40021000

0800312c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b08a      	sub	sp, #40	; 0x28
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0314 	add.w	r3, r7, #20
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
 8003142:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a23      	ldr	r2, [pc, #140]	; (80031d8 <HAL_TIM_MspPostInit+0xac>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d11e      	bne.n	800318c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	4b23      	ldr	r3, [pc, #140]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4a22      	ldr	r2, [pc, #136]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	64d3      	str	r3, [r2, #76]	; 0x4c
 800315a:	4b20      	ldr	r3, [pc, #128]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 800315c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EXT_STEP_Pin;
 8003166:	f44f 7380 	mov.w	r3, #256	; 0x100
 800316a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316c:	2302      	movs	r3, #2
 800316e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003178:	2301      	movs	r3, #1
 800317a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_STEP_GPIO_Port, &GPIO_InitStruct);
 800317c:	f107 0314 	add.w	r3, r7, #20
 8003180:	4619      	mov	r1, r3
 8003182:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003186:	f000 fa97 	bl	80036b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800318a:	e021      	b.n	80031d0 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_TIM_MspPostInit+0xb4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d11c      	bne.n	80031d0 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003196:	4b11      	ldr	r3, [pc, #68]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 8003198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800319a:	4a10      	ldr	r2, [pc, #64]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 800319c:	f043 0302 	orr.w	r3, r3, #2
 80031a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <HAL_TIM_MspPostInit+0xb0>)
 80031a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CUTT_PWM_Pin;
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b4:	2302      	movs	r3, #2
 80031b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031bc:	2300      	movs	r3, #0
 80031be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 80031c0:	230e      	movs	r3, #14
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CUTT_PWM_GPIO_Port, &GPIO_InitStruct);
 80031c4:	f107 0314 	add.w	r3, r7, #20
 80031c8:	4619      	mov	r1, r3
 80031ca:	4806      	ldr	r0, [pc, #24]	; (80031e4 <HAL_TIM_MspPostInit+0xb8>)
 80031cc:	f000 fa74 	bl	80036b8 <HAL_GPIO_Init>
}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40014400 	.word	0x40014400
 80031e4:	48000400 	.word	0x48000400

080031e8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031ee:	4a15      	ldr	r2, [pc, #84]	; (8003244 <MX_USART2_UART_Init+0x5c>)
 80031f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031f2:	4b13      	ldr	r3, [pc, #76]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <MX_USART2_UART_Init+0x58>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	4b0f      	ldr	r3, [pc, #60]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003202:	2200      	movs	r2, #0
 8003204:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003206:	4b0e      	ldr	r3, [pc, #56]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003208:	2200      	movs	r2, #0
 800320a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800320c:	4b0c      	ldr	r3, [pc, #48]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800320e:	220c      	movs	r2, #12
 8003210:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003218:	4b09      	ldr	r3, [pc, #36]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800321a:	2200      	movs	r2, #0
 800321c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003220:	2200      	movs	r2, #0
 8003222:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003224:	4b06      	ldr	r3, [pc, #24]	; (8003240 <MX_USART2_UART_Init+0x58>)
 8003226:	2200      	movs	r2, #0
 8003228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800322a:	4805      	ldr	r0, [pc, #20]	; (8003240 <MX_USART2_UART_Init+0x58>)
 800322c:	f003 fdca 	bl	8006dc4 <HAL_UART_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003236:	f7fe fe67 	bl	8001f08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200006bc 	.word	0x200006bc
 8003244:	40004400 	.word	0x40004400

08003248 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b0a4      	sub	sp, #144	; 0x90
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2268      	movs	r2, #104	; 0x68
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f004 f9e1 	bl	8007630 <memset>
  if(uartHandle->Instance==USART2)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a21      	ldr	r2, [pc, #132]	; (80032f8 <HAL_UART_MspInit+0xb0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d13a      	bne.n	80032ee <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003278:	2302      	movs	r3, #2
 800327a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800327c:	2300      	movs	r3, #0
 800327e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4618      	mov	r0, r3
 8003286:	f001 fd65 	bl	8004d54 <HAL_RCCEx_PeriphCLKConfig>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003290:	f7fe fe3a 	bl	8001f08 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <HAL_UART_MspInit+0xb4>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	4a18      	ldr	r2, [pc, #96]	; (80032fc <HAL_UART_MspInit+0xb4>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329e:	6593      	str	r3, [r2, #88]	; 0x58
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <HAL_UART_MspInit+0xb4>)
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <HAL_UART_MspInit+0xb4>)
 80032ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b0:	4a12      	ldr	r2, [pc, #72]	; (80032fc <HAL_UART_MspInit+0xb4>)
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b8:	4b10      	ldr	r3, [pc, #64]	; (80032fc <HAL_UART_MspInit+0xb4>)
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80032c4:	230c      	movs	r3, #12
 80032c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c8:	2302      	movs	r3, #2
 80032ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ce:	2300      	movs	r3, #0
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d4:	2303      	movs	r3, #3
 80032d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032da:	2307      	movs	r3, #7
 80032dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80032e4:	4619      	mov	r1, r3
 80032e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032ea:	f000 f9e5 	bl	80036b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80032ee:	bf00      	nop
 80032f0:	3790      	adds	r7, #144	; 0x90
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40004400 	.word	0x40004400
 80032fc:	40021000 	.word	0x40021000

08003300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003304:	f7ff fc1c 	bl	8002b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003308:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800330a:	e003      	b.n	8003314 <LoopCopyDataInit>

0800330c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800330e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003310:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003312:	3104      	adds	r1, #4

08003314 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003314:	480a      	ldr	r0, [pc, #40]	; (8003340 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003316:	4b0b      	ldr	r3, [pc, #44]	; (8003344 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003318:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800331a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800331c:	d3f6      	bcc.n	800330c <CopyDataInit>
	ldr	r2, =_sbss
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003320:	e002      	b.n	8003328 <LoopFillZerobss>

08003322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003322:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003324:	f842 3b04 	str.w	r3, [r2], #4

08003328 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <LoopForever+0x16>)
	cmp	r2, r3
 800332a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800332c:	d3f9      	bcc.n	8003322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800332e:	f004 f95b 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003332:	f7fe fcf9 	bl	8001d28 <main>

08003336 <LoopForever>:

LoopForever:
    b LoopForever
 8003336:	e7fe      	b.n	8003336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003338:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 800333c:	08007738 	.word	0x08007738
	ldr	r0, =_sdata
 8003340:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003344:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8003348:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 800334c:	20000744 	.word	0x20000744

08003350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003350:	e7fe      	b.n	8003350 <ADC1_IRQHandler>
	...

08003354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_Init+0x3c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a0b      	ldr	r2, [pc, #44]	; (8003390 <HAL_Init+0x3c>)
 8003364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003368:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800336a:	2003      	movs	r0, #3
 800336c:	f000 f962 	bl	8003634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003370:	2000      	movs	r0, #0
 8003372:	f000 f80f 	bl	8003394 <HAL_InitTick>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	71fb      	strb	r3, [r7, #7]
 8003380:	e001      	b.n	8003386 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003382:	f7ff fb59 	bl	8002a38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003386:	79fb      	ldrb	r3, [r7, #7]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40022000 	.word	0x40022000

08003394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800339c:	2300      	movs	r3, #0
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80033a0:	4b17      	ldr	r3, [pc, #92]	; (8003400 <HAL_InitTick+0x6c>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d023      	beq.n	80033f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80033a8:	4b16      	ldr	r3, [pc, #88]	; (8003404 <HAL_InitTick+0x70>)
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	4b14      	ldr	r3, [pc, #80]	; (8003400 <HAL_InitTick+0x6c>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	4619      	mov	r1, r3
 80033b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f96d 	bl	800369e <HAL_SYSTICK_Config>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10f      	bne.n	80033ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b0f      	cmp	r3, #15
 80033ce:	d809      	bhi.n	80033e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033d0:	2200      	movs	r2, #0
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	f04f 30ff 	mov.w	r0, #4294967295
 80033d8:	f000 f937 	bl	800364a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <HAL_InitTick+0x74>)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6013      	str	r3, [r2, #0]
 80033e2:	e007      	b.n	80033f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	73fb      	strb	r3, [r7, #15]
 80033e8:	e004      	b.n	80033f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e001      	b.n	80033f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000000c 	.word	0x2000000c
 8003404:	20000004 	.word	0x20000004
 8003408:	20000008 	.word	0x20000008

0800340c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003410:	4b06      	ldr	r3, [pc, #24]	; (800342c <HAL_IncTick+0x20>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_IncTick+0x24>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4413      	add	r3, r2
 800341c:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_IncTick+0x24>)
 800341e:	6013      	str	r3, [r2, #0]
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	2000000c 	.word	0x2000000c
 8003430:	20000740 	.word	0x20000740

08003434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return uwTick;
 8003438:	4b03      	ldr	r3, [pc, #12]	; (8003448 <HAL_GetTick+0x14>)
 800343a:	681b      	ldr	r3, [r3, #0]
}
 800343c:	4618      	mov	r0, r3
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	20000740 	.word	0x20000740

0800344c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003454:	f7ff ffee 	bl	8003434 <HAL_GetTick>
 8003458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003464:	d005      	beq.n	8003472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003466:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <HAL_Delay+0x44>)
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	4413      	add	r3, r2
 8003470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003472:	bf00      	nop
 8003474:	f7ff ffde 	bl	8003434 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	68fa      	ldr	r2, [r7, #12]
 8003480:	429a      	cmp	r2, r3
 8003482:	d8f7      	bhi.n	8003474 <HAL_Delay+0x28>
  {
  }
}
 8003484:	bf00      	nop
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	2000000c 	.word	0x2000000c

08003494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0307 	and.w	r3, r3, #7
 80034a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034b0:	4013      	ands	r3, r2
 80034b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034c6:	4a04      	ldr	r2, [pc, #16]	; (80034d8 <__NVIC_SetPriorityGrouping+0x44>)
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	60d3      	str	r3, [r2, #12]
}
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000ed00 	.word	0xe000ed00

080034dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034e0:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <__NVIC_GetPriorityGrouping+0x18>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	0a1b      	lsrs	r3, r3, #8
 80034e6:	f003 0307 	and.w	r3, r3, #7
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	4603      	mov	r3, r0
 8003500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003506:	2b00      	cmp	r3, #0
 8003508:	db0b      	blt.n	8003522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	f003 021f 	and.w	r2, r3, #31
 8003510:	4907      	ldr	r1, [pc, #28]	; (8003530 <__NVIC_EnableIRQ+0x38>)
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	095b      	lsrs	r3, r3, #5
 8003518:	2001      	movs	r0, #1
 800351a:	fa00 f202 	lsl.w	r2, r0, r2
 800351e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e000e100 	.word	0xe000e100

08003534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	6039      	str	r1, [r7, #0]
 800353e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003544:	2b00      	cmp	r3, #0
 8003546:	db0a      	blt.n	800355e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	490c      	ldr	r1, [pc, #48]	; (8003580 <__NVIC_SetPriority+0x4c>)
 800354e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003552:	0112      	lsls	r2, r2, #4
 8003554:	b2d2      	uxtb	r2, r2
 8003556:	440b      	add	r3, r1
 8003558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800355c:	e00a      	b.n	8003574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4908      	ldr	r1, [pc, #32]	; (8003584 <__NVIC_SetPriority+0x50>)
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b04      	subs	r3, #4
 800356c:	0112      	lsls	r2, r2, #4
 800356e:	b2d2      	uxtb	r2, r2
 8003570:	440b      	add	r3, r1
 8003572:	761a      	strb	r2, [r3, #24]
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	e000e100 	.word	0xe000e100
 8003584:	e000ed00 	.word	0xe000ed00

08003588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f1c3 0307 	rsb	r3, r3, #7
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	bf28      	it	cs
 80035a6:	2304      	movcs	r3, #4
 80035a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	3304      	adds	r3, #4
 80035ae:	2b06      	cmp	r3, #6
 80035b0:	d902      	bls.n	80035b8 <NVIC_EncodePriority+0x30>
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	3b03      	subs	r3, #3
 80035b6:	e000      	b.n	80035ba <NVIC_EncodePriority+0x32>
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035bc:	f04f 32ff 	mov.w	r2, #4294967295
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	fa02 f303 	lsl.w	r3, r2, r3
 80035c6:	43da      	mvns	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	401a      	ands	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035d0:	f04f 31ff 	mov.w	r1, #4294967295
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	fa01 f303 	lsl.w	r3, r1, r3
 80035da:	43d9      	mvns	r1, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e0:	4313      	orrs	r3, r2
         );
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3724      	adds	r7, #36	; 0x24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
	...

080035f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3b01      	subs	r3, #1
 80035fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003600:	d301      	bcc.n	8003606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003602:	2301      	movs	r3, #1
 8003604:	e00f      	b.n	8003626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003606:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <SysTick_Config+0x40>)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	3b01      	subs	r3, #1
 800360c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800360e:	210f      	movs	r1, #15
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	f7ff ff8e 	bl	8003534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003618:	4b05      	ldr	r3, [pc, #20]	; (8003630 <SysTick_Config+0x40>)
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <SysTick_Config+0x40>)
 8003620:	2207      	movs	r2, #7
 8003622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	e000e010 	.word	0xe000e010

08003634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff ff29 	bl	8003494 <__NVIC_SetPriorityGrouping>
}
 8003642:	bf00      	nop
 8003644:	3708      	adds	r7, #8
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b086      	sub	sp, #24
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800365c:	f7ff ff3e 	bl	80034dc <__NVIC_GetPriorityGrouping>
 8003660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6978      	ldr	r0, [r7, #20]
 8003668:	f7ff ff8e 	bl	8003588 <NVIC_EncodePriority>
 800366c:	4602      	mov	r2, r0
 800366e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003672:	4611      	mov	r1, r2
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff5d 	bl	8003534 <__NVIC_SetPriority>
}
 800367a:	bf00      	nop
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}

08003682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	4603      	mov	r3, r0
 800368a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800368c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff ff31 	bl	80034f8 <__NVIC_EnableIRQ>
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff ffa2 	bl	80035f0 <SysTick_Config>
 80036ac:	4603      	mov	r3, r0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b087      	sub	sp, #28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	e154      	b.n	8003972 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	2101      	movs	r1, #1
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8146 	beq.w	800396c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d00b      	beq.n	8003700 <HAL_GPIO_Init+0x48>
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d007      	beq.n	8003700 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80036f4:	2b11      	cmp	r3, #17
 80036f6:	d003      	beq.n	8003700 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b12      	cmp	r3, #18
 80036fe:	d130      	bne.n	8003762 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	2203      	movs	r2, #3
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	43db      	mvns	r3, r3
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003736:	2201      	movs	r2, #1
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43db      	mvns	r3, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4013      	ands	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f003 0201 	and.w	r2, r3, #1
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	2203      	movs	r2, #3
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	43db      	mvns	r3, r3
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4013      	ands	r3, r2
 8003778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	4313      	orrs	r3, r2
 800378a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0xea>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b12      	cmp	r3, #18
 80037a0:	d123      	bne.n	80037ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	220f      	movs	r2, #15
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	691a      	ldr	r2, [r3, #16]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	6939      	ldr	r1, [r7, #16]
 80037e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	2203      	movs	r2, #3
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	43db      	mvns	r3, r3
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4013      	ands	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f003 0203 	and.w	r2, r3, #3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	fa02 f303 	lsl.w	r3, r2, r3
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	4313      	orrs	r3, r2
 8003816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80a0 	beq.w	800396c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800382c:	4b58      	ldr	r3, [pc, #352]	; (8003990 <HAL_GPIO_Init+0x2d8>)
 800382e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003830:	4a57      	ldr	r2, [pc, #348]	; (8003990 <HAL_GPIO_Init+0x2d8>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6613      	str	r3, [r2, #96]	; 0x60
 8003838:	4b55      	ldr	r3, [pc, #340]	; (8003990 <HAL_GPIO_Init+0x2d8>)
 800383a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60bb      	str	r3, [r7, #8]
 8003842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003844:	4a53      	ldr	r2, [pc, #332]	; (8003994 <HAL_GPIO_Init+0x2dc>)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	089b      	lsrs	r3, r3, #2
 800384a:	3302      	adds	r3, #2
 800384c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f003 0303 	and.w	r3, r3, #3
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	220f      	movs	r2, #15
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800386e:	d019      	beq.n	80038a4 <HAL_GPIO_Init+0x1ec>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a49      	ldr	r2, [pc, #292]	; (8003998 <HAL_GPIO_Init+0x2e0>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_GPIO_Init+0x1e8>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a48      	ldr	r2, [pc, #288]	; (800399c <HAL_GPIO_Init+0x2e4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00d      	beq.n	800389c <HAL_GPIO_Init+0x1e4>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a47      	ldr	r2, [pc, #284]	; (80039a0 <HAL_GPIO_Init+0x2e8>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x1e0>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a46      	ldr	r2, [pc, #280]	; (80039a4 <HAL_GPIO_Init+0x2ec>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_GPIO_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e008      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 8003894:	2307      	movs	r3, #7
 8003896:	e006      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 8003898:	2303      	movs	r3, #3
 800389a:	e004      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 800389c:	2302      	movs	r3, #2
 800389e:	e002      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <HAL_GPIO_Init+0x1ee>
 80038a4:	2300      	movs	r3, #0
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	f002 0203 	and.w	r2, r2, #3
 80038ac:	0092      	lsls	r2, r2, #2
 80038ae:	4093      	lsls	r3, r2
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038b6:	4937      	ldr	r1, [pc, #220]	; (8003994 <HAL_GPIO_Init+0x2dc>)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80038c4:	4b38      	ldr	r3, [pc, #224]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	43db      	mvns	r3, r3
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	4013      	ands	r3, r2
 80038d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80038e8:	4a2f      	ldr	r2, [pc, #188]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003912:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003918:	4b23      	ldr	r3, [pc, #140]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	43db      	mvns	r3, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4013      	ands	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d003      	beq.n	800393c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4313      	orrs	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800393c:	4a1a      	ldr	r2, [pc, #104]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003966:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_GPIO_Init+0x2f0>)
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3301      	adds	r3, #1
 8003970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa22 f303 	lsr.w	r3, r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	f47f aea3 	bne.w	80036c8 <HAL_GPIO_Init+0x10>
  }
}
 8003982:	bf00      	nop
 8003984:	bf00      	nop
 8003986:	371c      	adds	r7, #28
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	40021000 	.word	0x40021000
 8003994:	40010000 	.word	0x40010000
 8003998:	48000400 	.word	0x48000400
 800399c:	48000800 	.word	0x48000800
 80039a0:	48000c00 	.word	0x48000c00
 80039a4:	48001000 	.word	0x48001000
 80039a8:	40010400 	.word	0x40010400

080039ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	460b      	mov	r3, r1
 80039b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	887b      	ldrh	r3, [r7, #2]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80039c4:	2301      	movs	r3, #1
 80039c6:	73fb      	strb	r3, [r7, #15]
 80039c8:	e001      	b.n	80039ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039f8:	e002      	b.n	8003a00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e08f      	b.n	8003b3e <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d106      	bne.n	8003a3e <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f7fe f90f 	bl	8001c5c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d004      	beq.n	8003a60 <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a5e:	d103      	bne.n	8003a68 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f023 031e 	bic.w	r3, r3, #30
 8003a66:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d005      	beq.n	8003a80 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	4b31      	ldr	r3, [pc, #196]	; (8003b48 <HAL_LPTIM_Init+0x13c>)
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003a90:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003a96:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003a9c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003aa2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d107      	bne.n	8003ac2 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003aba:	4313      	orrs	r3, r2
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d004      	beq.n	8003ad4 <HAL_LPTIM_Init+0xc8>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ace:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ad2:	d107      	bne.n	8003ae4 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003adc:	4313      	orrs	r3, r2
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00a      	beq.n	8003b06 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003af8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003afe:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0e      	ldr	r2, [pc, #56]	; (8003b4c <HAL_LPTIM_Init+0x140>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d108      	bne.n	8003b2a <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	621a      	str	r2, [r3, #32]
 8003b28:	e004      	b.n	8003b34 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b32:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3710      	adds	r7, #16
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	ff19f1fe 	.word	0xff19f1fe
 8003b4c:	40007c00 	.word	0x40007c00

08003b50 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f023 0306 	bic.w	r3, r3, #6
 8003b70:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0201 	orr.w	r2, r2, #1
 8003ba2:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003bb4:	2110      	movs	r1, #16
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f91e 	bl	8003df8 <LPTIM_WaitForFlag>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	d101      	bne.n	8003bc6 <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e02f      	b.n	8003c26 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f946 	bl	8003e58 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 f905 	bl	8003ddc <HAL_LPTIM_GetState>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d101      	bne.n	8003bdc <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e024      	b.n	8003c26 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bea:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0220 	orr.w	r2, r2, #32
 8003bfa:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0204 	orr.w	r2, r2, #4
 8003c1a:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d10d      	bne.n	8003c60 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d106      	bne.n	8003c60 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2201      	movs	r2, #1
 8003c58:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f882 	bl	8003d64 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d10d      	bne.n	8003c8a <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0302 	and.w	r3, r3, #2
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d106      	bne.n	8003c8a <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2202      	movs	r2, #2
 8003c82:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7fe f901 	bl	8001e8c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0304 	and.w	r3, r3, #4
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d10d      	bne.n	8003cb4 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d106      	bne.n	8003cb4 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2204      	movs	r2, #4
 8003cac:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f862 	bl	8003d78 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	d10d      	bne.n	8003cde <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 0308 	and.w	r3, r3, #8
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d106      	bne.n	8003cde <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2208      	movs	r2, #8
 8003cd6:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f857 	bl	8003d8c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d10d      	bne.n	8003d08 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0310 	and.w	r3, r3, #16
 8003cf6:	2b10      	cmp	r3, #16
 8003cf8:	d106      	bne.n	8003d08 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2210      	movs	r2, #16
 8003d00:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f84c 	bl	8003da0 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d10d      	bne.n	8003d32 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f003 0320 	and.w	r3, r3, #32
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d106      	bne.n	8003d32 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f841 	bl	8003db4 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d10d      	bne.n	8003d5c <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4a:	2b40      	cmp	r3, #64	; 0x40
 8003d4c:	d106      	bne.n	8003d5c <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2240      	movs	r2, #64	; 0x40
 8003d54:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 f836 	bl	8003dc8 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003d94:	bf00      	nop
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003da8:	bf00      	nop
 8003daa:	370c      	adds	r7, #12
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003dbc:	bf00      	nop
 8003dbe:	370c      	adds	r7, #12
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <LPTIM_WaitForFlag+0x58>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a12      	ldr	r2, [pc, #72]	; (8003e54 <LPTIM_WaitForFlag+0x5c>)
 8003e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e10:	0b9b      	lsrs	r3, r3, #14
 8003e12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e16:	fb02 f303 	mul.w	r3, r2, r3
 8003e1a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4013      	ands	r3, r2
 8003e36:	683a      	ldr	r2, [r7, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d002      	beq.n	8003e42 <LPTIM_WaitForFlag+0x4a>
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ec      	bne.n	8003e1c <LPTIM_WaitForFlag+0x24>

  return result;
 8003e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3714      	adds	r7, #20
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	20000004 	.word	0x20000004
 8003e54:	d1b71759 	.word	0xd1b71759

08003e58 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e64:	b672      	cpsid	i
}
 8003e66:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a71      	ldr	r2, [pc, #452]	; (8004034 <LPTIM_Disable+0x1dc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d003      	beq.n	8003e7a <LPTIM_Disable+0x22>
 8003e72:	4a71      	ldr	r2, [pc, #452]	; (8004038 <LPTIM_Disable+0x1e0>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d007      	beq.n	8003e88 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003e78:	e00d      	b.n	8003e96 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003e7a:	4b70      	ldr	r3, [pc, #448]	; (800403c <LPTIM_Disable+0x1e4>)
 8003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e84:	61fb      	str	r3, [r7, #28]
      break;
 8003e86:	e006      	b.n	8003e96 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003e88:	4b6c      	ldr	r3, [pc, #432]	; (800403c <LPTIM_Disable+0x1e4>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003e92:	61fb      	str	r3, [r7, #28]
      break;
 8003e94:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	60fb      	str	r3, [r7, #12]
  tmpOR = hlptim->Instance->OR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	60bb      	str	r3, [r7, #8]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a5c      	ldr	r2, [pc, #368]	; (8004034 <LPTIM_Disable+0x1dc>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d003      	beq.n	8003ed0 <LPTIM_Disable+0x78>
 8003ec8:	4a5b      	ldr	r2, [pc, #364]	; (8004038 <LPTIM_Disable+0x1e0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d00d      	beq.n	8003eea <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003ece:	e019      	b.n	8003f04 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003ed0:	4b5a      	ldr	r3, [pc, #360]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	4a59      	ldr	r2, [pc, #356]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ed6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003eda:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003edc:	4b57      	ldr	r3, [pc, #348]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee0:	4a56      	ldr	r2, [pc, #344]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ee2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ee6:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8003ee8:	e00c      	b.n	8003f04 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003eea:	4b54      	ldr	r3, [pc, #336]	; (800403c <LPTIM_Disable+0x1e4>)
 8003eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eee:	4a53      	ldr	r2, [pc, #332]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ef0:	f043 0320 	orr.w	r3, r3, #32
 8003ef4:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003ef6:	4b51      	ldr	r3, [pc, #324]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	4a50      	ldr	r2, [pc, #320]	; (800403c <LPTIM_Disable+0x1e4>)
 8003efc:	f023 0320 	bic.w	r3, r3, #32
 8003f00:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8003f02:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d102      	bne.n	8003f10 <LPTIM_Disable+0xb8>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d075      	beq.n	8003ffc <LPTIM_Disable+0x1a4>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a47      	ldr	r2, [pc, #284]	; (8004034 <LPTIM_Disable+0x1dc>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d003      	beq.n	8003f22 <LPTIM_Disable+0xca>
 8003f1a:	4a47      	ldr	r2, [pc, #284]	; (8004038 <LPTIM_Disable+0x1e0>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <LPTIM_Disable+0xdc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003f20:	e011      	b.n	8003f46 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003f22:	4b46      	ldr	r3, [pc, #280]	; (800403c <LPTIM_Disable+0x1e4>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	4a44      	ldr	r2, [pc, #272]	; (800403c <LPTIM_Disable+0x1e4>)
 8003f2a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003f2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003f32:	e008      	b.n	8003f46 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003f34:	4b41      	ldr	r3, [pc, #260]	; (800403c <LPTIM_Disable+0x1e4>)
 8003f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3a:	4a40      	ldr	r2, [pc, #256]	; (800403c <LPTIM_Disable+0x1e4>)
 8003f3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003f40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003f44:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01a      	beq.n	8003f82 <LPTIM_Disable+0x12a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f042 0201 	orr.w	r2, r2, #1
 8003f5a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003f64:	2108      	movs	r1, #8
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f7ff ff46 	bl	8003df8 <LPTIM_WaitForFlag>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d103      	bne.n	8003f7a <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2203      	movs	r2, #3
 8003f76:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2208      	movs	r2, #8
 8003f80:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d01a      	beq.n	8003fbe <LPTIM_Disable+0x166>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003fa0:	2110      	movs	r1, #16
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff ff28 	bl	8003df8 <LPTIM_WaitForFlag>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d103      	bne.n	8003fb6 <LPTIM_Disable+0x15e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2210      	movs	r2, #16
 8003fbc:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	; (8004034 <LPTIM_Disable+0x1dc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d003      	beq.n	8003fd0 <LPTIM_Disable+0x178>
 8003fc8:	4a1b      	ldr	r2, [pc, #108]	; (8004038 <LPTIM_Disable+0x1e0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d00b      	beq.n	8003fe6 <LPTIM_Disable+0x18e>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003fce:	e016      	b.n	8003ffe <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <LPTIM_Disable+0x1e4>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fda:	4918      	ldr	r1, [pc, #96]	; (800403c <LPTIM_Disable+0x1e4>)
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003fe4:	e00b      	b.n	8003ffe <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003fe6:	4b15      	ldr	r3, [pc, #84]	; (800403c <LPTIM_Disable+0x1e4>)
 8003fe8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ff0:	4912      	ldr	r1, [pc, #72]	; (800403c <LPTIM_Disable+0x1e4>)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003ffa:	e000      	b.n	8003ffe <LPTIM_Disable+0x1a6>
    }
  }
 8003ffc:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 0201 	bic.w	r2, r2, #1
 800400c:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8004026:	b662      	cpsie	i
}
 8004028:	bf00      	nop

  __enable_irq();
}
 800402a:	bf00      	nop
 800402c:	3720      	adds	r7, #32
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40007c00 	.word	0x40007c00
 8004038:	40009400 	.word	0x40009400
 800403c:	40021000 	.word	0x40021000

08004040 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004044:	4b04      	ldr	r3, [pc, #16]	; (8004058 <HAL_PWREx_GetVoltageRange+0x18>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800404c:	4618      	mov	r0, r3
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr
 8004056:	bf00      	nop
 8004058:	40007000 	.word	0x40007000

0800405c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800406a:	d130      	bne.n	80040ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800406c:	4b23      	ldr	r3, [pc, #140]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004078:	d038      	beq.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800407a:	4b20      	ldr	r3, [pc, #128]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004084:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004088:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2232      	movs	r2, #50	; 0x32
 8004090:	fb02 f303 	mul.w	r3, r2, r3
 8004094:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004096:	fba2 2303 	umull	r2, r3, r2, r3
 800409a:	0c9b      	lsrs	r3, r3, #18
 800409c:	3301      	adds	r3, #1
 800409e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a0:	e002      	b.n	80040a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a8:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b4:	d102      	bne.n	80040bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1f2      	bne.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040bc:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c8:	d110      	bne.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00f      	b.n	80040ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040da:	d007      	beq.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040dc:	4b07      	ldr	r3, [pc, #28]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040e4:	4a05      	ldr	r2, [pc, #20]	; (80040fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80040e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40007000 	.word	0x40007000
 8004100:	20000004 	.word	0x20000004
 8004104:	431bde83 	.word	0x431bde83

08004108 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d102      	bne.n	800411c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	f000 bc11 	b.w	800493e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800411c:	4ba0      	ldr	r3, [pc, #640]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f003 030c 	and.w	r3, r3, #12
 8004124:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004126:	4b9e      	ldr	r3, [pc, #632]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80e4 	beq.w	8004306 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_RCC_OscConfig+0x4c>
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b0c      	cmp	r3, #12
 8004148:	f040 808b 	bne.w	8004262 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b01      	cmp	r3, #1
 8004150:	f040 8087 	bne.w	8004262 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004154:	4b92      	ldr	r3, [pc, #584]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_OscConfig+0x64>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e3e8      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a1a      	ldr	r2, [r3, #32]
 8004170:	4b8b      	ldr	r3, [pc, #556]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d004      	beq.n	8004186 <HAL_RCC_OscConfig+0x7e>
 800417c:	4b88      	ldr	r3, [pc, #544]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004184:	e005      	b.n	8004192 <HAL_RCC_OscConfig+0x8a>
 8004186:	4b86      	ldr	r3, [pc, #536]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004192:	4293      	cmp	r3, r2
 8004194:	d223      	bcs.n	80041de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4618      	mov	r0, r3
 800419c:	f000 fd7a 	bl	8004c94 <RCC_SetFlashLatencyFromMSIRange>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e3c9      	b.n	800493e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041aa:	4b7d      	ldr	r3, [pc, #500]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7c      	ldr	r2, [pc, #496]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041b0:	f043 0308 	orr.w	r3, r3, #8
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b7a      	ldr	r3, [pc, #488]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4977      	ldr	r1, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	4972      	ldr	r1, [pc, #456]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	604b      	str	r3, [r1, #4]
 80041dc:	e025      	b.n	800422a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a6f      	ldr	r2, [pc, #444]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041e4:	f043 0308 	orr.w	r3, r3, #8
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4b6d      	ldr	r3, [pc, #436]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	496a      	ldr	r1, [pc, #424]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041fc:	4b68      	ldr	r3, [pc, #416]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	4965      	ldr	r1, [pc, #404]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800420c:	4313      	orrs	r3, r2
 800420e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd3a 	bl	8004c94 <RCC_SetFlashLatencyFromMSIRange>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e389      	b.n	800493e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800422a:	f000 fc6f 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b5b      	ldr	r3, [pc, #364]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	495a      	ldr	r1, [pc, #360]	; (80043a4 <HAL_RCC_OscConfig+0x29c>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	f003 031f 	and.w	r3, r3, #31
 8004242:	fa22 f303 	lsr.w	r3, r2, r3
 8004246:	4a58      	ldr	r2, [pc, #352]	; (80043a8 <HAL_RCC_OscConfig+0x2a0>)
 8004248:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800424a:	4b58      	ldr	r3, [pc, #352]	; (80043ac <HAL_RCC_OscConfig+0x2a4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f8a0 	bl	8003394 <HAL_InitTick>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004258:	7bfb      	ldrb	r3, [r7, #15]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d052      	beq.n	8004304 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	e36d      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d032      	beq.n	80042d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800426a:	4b4d      	ldr	r3, [pc, #308]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a4c      	ldr	r2, [pc, #304]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004270:	f043 0301 	orr.w	r3, r3, #1
 8004274:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004276:	f7ff f8dd 	bl	8003434 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800427e:	f7ff f8d9 	bl	8003434 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e356      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004290:	4b43      	ldr	r3, [pc, #268]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800429c:	4b40      	ldr	r3, [pc, #256]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a3f      	ldr	r2, [pc, #252]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042a2:	f043 0308 	orr.w	r3, r3, #8
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b3d      	ldr	r3, [pc, #244]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	493a      	ldr	r1, [pc, #232]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	4935      	ldr	r1, [pc, #212]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
 80042ce:	e01a      	b.n	8004306 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80042d0:	4b33      	ldr	r3, [pc, #204]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a32      	ldr	r2, [pc, #200]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042d6:	f023 0301 	bic.w	r3, r3, #1
 80042da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80042dc:	f7ff f8aa 	bl	8003434 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042e4:	f7ff f8a6 	bl	8003434 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e323      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80042f6:	4b2a      	ldr	r3, [pc, #168]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x1dc>
 8004302:	e000      	b.n	8004306 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004304:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d073      	beq.n	80043fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d005      	beq.n	8004324 <HAL_RCC_OscConfig+0x21c>
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b0c      	cmp	r3, #12
 800431c:	d10e      	bne.n	800433c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	2b03      	cmp	r3, #3
 8004322:	d10b      	bne.n	800433c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004324:	4b1e      	ldr	r3, [pc, #120]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d063      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2f0>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d15f      	bne.n	80043f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e300      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004344:	d106      	bne.n	8004354 <HAL_RCC_OscConfig+0x24c>
 8004346:	4b16      	ldr	r3, [pc, #88]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a15      	ldr	r2, [pc, #84]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800434c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	e01d      	b.n	8004390 <HAL_RCC_OscConfig+0x288>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800435c:	d10c      	bne.n	8004378 <HAL_RCC_OscConfig+0x270>
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a0f      	ldr	r2, [pc, #60]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004364:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	4b0d      	ldr	r3, [pc, #52]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a0c      	ldr	r2, [pc, #48]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004374:	6013      	str	r3, [r2, #0]
 8004376:	e00b      	b.n	8004390 <HAL_RCC_OscConfig+0x288>
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a08      	ldr	r2, [pc, #32]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800437e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a05      	ldr	r2, [pc, #20]	; (80043a0 <HAL_RCC_OscConfig+0x298>)
 800438a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800438e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01b      	beq.n	80043d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004398:	f7ff f84c 	bl	8003434 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800439e:	e010      	b.n	80043c2 <HAL_RCC_OscConfig+0x2ba>
 80043a0:	40021000 	.word	0x40021000
 80043a4:	080076e0 	.word	0x080076e0
 80043a8:	20000004 	.word	0x20000004
 80043ac:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043b0:	f7ff f840 	bl	8003434 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b64      	cmp	r3, #100	; 0x64
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e2bd      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c2:	4baf      	ldr	r3, [pc, #700]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x2a8>
 80043ce:	e014      	b.n	80043fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d0:	f7ff f830 	bl	8003434 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043d6:	e008      	b.n	80043ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043d8:	f7ff f82c 	bl	8003434 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b64      	cmp	r3, #100	; 0x64
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e2a9      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80043ea:	4ba5      	ldr	r3, [pc, #660]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1f0      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2d0>
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d060      	beq.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d005      	beq.n	8004418 <HAL_RCC_OscConfig+0x310>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d119      	bne.n	8004446 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b02      	cmp	r3, #2
 8004416:	d116      	bne.n	8004446 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004418:	4b99      	ldr	r3, [pc, #612]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_OscConfig+0x328>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e286      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004430:	4b93      	ldr	r3, [pc, #588]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	4990      	ldr	r1, [pc, #576]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004444:	e040      	b.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d023      	beq.n	8004496 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800444e:	4b8c      	ldr	r3, [pc, #560]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a8b      	ldr	r2, [pc, #556]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445a:	f7fe ffeb 	bl	8003434 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004462:	f7fe ffe7 	bl	8003434 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e264      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004474:	4b82      	ldr	r3, [pc, #520]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447c:	2b00      	cmp	r3, #0
 800447e:	d0f0      	beq.n	8004462 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004480:	4b7f      	ldr	r3, [pc, #508]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	061b      	lsls	r3, r3, #24
 800448e:	497c      	ldr	r1, [pc, #496]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004490:	4313      	orrs	r3, r2
 8004492:	604b      	str	r3, [r1, #4]
 8004494:	e018      	b.n	80044c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004496:	4b7a      	ldr	r3, [pc, #488]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a79      	ldr	r2, [pc, #484]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800449c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a2:	f7fe ffc7 	bl	8003434 <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044aa:	f7fe ffc3 	bl	8003434 <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e240      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80044bc:	4b70      	ldr	r3, [pc, #448]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f0      	bne.n	80044aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d03c      	beq.n	800454e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01c      	beq.n	8004516 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044dc:	4b68      	ldr	r3, [pc, #416]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044e2:	4a67      	ldr	r2, [pc, #412]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80044e4:	f043 0301 	orr.w	r3, r3, #1
 80044e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fe ffa2 	bl	8003434 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044f4:	f7fe ff9e 	bl	8003434 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e21b      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004506:	4b5e      	ldr	r3, [pc, #376]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0ef      	beq.n	80044f4 <HAL_RCC_OscConfig+0x3ec>
 8004514:	e01b      	b.n	800454e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004516:	4b5a      	ldr	r3, [pc, #360]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800451c:	4a58      	ldr	r2, [pc, #352]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004526:	f7fe ff85 	bl	8003434 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800452e:	f7fe ff81 	bl	8003434 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e1fe      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004540:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1ef      	bne.n	800452e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0304 	and.w	r3, r3, #4
 8004556:	2b00      	cmp	r3, #0
 8004558:	f000 80a6 	beq.w	80046a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800455c:	2300      	movs	r3, #0
 800455e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004560:	4b47      	ldr	r3, [pc, #284]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d10d      	bne.n	8004588 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800456c:	4b44      	ldr	r3, [pc, #272]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800456e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004570:	4a43      	ldr	r2, [pc, #268]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6593      	str	r3, [r2, #88]	; 0x58
 8004578:	4b41      	ldr	r3, [pc, #260]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800457a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	60bb      	str	r3, [r7, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004584:	2301      	movs	r3, #1
 8004586:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004588:	4b3e      	ldr	r3, [pc, #248]	; (8004684 <HAL_RCC_OscConfig+0x57c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004590:	2b00      	cmp	r3, #0
 8004592:	d118      	bne.n	80045c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004594:	4b3b      	ldr	r3, [pc, #236]	; (8004684 <HAL_RCC_OscConfig+0x57c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a3a      	ldr	r2, [pc, #232]	; (8004684 <HAL_RCC_OscConfig+0x57c>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045a0:	f7fe ff48 	bl	8003434 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045a8:	f7fe ff44 	bl	8003434 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e1c1      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045ba:	4b32      	ldr	r3, [pc, #200]	; (8004684 <HAL_RCC_OscConfig+0x57c>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x4d8>
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80045d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d4:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80045d6:	f043 0301 	orr.w	r3, r3, #1
 80045da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045de:	e024      	b.n	800462a <HAL_RCC_OscConfig+0x522>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	2b05      	cmp	r3, #5
 80045e6:	d110      	bne.n	800460a <HAL_RCC_OscConfig+0x502>
 80045e8:	4b25      	ldr	r3, [pc, #148]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	4a24      	ldr	r2, [pc, #144]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80045f0:	f043 0304 	orr.w	r3, r3, #4
 80045f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045f8:	4b21      	ldr	r3, [pc, #132]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	4a20      	ldr	r2, [pc, #128]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004608:	e00f      	b.n	800462a <HAL_RCC_OscConfig+0x522>
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800460c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004610:	4a1b      	ldr	r2, [pc, #108]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800461a:	4b19      	ldr	r3, [pc, #100]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004622:	f023 0304 	bic.w	r3, r3, #4
 8004626:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d016      	beq.n	8004660 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004632:	f7fe feff 	bl	8003434 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004638:	e00a      	b.n	8004650 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800463a:	f7fe fefb 	bl	8003434 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f241 3288 	movw	r2, #5000	; 0x1388
 8004648:	4293      	cmp	r3, r2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e176      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <HAL_RCC_OscConfig+0x578>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0ed      	beq.n	800463a <HAL_RCC_OscConfig+0x532>
 800465e:	e01a      	b.n	8004696 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fe fee8 	bl	8003434 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004666:	e00f      	b.n	8004688 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fe fee4 	bl	8003434 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d906      	bls.n	8004688 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e15f      	b.n	800493e <HAL_RCC_OscConfig+0x836>
 800467e:	bf00      	nop
 8004680:	40021000 	.word	0x40021000
 8004684:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004688:	4baa      	ldr	r3, [pc, #680]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e8      	bne.n	8004668 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004696:	7ffb      	ldrb	r3, [r7, #31]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d105      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800469c:	4ba5      	ldr	r3, [pc, #660]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	4aa4      	ldr	r2, [pc, #656]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0320 	and.w	r3, r3, #32
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d03c      	beq.n	800472e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01c      	beq.n	80046f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80046bc:	4b9d      	ldr	r3, [pc, #628]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046c2:	4a9c      	ldr	r2, [pc, #624]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046c4:	f043 0301 	orr.w	r3, r3, #1
 80046c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046cc:	f7fe feb2 	bl	8003434 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046d4:	f7fe feae 	bl	8003434 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e12b      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80046e6:	4b93      	ldr	r3, [pc, #588]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ef      	beq.n	80046d4 <HAL_RCC_OscConfig+0x5cc>
 80046f4:	e01b      	b.n	800472e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80046f6:	4b8f      	ldr	r3, [pc, #572]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046fc:	4a8d      	ldr	r2, [pc, #564]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80046fe:	f023 0301 	bic.w	r3, r3, #1
 8004702:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fe fe95 	bl	8003434 <HAL_GetTick>
 800470a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800470c:	e008      	b.n	8004720 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470e:	f7fe fe91 	bl	8003434 <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d901      	bls.n	8004720 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e10e      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004720:	4b84      	ldr	r3, [pc, #528]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004722:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1ef      	bne.n	800470e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004732:	2b00      	cmp	r3, #0
 8004734:	f000 8102 	beq.w	800493c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473c:	2b02      	cmp	r3, #2
 800473e:	f040 80c5 	bne.w	80048cc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004742:	4b7c      	ldr	r3, [pc, #496]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	f003 0203 	and.w	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	429a      	cmp	r2, r3
 8004754:	d12c      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004760:	3b01      	subs	r3, #1
 8004762:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d123      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004772:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004774:	429a      	cmp	r2, r3
 8004776:	d11b      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004784:	429a      	cmp	r2, r3
 8004786:	d113      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3b01      	subs	r3, #1
 8004796:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004798:	429a      	cmp	r2, r3
 800479a:	d109      	bne.n	80047b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	085b      	lsrs	r3, r3, #1
 80047a8:	3b01      	subs	r3, #1
 80047aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d067      	beq.n	8004880 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d062      	beq.n	800487c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80047b6:	4b5f      	ldr	r3, [pc, #380]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0bb      	b.n	800493e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80047c6:	4b5b      	ldr	r3, [pc, #364]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a5a      	ldr	r2, [pc, #360]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80047cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80047d2:	f7fe fe2f 	bl	8003434 <HAL_GetTick>
 80047d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d8:	e008      	b.n	80047ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047da:	f7fe fe2b 	bl	8003434 <HAL_GetTick>
 80047de:	4602      	mov	r2, r0
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	2b02      	cmp	r3, #2
 80047e6:	d901      	bls.n	80047ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e0a8      	b.n	800493e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047ec:	4b51      	ldr	r3, [pc, #324]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f0      	bne.n	80047da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047f8:	4b4e      	ldr	r3, [pc, #312]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	4b4e      	ldr	r3, [pc, #312]	; (8004938 <HAL_RCC_OscConfig+0x830>)
 80047fe:	4013      	ands	r3, r2
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004808:	3a01      	subs	r2, #1
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	4311      	orrs	r1, r2
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004812:	0212      	lsls	r2, r2, #8
 8004814:	4311      	orrs	r1, r2
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800481a:	0852      	lsrs	r2, r2, #1
 800481c:	3a01      	subs	r2, #1
 800481e:	0552      	lsls	r2, r2, #21
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004826:	0852      	lsrs	r2, r2, #1
 8004828:	3a01      	subs	r2, #1
 800482a:	0652      	lsls	r2, r2, #25
 800482c:	4311      	orrs	r1, r2
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004832:	06d2      	lsls	r2, r2, #27
 8004834:	430a      	orrs	r2, r1
 8004836:	493f      	ldr	r1, [pc, #252]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004838:	4313      	orrs	r3, r2
 800483a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800483c:	4b3d      	ldr	r3, [pc, #244]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a3c      	ldr	r2, [pc, #240]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004842:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004846:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004848:	4b3a      	ldr	r3, [pc, #232]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	4a39      	ldr	r2, [pc, #228]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004852:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004854:	f7fe fdee 	bl	8003434 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fe fdea 	bl	8003434 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e067      	b.n	800493e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800486e:	4b31      	ldr	r3, [pc, #196]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800487a:	e05f      	b.n	800493c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e05e      	b.n	800493e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d157      	bne.n	800493c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800488c:	4b29      	ldr	r3, [pc, #164]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a28      	ldr	r2, [pc, #160]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004898:	4b26      	ldr	r3, [pc, #152]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 800489e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048a4:	f7fe fdc6 	bl	8003434 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fe fdc2 	bl	8003434 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e03f      	b.n	800493e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x7a4>
 80048ca:	e037      	b.n	800493c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b0c      	cmp	r3, #12
 80048d0:	d02d      	beq.n	800492e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d2:	4b18      	ldr	r3, [pc, #96]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048dc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80048de:	4b15      	ldr	r3, [pc, #84]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	4a11      	ldr	r2, [pc, #68]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048f0:	f023 0303 	bic.w	r3, r3, #3
 80048f4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80048f6:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	4a0e      	ldr	r2, [pc, #56]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 80048fc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004904:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fe fd95 	bl	8003434 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fe fd91 	bl	8003434 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e00e      	b.n	800493e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <HAL_RCC_OscConfig+0x82c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x806>
 800492c:	e006      	b.n	800493c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e005      	b.n	800493e <HAL_RCC_OscConfig+0x836>
 8004932:	bf00      	nop
 8004934:	40021000 	.word	0x40021000
 8004938:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop

08004948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0c8      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800495c:	4b66      	ldr	r3, [pc, #408]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d910      	bls.n	800498c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496a:	4b63      	ldr	r3, [pc, #396]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f023 0207 	bic.w	r2, r3, #7
 8004972:	4961      	ldr	r1, [pc, #388]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	4313      	orrs	r3, r2
 8004978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497a:	4b5f      	ldr	r3, [pc, #380]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0307 	and.w	r3, r3, #7
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	429a      	cmp	r2, r3
 8004986:	d001      	beq.n	800498c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e0b0      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d04c      	beq.n	8004a32 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	2b03      	cmp	r3, #3
 800499e:	d107      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a0:	4b56      	ldr	r3, [pc, #344]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d121      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e09e      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b8:	4b50      	ldr	r3, [pc, #320]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d115      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e092      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d107      	bne.n	80049e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049d0:	4b4a      	ldr	r3, [pc, #296]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e086      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049e0:	4b46      	ldr	r3, [pc, #280]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e07e      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80049f0:	4b42      	ldr	r3, [pc, #264]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f023 0203 	bic.w	r2, r3, #3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	493f      	ldr	r1, [pc, #252]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a02:	f7fe fd17 	bl	8003434 <HAL_GetTick>
 8004a06:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a08:	e00a      	b.n	8004a20 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a0a:	f7fe fd13 	bl	8003434 <HAL_GetTick>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e066      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a20:	4b36      	ldr	r3, [pc, #216]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 020c 	and.w	r2, r3, #12
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d1eb      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d008      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a3e:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	492c      	ldr	r1, [pc, #176]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d210      	bcs.n	8004a80 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b26      	ldr	r3, [pc, #152]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4924      	ldr	r1, [pc, #144]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b22      	ldr	r3, [pc, #136]	; (8004af8 <HAL_RCC_ClockConfig+0x1b0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e036      	b.n	8004aee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d008      	beq.n	8004a9e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a8c:	4b1b      	ldr	r3, [pc, #108]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	4918      	ldr	r1, [pc, #96]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d009      	beq.n	8004abe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aaa:	4b14      	ldr	r3, [pc, #80]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4910      	ldr	r1, [pc, #64]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004abe:	f000 f825 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	4b0d      	ldr	r3, [pc, #52]	; (8004afc <HAL_RCC_ClockConfig+0x1b4>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	091b      	lsrs	r3, r3, #4
 8004aca:	f003 030f 	and.w	r3, r3, #15
 8004ace:	490c      	ldr	r1, [pc, #48]	; (8004b00 <HAL_RCC_ClockConfig+0x1b8>)
 8004ad0:	5ccb      	ldrb	r3, [r1, r3]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fc56 	bl	8003394 <HAL_InitTick>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	72fb      	strb	r3, [r7, #11]

  return status;
 8004aec:	7afb      	ldrb	r3, [r7, #11]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	40022000 	.word	0x40022000
 8004afc:	40021000 	.word	0x40021000
 8004b00:	080076e0 	.word	0x080076e0
 8004b04:	20000004 	.word	0x20000004
 8004b08:	20000008 	.word	0x20000008

08004b0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	; 0x24
 8004b10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1a:	4b3e      	ldr	r3, [pc, #248]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
 8004b22:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0303 	and.w	r3, r3, #3
 8004b2c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_GetSysClockFreq+0x34>
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b0c      	cmp	r3, #12
 8004b38:	d121      	bne.n	8004b7e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d11e      	bne.n	8004b7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b40:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d107      	bne.n	8004b5c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b4c:	4b31      	ldr	r3, [pc, #196]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b52:	0a1b      	lsrs	r3, r3, #8
 8004b54:	f003 030f 	and.w	r3, r3, #15
 8004b58:	61fb      	str	r3, [r7, #28]
 8004b5a:	e005      	b.n	8004b68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004b5c:	4b2d      	ldr	r3, [pc, #180]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004b68:	4a2b      	ldr	r2, [pc, #172]	; (8004c18 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b70:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004b7c:	e00a      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b04      	cmp	r3, #4
 8004b82:	d102      	bne.n	8004b8a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004b84:	4b25      	ldr	r3, [pc, #148]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004b86:	61bb      	str	r3, [r7, #24]
 8004b88:	e004      	b.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d101      	bne.n	8004b94 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004b90:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004b92:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d134      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004b9a:	4b1e      	ldr	r3, [pc, #120]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d003      	beq.n	8004bb2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d003      	beq.n	8004bb8 <HAL_RCC_GetSysClockFreq+0xac>
 8004bb0:	e005      	b.n	8004bbe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bb2:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <HAL_RCC_GetSysClockFreq+0x110>)
 8004bb4:	617b      	str	r3, [r7, #20]
      break;
 8004bb6:	e005      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004bb8:	4b19      	ldr	r3, [pc, #100]	; (8004c20 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bba:	617b      	str	r3, [r7, #20]
      break;
 8004bbc:	e002      	b.n	8004bc4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	617b      	str	r3, [r7, #20]
      break;
 8004bc2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bc4:	4b13      	ldr	r3, [pc, #76]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	091b      	lsrs	r3, r3, #4
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	3301      	adds	r3, #1
 8004bd0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004bd2:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	0a1b      	lsrs	r3, r3, #8
 8004bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	fb02 f203 	mul.w	r2, r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004be8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004bea:	4b0a      	ldr	r3, [pc, #40]	; (8004c14 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	0e5b      	lsrs	r3, r3, #25
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c02:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c04:	69bb      	ldr	r3, [r7, #24]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3724      	adds	r7, #36	; 0x24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40021000 	.word	0x40021000
 8004c18:	080076f8 	.word	0x080076f8
 8004c1c:	00f42400 	.word	0x00f42400
 8004c20:	007a1200 	.word	0x007a1200

08004c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c24:	b480      	push	{r7}
 8004c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	20000004 	.word	0x20000004

08004c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c40:	f7ff fff0 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c44:	4602      	mov	r2, r0
 8004c46:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	0a1b      	lsrs	r3, r3, #8
 8004c4c:	f003 0307 	and.w	r3, r3, #7
 8004c50:	4904      	ldr	r1, [pc, #16]	; (8004c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c52:	5ccb      	ldrb	r3, [r1, r3]
 8004c54:	f003 031f 	and.w	r3, r3, #31
 8004c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	080076f0 	.word	0x080076f0

08004c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004c6c:	f7ff ffda 	bl	8004c24 <HAL_RCC_GetHCLKFreq>
 8004c70:	4602      	mov	r2, r0
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	0adb      	lsrs	r3, r3, #11
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	4904      	ldr	r1, [pc, #16]	; (8004c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c7e:	5ccb      	ldrb	r3, [r1, r3]
 8004c80:	f003 031f 	and.w	r3, r3, #31
 8004c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	080076f0 	.word	0x080076f0

08004c94 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ca0:	4b2a      	ldr	r3, [pc, #168]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d003      	beq.n	8004cb4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cac:	f7ff f9c8 	bl	8004040 <HAL_PWREx_GetVoltageRange>
 8004cb0:	6178      	str	r0, [r7, #20]
 8004cb2:	e014      	b.n	8004cde <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb8:	4a24      	ldr	r2, [pc, #144]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cbe:	6593      	str	r3, [r2, #88]	; 0x58
 8004cc0:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ccc:	f7ff f9b8 	bl	8004040 <HAL_PWREx_GetVoltageRange>
 8004cd0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004cd2:	4b1e      	ldr	r3, [pc, #120]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd6:	4a1d      	ldr	r2, [pc, #116]	; (8004d4c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004cd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cdc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ce4:	d10b      	bne.n	8004cfe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b80      	cmp	r3, #128	; 0x80
 8004cea:	d919      	bls.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2ba0      	cmp	r3, #160	; 0xa0
 8004cf0:	d902      	bls.n	8004cf8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	e013      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	613b      	str	r3, [r7, #16]
 8004cfc:	e010      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d902      	bls.n	8004d0a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004d04:	2303      	movs	r3, #3
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	e00a      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b80      	cmp	r3, #128	; 0x80
 8004d0e:	d102      	bne.n	8004d16 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d10:	2302      	movs	r3, #2
 8004d12:	613b      	str	r3, [r7, #16]
 8004d14:	e004      	b.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b70      	cmp	r3, #112	; 0x70
 8004d1a:	d101      	bne.n	8004d20 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d20:	4b0b      	ldr	r3, [pc, #44]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f023 0207 	bic.w	r2, r3, #7
 8004d28:	4909      	ldr	r1, [pc, #36]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d30:	4b07      	ldr	r3, [pc, #28]	; (8004d50 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d001      	beq.n	8004d42 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40022000 	.word	0x40022000

08004d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b086      	sub	sp, #24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004d60:	2300      	movs	r3, #0
 8004d62:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d031      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d74:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d78:	d01a      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004d7a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d7e:	d814      	bhi.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004d84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d88:	d10f      	bne.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	4a5c      	ldr	r2, [pc, #368]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004d96:	e00c      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	3304      	adds	r3, #4
 8004d9c:	2100      	movs	r1, #0
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fa44 	bl	800522c <RCCEx_PLLSAI1_Config>
 8004da4:	4603      	mov	r3, r0
 8004da6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004da8:	e003      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	74fb      	strb	r3, [r7, #19]
      break;
 8004dae:	e000      	b.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10b      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004db8:	4b51      	ldr	r3, [pc, #324]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dc6:	494e      	ldr	r1, [pc, #312]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7cfb      	ldrb	r3, [r7, #19]
 8004dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	f000 809e 	beq.w	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004de2:	2300      	movs	r3, #0
 8004de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004de6:	4b46      	ldr	r3, [pc, #280]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d101      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004df2:	2301      	movs	r3, #1
 8004df4:	e000      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004df6:	2300      	movs	r3, #0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfc:	4b40      	ldr	r3, [pc, #256]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e00:	4a3f      	ldr	r2, [pc, #252]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e06:	6593      	str	r3, [r2, #88]	; 0x58
 8004e08:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e10:	60bb      	str	r3, [r7, #8]
 8004e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e14:	2301      	movs	r3, #1
 8004e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e18:	4b3a      	ldr	r3, [pc, #232]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a39      	ldr	r2, [pc, #228]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004e24:	f7fe fb06 	bl	8003434 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e2a:	e009      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e2c:	f7fe fb02 	bl	8003434 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d902      	bls.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8004e3e:	e005      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004e40:	4b30      	ldr	r3, [pc, #192]	; (8004f04 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ef      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004e4c:	7cfb      	ldrb	r3, [r7, #19]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d15a      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004e52:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d01e      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d019      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004e6e:	4b24      	ldr	r3, [pc, #144]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e78:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004e7a:	4b21      	ldr	r3, [pc, #132]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e80:	4a1f      	ldr	r2, [pc, #124]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e90:	4a1b      	ldr	r2, [pc, #108]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004e9a:	4a19      	ldr	r2, [pc, #100]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fe fac2 	bl	8003434 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb2:	e00b      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fe fabe 	bl	8003434 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d902      	bls.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	74fb      	strb	r3, [r7, #19]
            break;
 8004eca:	e006      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0ec      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eee:	4904      	ldr	r1, [pc, #16]	; (8004f00 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ef6:	e009      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ef8:	7cfb      	ldrb	r3, [r7, #19]
 8004efa:	74bb      	strb	r3, [r7, #18]
 8004efc:	e006      	b.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004efe:	bf00      	nop
 8004f00:	40021000 	.word	0x40021000
 8004f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f08:	7cfb      	ldrb	r3, [r7, #19]
 8004f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f0c:	7c7b      	ldrb	r3, [r7, #17]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d105      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f12:	4b9e      	ldr	r3, [pc, #632]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f16:	4a9d      	ldr	r2, [pc, #628]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0301 	and.w	r3, r3, #1
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f2a:	4b98      	ldr	r3, [pc, #608]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f023 0203 	bic.w	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	4994      	ldr	r1, [pc, #592]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f4c:	4b8f      	ldr	r3, [pc, #572]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f023 020c 	bic.w	r2, r3, #12
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5a:	498c      	ldr	r1, [pc, #560]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f6e:	4b87      	ldr	r3, [pc, #540]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7c:	4983      	ldr	r1, [pc, #524]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0308 	and.w	r3, r3, #8
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f90:	4b7e      	ldr	r3, [pc, #504]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9e:	497b      	ldr	r1, [pc, #492]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0320 	and.w	r3, r3, #32
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004fb2:	4b76      	ldr	r3, [pc, #472]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc0:	4972      	ldr	r1, [pc, #456]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fd4:	4b6d      	ldr	r3, [pc, #436]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fda:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	496a      	ldr	r1, [pc, #424]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ff6:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005004:	4961      	ldr	r1, [pc, #388]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005006:	4313      	orrs	r3, r2
 8005008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d00a      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005018:	4b5c      	ldr	r3, [pc, #368]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	4959      	ldr	r1, [pc, #356]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00a      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800503a:	4b54      	ldr	r3, [pc, #336]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005048:	4950      	ldr	r1, [pc, #320]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800505e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005062:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800506a:	4948      	ldr	r1, [pc, #288]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800506c:	4313      	orrs	r3, r2
 800506e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d00a      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800507e:	4b43      	ldr	r3, [pc, #268]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005084:	f023 0203 	bic.w	r2, r3, #3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	493f      	ldr	r1, [pc, #252]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800508e:	4313      	orrs	r3, r2
 8005090:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d028      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80050a0:	4b3a      	ldr	r3, [pc, #232]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ae:	4937      	ldr	r1, [pc, #220]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050be:	d106      	bne.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050c0:	4b32      	ldr	r3, [pc, #200]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4a31      	ldr	r2, [pc, #196]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80050c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050ca:	60d3      	str	r3, [r2, #12]
 80050cc:	e011      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 f8a4 	bl	800522c <RCCEx_PLLSAI1_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d028      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050fe:	4b23      	ldr	r3, [pc, #140]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005104:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	491f      	ldr	r1, [pc, #124]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800510e:	4313      	orrs	r3, r2
 8005110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005118:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800511c:	d106      	bne.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800511e:	4b1b      	ldr	r3, [pc, #108]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4a1a      	ldr	r2, [pc, #104]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005128:	60d3      	str	r3, [r2, #12]
 800512a:	e011      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005130:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005134:	d10c      	bne.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	3304      	adds	r3, #4
 800513a:	2101      	movs	r1, #1
 800513c:	4618      	mov	r0, r3
 800513e:	f000 f875 	bl	800522c <RCCEx_PLLSAI1_Config>
 8005142:	4603      	mov	r3, r0
 8005144:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005146:	7cfb      	ldrb	r3, [r7, #19]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d001      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800514c:	7cfb      	ldrb	r3, [r7, #19]
 800514e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d02b      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800515e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005162:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516a:	4908      	ldr	r1, [pc, #32]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800516c:	4313      	orrs	r3, r2
 800516e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517a:	d109      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	4a02      	ldr	r2, [pc, #8]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005186:	60d3      	str	r3, [r2, #12]
 8005188:	e014      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005198:	d10c      	bne.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	3304      	adds	r3, #4
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f000 f843 	bl	800522c <RCCEx_PLLSAI1_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051aa:	7cfb      	ldrb	r3, [r7, #19]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01c      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051c0:	4b19      	ldr	r3, [pc, #100]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80051c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ce:	4916      	ldr	r1, [pc, #88]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	3304      	adds	r3, #4
 80051e4:	2102      	movs	r1, #2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f000 f820 	bl	800522c <RCCEx_PLLSAI1_Config>
 80051ec:	4603      	mov	r3, r0
 80051ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80051f6:	7cfb      	ldrb	r3, [r7, #19]
 80051f8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00a      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005206:	4b08      	ldr	r3, [pc, #32]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005214:	4904      	ldr	r1, [pc, #16]	; (8005228 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005216:	4313      	orrs	r3, r2
 8005218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800521c:	7cbb      	ldrb	r3, [r7, #18]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	40021000 	.word	0x40021000

0800522c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800523a:	4b74      	ldr	r3, [pc, #464]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d018      	beq.n	8005278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005246:	4b71      	ldr	r3, [pc, #452]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	f003 0203 	and.w	r2, r3, #3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	429a      	cmp	r2, r3
 8005254:	d10d      	bne.n	8005272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
       ||
 800525a:	2b00      	cmp	r3, #0
 800525c:	d009      	beq.n	8005272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800525e:	4b6b      	ldr	r3, [pc, #428]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 0307 	and.w	r3, r3, #7
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
       ||
 800526e:	429a      	cmp	r2, r3
 8005270:	d047      	beq.n	8005302 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e044      	b.n	8005302 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d018      	beq.n	80052b2 <RCCEx_PLLSAI1_Config+0x86>
 8005280:	2b03      	cmp	r3, #3
 8005282:	d825      	bhi.n	80052d0 <RCCEx_PLLSAI1_Config+0xa4>
 8005284:	2b01      	cmp	r3, #1
 8005286:	d002      	beq.n	800528e <RCCEx_PLLSAI1_Config+0x62>
 8005288:	2b02      	cmp	r3, #2
 800528a:	d009      	beq.n	80052a0 <RCCEx_PLLSAI1_Config+0x74>
 800528c:	e020      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800528e:	4b5f      	ldr	r3, [pc, #380]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d11d      	bne.n	80052d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800529e:	e01a      	b.n	80052d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80052a0:	4b5a      	ldr	r3, [pc, #360]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d116      	bne.n	80052da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052b0:	e013      	b.n	80052da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80052b2:	4b56      	ldr	r3, [pc, #344]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10f      	bne.n	80052de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80052be:	4b53      	ldr	r3, [pc, #332]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80052ce:	e006      	b.n	80052de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	73fb      	strb	r3, [r7, #15]
      break;
 80052d4:	e004      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052d6:	bf00      	nop
 80052d8:	e002      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052da:	bf00      	nop
 80052dc:	e000      	b.n	80052e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80052de:	bf00      	nop
    }

    if(status == HAL_OK)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10d      	bne.n	8005302 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052e6:	4b49      	ldr	r3, [pc, #292]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	430b      	orrs	r3, r1
 80052fc:	4943      	ldr	r1, [pc, #268]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d17c      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005308:	4b40      	ldr	r3, [pc, #256]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a3f      	ldr	r2, [pc, #252]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 800530e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005314:	f7fe f88e 	bl	8003434 <HAL_GetTick>
 8005318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800531a:	e009      	b.n	8005330 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800531c:	f7fe f88a 	bl	8003434 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d902      	bls.n	8005330 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	73fb      	strb	r3, [r7, #15]
        break;
 800532e:	e005      	b.n	800533c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005330:	4b36      	ldr	r3, [pc, #216]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1ef      	bne.n	800531c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d15f      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d110      	bne.n	800536a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005348:	4b30      	ldr	r3, [pc, #192]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6892      	ldr	r2, [r2, #8]
 8005358:	0211      	lsls	r1, r2, #8
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	68d2      	ldr	r2, [r2, #12]
 800535e:	06d2      	lsls	r2, r2, #27
 8005360:	430a      	orrs	r2, r1
 8005362:	492a      	ldr	r1, [pc, #168]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005364:	4313      	orrs	r3, r2
 8005366:	610b      	str	r3, [r1, #16]
 8005368:	e027      	b.n	80053ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d112      	bne.n	8005396 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005370:	4b26      	ldr	r3, [pc, #152]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6892      	ldr	r2, [r2, #8]
 8005380:	0211      	lsls	r1, r2, #8
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	6912      	ldr	r2, [r2, #16]
 8005386:	0852      	lsrs	r2, r2, #1
 8005388:	3a01      	subs	r2, #1
 800538a:	0552      	lsls	r2, r2, #21
 800538c:	430a      	orrs	r2, r1
 800538e:	491f      	ldr	r1, [pc, #124]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005390:	4313      	orrs	r3, r2
 8005392:	610b      	str	r3, [r1, #16]
 8005394:	e011      	b.n	80053ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005396:	4b1d      	ldr	r3, [pc, #116]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800539e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6892      	ldr	r2, [r2, #8]
 80053a6:	0211      	lsls	r1, r2, #8
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6952      	ldr	r2, [r2, #20]
 80053ac:	0852      	lsrs	r2, r2, #1
 80053ae:	3a01      	subs	r2, #1
 80053b0:	0652      	lsls	r2, r2, #25
 80053b2:	430a      	orrs	r2, r1
 80053b4:	4915      	ldr	r1, [pc, #84]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80053ba:	4b14      	ldr	r3, [pc, #80]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a13      	ldr	r2, [pc, #76]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053c6:	f7fe f835 	bl	8003434 <HAL_GetTick>
 80053ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053cc:	e009      	b.n	80053e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053ce:	f7fe f831 	bl	8003434 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d902      	bls.n	80053e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80053dc:	2303      	movs	r3, #3
 80053de:	73fb      	strb	r3, [r7, #15]
          break;
 80053e0:	e005      	b.n	80053ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80053e2:	4b0a      	ldr	r3, [pc, #40]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d0ef      	beq.n	80053ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	699b      	ldr	r3, [r3, #24]
 80053fc:	4903      	ldr	r1, [pc, #12]	; (800540c <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40021000 	.word	0x40021000

08005410 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d101      	bne.n	8005422 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e049      	b.n	80054b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d106      	bne.n	800543c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fd fdb6 	bl	8002fa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	3304      	adds	r3, #4
 800544c:	4619      	mov	r1, r3
 800544e:	4610      	mov	r0, r2
 8005450:	f000 ff78 	bl	8006344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2201      	movs	r2, #1
 8005468:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d001      	beq.n	80054d8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e038      	b.n	800554a <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1c      	ldr	r2, [pc, #112]	; (8005558 <HAL_TIM_Base_Start+0x98>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00e      	beq.n	8005508 <HAL_TIM_Base_Start+0x48>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f2:	d009      	beq.n	8005508 <HAL_TIM_Base_Start+0x48>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a18      	ldr	r2, [pc, #96]	; (800555c <HAL_TIM_Base_Start+0x9c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d004      	beq.n	8005508 <HAL_TIM_Base_Start+0x48>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a17      	ldr	r2, [pc, #92]	; (8005560 <HAL_TIM_Base_Start+0xa0>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d115      	bne.n	8005534 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <HAL_TIM_Base_Start+0xa4>)
 8005510:	4013      	ands	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b06      	cmp	r3, #6
 8005518:	d015      	beq.n	8005546 <HAL_TIM_Base_Start+0x86>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005520:	d011      	beq.n	8005546 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	e008      	b.n	8005546 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681a      	ldr	r2, [r3, #0]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0201 	orr.w	r2, r2, #1
 8005542:	601a      	str	r2, [r3, #0]
 8005544:	e000      	b.n	8005548 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005546:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40014000 	.word	0x40014000
 8005564:	00010007 	.word	0x00010007

08005568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	d001      	beq.n	8005580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e040      	b.n	8005602 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68da      	ldr	r2, [r3, #12]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0201 	orr.w	r2, r2, #1
 8005596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a1c      	ldr	r2, [pc, #112]	; (8005610 <HAL_TIM_Base_Start_IT+0xa8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d00e      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x58>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055aa:	d009      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x58>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a18      	ldr	r2, [pc, #96]	; (8005614 <HAL_TIM_Base_Start_IT+0xac>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIM_Base_Start_IT+0x58>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <HAL_TIM_Base_Start_IT+0xb0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d115      	bne.n	80055ec <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	4b15      	ldr	r3, [pc, #84]	; (800561c <HAL_TIM_Base_Start_IT+0xb4>)
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b06      	cmp	r3, #6
 80055d0:	d015      	beq.n	80055fe <HAL_TIM_Base_Start_IT+0x96>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d011      	beq.n	80055fe <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f042 0201 	orr.w	r2, r2, #1
 80055e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ea:	e008      	b.n	80055fe <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	e000      	b.n	8005600 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40000400 	.word	0x40000400
 8005618:	40014000 	.word	0x40014000
 800561c:	00010007 	.word	0x00010007

08005620 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68da      	ldr	r2, [r3, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6a1a      	ldr	r2, [r3, #32]
 800563e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005642:	4013      	ands	r3, r2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10f      	bne.n	8005668 <HAL_TIM_Base_Stop_IT+0x48>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1a      	ldr	r2, [r3, #32]
 800564e:	f240 4344 	movw	r3, #1092	; 0x444
 8005652:	4013      	ands	r3, r2
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <HAL_TIM_Base_Stop_IT+0x48>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d101      	bne.n	8005690 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	e049      	b.n	8005724 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005696:	b2db      	uxtb	r3, r3
 8005698:	2b00      	cmp	r3, #0
 800569a:	d106      	bne.n	80056aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f841 	bl	800572c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4619      	mov	r1, r3
 80056bc:	4610      	mov	r0, r2
 80056be:	f000 fe41 	bl	8006344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2201      	movs	r2, #1
 80056d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d109      	bne.n	8005764 <HAL_TIM_PWM_Start+0x24>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	bf14      	ite	ne
 800575c:	2301      	movne	r3, #1
 800575e:	2300      	moveq	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	e03c      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d109      	bne.n	800577e <HAL_TIM_PWM_Start+0x3e>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	e02f      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2b08      	cmp	r3, #8
 8005782:	d109      	bne.n	8005798 <HAL_TIM_PWM_Start+0x58>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b01      	cmp	r3, #1
 800578e:	bf14      	ite	ne
 8005790:	2301      	movne	r3, #1
 8005792:	2300      	moveq	r3, #0
 8005794:	b2db      	uxtb	r3, r3
 8005796:	e022      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d109      	bne.n	80057b2 <HAL_TIM_PWM_Start+0x72>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	bf14      	ite	ne
 80057aa:	2301      	movne	r3, #1
 80057ac:	2300      	moveq	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	e015      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b10      	cmp	r3, #16
 80057b6:	d109      	bne.n	80057cc <HAL_TIM_PWM_Start+0x8c>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	e008      	b.n	80057de <HAL_TIM_PWM_Start+0x9e>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d001      	beq.n	80057e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	e083      	b.n	80058ee <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d104      	bne.n	80057f6 <HAL_TIM_PWM_Start+0xb6>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057f4:	e023      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d104      	bne.n	8005806 <HAL_TIM_PWM_Start+0xc6>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005804:	e01b      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	2b08      	cmp	r3, #8
 800580a:	d104      	bne.n	8005816 <HAL_TIM_PWM_Start+0xd6>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005814:	e013      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	2b0c      	cmp	r3, #12
 800581a:	d104      	bne.n	8005826 <HAL_TIM_PWM_Start+0xe6>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005824:	e00b      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	2b10      	cmp	r3, #16
 800582a:	d104      	bne.n	8005836 <HAL_TIM_PWM_Start+0xf6>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005834:	e003      	b.n	800583e <HAL_TIM_PWM_Start+0xfe>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2202      	movs	r2, #2
 800583a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2201      	movs	r2, #1
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	4618      	mov	r0, r3
 8005848:	f001 f992 	bl	8006b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a29      	ldr	r2, [pc, #164]	; (80058f8 <HAL_TIM_PWM_Start+0x1b8>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d009      	beq.n	800586a <HAL_TIM_PWM_Start+0x12a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <HAL_TIM_PWM_Start+0x1bc>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d004      	beq.n	800586a <HAL_TIM_PWM_Start+0x12a>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a26      	ldr	r2, [pc, #152]	; (8005900 <HAL_TIM_PWM_Start+0x1c0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d101      	bne.n	800586e <HAL_TIM_PWM_Start+0x12e>
 800586a:	2301      	movs	r3, #1
 800586c:	e000      	b.n	8005870 <HAL_TIM_PWM_Start+0x130>
 800586e:	2300      	movs	r3, #0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005882:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a1b      	ldr	r2, [pc, #108]	; (80058f8 <HAL_TIM_PWM_Start+0x1b8>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d00e      	beq.n	80058ac <HAL_TIM_PWM_Start+0x16c>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005896:	d009      	beq.n	80058ac <HAL_TIM_PWM_Start+0x16c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_TIM_PWM_Start+0x1c4>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIM_PWM_Start+0x16c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a15      	ldr	r2, [pc, #84]	; (80058fc <HAL_TIM_PWM_Start+0x1bc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d115      	bne.n	80058d8 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_TIM_PWM_Start+0x1c8>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d015      	beq.n	80058ea <HAL_TIM_PWM_Start+0x1aa>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c4:	d011      	beq.n	80058ea <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f042 0201 	orr.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d6:	e008      	b.n	80058ea <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	601a      	str	r2, [r3, #0]
 80058e8:	e000      	b.n	80058ec <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40012c00 	.word	0x40012c00
 80058fc:	40014000 	.word	0x40014000
 8005900:	40014400 	.word	0x40014400
 8005904:	40000400 	.word	0x40000400
 8005908:	00010007 	.word	0x00010007

0800590c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2200      	movs	r2, #0
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	4618      	mov	r0, r3
 8005920:	f001 f926 	bl	8006b70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a39      	ldr	r2, [pc, #228]	; (8005a10 <HAL_TIM_PWM_Stop+0x104>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Stop+0x36>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a38      	ldr	r2, [pc, #224]	; (8005a14 <HAL_TIM_PWM_Stop+0x108>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Stop+0x36>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a36      	ldr	r2, [pc, #216]	; (8005a18 <HAL_TIM_PWM_Stop+0x10c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_TIM_PWM_Stop+0x3a>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <HAL_TIM_PWM_Stop+0x3c>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d017      	beq.n	800597c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6a1a      	ldr	r2, [r3, #32]
 8005952:	f241 1311 	movw	r3, #4369	; 0x1111
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10f      	bne.n	800597c <HAL_TIM_PWM_Stop+0x70>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	6a1a      	ldr	r2, [r3, #32]
 8005962:	f240 4344 	movw	r3, #1092	; 0x444
 8005966:	4013      	ands	r3, r2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <HAL_TIM_PWM_Stop+0x70>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800597a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6a1a      	ldr	r2, [r3, #32]
 8005982:	f241 1311 	movw	r3, #4369	; 0x1111
 8005986:	4013      	ands	r3, r2
 8005988:	2b00      	cmp	r3, #0
 800598a:	d10f      	bne.n	80059ac <HAL_TIM_PWM_Stop+0xa0>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a1a      	ldr	r2, [r3, #32]
 8005992:	f240 4344 	movw	r3, #1092	; 0x444
 8005996:	4013      	ands	r3, r2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d107      	bne.n	80059ac <HAL_TIM_PWM_Stop+0xa0>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d104      	bne.n	80059bc <HAL_TIM_PWM_Stop+0xb0>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059ba:	e023      	b.n	8005a04 <HAL_TIM_PWM_Stop+0xf8>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d104      	bne.n	80059cc <HAL_TIM_PWM_Stop+0xc0>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ca:	e01b      	b.n	8005a04 <HAL_TIM_PWM_Stop+0xf8>
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d104      	bne.n	80059dc <HAL_TIM_PWM_Stop+0xd0>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059da:	e013      	b.n	8005a04 <HAL_TIM_PWM_Stop+0xf8>
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	2b0c      	cmp	r3, #12
 80059e0:	d104      	bne.n	80059ec <HAL_TIM_PWM_Stop+0xe0>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059ea:	e00b      	b.n	8005a04 <HAL_TIM_PWM_Stop+0xf8>
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	2b10      	cmp	r3, #16
 80059f0:	d104      	bne.n	80059fc <HAL_TIM_PWM_Stop+0xf0>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059fa:	e003      	b.n	8005a04 <HAL_TIM_PWM_Stop+0xf8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	40012c00 	.word	0x40012c00
 8005a14:	40014000 	.word	0x40014000
 8005a18:	40014400 	.word	0x40014400

08005a1c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e097      	b.n	8005b60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f7fd fb2f 	bl	80030a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2202      	movs	r2, #2
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4619      	mov	r1, r3
 8005a70:	4610      	mov	r0, r2
 8005a72:	f000 fc67 	bl	8006344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	6a1b      	ldr	r3, [r3, #32]
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	021b      	lsls	r3, r3, #8
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005abc:	f023 030c 	bic.w	r3, r3, #12
 8005ac0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005acc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	68da      	ldr	r2, [r3, #12]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	011a      	lsls	r2, r3, #4
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	031b      	lsls	r3, r3, #12
 8005aec:	4313      	orrs	r3, r2
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005afa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005b02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	011b      	lsls	r3, r3, #4
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	693a      	ldr	r2, [r7, #16]
 8005b24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68fa      	ldr	r2, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3718      	adds	r7, #24
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d110      	bne.n	8005bba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d102      	bne.n	8005ba4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b9e:	7b7b      	ldrb	r3, [r7, #13]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d001      	beq.n	8005ba8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e069      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb8:	e031      	b.n	8005c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	2b04      	cmp	r3, #4
 8005bbe:	d110      	bne.n	8005be2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bc0:	7bbb      	ldrb	r3, [r7, #14]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d102      	bne.n	8005bcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bc6:	7b3b      	ldrb	r3, [r7, #12]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e055      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be0:	e01d      	b.n	8005c1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be2:	7bfb      	ldrb	r3, [r7, #15]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d108      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005bee:	7b7b      	ldrb	r3, [r7, #13]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d102      	bne.n	8005bfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005bf4:	7b3b      	ldrb	r3, [r7, #12]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d001      	beq.n	8005bfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e03e      	b.n	8005c7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2202      	movs	r2, #2
 8005c02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2202      	movs	r2, #2
 8005c0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2202      	movs	r2, #2
 8005c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2202      	movs	r2, #2
 8005c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d003      	beq.n	8005c2c <HAL_TIM_Encoder_Start+0xc4>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d008      	beq.n	8005c3c <HAL_TIM_Encoder_Start+0xd4>
 8005c2a:	e00f      	b.n	8005c4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2201      	movs	r2, #1
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f000 ff9b 	bl	8006b70 <TIM_CCxChannelCmd>
      break;
 8005c3a:	e016      	b.n	8005c6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2201      	movs	r2, #1
 8005c42:	2104      	movs	r1, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 ff93 	bl	8006b70 <TIM_CCxChannelCmd>
      break;
 8005c4a:	e00e      	b.n	8005c6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2201      	movs	r2, #1
 8005c52:	2100      	movs	r1, #0
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 ff8b 	bl	8006b70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2104      	movs	r1, #4
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 ff84 	bl	8006b70 <TIM_CCxChannelCmd>
      break;
 8005c68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f042 0201 	orr.w	r2, r2, #1
 8005c78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3710      	adds	r7, #16
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d122      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d11b      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f06f 0202 	mvn.w	r2, #2
 8005cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d003      	beq.n	8005cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fb1e 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005ccc:	e005      	b.n	8005cda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fb10 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 fb21 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b04      	cmp	r3, #4
 8005cec:	d122      	bne.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d11b      	bne.n	8005d34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f06f 0204 	mvn.w	r2, #4
 8005d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2202      	movs	r2, #2
 8005d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d003      	beq.n	8005d22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 faf4 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005d20:	e005      	b.n	8005d2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fae6 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 faf7 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	2b08      	cmp	r3, #8
 8005d40:	d122      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	f003 0308 	and.w	r3, r3, #8
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d11b      	bne.n	8005d88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f06f 0208 	mvn.w	r2, #8
 8005d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2204      	movs	r2, #4
 8005d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 faca 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005d74:	e005      	b.n	8005d82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fabc 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 facd 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	f003 0310 	and.w	r3, r3, #16
 8005d92:	2b10      	cmp	r3, #16
 8005d94:	d122      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b10      	cmp	r3, #16
 8005da2:	d11b      	bne.n	8005ddc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f06f 0210 	mvn.w	r2, #16
 8005dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2208      	movs	r2, #8
 8005db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	69db      	ldr	r3, [r3, #28]
 8005dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 faa0 	bl	8006308 <HAL_TIM_IC_CaptureCallback>
 8005dc8:	e005      	b.n	8005dd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fa92 	bl	80062f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 faa3 	bl	800631c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10e      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d107      	bne.n	8005e08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f06f 0201 	mvn.w	r2, #1
 8005e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fc f85a 	bl	8001ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e12:	2b80      	cmp	r3, #128	; 0x80
 8005e14:	d10e      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e20:	2b80      	cmp	r3, #128	; 0x80
 8005e22:	d107      	bne.n	8005e34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 ffb4 	bl	8006d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e42:	d10e      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b80      	cmp	r3, #128	; 0x80
 8005e50:	d107      	bne.n	8005e62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 ffa7 	bl	8006db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6c:	2b40      	cmp	r3, #64	; 0x40
 8005e6e:	d10e      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7a:	2b40      	cmp	r3, #64	; 0x40
 8005e7c:	d107      	bne.n	8005e8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fa51 	bl	8006330 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	691b      	ldr	r3, [r3, #16]
 8005e94:	f003 0320 	and.w	r3, r3, #32
 8005e98:	2b20      	cmp	r3, #32
 8005e9a:	d10e      	bne.n	8005eba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d107      	bne.n	8005eba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f06f 0220 	mvn.w	r2, #32
 8005eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 ff67 	bl	8006d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005eba:	bf00      	nop
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e0fd      	b.n	80060da <HAL_TIM_PWM_ConfigChannel+0x216>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b14      	cmp	r3, #20
 8005eea:	f200 80f0 	bhi.w	80060ce <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005eee:	a201      	add	r2, pc, #4	; (adr r2, 8005ef4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	080060cf 	.word	0x080060cf
 8005efc:	080060cf 	.word	0x080060cf
 8005f00:	080060cf 	.word	0x080060cf
 8005f04:	08005f89 	.word	0x08005f89
 8005f08:	080060cf 	.word	0x080060cf
 8005f0c:	080060cf 	.word	0x080060cf
 8005f10:	080060cf 	.word	0x080060cf
 8005f14:	08005fcb 	.word	0x08005fcb
 8005f18:	080060cf 	.word	0x080060cf
 8005f1c:	080060cf 	.word	0x080060cf
 8005f20:	080060cf 	.word	0x080060cf
 8005f24:	0800600b 	.word	0x0800600b
 8005f28:	080060cf 	.word	0x080060cf
 8005f2c:	080060cf 	.word	0x080060cf
 8005f30:	080060cf 	.word	0x080060cf
 8005f34:	0800604d 	.word	0x0800604d
 8005f38:	080060cf 	.word	0x080060cf
 8005f3c:	080060cf 	.word	0x080060cf
 8005f40:	080060cf 	.word	0x080060cf
 8005f44:	0800608d 	.word	0x0800608d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68b9      	ldr	r1, [r7, #8]
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fa66 	bl	8006420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	699a      	ldr	r2, [r3, #24]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0208 	orr.w	r2, r2, #8
 8005f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0204 	bic.w	r2, r2, #4
 8005f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6999      	ldr	r1, [r3, #24]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	619a      	str	r2, [r3, #24]
      break;
 8005f86:	e0a3      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fac2 	bl	8006518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	699a      	ldr	r2, [r3, #24]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	6999      	ldr	r1, [r3, #24]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	691b      	ldr	r3, [r3, #16]
 8005fbe:	021a      	lsls	r2, r3, #8
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	430a      	orrs	r2, r1
 8005fc6:	619a      	str	r2, [r3, #24]
      break;
 8005fc8:	e082      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68b9      	ldr	r1, [r7, #8]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fb1b 	bl	800660c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0208 	orr.w	r2, r2, #8
 8005fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	69da      	ldr	r2, [r3, #28]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f022 0204 	bic.w	r2, r2, #4
 8005ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69d9      	ldr	r1, [r3, #28]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	430a      	orrs	r2, r1
 8006006:	61da      	str	r2, [r3, #28]
      break;
 8006008:	e062      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fb73 	bl	80066fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	69da      	ldr	r2, [r3, #28]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69d9      	ldr	r1, [r3, #28]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	021a      	lsls	r2, r3, #8
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	61da      	str	r2, [r3, #28]
      break;
 800604a:	e041      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fbb0 	bl	80067b8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0208 	orr.w	r2, r2, #8
 8006066:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0204 	bic.w	r2, r2, #4
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800608a:	e021      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fbe8 	bl	8006868 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060cc:	e000      	b.n	80060d0 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80060ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop

080060e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d101      	bne.n	80060fc <HAL_TIM_ConfigClockSource+0x18>
 80060f8:	2302      	movs	r3, #2
 80060fa:	e0b5      	b.n	8006268 <HAL_TIM_ConfigClockSource+0x184>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800611e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006126:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006138:	d03e      	beq.n	80061b8 <HAL_TIM_ConfigClockSource+0xd4>
 800613a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800613e:	f200 8087 	bhi.w	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006146:	f000 8085 	beq.w	8006254 <HAL_TIM_ConfigClockSource+0x170>
 800614a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614e:	d87f      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006150:	2b70      	cmp	r3, #112	; 0x70
 8006152:	d01a      	beq.n	800618a <HAL_TIM_ConfigClockSource+0xa6>
 8006154:	2b70      	cmp	r3, #112	; 0x70
 8006156:	d87b      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006158:	2b60      	cmp	r3, #96	; 0x60
 800615a:	d050      	beq.n	80061fe <HAL_TIM_ConfigClockSource+0x11a>
 800615c:	2b60      	cmp	r3, #96	; 0x60
 800615e:	d877      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006160:	2b50      	cmp	r3, #80	; 0x50
 8006162:	d03c      	beq.n	80061de <HAL_TIM_ConfigClockSource+0xfa>
 8006164:	2b50      	cmp	r3, #80	; 0x50
 8006166:	d873      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006168:	2b40      	cmp	r3, #64	; 0x40
 800616a:	d058      	beq.n	800621e <HAL_TIM_ConfigClockSource+0x13a>
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d86f      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006170:	2b30      	cmp	r3, #48	; 0x30
 8006172:	d064      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x15a>
 8006174:	2b30      	cmp	r3, #48	; 0x30
 8006176:	d86b      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006178:	2b20      	cmp	r3, #32
 800617a:	d060      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x15a>
 800617c:	2b20      	cmp	r3, #32
 800617e:	d867      	bhi.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
 8006180:	2b00      	cmp	r3, #0
 8006182:	d05c      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x15a>
 8006184:	2b10      	cmp	r3, #16
 8006186:	d05a      	beq.n	800623e <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006188:	e062      	b.n	8006250 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6818      	ldr	r0, [r3, #0]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	6899      	ldr	r1, [r3, #8]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f000 fcc9 	bl	8006b30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80061ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	609a      	str	r2, [r3, #8]
      break;
 80061b6:	e04e      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6899      	ldr	r1, [r3, #8]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	f000 fcb2 	bl	8006b30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689a      	ldr	r2, [r3, #8]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061da:	609a      	str	r2, [r3, #8]
      break;
 80061dc:	e03b      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6818      	ldr	r0, [r3, #0]
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	6859      	ldr	r1, [r3, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f000 fc26 	bl	8006a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2150      	movs	r1, #80	; 0x50
 80061f6:	4618      	mov	r0, r3
 80061f8:	f000 fc7f 	bl	8006afa <TIM_ITRx_SetConfig>
      break;
 80061fc:	e02b      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	6859      	ldr	r1, [r3, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	461a      	mov	r2, r3
 800620c:	f000 fc45 	bl	8006a9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2160      	movs	r1, #96	; 0x60
 8006216:	4618      	mov	r0, r3
 8006218:	f000 fc6f 	bl	8006afa <TIM_ITRx_SetConfig>
      break;
 800621c:	e01b      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6859      	ldr	r1, [r3, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	461a      	mov	r2, r3
 800622c:	f000 fc06 	bl	8006a3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2140      	movs	r1, #64	; 0x40
 8006236:	4618      	mov	r0, r3
 8006238:	f000 fc5f 	bl	8006afa <TIM_ITRx_SetConfig>
      break;
 800623c:	e00b      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f000 fc56 	bl	8006afa <TIM_ITRx_SetConfig>
        break;
 800624e:	e002      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006250:	bf00      	nop
 8006252:	e000      	b.n	8006256 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006254:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006284:	2302      	movs	r3, #2
 8006286:	e031      	b.n	80062ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fb3e 	bl	800691c <TIM_SlaveTimer_SetConfig>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d009      	beq.n	80062ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e018      	b.n	80062ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006330:	b480      	push	{r7}
 8006332:	b083      	sub	sp, #12
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006338:	bf00      	nop
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a2e      	ldr	r2, [pc, #184]	; (8006410 <TIM_Base_SetConfig+0xcc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <TIM_Base_SetConfig+0x28>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006362:	d003      	beq.n	800636c <TIM_Base_SetConfig+0x28>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2b      	ldr	r2, [pc, #172]	; (8006414 <TIM_Base_SetConfig+0xd0>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d108      	bne.n	800637e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006372:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <TIM_Base_SetConfig+0xcc>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d00f      	beq.n	80063a6 <TIM_Base_SetConfig+0x62>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638c:	d00b      	beq.n	80063a6 <TIM_Base_SetConfig+0x62>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a20      	ldr	r2, [pc, #128]	; (8006414 <TIM_Base_SetConfig+0xd0>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d007      	beq.n	80063a6 <TIM_Base_SetConfig+0x62>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1f      	ldr	r2, [pc, #124]	; (8006418 <TIM_Base_SetConfig+0xd4>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d003      	beq.n	80063a6 <TIM_Base_SetConfig+0x62>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1e      	ldr	r2, [pc, #120]	; (800641c <TIM_Base_SetConfig+0xd8>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d108      	bne.n	80063b8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4313      	orrs	r3, r2
 80063b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689a      	ldr	r2, [r3, #8]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	4a0c      	ldr	r2, [pc, #48]	; (8006410 <TIM_Base_SetConfig+0xcc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d007      	beq.n	80063f4 <TIM_Base_SetConfig+0xb0>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	4a0c      	ldr	r2, [pc, #48]	; (8006418 <TIM_Base_SetConfig+0xd4>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d003      	beq.n	80063f4 <TIM_Base_SetConfig+0xb0>
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	4a0b      	ldr	r2, [pc, #44]	; (800641c <TIM_Base_SetConfig+0xd8>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d103      	bne.n	80063fc <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	615a      	str	r2, [r3, #20]
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40014000 	.word	0x40014000
 800641c:	40014400 	.word	0x40014400

08006420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006420:	b480      	push	{r7}
 8006422:	b087      	sub	sp, #28
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f023 0201 	bic.w	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a1b      	ldr	r3, [r3, #32]
 800643a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	699b      	ldr	r3, [r3, #24]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800644e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f023 0303 	bic.w	r3, r3, #3
 800645a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	4313      	orrs	r3, r2
 8006464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 0302 	bic.w	r3, r3, #2
 800646c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	4313      	orrs	r3, r2
 8006476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a24      	ldr	r2, [pc, #144]	; (800650c <TIM_OC1_SetConfig+0xec>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <TIM_OC1_SetConfig+0x70>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a23      	ldr	r2, [pc, #140]	; (8006510 <TIM_OC1_SetConfig+0xf0>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <TIM_OC1_SetConfig+0x70>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a22      	ldr	r2, [pc, #136]	; (8006514 <TIM_OC1_SetConfig+0xf4>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d10c      	bne.n	80064aa <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f023 0308 	bic.w	r3, r3, #8
 8006496:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	4313      	orrs	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f023 0304 	bic.w	r3, r3, #4
 80064a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a17      	ldr	r2, [pc, #92]	; (800650c <TIM_OC1_SetConfig+0xec>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d007      	beq.n	80064c2 <TIM_OC1_SetConfig+0xa2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <TIM_OC1_SetConfig+0xf0>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d003      	beq.n	80064c2 <TIM_OC1_SetConfig+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a15      	ldr	r2, [pc, #84]	; (8006514 <TIM_OC1_SetConfig+0xf4>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d111      	bne.n	80064e6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	4313      	orrs	r3, r2
 80064da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	693a      	ldr	r2, [r7, #16]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	697a      	ldr	r2, [r7, #20]
 80064fe:	621a      	str	r2, [r3, #32]
}
 8006500:	bf00      	nop
 8006502:	371c      	adds	r7, #28
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr
 800650c:	40012c00 	.word	0x40012c00
 8006510:	40014000 	.word	0x40014000
 8006514:	40014400 	.word	0x40014400

08006518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0210 	bic.w	r2, r3, #16
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
 8006532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006546:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800654a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006552:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	021b      	lsls	r3, r3, #8
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	4313      	orrs	r3, r2
 800655e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f023 0320 	bic.w	r3, r3, #32
 8006566:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	011b      	lsls	r3, r3, #4
 800656e:	697a      	ldr	r2, [r7, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a22      	ldr	r2, [pc, #136]	; (8006600 <TIM_OC2_SetConfig+0xe8>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d10d      	bne.n	8006598 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006596:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a19      	ldr	r2, [pc, #100]	; (8006600 <TIM_OC2_SetConfig+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d007      	beq.n	80065b0 <TIM_OC2_SetConfig+0x98>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a18      	ldr	r2, [pc, #96]	; (8006604 <TIM_OC2_SetConfig+0xec>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d003      	beq.n	80065b0 <TIM_OC2_SetConfig+0x98>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a17      	ldr	r2, [pc, #92]	; (8006608 <TIM_OC2_SetConfig+0xf0>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d113      	bne.n	80065d8 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	695b      	ldr	r3, [r3, #20]
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40014000 	.word	0x40014000
 8006608:	40014400 	.word	0x40014400

0800660c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800663a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f023 0303 	bic.w	r3, r3, #3
 8006646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006658:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	021b      	lsls	r3, r3, #8
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	4a21      	ldr	r2, [pc, #132]	; (80066f0 <TIM_OC3_SetConfig+0xe4>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d10d      	bne.n	800668a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006674:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	021b      	lsls	r3, r3, #8
 800667c:	697a      	ldr	r2, [r7, #20]
 800667e:	4313      	orrs	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006688:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <TIM_OC3_SetConfig+0xe4>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d007      	beq.n	80066a2 <TIM_OC3_SetConfig+0x96>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <TIM_OC3_SetConfig+0xe8>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d003      	beq.n	80066a2 <TIM_OC3_SetConfig+0x96>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a16      	ldr	r2, [pc, #88]	; (80066f8 <TIM_OC3_SetConfig+0xec>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d113      	bne.n	80066ca <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	011b      	lsls	r3, r3, #4
 80066b8:	693a      	ldr	r2, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	011b      	lsls	r3, r3, #4
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400

080066fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800672a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800674a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	031b      	lsls	r3, r3, #12
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	4313      	orrs	r3, r2
 8006756:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a14      	ldr	r2, [pc, #80]	; (80067ac <TIM_OC4_SetConfig+0xb0>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d007      	beq.n	8006770 <TIM_OC4_SetConfig+0x74>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <TIM_OC4_SetConfig+0xb4>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d003      	beq.n	8006770 <TIM_OC4_SetConfig+0x74>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a12      	ldr	r2, [pc, #72]	; (80067b4 <TIM_OC4_SetConfig+0xb8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d109      	bne.n	8006784 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	695b      	ldr	r3, [r3, #20]
 800677c:	019b      	lsls	r3, r3, #6
 800677e:	697a      	ldr	r2, [r7, #20]
 8006780:	4313      	orrs	r3, r2
 8006782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	40012c00 	.word	0x40012c00
 80067b0:	40014000 	.word	0x40014000
 80067b4:	40014400 	.word	0x40014400

080067b8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b087      	sub	sp, #28
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80067fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	693a      	ldr	r2, [r7, #16]
 8006806:	4313      	orrs	r3, r2
 8006808:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a13      	ldr	r2, [pc, #76]	; (800685c <TIM_OC5_SetConfig+0xa4>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d007      	beq.n	8006822 <TIM_OC5_SetConfig+0x6a>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a12      	ldr	r2, [pc, #72]	; (8006860 <TIM_OC5_SetConfig+0xa8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d003      	beq.n	8006822 <TIM_OC5_SetConfig+0x6a>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a11      	ldr	r2, [pc, #68]	; (8006864 <TIM_OC5_SetConfig+0xac>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d109      	bne.n	8006836 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006828:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	685a      	ldr	r2, [r3, #4]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	621a      	str	r2, [r3, #32]
}
 8006850:	bf00      	nop
 8006852:	371c      	adds	r7, #28
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40012c00 	.word	0x40012c00
 8006860:	40014000 	.word	0x40014000
 8006864:	40014400 	.word	0x40014400

08006868 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006896:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800689a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	021b      	lsls	r3, r3, #8
 80068a2:	68fa      	ldr	r2, [r7, #12]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	051b      	lsls	r3, r3, #20
 80068b6:	693a      	ldr	r2, [r7, #16]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a14      	ldr	r2, [pc, #80]	; (8006910 <TIM_OC6_SetConfig+0xa8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d007      	beq.n	80068d4 <TIM_OC6_SetConfig+0x6c>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a13      	ldr	r2, [pc, #76]	; (8006914 <TIM_OC6_SetConfig+0xac>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d003      	beq.n	80068d4 <TIM_OC6_SetConfig+0x6c>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a12      	ldr	r2, [pc, #72]	; (8006918 <TIM_OC6_SetConfig+0xb0>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d109      	bne.n	80068e8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	695b      	ldr	r3, [r3, #20]
 80068e0:	029b      	lsls	r3, r3, #10
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	697a      	ldr	r2, [r7, #20]
 80068ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40012c00 	.word	0x40012c00
 8006914:	40014000 	.word	0x40014000
 8006918:	40014400 	.word	0x40014400

0800691c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006934:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	4313      	orrs	r3, r2
 800693e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006946:	f023 0307 	bic.w	r3, r3, #7
 800694a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	697a      	ldr	r2, [r7, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b70      	cmp	r3, #112	; 0x70
 8006964:	d01a      	beq.n	800699c <TIM_SlaveTimer_SetConfig+0x80>
 8006966:	2b70      	cmp	r3, #112	; 0x70
 8006968:	d860      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800696a:	2b60      	cmp	r3, #96	; 0x60
 800696c:	d054      	beq.n	8006a18 <TIM_SlaveTimer_SetConfig+0xfc>
 800696e:	2b60      	cmp	r3, #96	; 0x60
 8006970:	d85c      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006972:	2b50      	cmp	r3, #80	; 0x50
 8006974:	d046      	beq.n	8006a04 <TIM_SlaveTimer_SetConfig+0xe8>
 8006976:	2b50      	cmp	r3, #80	; 0x50
 8006978:	d858      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d019      	beq.n	80069b2 <TIM_SlaveTimer_SetConfig+0x96>
 800697e:	2b40      	cmp	r3, #64	; 0x40
 8006980:	d854      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006982:	2b30      	cmp	r3, #48	; 0x30
 8006984:	d054      	beq.n	8006a30 <TIM_SlaveTimer_SetConfig+0x114>
 8006986:	2b30      	cmp	r3, #48	; 0x30
 8006988:	d850      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 800698a:	2b20      	cmp	r3, #32
 800698c:	d050      	beq.n	8006a30 <TIM_SlaveTimer_SetConfig+0x114>
 800698e:	2b20      	cmp	r3, #32
 8006990:	d84c      	bhi.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
 8006992:	2b00      	cmp	r3, #0
 8006994:	d04c      	beq.n	8006a30 <TIM_SlaveTimer_SetConfig+0x114>
 8006996:	2b10      	cmp	r3, #16
 8006998:	d04a      	beq.n	8006a30 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800699a:	e047      	b.n	8006a2c <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68d9      	ldr	r1, [r3, #12]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	f000 f8c0 	bl	8006b30 <TIM_ETR_SetConfig>
      break;
 80069b0:	e03f      	b.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2b05      	cmp	r3, #5
 80069b8:	d101      	bne.n	80069be <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e03a      	b.n	8006a34 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6a1b      	ldr	r3, [r3, #32]
 80069c4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	699b      	ldr	r3, [r3, #24]
 80069dc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069e4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	4313      	orrs	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	621a      	str	r2, [r3, #32]
      break;
 8006a02:	e016      	b.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6818      	ldr	r0, [r3, #0]
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	6899      	ldr	r1, [r3, #8]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	691b      	ldr	r3, [r3, #16]
 8006a10:	461a      	mov	r2, r3
 8006a12:	f000 f813 	bl	8006a3c <TIM_TI1_ConfigInputStage>
      break;
 8006a16:	e00c      	b.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	6899      	ldr	r1, [r3, #8]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	461a      	mov	r2, r3
 8006a26:	f000 f838 	bl	8006a9a <TIM_TI2_ConfigInputStage>
      break;
 8006a2a:	e002      	b.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006a2c:	bf00      	nop
 8006a2e:	e000      	b.n	8006a32 <TIM_SlaveTimer_SetConfig+0x116>
        break;
 8006a30:	bf00      	nop
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1b      	ldr	r3, [r3, #32]
 8006a4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 0201 	bic.w	r2, r3, #1
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	f023 030a 	bic.w	r3, r3, #10
 8006a78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b087      	sub	sp, #28
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	60f8      	str	r0, [r7, #12]
 8006aa2:	60b9      	str	r1, [r7, #8]
 8006aa4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6a1b      	ldr	r3, [r3, #32]
 8006aaa:	f023 0210 	bic.w	r2, r3, #16
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	699b      	ldr	r3, [r3, #24]
 8006ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1b      	ldr	r3, [r3, #32]
 8006abc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	031b      	lsls	r3, r3, #12
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ad6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	697a      	ldr	r2, [r7, #20]
 8006ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b085      	sub	sp, #20
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	f043 0307 	orr.w	r3, r3, #7
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	609a      	str	r2, [r3, #8]
}
 8006b24:	bf00      	nop
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b087      	sub	sp, #28
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	021a      	lsls	r2, r3, #8
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	431a      	orrs	r2, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	697a      	ldr	r2, [r7, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	609a      	str	r2, [r3, #8]
}
 8006b64:	bf00      	nop
 8006b66:	371c      	adds	r7, #28
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f003 031f 	and.w	r3, r3, #31
 8006b82:	2201      	movs	r2, #1
 8006b84:	fa02 f303 	lsl.w	r3, r2, r3
 8006b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a1a      	ldr	r2, [r3, #32]
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	43db      	mvns	r3, r3
 8006b92:	401a      	ands	r2, r3
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6a1a      	ldr	r2, [r3, #32]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 031f 	and.w	r3, r3, #31
 8006ba2:	6879      	ldr	r1, [r7, #4]
 8006ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba8:	431a      	orrs	r2, r3
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
	...

08006bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e054      	b.n	8006c7e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2202      	movs	r2, #2
 8006be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a24      	ldr	r2, [pc, #144]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a17      	ldr	r2, [pc, #92]	; (8006c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d00e      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c3c:	d009      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a13      	ldr	r2, [pc, #76]	; (8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d004      	beq.n	8006c52 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a11      	ldr	r2, [pc, #68]	; (8006c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d10c      	bne.n	8006c6c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40014000 	.word	0x40014000

08006c98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d101      	bne.n	8006cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cb0:	2302      	movs	r3, #2
 8006cb2:	e060      	b.n	8006d76 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	68db      	ldr	r3, [r3, #12]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	041b      	lsls	r3, r3, #16
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a14      	ldr	r2, [pc, #80]	; (8006d84 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d115      	bne.n	8006d64 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d42:	051b      	lsls	r3, r3, #20
 8006d44:	4313      	orrs	r3, r2
 8006d46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	6a1b      	ldr	r3, [r3, #32]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	40012c00 	.word	0x40012c00

08006d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e040      	b.n	8006e58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d106      	bne.n	8006dec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fc fa2e 	bl	8003248 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2224      	movs	r2, #36	; 0x24
 8006df0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0201 	bic.w	r2, r2, #1
 8006e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f82c 	bl	8006e60 <UART_SetConfig>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d101      	bne.n	8006e12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e022      	b.n	8006e58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 fa7c 	bl	8007318 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fb03 	bl	800745c <UART_CheckIdleState>
 8006e56:	4603      	mov	r3, r0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e60:	b5b0      	push	{r4, r5, r7, lr}
 8006e62:	b088      	sub	sp, #32
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689a      	ldr	r2, [r3, #8]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	431a      	orrs	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4ba4      	ldr	r3, [pc, #656]	; (800711c <UART_SetConfig+0x2bc>)
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	6812      	ldr	r2, [r2, #0]
 8006e92:	69f9      	ldr	r1, [r7, #28]
 8006e94:	430b      	orrs	r3, r1
 8006e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68da      	ldr	r2, [r3, #12]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	699b      	ldr	r3, [r3, #24]
 8006eb2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a99      	ldr	r2, [pc, #612]	; (8007120 <UART_SetConfig+0x2c0>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4a90      	ldr	r2, [pc, #576]	; (8007124 <UART_SetConfig+0x2c4>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d121      	bne.n	8006f2a <UART_SetConfig+0xca>
 8006ee6:	4b90      	ldr	r3, [pc, #576]	; (8007128 <UART_SetConfig+0x2c8>)
 8006ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b03      	cmp	r3, #3
 8006ef2:	d817      	bhi.n	8006f24 <UART_SetConfig+0xc4>
 8006ef4:	a201      	add	r2, pc, #4	; (adr r2, 8006efc <UART_SetConfig+0x9c>)
 8006ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006efa:	bf00      	nop
 8006efc:	08006f0d 	.word	0x08006f0d
 8006f00:	08006f19 	.word	0x08006f19
 8006f04:	08006f13 	.word	0x08006f13
 8006f08:	08006f1f 	.word	0x08006f1f
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	76fb      	strb	r3, [r7, #27]
 8006f10:	e0bc      	b.n	800708c <UART_SetConfig+0x22c>
 8006f12:	2302      	movs	r3, #2
 8006f14:	76fb      	strb	r3, [r7, #27]
 8006f16:	e0b9      	b.n	800708c <UART_SetConfig+0x22c>
 8006f18:	2304      	movs	r3, #4
 8006f1a:	76fb      	strb	r3, [r7, #27]
 8006f1c:	e0b6      	b.n	800708c <UART_SetConfig+0x22c>
 8006f1e:	2308      	movs	r3, #8
 8006f20:	76fb      	strb	r3, [r7, #27]
 8006f22:	e0b3      	b.n	800708c <UART_SetConfig+0x22c>
 8006f24:	2310      	movs	r3, #16
 8006f26:	76fb      	strb	r3, [r7, #27]
 8006f28:	e0b0      	b.n	800708c <UART_SetConfig+0x22c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7f      	ldr	r2, [pc, #508]	; (800712c <UART_SetConfig+0x2cc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d132      	bne.n	8006f9a <UART_SetConfig+0x13a>
 8006f34:	4b7c      	ldr	r3, [pc, #496]	; (8007128 <UART_SetConfig+0x2c8>)
 8006f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f3a:	f003 030c 	and.w	r3, r3, #12
 8006f3e:	2b0c      	cmp	r3, #12
 8006f40:	d828      	bhi.n	8006f94 <UART_SetConfig+0x134>
 8006f42:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0xe8>)
 8006f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f48:	08006f7d 	.word	0x08006f7d
 8006f4c:	08006f95 	.word	0x08006f95
 8006f50:	08006f95 	.word	0x08006f95
 8006f54:	08006f95 	.word	0x08006f95
 8006f58:	08006f89 	.word	0x08006f89
 8006f5c:	08006f95 	.word	0x08006f95
 8006f60:	08006f95 	.word	0x08006f95
 8006f64:	08006f95 	.word	0x08006f95
 8006f68:	08006f83 	.word	0x08006f83
 8006f6c:	08006f95 	.word	0x08006f95
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08006f8f 	.word	0x08006f8f
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	76fb      	strb	r3, [r7, #27]
 8006f80:	e084      	b.n	800708c <UART_SetConfig+0x22c>
 8006f82:	2302      	movs	r3, #2
 8006f84:	76fb      	strb	r3, [r7, #27]
 8006f86:	e081      	b.n	800708c <UART_SetConfig+0x22c>
 8006f88:	2304      	movs	r3, #4
 8006f8a:	76fb      	strb	r3, [r7, #27]
 8006f8c:	e07e      	b.n	800708c <UART_SetConfig+0x22c>
 8006f8e:	2308      	movs	r3, #8
 8006f90:	76fb      	strb	r3, [r7, #27]
 8006f92:	e07b      	b.n	800708c <UART_SetConfig+0x22c>
 8006f94:	2310      	movs	r3, #16
 8006f96:	76fb      	strb	r3, [r7, #27]
 8006f98:	e078      	b.n	800708c <UART_SetConfig+0x22c>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a64      	ldr	r2, [pc, #400]	; (8007130 <UART_SetConfig+0x2d0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d120      	bne.n	8006fe6 <UART_SetConfig+0x186>
 8006fa4:	4b60      	ldr	r3, [pc, #384]	; (8007128 <UART_SetConfig+0x2c8>)
 8006fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006faa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fae:	2b30      	cmp	r3, #48	; 0x30
 8006fb0:	d013      	beq.n	8006fda <UART_SetConfig+0x17a>
 8006fb2:	2b30      	cmp	r3, #48	; 0x30
 8006fb4:	d814      	bhi.n	8006fe0 <UART_SetConfig+0x180>
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	d009      	beq.n	8006fce <UART_SetConfig+0x16e>
 8006fba:	2b20      	cmp	r3, #32
 8006fbc:	d810      	bhi.n	8006fe0 <UART_SetConfig+0x180>
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <UART_SetConfig+0x168>
 8006fc2:	2b10      	cmp	r3, #16
 8006fc4:	d006      	beq.n	8006fd4 <UART_SetConfig+0x174>
 8006fc6:	e00b      	b.n	8006fe0 <UART_SetConfig+0x180>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	76fb      	strb	r3, [r7, #27]
 8006fcc:	e05e      	b.n	800708c <UART_SetConfig+0x22c>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	76fb      	strb	r3, [r7, #27]
 8006fd2:	e05b      	b.n	800708c <UART_SetConfig+0x22c>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	76fb      	strb	r3, [r7, #27]
 8006fd8:	e058      	b.n	800708c <UART_SetConfig+0x22c>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	76fb      	strb	r3, [r7, #27]
 8006fde:	e055      	b.n	800708c <UART_SetConfig+0x22c>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	76fb      	strb	r3, [r7, #27]
 8006fe4:	e052      	b.n	800708c <UART_SetConfig+0x22c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a52      	ldr	r2, [pc, #328]	; (8007134 <UART_SetConfig+0x2d4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d120      	bne.n	8007032 <UART_SetConfig+0x1d2>
 8006ff0:	4b4d      	ldr	r3, [pc, #308]	; (8007128 <UART_SetConfig+0x2c8>)
 8006ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006ffa:	2bc0      	cmp	r3, #192	; 0xc0
 8006ffc:	d013      	beq.n	8007026 <UART_SetConfig+0x1c6>
 8006ffe:	2bc0      	cmp	r3, #192	; 0xc0
 8007000:	d814      	bhi.n	800702c <UART_SetConfig+0x1cc>
 8007002:	2b80      	cmp	r3, #128	; 0x80
 8007004:	d009      	beq.n	800701a <UART_SetConfig+0x1ba>
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d810      	bhi.n	800702c <UART_SetConfig+0x1cc>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <UART_SetConfig+0x1b4>
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d006      	beq.n	8007020 <UART_SetConfig+0x1c0>
 8007012:	e00b      	b.n	800702c <UART_SetConfig+0x1cc>
 8007014:	2300      	movs	r3, #0
 8007016:	76fb      	strb	r3, [r7, #27]
 8007018:	e038      	b.n	800708c <UART_SetConfig+0x22c>
 800701a:	2302      	movs	r3, #2
 800701c:	76fb      	strb	r3, [r7, #27]
 800701e:	e035      	b.n	800708c <UART_SetConfig+0x22c>
 8007020:	2304      	movs	r3, #4
 8007022:	76fb      	strb	r3, [r7, #27]
 8007024:	e032      	b.n	800708c <UART_SetConfig+0x22c>
 8007026:	2308      	movs	r3, #8
 8007028:	76fb      	strb	r3, [r7, #27]
 800702a:	e02f      	b.n	800708c <UART_SetConfig+0x22c>
 800702c:	2310      	movs	r3, #16
 800702e:	76fb      	strb	r3, [r7, #27]
 8007030:	e02c      	b.n	800708c <UART_SetConfig+0x22c>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a3a      	ldr	r2, [pc, #232]	; (8007120 <UART_SetConfig+0x2c0>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d125      	bne.n	8007088 <UART_SetConfig+0x228>
 800703c:	4b3a      	ldr	r3, [pc, #232]	; (8007128 <UART_SetConfig+0x2c8>)
 800703e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007042:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800704a:	d017      	beq.n	800707c <UART_SetConfig+0x21c>
 800704c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007050:	d817      	bhi.n	8007082 <UART_SetConfig+0x222>
 8007052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007056:	d00b      	beq.n	8007070 <UART_SetConfig+0x210>
 8007058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705c:	d811      	bhi.n	8007082 <UART_SetConfig+0x222>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d003      	beq.n	800706a <UART_SetConfig+0x20a>
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007066:	d006      	beq.n	8007076 <UART_SetConfig+0x216>
 8007068:	e00b      	b.n	8007082 <UART_SetConfig+0x222>
 800706a:	2300      	movs	r3, #0
 800706c:	76fb      	strb	r3, [r7, #27]
 800706e:	e00d      	b.n	800708c <UART_SetConfig+0x22c>
 8007070:	2302      	movs	r3, #2
 8007072:	76fb      	strb	r3, [r7, #27]
 8007074:	e00a      	b.n	800708c <UART_SetConfig+0x22c>
 8007076:	2304      	movs	r3, #4
 8007078:	76fb      	strb	r3, [r7, #27]
 800707a:	e007      	b.n	800708c <UART_SetConfig+0x22c>
 800707c:	2308      	movs	r3, #8
 800707e:	76fb      	strb	r3, [r7, #27]
 8007080:	e004      	b.n	800708c <UART_SetConfig+0x22c>
 8007082:	2310      	movs	r3, #16
 8007084:	76fb      	strb	r3, [r7, #27]
 8007086:	e001      	b.n	800708c <UART_SetConfig+0x22c>
 8007088:	2310      	movs	r3, #16
 800708a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a23      	ldr	r2, [pc, #140]	; (8007120 <UART_SetConfig+0x2c0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	f040 8084 	bne.w	80071a0 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007098:	7efb      	ldrb	r3, [r7, #27]
 800709a:	2b08      	cmp	r3, #8
 800709c:	d823      	bhi.n	80070e6 <UART_SetConfig+0x286>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <UART_SetConfig+0x244>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070c9 	.word	0x080070c9
 80070a8:	080070e7 	.word	0x080070e7
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070e7 	.word	0x080070e7
 80070b4:	080070d7 	.word	0x080070d7
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	080070e7 	.word	0x080070e7
 80070c0:	080070e7 	.word	0x080070e7
 80070c4:	080070df 	.word	0x080070df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c8:	f7fd fdb8 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80070cc:	6178      	str	r0, [r7, #20]
        break;
 80070ce:	e00f      	b.n	80070f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d0:	4b19      	ldr	r3, [pc, #100]	; (8007138 <UART_SetConfig+0x2d8>)
 80070d2:	617b      	str	r3, [r7, #20]
        break;
 80070d4:	e00c      	b.n	80070f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fd fd19 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80070da:	6178      	str	r0, [r7, #20]
        break;
 80070dc:	e008      	b.n	80070f0 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	617b      	str	r3, [r7, #20]
        break;
 80070e4:	e004      	b.n	80070f0 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	76bb      	strb	r3, [r7, #26]
        break;
 80070ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f000 8102 	beq.w	80072fc <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685a      	ldr	r2, [r3, #4]
 80070fc:	4613      	mov	r3, r2
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	4413      	add	r3, r2
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	429a      	cmp	r2, r3
 8007106:	d305      	bcc.n	8007114 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800710e:	697a      	ldr	r2, [r7, #20]
 8007110:	429a      	cmp	r2, r3
 8007112:	d913      	bls.n	800713c <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	76bb      	strb	r3, [r7, #26]
 8007118:	e0f0      	b.n	80072fc <UART_SetConfig+0x49c>
 800711a:	bf00      	nop
 800711c:	efff69f3 	.word	0xefff69f3
 8007120:	40008000 	.word	0x40008000
 8007124:	40013800 	.word	0x40013800
 8007128:	40021000 	.word	0x40021000
 800712c:	40004400 	.word	0x40004400
 8007130:	40004800 	.word	0x40004800
 8007134:	40004c00 	.word	0x40004c00
 8007138:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800713c:	697b      	ldr	r3, [r7, #20]
 800713e:	4618      	mov	r0, r3
 8007140:	f04f 0100 	mov.w	r1, #0
 8007144:	f04f 0200 	mov.w	r2, #0
 8007148:	f04f 0300 	mov.w	r3, #0
 800714c:	020b      	lsls	r3, r1, #8
 800714e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007152:	0202      	lsls	r2, r0, #8
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	6849      	ldr	r1, [r1, #4]
 8007158:	0849      	lsrs	r1, r1, #1
 800715a:	4608      	mov	r0, r1
 800715c:	f04f 0100 	mov.w	r1, #0
 8007160:	1814      	adds	r4, r2, r0
 8007162:	eb43 0501 	adc.w	r5, r3, r1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	461a      	mov	r2, r3
 800716c:	f04f 0300 	mov.w	r3, #0
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fc1e 	bl	80009b4 <__aeabi_uldivmod>
 8007178:	4602      	mov	r2, r0
 800717a:	460b      	mov	r3, r1
 800717c:	4613      	mov	r3, r2
 800717e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007186:	d308      	bcc.n	800719a <UART_SetConfig+0x33a>
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800718e:	d204      	bcs.n	800719a <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	60da      	str	r2, [r3, #12]
 8007198:	e0b0      	b.n	80072fc <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 800719a:	2301      	movs	r3, #1
 800719c:	76bb      	strb	r3, [r7, #26]
 800719e:	e0ad      	b.n	80072fc <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	69db      	ldr	r3, [r3, #28]
 80071a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071a8:	d15c      	bne.n	8007264 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80071aa:	7efb      	ldrb	r3, [r7, #27]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d828      	bhi.n	8007202 <UART_SetConfig+0x3a2>
 80071b0:	a201      	add	r2, pc, #4	; (adr r2, 80071b8 <UART_SetConfig+0x358>)
 80071b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071b6:	bf00      	nop
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071e5 	.word	0x080071e5
 80071c0:	080071ed 	.word	0x080071ed
 80071c4:	08007203 	.word	0x08007203
 80071c8:	080071f3 	.word	0x080071f3
 80071cc:	08007203 	.word	0x08007203
 80071d0:	08007203 	.word	0x08007203
 80071d4:	08007203 	.word	0x08007203
 80071d8:	080071fb 	.word	0x080071fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071dc:	f7fd fd2e 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 80071e0:	6178      	str	r0, [r7, #20]
        break;
 80071e2:	e013      	b.n	800720c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071e4:	f7fd fd40 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 80071e8:	6178      	str	r0, [r7, #20]
        break;
 80071ea:	e00f      	b.n	800720c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071ec:	4b49      	ldr	r3, [pc, #292]	; (8007314 <UART_SetConfig+0x4b4>)
 80071ee:	617b      	str	r3, [r7, #20]
        break;
 80071f0:	e00c      	b.n	800720c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071f2:	f7fd fc8b 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80071f6:	6178      	str	r0, [r7, #20]
        break;
 80071f8:	e008      	b.n	800720c <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071fe:	617b      	str	r3, [r7, #20]
        break;
 8007200:	e004      	b.n	800720c <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	76bb      	strb	r3, [r7, #26]
        break;
 800720a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d074      	beq.n	80072fc <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	005a      	lsls	r2, r3, #1
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	085b      	lsrs	r3, r3, #1
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	b29b      	uxth	r3, r3
 8007228:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	2b0f      	cmp	r3, #15
 800722e:	d916      	bls.n	800725e <UART_SetConfig+0x3fe>
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007236:	d212      	bcs.n	800725e <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	b29b      	uxth	r3, r3
 800723c:	f023 030f 	bic.w	r3, r3, #15
 8007240:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	085b      	lsrs	r3, r3, #1
 8007246:	b29b      	uxth	r3, r3
 8007248:	f003 0307 	and.w	r3, r3, #7
 800724c:	b29a      	uxth	r2, r3
 800724e:	89fb      	ldrh	r3, [r7, #14]
 8007250:	4313      	orrs	r3, r2
 8007252:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	89fa      	ldrh	r2, [r7, #14]
 800725a:	60da      	str	r2, [r3, #12]
 800725c:	e04e      	b.n	80072fc <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	76bb      	strb	r3, [r7, #26]
 8007262:	e04b      	b.n	80072fc <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007264:	7efb      	ldrb	r3, [r7, #27]
 8007266:	2b08      	cmp	r3, #8
 8007268:	d827      	bhi.n	80072ba <UART_SetConfig+0x45a>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <UART_SetConfig+0x410>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	08007295 	.word	0x08007295
 8007274:	0800729d 	.word	0x0800729d
 8007278:	080072a5 	.word	0x080072a5
 800727c:	080072bb 	.word	0x080072bb
 8007280:	080072ab 	.word	0x080072ab
 8007284:	080072bb 	.word	0x080072bb
 8007288:	080072bb 	.word	0x080072bb
 800728c:	080072bb 	.word	0x080072bb
 8007290:	080072b3 	.word	0x080072b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007294:	f7fd fcd2 	bl	8004c3c <HAL_RCC_GetPCLK1Freq>
 8007298:	6178      	str	r0, [r7, #20]
        break;
 800729a:	e013      	b.n	80072c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fd fce4 	bl	8004c68 <HAL_RCC_GetPCLK2Freq>
 80072a0:	6178      	str	r0, [r7, #20]
        break;
 80072a2:	e00f      	b.n	80072c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072a4:	4b1b      	ldr	r3, [pc, #108]	; (8007314 <UART_SetConfig+0x4b4>)
 80072a6:	617b      	str	r3, [r7, #20]
        break;
 80072a8:	e00c      	b.n	80072c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072aa:	f7fd fc2f 	bl	8004b0c <HAL_RCC_GetSysClockFreq>
 80072ae:	6178      	str	r0, [r7, #20]
        break;
 80072b0:	e008      	b.n	80072c4 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072b6:	617b      	str	r3, [r7, #20]
        break;
 80072b8:	e004      	b.n	80072c4 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	76bb      	strb	r3, [r7, #26]
        break;
 80072c2:	bf00      	nop
    }

    if (pclk != 0U)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d018      	beq.n	80072fc <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	085a      	lsrs	r2, r3, #1
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072dc:	b29b      	uxth	r3, r3
 80072de:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d908      	bls.n	80072f8 <UART_SetConfig+0x498>
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ec:	d204      	bcs.n	80072f8 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	693a      	ldr	r2, [r7, #16]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	e001      	b.n	80072fc <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 80072f8:	2301      	movs	r3, #1
 80072fa:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007308:	7ebb      	ldrb	r3, [r7, #26]
}
 800730a:	4618      	mov	r0, r3
 800730c:	3720      	adds	r7, #32
 800730e:	46bd      	mov	sp, r7
 8007310:	bdb0      	pop	{r4, r5, r7, pc}
 8007312:	bf00      	nop
 8007314:	00f42400 	.word	0x00f42400

08007318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	430a      	orrs	r2, r1
 8007340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	f003 0302 	and.w	r3, r3, #2
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00a      	beq.n	8007364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	430a      	orrs	r2, r1
 8007362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007368:	f003 0304 	and.w	r3, r3, #4
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00a      	beq.n	8007386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	430a      	orrs	r2, r1
 8007384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738a:	f003 0308 	and.w	r3, r3, #8
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	430a      	orrs	r2, r1
 80073a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ac:	f003 0310 	and.w	r3, r3, #16
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00a      	beq.n	80073ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	f003 0320 	and.w	r3, r3, #32
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00a      	beq.n	80073ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	430a      	orrs	r2, r1
 80073ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d01a      	beq.n	800742e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	430a      	orrs	r2, r1
 800740c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007416:	d10a      	bne.n	800742e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	430a      	orrs	r2, r1
 800744e:	605a      	str	r2, [r3, #4]
  }
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af02      	add	r7, sp, #8
 8007462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800746c:	f7fb ffe2 	bl	8003434 <HAL_GetTick>
 8007470:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	2b08      	cmp	r3, #8
 800747e:	d10e      	bne.n	800749e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007484:	9300      	str	r3, [sp, #0]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2200      	movs	r2, #0
 800748a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f82d 	bl	80074ee <UART_WaitOnFlagUntilTimeout>
 8007494:	4603      	mov	r3, r0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e023      	b.n	80074e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b04      	cmp	r3, #4
 80074aa:	d10e      	bne.n	80074ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f817 	bl	80074ee <UART_WaitOnFlagUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	e00d      	b.n	80074e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2220      	movs	r2, #32
 80074d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2200      	movs	r2, #0
 80074da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fe:	e05e      	b.n	80075be <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d05a      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007508:	f7fb ff94 	bl	8003434 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	69ba      	ldr	r2, [r7, #24]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <UART_WaitOnFlagUntilTimeout+0x30>
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d11b      	bne.n	8007556 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800752c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f022 0201 	bic.w	r2, r2, #1
 800753c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2220      	movs	r2, #32
 8007542:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2220      	movs	r2, #32
 8007548:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e043      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b00      	cmp	r3, #0
 8007562:	d02c      	beq.n	80075be <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800756e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007572:	d124      	bne.n	80075be <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800757c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800758c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 0201 	bic.w	r2, r2, #1
 800759c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	2220      	movs	r2, #32
 80075a2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2220      	movs	r2, #32
 80075a8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80075ba:	2303      	movs	r3, #3
 80075bc:	e00f      	b.n	80075de <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d091      	beq.n	8007500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3710      	adds	r7, #16
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
	...

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	; (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	; (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	; (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	; (800762c <__libc_init_array+0x44>)
 80075fc:	f000 f820 	bl	8007640 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	08007730 	.word	0x08007730
 8007624:	08007730 	.word	0x08007730
 8007628:	08007730 	.word	0x08007730
 800762c:	08007734 	.word	0x08007734

08007630 <memset>:
 8007630:	4402      	add	r2, r0
 8007632:	4603      	mov	r3, r0
 8007634:	4293      	cmp	r3, r2
 8007636:	d100      	bne.n	800763a <memset+0xa>
 8007638:	4770      	bx	lr
 800763a:	f803 1b01 	strb.w	r1, [r3], #1
 800763e:	e7f9      	b.n	8007634 <memset+0x4>

08007640 <_init>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	bf00      	nop
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr

0800764c <_fini>:
 800764c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764e:	bf00      	nop
 8007650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007652:	bc08      	pop	{r3}
 8007654:	469e      	mov	lr, r3
 8007656:	4770      	bx	lr
