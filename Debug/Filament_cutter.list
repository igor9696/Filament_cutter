
Filament_cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080086a8  080086a8  000186a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008818  08008818  00018818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008824  08008824  00018824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000770  20000074  0800889c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800889c  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e061  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038be  00000000  00000000  0003e105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  000419c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00042ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025462  00000000  00000000  00043e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b6f  00000000  00000000  000692fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd794  00000000  00000000  0007fe69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d5fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005388  00000000  00000000  0015d650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008690 	.word	0x08008690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008690 	.word	0x08008690

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96e 	b.w	8000f00 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8083 	bne.w	8000d52 <__udivmoddi4+0x116>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d947      	bls.n	8000ce2 <__udivmoddi4+0xa6>
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b142      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	f1c2 0020 	rsb	r0, r2, #32
 8000c5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c60:	4091      	lsls	r1, r2
 8000c62:	4097      	lsls	r7, r2
 8000c64:	ea40 0c01 	orr.w	ip, r0, r1
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbbc f6f8 	udiv	r6, ip, r8
 8000c74:	fa1f fe87 	uxth.w	lr, r7
 8000c78:	fb08 c116 	mls	r1, r8, r6, ip
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f10e 	mul.w	r1, r6, lr
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 8119 	bcs.w	8000ec4 <__udivmoddi4+0x288>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8116 	bls.w	8000ec4 <__udivmoddi4+0x288>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	443b      	add	r3, r7
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8105 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8102 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xaa>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d150      	bne.n	8000d90 <__udivmoddi4+0x154>
 8000cee:	1bcb      	subs	r3, r1, r7
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfe:	0c21      	lsrs	r1, r4, #16
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb08 f30c 	mul.w	r3, r8, ip
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0xe2>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f200 80e9 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x10c>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x10a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80d9 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e7bf      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x12e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <__udivmoddi4+0x282>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x1cc>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0x140>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80b8 	bhi.w	8000eec <__udivmoddi4+0x2b0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	468c      	mov	ip, r1
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0a8      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f603 	lsr.w	r6, r0, r3
 8000d98:	4097      	lsls	r7, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4330      	orrs	r0, r6
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f108 	mul.w	r1, r6, r8
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x19c>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dca:	f080 808d 	bcs.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 808a 	bls.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b281      	uxth	r1, r0
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb00 f308 	mul.w	r3, r0, r8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x1c4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df6:	d273      	bcs.n	8000ee0 <__udivmoddi4+0x2a4>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d971      	bls.n	8000ee0 <__udivmoddi4+0x2a4>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4439      	add	r1, r7
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e06:	e778      	b.n	8000cfa <__udivmoddi4+0xbe>
 8000e08:	f1c6 0c20 	rsb	ip, r6, #32
 8000e0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e14:	431c      	orrs	r4, r3
 8000e16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e26:	431f      	orrs	r7, r3
 8000e28:	0c3b      	lsrs	r3, r7, #16
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fa1f f884 	uxth.w	r8, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	fa02 f206 	lsl.w	r2, r2, r6
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x220>
 8000e4a:	1861      	adds	r1, r4, r1
 8000e4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e50:	d248      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e52:	458a      	cmp	sl, r1
 8000e54:	d946      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4421      	add	r1, r4
 8000e5c:	eba1 010a 	sub.w	r1, r1, sl
 8000e60:	b2bf      	uxth	r7, r7
 8000e62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6e:	fb00 f808 	mul.w	r8, r0, r8
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x24a>
 8000e76:	19e7      	adds	r7, r4, r7
 8000e78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7c:	d22e      	bcs.n	8000edc <__udivmoddi4+0x2a0>
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d92c      	bls.n	8000edc <__udivmoddi4+0x2a0>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4427      	add	r7, r4
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	eba7 0708 	sub.w	r7, r7, r8
 8000e8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e92:	454f      	cmp	r7, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	d31a      	bcc.n	8000ed0 <__udivmoddi4+0x294>
 8000e9a:	d017      	beq.n	8000ecc <__udivmoddi4+0x290>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x27a>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb0:	40f7      	lsrs	r7, r6
 8000eb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e70b      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fd      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	d2e5      	bcs.n	8000e9c <__udivmoddi4+0x260>
 8000ed0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7df      	b.n	8000e9c <__udivmoddi4+0x260>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e7d2      	b.n	8000e86 <__udivmoddi4+0x24a>
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	e78d      	b.n	8000e00 <__udivmoddi4+0x1c4>
 8000ee4:	4681      	mov	r9, r0
 8000ee6:	e7b9      	b.n	8000e5c <__udivmoddi4+0x220>
 8000ee8:	4666      	mov	r6, ip
 8000eea:	e775      	b.n	8000dd8 <__udivmoddi4+0x19c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14a>
 8000ef0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef4:	4439      	add	r1, r7
 8000ef6:	e713      	b.n	8000d20 <__udivmoddi4+0xe4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443c      	add	r4, r7
 8000efc:	e724      	b.n	8000d48 <__udivmoddi4+0x10c>
 8000efe:	bf00      	nop

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <DC_motor_encoder_Init>:
 */

#include "L298_dc.h"


void DC_motor_encoder_Init(dc_motor *motor) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_AUTORELOAD(motor->encoder_timer, FULL_ROTATION_PULSE);
	//HAL_TIM_Encoder_Start(motor->encoder_timer, TIM_CHANNEL_ALL);
	HAL_LPTIM_Encoder_Start_IT(motor->encoder_timer, FULL_ROTATION_PULSE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f241 1192 	movw	r1, #4498	; 0x1192
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 f9f9 	bl	800430c <HAL_LPTIM_Encoder_Start_IT>
	/* Enable Autoreload match interrupt */
	__HAL_LPTIM_ENABLE_IT(motor->encoder_timer, LPTIM_IT_ARRM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DC_motor_Init>:

void DC_motor_Init(dc_motor *motor, TIM_HandleTypeDef *Timer,
		uint32_t PWM_Channel, GPIO_TypeDef *Port_IN1, uint16_t IN1_Pin,
		GPIO_TypeDef *Port_IN2, uint16_t IN2_Pin,
		LPTIM_HandleTypeDef *Encoder_timer) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
	motor->pwm_timer.htim = Timer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	601a      	str	r2, [r3, #0]
	motor->pwm_timer.channel = PWM_Channel;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	605a      	str	r2, [r3, #4]

	motor->Port_IN1 = Port_IN1;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	609a      	str	r2, [r3, #8]
	motor->Port_IN2 = Port_IN2;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	60da      	str	r2, [r3, #12]
	motor->Pin_IN1 = IN1_Pin;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	8b3a      	ldrh	r2, [r7, #24]
 8000f60:	821a      	strh	r2, [r3, #16]
	motor->Pin_IN2 = IN2_Pin;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	8c3a      	ldrh	r2, [r7, #32]
 8000f66:	825a      	strh	r2, [r3, #18]
	motor->encoder_timer = Encoder_timer;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	619a      	str	r2, [r3, #24]

	DC_motor_encoder_Init(motor);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ffc8 	bl	8000f04 <DC_motor_encoder_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DC_set_speed>:

void DC_set_speed(dc_motor *motor, uint8_t speed) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
	if (speed > 100) speed = 100;
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <DC_set_speed+0x16>
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COUNTER(motor->pwm_timer.htim, 0);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <DC_set_speed+0x34>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fae:	e02c      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d105      	bne.n	8000fc4 <DC_set_speed+0x48>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fc2:	e022      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d105      	bne.n	8000fd8 <DC_set_speed+0x5c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000fd6:	e018      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b0c      	cmp	r3, #12
 8000fde:	d105      	bne.n	8000fec <DC_set_speed+0x70>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fea:	e00e      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d105      	bne.n	8001000 <DC_set_speed+0x84>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ffe:	e004      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DC_set_direction>:

void DC_set_direction(dc_motor *motor, DC_direction DIR) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	motor->DIR = DIR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	751a      	strb	r2, [r3, #20]

	if (motor->DIR == LEFT) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <DC_set_direction+0x3c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_RESET);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f003 f8ac 	bl	8004198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68d8      	ldr	r0, [r3, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8a5b      	ldrh	r3, [r3, #18]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	f003 f8a4 	bl	8004198 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
	}
}
 8001050:	e00f      	b.n	8001072 <DC_set_direction+0x5c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6898      	ldr	r0, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8a1b      	ldrh	r3, [r3, #16]
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f003 f89b 	bl	8004198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68d8      	ldr	r0, [r3, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a5b      	ldrh	r3, [r3, #18]
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f003 f893 	bl	8004198 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <DC_rotate>:

void DC_rotate(dc_motor *motor, DC_direction DIR, uint8_t speed) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
 8001086:	4613      	mov	r3, r2
 8001088:	70bb      	strb	r3, [r7, #2]
	DC_set_direction(motor, DIR);
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffc1 	bl	8001016 <DC_set_direction>
	DC_set_speed(motor, speed);
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff6f 	bl	8000f7c <DC_set_speed>

	HAL_TIM_PWM_Start(motor->pwm_timer.htim, motor->pwm_timer.channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f004 ff27 	bl	8005efc <HAL_TIM_PWM_Start>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <DC_stop>:

void DC_stop(dc_motor *motor) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8a1b      	ldrh	r3, [r3, #16]
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f003 f865 	bl	8004198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68d8      	ldr	r0, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8a5b      	ldrh	r3, [r3, #18]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f003 f85d 	bl	8004198 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <DC_stop+0x3c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2264      	movs	r2, #100	; 0x64
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f0:	e02c      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d105      	bne.n	8001106 <DC_stop+0x50>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001104:	e022      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d105      	bne.n	800111a <DC_stop+0x64>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001118:	e018      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d105      	bne.n	800112e <DC_stop+0x78>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800112c:	e00e      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d105      	bne.n	8001142 <DC_stop+0x8c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001140:	e004      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <DC_set_angle>:
}

uint16_t pulses_to_count;

void DC_set_angle(dc_motor *motor, uint16_t angle, uint8_t speed, DC_direction DIR)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	460b      	mov	r3, r1
 8001168:	707b      	strb	r3, [r7, #1]
 800116a:	4613      	mov	r3, r2
 800116c:	703b      	strb	r3, [r7, #0]
	if(CUTTING_PROCESS_FLAG == 0)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <DC_set_angle+0x70>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <DC_set_angle+0x66>
	{
		CUTTING_PROCESS_FLAG = 1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <DC_set_angle+0x70>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 0;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <DC_set_angle+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		pulses_to_count = (angle * FULL_ROTATION_PULSE * 2) / 360;
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	f242 3224 	movw	r2, #8996	; 0x2324
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <DC_set_angle+0x78>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	441a      	add	r2, r3
 8001196:	1212      	asrs	r2, r2, #8
 8001198:	17db      	asrs	r3, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <DC_set_angle+0x7c>)
 80011a0:	801a      	strh	r2, [r3, #0]
		__HAL_LPTIM_AUTORELOAD_SET(motor->encoder_timer, pulses_to_count);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <DC_set_angle+0x7c>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	619a      	str	r2, [r3, #24]
		DC_rotate(motor, DIR, speed);
 80011ae:	787a      	ldrb	r2, [r7, #1]
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff60 	bl	800107a <DC_rotate>
	}

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000e6 	.word	0x200000e6
 80011c8:	2000050c 	.word	0x2000050c
 80011cc:	b60b60b7 	.word	0xb60b60b7
 80011d0:	200000e4 	.word	0x200000e4

080011d4 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e01f      	b.n	8001224 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80011f4:	2201      	movs	r2, #1
 80011f6:	2102      	movs	r1, #2
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <SendByteSPI+0x60>)
 80011fa:	f002 ffcd 	bl	8004198 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8001200:	2200      	movs	r2, #0
 8001202:	2102      	movs	r1, #2
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <SendByteSPI+0x60>)
 8001206:	f002 ffc7 	bl	8004198 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <SendByteSPI+0x60>)
 8001210:	f002 ffc2 	bl	8004198 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8001214:	2201      	movs	r2, #1
 8001216:	2108      	movs	r1, #8
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <SendByteSPI+0x60>)
 800121a:	f002 ffbd 	bl	8004198 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b07      	cmp	r3, #7
 8001228:	dddc      	ble.n	80011e4 <SendByteSPI+0x10>

	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000800 	.word	0x48000800

08001238 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001248:	f002 ffa6 	bl	8004198 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 800124c:	20f8      	movs	r0, #248	; 0xf8
 800124e:	f7ff ffc1 	bl	80011d4 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffba 	bl	80011d4 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffb4 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fb87 	bl	8001980 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001278:	f002 ff8e 	bl	8004198 <HAL_GPIO_WritePin>

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000800 	.word	0x48000800

08001288 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001292:	2201      	movs	r2, #1
 8001294:	2104      	movs	r1, #4
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <ST7920_SendData+0x4c>)
 8001298:	f002 ff7e 	bl	8004198 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 800129c:	20fa      	movs	r0, #250	; 0xfa
 800129e:	f7ff ff99 	bl	80011d4 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f023 030f 	bic.w	r3, r3, #15
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff92 	bl	80011d4 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff8c 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fb5f 	bl	8001980 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <ST7920_SendData+0x4c>)
 80012c8:	f002 ff66 	bl	8004198 <HAL_GPIO_WritePin>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48000800 	.word	0x48000800

080012d8 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d81e      	bhi.n	8001328 <ST7920_SendString+0x50>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <ST7920_SendString+0x18>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001301 	.word	0x08001301
 80012f4:	0800130b 	.word	0x0800130b
 80012f8:	08001315 	.word	0x08001315
 80012fc:	0800131f 	.word	0x0800131f
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	60bb      	str	r3, [r7, #8]
            break;
 8001308:	e013      	b.n	8001332 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001310:	60bb      	str	r3, [r7, #8]
            break;
 8001312:	e00e      	b.n	8001332 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800131a:	60bb      	str	r3, [r7, #8]
            break;
 800131c:	e009      	b.n	8001332 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8001324:	60bb      	str	r3, [r7, #8]
            break;
 8001326:	e004      	b.n	8001332 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132e:	60bb      	str	r3, [r7, #8]
            break;
 8001330:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff7e 	bl	8001238 <ST7920_SendCmd>

    while (*string)
 800133c:	e006      	b.n	800134c <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff9e 	bl	8001288 <ST7920_SendData>
    while (*string)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f4      	bne.n	800133e <ST7920_SendString+0x66>
    	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d115      	bne.n	800139a <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 800136e:	2030      	movs	r0, #48	; 0x30
 8001370:	f7ff ff62 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001374:	2001      	movs	r0, #1
 8001376:	f002 fc47 	bl	8003c08 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800137a:	2034      	movs	r0, #52	; 0x34
 800137c:	f7ff ff5c 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001380:	2001      	movs	r0, #1
 8001382:	f002 fc41 	bl	8003c08 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 8001386:	2036      	movs	r0, #54	; 0x36
 8001388:	f7ff ff56 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 800138c:	2001      	movs	r0, #1
 800138e:	f002 fc3b 	bl	8003c08 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <ST7920_GraphicMode+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8001398:	e00b      	b.n	80013b2 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 80013a0:	2030      	movs	r0, #48	; 0x30
 80013a2:	f7ff ff49 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f002 fc2e 	bl	8003c08 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <ST7920_GraphicMode+0x5c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000090 	.word	0x20000090

080013c0 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
 80013cc:	e06a      	b.n	80014a4 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b1f      	cmp	r3, #31
 80013d2:	d830      	bhi.n	8001436 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e029      	b.n	800142e <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff28 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff21 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff3d 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff30 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d9d2      	bls.n	80013da <ST7920_DrawBitmap+0x1a>
 8001434:	e033      	b.n	800149e <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e02d      	b.n	8001498 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	3b20      	subs	r3, #32
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fef3 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff feec 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff08 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fefb 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9ce      	bls.n	800143c <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	d991      	bls.n	80013ce <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <ST7920_Update+0x10>)
 80014ba:	f7ff ff81 	bl	80013c0 <ST7920_DrawBitmap>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	200000ec 	.word	0x200000ec

080014c8 <ST7920_Clear>:



void ST7920_Clear()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <ST7920_Clear+0x98>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d13a      	bne.n	800154c <ST7920_Clear+0x84>
	{
		uint8_t x, y;
		memset(image, 0, sizeof(image));
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	2100      	movs	r1, #0
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <ST7920_Clear+0x9c>)
 80014de:	f006 fc8b 	bl	8007df8 <memset>
		for(y = 0; y < 64; y++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	e02d      	b.n	8001544 <ST7920_Clear+0x7c>
		{
			if(y < 32)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80a      	bhi.n	8001504 <ST7920_Clear+0x3c>
			{
				ST7920_SendCmd(0x80 | y);
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe9e 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 80014fc:	2080      	movs	r0, #128	; 0x80
 80014fe:	f7ff fe9b 	bl	8001238 <ST7920_SendCmd>
 8001502:	e00d      	b.n	8001520 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	3b20      	subs	r3, #32
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe8f 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 800151a:	2088      	movs	r0, #136	; 0x88
 800151c:	f7ff fe8c 	bl	8001238 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	e008      	b.n	8001538 <ST7920_Clear+0x70>
			{
				ST7920_SendData(0);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff feae 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(0);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff feab 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3301      	adds	r3, #1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9f3      	bls.n	8001526 <ST7920_Clear+0x5e>
		for(y = 0; y < 64; y++)
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	3301      	adds	r3, #1
 8001542:	71bb      	strb	r3, [r7, #6]
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b3f      	cmp	r3, #63	; 0x3f
 8001548:	d9ce      	bls.n	80014e8 <ST7920_Clear+0x20>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 800154a:	e005      	b.n	8001558 <ST7920_Clear+0x90>
		ST7920_SendCmd(0x01);   // clear the display using command
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fe73 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8001552:	2002      	movs	r0, #2
 8001554:	f002 fb58 	bl	8003c08 <HAL_Delay>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000090 	.word	0x20000090
 8001564:	200000ec 	.word	0x200000ec

08001568 <ST7920_Init>:


void ST7920_Init (void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	481c      	ldr	r0, [pc, #112]	; (80015e4 <ST7920_Init+0x7c>)
 8001572:	f002 fe11 	bl	8004198 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8001576:	200a      	movs	r0, #10
 8001578:	f002 fb46 	bl	8003c08 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 800157c:	2201      	movs	r2, #1
 800157e:	2101      	movs	r1, #1
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <ST7920_Init+0x7c>)
 8001582:	f002 fe09 	bl	8004198 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8001586:	2032      	movs	r0, #50	; 0x32
 8001588:	f002 fb3e 	bl	8003c08 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 800158c:	2030      	movs	r0, #48	; 0x30
 800158e:	f7ff fe53 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8001592:	206e      	movs	r0, #110	; 0x6e
 8001594:	f000 f9f4 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 8001598:	2030      	movs	r0, #48	; 0x30
 800159a:	f7ff fe4d 	bl	8001238 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 800159e:	2028      	movs	r0, #40	; 0x28
 80015a0:	f000 f9ee 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fe47 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 80015aa:	206e      	movs	r0, #110	; 0x6e
 80015ac:	f000 f9e8 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fe41 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80015b6:	200c      	movs	r0, #12
 80015b8:	f002 fb26 	bl	8003c08 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 80015bc:	2006      	movs	r0, #6
 80015be:	f7ff fe3b 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015c2:	2001      	movs	r0, #1
 80015c4:	f002 fb20 	bl	8003c08 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 80015c8:	200c      	movs	r0, #12
 80015ca:	f7ff fe35 	bl	8001238 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80015ce:	2001      	movs	r0, #1
 80015d0:	f002 fb1a 	bl	8003c08 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff fe2f 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 fb14 	bl	8003c08 <HAL_Delay>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	48000800 	.word	0x48000800

080015e8 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SetPixel+0xb8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d248      	bcs.n	8001694 <SetPixel+0xac>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SetPixel+0xbc>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	429a      	cmp	r2, r3
 800160a:	d243      	bcs.n	8001694 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <SetPixel+0xbc>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	08d2      	lsrs	r2, r2, #3
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SetPixel+0xc0>)
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	fa21 f303 	lsr.w	r3, r1, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

    *image = *p;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SetPixel+0xc0>)
 800164a:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <SetPixel+0xc4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	429a      	cmp	r2, r3
 8001654:	d202      	bcs.n	800165c <SetPixel+0x74>
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SetPixel+0xc4>)
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <SetPixel+0xc8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	429a      	cmp	r2, r3
 8001664:	d304      	bcc.n	8001670 <SetPixel+0x88>
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SetPixel+0xc8>)
 800166e:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SetPixel+0xcc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	429a      	cmp	r2, r3
 8001678:	d202      	bcs.n	8001680 <SetPixel+0x98>
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <SetPixel+0xcc>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SetPixel+0xd0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d304      	bcc.n	8001694 <SetPixel+0xac>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SetPixel+0xd0>)
 8001692:	701a      	strb	r2, [r3, #0]


  }

}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000001 	.word	0x20000001
 80016a8:	200000ec 	.word	0x200000ec
 80016ac:	200004ec 	.word	0x200004ec
 80016b0:	200004ee 	.word	0x200004ee
 80016b4:	200000e8 	.word	0x200000e8
 80016b8:	200004ed 	.word	0x200004ed

080016bc <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	4603      	mov	r3, r0
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	460b      	mov	r3, r1
 80016d4:	717b      	strb	r3, [r7, #5]
 80016d6:	4613      	mov	r3, r2
 80016d8:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 80016da:	797a      	ldrb	r2, [r7, #5]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d303      	bcc.n	80016ea <DrawLine+0x2e>
 80016e2:	797a      	ldrb	r2, [r7, #5]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	e002      	b.n	80016f0 <DrawLine+0x34>
 80016ea:	79fa      	ldrb	r2, [r7, #7]
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 80016f2:	793a      	ldrb	r2, [r7, #4]
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d303      	bcc.n	8001702 <DrawLine+0x46>
 80016fa:	793a      	ldrb	r2, [r7, #4]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	e002      	b.n	8001708 <DrawLine+0x4c>
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	429a      	cmp	r2, r3
 8001710:	d201      	bcs.n	8001716 <DrawLine+0x5a>
 8001712:	2301      	movs	r3, #1
 8001714:	e001      	b.n	800171a <DrawLine+0x5e>
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 800171c:	79ba      	ldrb	r2, [r7, #6]
 800171e:	793b      	ldrb	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d201      	bcs.n	8001728 <DrawLine+0x6c>
 8001724:	2301      	movs	r3, #1
 8001726:	e001      	b.n	800172c <DrawLine+0x70>
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff53 	bl	80015e8 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	429a      	cmp	r2, r3
 8001748:	d103      	bne.n	8001752 <DrawLine+0x96>
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	793b      	ldrb	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	d01e      	beq.n	8001790 <DrawLine+0xd4>
    int e2 = err + err;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	425b      	negs	r3, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd08      	ble.n	8001774 <DrawLine+0xb8>
    {
      err -= dy;
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4413      	add	r3, r2
 8001772:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	dadc      	bge.n	8001736 <DrawLine+0x7a>
    {
      err += dx;
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4413      	add	r3, r2
 800178c:	71bb      	strb	r3, [r7, #6]
  {
 800178e:	e7d2      	b.n	8001736 <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8001790:	bf00      	nop
    }
  }
}
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
	...

0800179c <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <DrawRectangle+0x10c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
	if (
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d26b      	bcs.n	800189e <DrawRectangle+0x102>
		y >= numRows
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <DrawRectangle+0x110>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
		x >= numCols ||
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d265      	bcs.n	800189e <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <DrawRectangle+0x10c>)
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	db05      	blt.n	80017ec <DrawRectangle+0x50>
		w = numCols - x;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <DrawRectangle+0x10c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <DrawRectangle+0x110>)
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	db05      	blt.n	8001806 <DrawRectangle+0x6a>
		h = numRows - y;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <DrawRectangle+0x110>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2d8      	uxtb	r0, r3
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f7ff ff4d 	bl	80016bc <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2d8      	uxtb	r0, r3
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b2dc      	uxtb	r4, r3
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	883b      	ldrh	r3, [r7, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4622      	mov	r2, r4
 800184c:	f7ff ff36 	bl	80016bc <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	b2d8      	uxtb	r0, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	b2dc      	uxtb	r4, r3
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	883b      	ldrh	r3, [r7, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4622      	mov	r2, r4
 800186a:	f7ff ff27 	bl	80016bc <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b2d8      	uxtb	r0, r3
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	b2d9      	uxtb	r1, r3
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2dc      	uxtb	r4, r3
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4622      	mov	r2, r4
 8001898:	f7ff ff10 	bl	80016bc <DrawLine>
 800189c:	e000      	b.n	80018a0 <DrawRectangle+0x104>
		return;
 800189e:	bf00      	nop
}
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000001 	.word	0x20000001
 80018ac:	20000000 	.word	0x20000000

080018b0 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
	if (
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d240      	bcs.n	800195c <DrawFilledRectangle+0xac>
		y >= numRows
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <DrawFilledRectangle+0xb8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
		x >= numCols ||
 80018e0:	88ba      	ldrh	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d23a      	bcs.n	800195c <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	db05      	blt.n	8001900 <DrawFilledRectangle+0x50>
		w = numCols - x;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	883b      	ldrh	r3, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4293      	cmp	r3, r2
 800190c:	db05      	blt.n	800191a <DrawFilledRectangle+0x6a>
		h = numRows - y;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e017      	b.n	8001950 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4413      	add	r3, r2
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b2dc      	uxtb	r4, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4413      	add	r3, r2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4622      	mov	r2, r4
 8001946:	f7ff feb9 	bl	80016bc <DrawLine>
	for (i = 0; i <= h; i++) {
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3301      	adds	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b29b      	uxth	r3, r3
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d2e2      	bcs.n	8001920 <DrawFilledRectangle+0x70>
 800195a:	e000      	b.n	800195e <DrawFilledRectangle+0xae>
		return;
 800195c:	bf00      	nop
	}
}
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	20000001 	.word	0x20000001
 8001968:	20000000 	.word	0x20000000

0800196c <delay_init>:
//#include "stm32f1xx.h"



void delay_init ()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <delay_init+0x10>)
 8001972:	f004 f983 	bl	8005c7c <HAL_TIM_Base_Start>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000061c 	.word	0x2000061c

08001980 <delay_us>:

void delay_us (uint16_t delay)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(_TIMER, 0);  // reset the counter
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <delay_us+0x30>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(_TIMER))<delay);  // wait for the delay to complete
 8001992:	bf00      	nop
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <delay_us+0x30>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3f9      	bcc.n	8001994 <delay_us+0x14>
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	2000061c 	.word	0x2000061c

080019b4 <encoder_init>:
extern dc_motor DC_motor;
extern filament_cutter FC_struct;
extern cursor_position cursor_pos;

void encoder_init(GPIO_TypeDef* GPIO_BTN_PORT, uint16_t Button_Pin, uint32_t debounce_time)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	460b      	mov	r3, r1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	817b      	strh	r3, [r7, #10]
	enc_btn.PORT = GPIO_BTN_PORT;
 80019c2:	4a13      	ldr	r2, [pc, #76]	; (8001a10 <encoder_init+0x5c>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6013      	str	r3, [r2, #0]
	enc_btn.PIN = Button_Pin;
 80019c8:	4a11      	ldr	r2, [pc, #68]	; (8001a10 <encoder_init+0x5c>)
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	8093      	strh	r3, [r2, #4]
	enc_btn.debounce_time = debounce_time;
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <encoder_init+0x5c>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60d3      	str	r3, [r2, #12]
	enc_btn.BTN_state = DEFA;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <encoder_init+0x5c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	741a      	strb	r2, [r3, #16]
	enc_btn.last_tick = 0;
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <encoder_init+0x5c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
	enc_btn.prev_enc_value = 0;
 80019e0:	4b0b      	ldr	r3, [pc, #44]	; (8001a10 <encoder_init+0x5c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	745a      	strb	r2, [r3, #17]

	ENC_Button_RegisterPressCallback(&ENC_Button_PressedTask);
 80019e6:	480b      	ldr	r0, [pc, #44]	; (8001a14 <encoder_init+0x60>)
 80019e8:	f000 f824 	bl	8001a34 <ENC_Button_RegisterPressCallback>

	__HAL_TIM_SET_AUTORELOAD(_ENC_TIMER, 601);
 80019ec:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <encoder_init+0x64>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f240 2259 	movw	r2, #601	; 0x259
 80019f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <encoder_init+0x64>)
 80019f8:	f240 2259 	movw	r2, #601	; 0x259
 80019fc:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(_ENC_TIMER, TIM_CHANNEL_ALL);
 80019fe:	213c      	movs	r1, #60	; 0x3c
 8001a00:	4805      	ldr	r0, [pc, #20]	; (8001a18 <encoder_init+0x64>)
 8001a02:	f004 fc8f 	bl	8006324 <HAL_TIM_Encoder_Start>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200004f4 	.word	0x200004f4
 8001a14:	08001b41 	.word	0x08001b41
 8001a18:	200005d0 	.word	0x200005d0

08001a1c <enc_get_counter>:


uint32_t enc_get_counter()
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_ENC_TIMER);
 8001a20:	4b03      	ldr	r3, [pc, #12]	; (8001a30 <enc_get_counter+0x14>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	200005d0 	.word	0x200005d0

08001a34 <ENC_Button_RegisterPressCallback>:


void ENC_Button_RegisterPressCallback(void *callback)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
	enc_btn.ButtonPressed = callback;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <ENC_Button_RegisterPressCallback+0x1c>)
 8001a40:	6153      	str	r3, [r2, #20]

}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200004f4 	.word	0x200004f4

08001a54 <ENC_Button_DebounceRoutine>:


void ENC_Button_DebounceRoutine(cursor_position* cur_postion)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - enc_btn.last_tick) > enc_btn.debounce_time)
 8001a5c:	f002 f8c8 	bl	8003bf0 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	1ad2      	subs	r2, r2, r3
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d915      	bls.n	8001a9c <ENC_Button_DebounceRoutine+0x48>
	{
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001a70:	2140      	movs	r1, #64	; 0x40
 8001a72:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <ENC_Button_DebounceRoutine+0x54>)
 8001a74:	f002 fb78 	bl	8004168 <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10b      	bne.n	8001a96 <ENC_Button_DebounceRoutine+0x42>
		{
			enc_btn.BTN_state = PRESSED;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a80:	2202      	movs	r2, #2
 8001a82:	741a      	strb	r2, [r3, #16]
			if(enc_btn.ButtonPressed != NULL)
 8001a84:	4b07      	ldr	r3, [pc, #28]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <ENC_Button_DebounceRoutine+0x48>
			{
				enc_btn.ButtonPressed(cur_postion);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
			enc_btn.BTN_state = DEFA;
		}

	}

}
 8001a94:	e002      	b.n	8001a9c <ENC_Button_DebounceRoutine+0x48>
			enc_btn.BTN_state = DEFA;
 8001a96:	4b03      	ldr	r3, [pc, #12]	; (8001aa4 <ENC_Button_DebounceRoutine+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	741a      	strb	r2, [r3, #16]
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200004f4 	.word	0x200004f4
 8001aa8:	48000400 	.word	0x48000400

08001aac <ENC_Button_IdleRoutine>:


void ENC_Button_IdleRoutine()
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001ab0:	2140      	movs	r1, #64	; 0x40
 8001ab2:	4808      	ldr	r0, [pc, #32]	; (8001ad4 <ENC_Button_IdleRoutine+0x28>)
 8001ab4:	f002 fb58 	bl	8004168 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <ENC_Button_IdleRoutine+0x22>
	{
		enc_btn.last_tick = HAL_GetTick();
 8001abe:	f002 f897 	bl	8003bf0 <HAL_GetTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <ENC_Button_IdleRoutine+0x2c>)
 8001ac6:	6093      	str	r3, [r2, #8]
		enc_btn.BTN_state = DEBOUNCE;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	; (8001ad8 <ENC_Button_IdleRoutine+0x2c>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	741a      	strb	r2, [r3, #16]
	}
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	200004f4 	.word	0x200004f4

08001adc <ENC_Button_PressedRoutine>:


void ENC_Button_PressedRoutine()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_SET)
 8001ae0:	2140      	movs	r1, #64	; 0x40
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <ENC_Button_PressedRoutine+0x1c>)
 8001ae4:	f002 fb40 	bl	8004168 <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d102      	bne.n	8001af4 <ENC_Button_PressedRoutine+0x18>
	{
		enc_btn.BTN_state = DEFA;
 8001aee:	4b03      	ldr	r3, [pc, #12]	; (8001afc <ENC_Button_PressedRoutine+0x20>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	741a      	strb	r2, [r3, #16]
	}
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	48000400 	.word	0x48000400
 8001afc:	200004f4 	.word	0x200004f4

08001b00 <ENC_Button_Action>:


void ENC_Button_Action(cursor_position* cur_postion)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
	switch(enc_btn.BTN_state)
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <ENC_Button_Action+0x3c>)
 8001b0a:	7c1b      	ldrb	r3, [r3, #16]
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d00d      	beq.n	8001b2c <ENC_Button_Action+0x2c>
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	dc0e      	bgt.n	8001b32 <ENC_Button_Action+0x32>
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d002      	beq.n	8001b1e <ENC_Button_Action+0x1e>
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d003      	beq.n	8001b24 <ENC_Button_Action+0x24>
		break;
	case PRESSED:
		ENC_Button_PressedRoutine();
		break;
	}
}
 8001b1c:	e009      	b.n	8001b32 <ENC_Button_Action+0x32>
		ENC_Button_IdleRoutine();
 8001b1e:	f7ff ffc5 	bl	8001aac <ENC_Button_IdleRoutine>
		break;
 8001b22:	e006      	b.n	8001b32 <ENC_Button_Action+0x32>
		ENC_Button_DebounceRoutine(cur_postion);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff95 	bl	8001a54 <ENC_Button_DebounceRoutine>
		break;
 8001b2a:	e002      	b.n	8001b32 <ENC_Button_Action+0x32>
		ENC_Button_PressedRoutine();
 8001b2c:	f7ff ffd6 	bl	8001adc <ENC_Button_PressedRoutine>
		break;
 8001b30:	bf00      	nop
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200004f4 	.word	0x200004f4

08001b40 <ENC_Button_PressedTask>:



//void ENC_Button_PressedTask(encoder_button* enc_btn, cursor_position* cursor_pos)
void ENC_Button_PressedTask(cursor_position* cursor_pos)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	if(cursor_pos->current_layer == FIRST_LAYER)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	799b      	ldrb	r3, [r3, #6]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d148      	bne.n	8001be2 <ENC_Button_PressedTask+0xa2>
	{
		if(cursor_pos->FL_position == SETTINGS)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d10b      	bne.n	8001b70 <ENC_Button_PressedTask+0x30>
		{
			clear_screen();
 8001b58:	f000 ff16 	bl	8002988 <clear_screen>
			settings_screen();
 8001b5c:	f000 ff4c 	bl	80029f8 <settings_screen>
			cursor_pos->current_layer = SECOND_LAYER;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <ENC_Button_PressedTask+0x24c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24


	}


}
 8001b6e:	e108      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->FL_position == START)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d110      	bne.n	8001b9a <ENC_Button_PressedTask+0x5a>
			FC_struct.parameters.ACTIVE_START_FLAG = 1;
 8001b78:	4b85      	ldr	r3, [pc, #532]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	761a      	strb	r2, [r3, #24]
			FC_struct.mode = EXTRUDE;
 8001b7e:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	701a      	strb	r2, [r3, #0]
			cursor_pos->FL_position = ACTIVE_START;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b8a:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <ENC_Button_PressedTask+0x24c>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
			FC_struct.parameters.current_qty = 0;
 8001b92:	4b7f      	ldr	r3, [pc, #508]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	751a      	strb	r2, [r3, #20]
}
 8001b98:	e0f3      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->FL_position == STOP)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	f040 80ef 	bne.w	8001d82 <ENC_Button_PressedTask+0x242>
			stepper_stop(&extruder);
 8001ba4:	487b      	ldr	r0, [pc, #492]	; (8001d94 <ENC_Button_PressedTask+0x254>)
 8001ba6:	f001 f8dd 	bl	8002d64 <stepper_stop>
			DC_stop(&DC_motor);
 8001baa:	487b      	ldr	r0, [pc, #492]	; (8001d98 <ENC_Button_PressedTask+0x258>)
 8001bac:	f7ff fa83 	bl	80010b6 <DC_stop>
			EXTRUDE_PROCESS_FLAG = 0;
 8001bb0:	4b7a      	ldr	r3, [pc, #488]	; (8001d9c <ENC_Button_PressedTask+0x25c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
			CUTTING_PROCESS_FLAG = 0;
 8001bb6:	4b7a      	ldr	r3, [pc, #488]	; (8001da0 <ENC_Button_PressedTask+0x260>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
			FC_struct.parameters.ACTIVE_START_FLAG = 0;
 8001bbc:	4b74      	ldr	r3, [pc, #464]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	761a      	strb	r2, [r3, #24]
			FC_struct.parameters.target_qty = FC_struct.parameters.current_qty;
 8001bc2:	4b73      	ldr	r3, [pc, #460]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001bc4:	7d1b      	ldrb	r3, [r3, #20]
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	4b71      	ldr	r3, [pc, #452]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001bca:	755a      	strb	r2, [r3, #21]
			FC_struct.mode = STANDBY;
 8001bcc:	4b70      	ldr	r3, [pc, #448]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001bd2:	4b6e      	ldr	r3, [pc, #440]	; (8001d8c <ENC_Button_PressedTask+0x24c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
}
 8001be0:	e0cf      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
	else if(cursor_pos->current_layer == SECOND_LAYER)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	799b      	ldrb	r3, [r3, #6]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d13f      	bne.n	8001c6a <ENC_Button_PressedTask+0x12a>
		if(cursor_pos->SL_position == BACK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	789b      	ldrb	r3, [r3, #2]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d106      	bne.n	8001c00 <ENC_Button_PressedTask+0xc0>
			cursor_pos->current_layer = FIRST_LAYER;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	719a      	strb	r2, [r3, #6]
			cursor_pos->FL_position = DEFAULT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	701a      	strb	r2, [r3, #0]
}
 8001bfe:	e0c0      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->SL_position == FIL_DIA)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d106      	bne.n	8001c16 <ENC_Button_PressedTask+0xd6>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	711a      	strb	r2, [r3, #4]
}
 8001c14:	e0b5      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->SL_position == FIL_DEN)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	789b      	ldrb	r3, [r3, #2]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d106      	bne.n	8001c2c <ENC_Button_PressedTask+0xec>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2202      	movs	r2, #2
 8001c22:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	711a      	strb	r2, [r3, #4]
}
 8001c2a:	e0aa      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->SL_position == SAMPLE_WEIGHT)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	789b      	ldrb	r3, [r3, #2]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d10a      	bne.n	8001c4a <ENC_Button_PressedTask+0x10a>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = WEIGHT;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2205      	movs	r2, #5
 8001c3e:	711a      	strb	r2, [r3, #4]
			clear_screen();
 8001c40:	f000 fea2 	bl	8002988 <clear_screen>
			weight_screen();
 8001c44:	f000 ffea 	bl	8002c1c <weight_screen>
}
 8001c48:	e09b      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->SL_position == QUANTITY)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	789b      	ldrb	r3, [r3, #2]
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	f040 8097 	bne.w	8001d82 <ENC_Button_PressedTask+0x242>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QTY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2206      	movs	r2, #6
 8001c5e:	711a      	strb	r2, [r3, #4]
			clear_screen();
 8001c60:	f000 fe92 	bl	8002988 <clear_screen>
			quantity_screen();
 8001c64:	f001 f82c 	bl	8002cc0 <quantity_screen>
}
 8001c68:	e08b      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
	else if(cursor_pos->current_layer == THIRD_LAYER)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	799b      	ldrb	r3, [r3, #6]
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	f040 8087 	bne.w	8001d82 <ENC_Button_PressedTask+0x242>
		if(cursor_pos->TL_position == DIAMETER_175)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	791b      	ldrb	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d10d      	bne.n	8001c98 <ENC_Button_PressedTask+0x158>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_175;
 8001c88:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001c8a:	4a46      	ldr	r2, [pc, #280]	; (8001da4 <ENC_Button_PressedTask+0x264>)
 8001c8c:	609a      	str	r2, [r3, #8]
			clear_screen();
 8001c8e:	f000 fe7b 	bl	8002988 <clear_screen>
			settings_screen();
 8001c92:	f000 feb1 	bl	80029f8 <settings_screen>
}
 8001c96:	e074      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == DIAMETER_285)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	791b      	ldrb	r3, [r3, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d10d      	bne.n	8001cbc <ENC_Button_PressedTask+0x17c>
			cursor_pos->current_layer = SECOND_LAYER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_285;
 8001cac:	4b38      	ldr	r3, [pc, #224]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001cae:	4a3e      	ldr	r2, [pc, #248]	; (8001da8 <ENC_Button_PressedTask+0x268>)
 8001cb0:	609a      	str	r2, [r3, #8]
			clear_screen();
 8001cb2:	f000 fe69 	bl	8002988 <clear_screen>
			settings_screen();
 8001cb6:	f000 fe9f 	bl	80029f8 <settings_screen>
}
 8001cba:	e062      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == DENSITY_PLA)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	791b      	ldrb	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d10d      	bne.n	8001ce0 <ENC_Button_PressedTask+0x1a0>
			cursor_pos->current_layer = SECOND_LAYER;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_PLA;
 8001cd0:	4b2f      	ldr	r3, [pc, #188]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001cd2:	4a36      	ldr	r2, [pc, #216]	; (8001dac <ENC_Button_PressedTask+0x26c>)
 8001cd4:	605a      	str	r2, [r3, #4]
			clear_screen();
 8001cd6:	f000 fe57 	bl	8002988 <clear_screen>
			settings_screen();
 8001cda:	f000 fe8d 	bl	80029f8 <settings_screen>
}
 8001cde:	e050      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == DENSITY_ABS)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d10d      	bne.n	8001d04 <ENC_Button_PressedTask+0x1c4>
			cursor_pos->current_layer = SECOND_LAYER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2202      	movs	r2, #2
 8001cf2:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_ABS;
 8001cf4:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001cf6:	4a2e      	ldr	r2, [pc, #184]	; (8001db0 <ENC_Button_PressedTask+0x270>)
 8001cf8:	605a      	str	r2, [r3, #4]
			clear_screen();
 8001cfa:	f000 fe45 	bl	8002988 <clear_screen>
			settings_screen();
 8001cfe:	f000 fe7b 	bl	80029f8 <settings_screen>
}
 8001d02:	e03e      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == DENSITY_PETG)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	791b      	ldrb	r3, [r3, #4]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d10d      	bne.n	8001d28 <ENC_Button_PressedTask+0x1e8>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = FIL_DEN;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2202      	movs	r2, #2
 8001d16:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.filament_density = Filament_density_PETG;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <ENC_Button_PressedTask+0x274>)
 8001d1c:	605a      	str	r2, [r3, #4]
			clear_screen();
 8001d1e:	f000 fe33 	bl	8002988 <clear_screen>
			settings_screen();
 8001d22:	f000 fe69 	bl	80029f8 <settings_screen>
}
 8001d26:	e02c      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == WEIGHT)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	791b      	ldrb	r3, [r3, #4]
 8001d2c:	2b05      	cmp	r3, #5
 8001d2e:	d10e      	bne.n	8001d4e <ENC_Button_PressedTask+0x20e>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2203      	movs	r2, #3
 8001d3a:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = FC_struct.parameters.temp_weight;
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d3e:	89da      	ldrh	r2, [r3, #14]
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d42:	819a      	strh	r2, [r3, #12]
			clear_screen();
 8001d44:	f000 fe20 	bl	8002988 <clear_screen>
			settings_screen();
 8001d48:	f000 fe56 	bl	80029f8 <settings_screen>
}
 8001d4c:	e019      	b.n	8001d82 <ENC_Button_PressedTask+0x242>
		else if(cursor_pos->TL_position == QTY)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	791b      	ldrb	r3, [r3, #4]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d115      	bne.n	8001d82 <ENC_Button_PressedTask+0x242>
			FC_struct.parameters.target_qty = FC_struct.parameters.temp_qty - 1;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d58:	7d9b      	ldrb	r3, [r3, #22]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d60:	755a      	strb	r2, [r3, #21]
			FC_struct.parameters.current_qty = FC_struct.parameters.temp_qty - 1;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d64:	7d9b      	ldrb	r3, [r3, #22]
 8001d66:	3b01      	subs	r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <ENC_Button_PressedTask+0x250>)
 8001d6c:	751a      	strb	r2, [r3, #20]
			cursor_pos->current_layer = SECOND_LAYER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QUANTITY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	711a      	strb	r2, [r3, #4]
			clear_screen();
 8001d7a:	f000 fe05 	bl	8002988 <clear_screen>
			settings_screen();
 8001d7e:	f000 fe3b 	bl	80029f8 <settings_screen>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200005d0 	.word	0x200005d0
 8001d90:	20000528 	.word	0x20000528
 8001d94:	20000094 	.word	0x20000094
 8001d98:	200000b8 	.word	0x200000b8
 8001d9c:	2000050c 	.word	0x2000050c
 8001da0:	200000e6 	.word	0x200000e6
 8001da4:	3fe00000 	.word	0x3fe00000
 8001da8:	40366666 	.word	0x40366666
 8001dac:	3f9eb852 	.word	0x3f9eb852
 8001db0:	3f851eb8 	.word	0x3f851eb8
 8001db4:	3f9d70a4 	.word	0x3f9d70a4

08001db8 <Filament_Cutter_Init>:
extern stepper_motor extruder;
extern dc_motor DC_motor;
extern cursor_position cursor_pos;

void Filament_Cutter_Init(stepper_motor *motor, dc_motor* dc_motor)
{
 8001db8:	b4b0      	push	{r4, r5, r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	FC_params.filament_density = Filament_density_PLA;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001dc4:	4a19      	ldr	r2, [pc, #100]	; (8001e2c <Filament_Cutter_Init+0x74>)
 8001dc6:	601a      	str	r2, [r3, #0]
	FC_params.filament_diameter = Filament_diameter_175;
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001dca:	4a19      	ldr	r2, [pc, #100]	; (8001e30 <Filament_Cutter_Init+0x78>)
 8001dcc:	605a      	str	r2, [r3, #4]
	FC_params.sample_quantities = 1;
 8001dce:	4b16      	ldr	r3, [pc, #88]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	731a      	strb	r2, [r3, #12]
	FC_params.target_weight = Sample_weight_5g;
 8001dd4:	4b14      	ldr	r3, [pc, #80]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	811a      	strh	r2, [r3, #8]
	FC_params.current_length_cm = 0;
 8001dda:	4b13      	ldr	r3, [pc, #76]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	81da      	strh	r2, [r3, #14]
	FC_params.target_qty = 0;
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	745a      	strb	r2, [r3, #17]
	FC_params.current_qty = 0;
 8001de6:	4b10      	ldr	r3, [pc, #64]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	741a      	strb	r2, [r3, #16]
	FC_params.ACTIVE_START_FLAG = 0;
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	751a      	strb	r2, [r3, #20]
	FC_params.temp_qty_increment = 1;
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	74da      	strb	r2, [r3, #19]



	FC_struct.motor = motor;
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <Filament_Cutter_Init+0x7c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6213      	str	r3, [r2, #32]
	FC_struct.dc_motor = dc_motor;
 8001dfe:	4a0d      	ldr	r2, [pc, #52]	; (8001e34 <Filament_Cutter_Init+0x7c>)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	61d3      	str	r3, [r2, #28]
	FC_struct.mode = STANDBY;
 8001e04:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <Filament_Cutter_Init+0x7c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	701a      	strb	r2, [r3, #0]
	FC_struct.parameters = FC_params;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <Filament_Cutter_Init+0x7c>)
 8001e0c:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <Filament_Cutter_Init+0x70>)
 8001e0e:	1d1c      	adds	r4, r3, #4
 8001e10:	4615      	mov	r5, r2
 8001e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e1a:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bcb0      	pop	{r4, r5, r7}
 8001e26:	4770      	bx	lr
 8001e28:	20000510 	.word	0x20000510
 8001e2c:	3f9eb852 	.word	0x3f9eb852
 8001e30:	3fe00000 	.word	0x3fe00000
 8001e34:	20000528 	.word	0x20000528

08001e38 <motors_update>:



void motors_update(stepper_motor *motor, dc_motor* dc_motor)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
//	{
//		prev_mode = FC_struct.mode;
//		printf("Mode: %d\n", prev_mode);
//	}

	switch(FC_struct.mode)
 8001e42:	4b1f      	ldr	r3, [pc, #124]	; (8001ec0 <motors_update+0x88>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d029      	beq.n	8001ea0 <motors_update+0x68>
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	dc32      	bgt.n	8001eb6 <motors_update+0x7e>
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d002      	beq.n	8001e5a <motors_update+0x22>
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d01a      	beq.n	8001e8e <motors_update+0x56>
		stepper_stop(&extruder);
		DC_set_angle(dc_motor, 360, 50, RIGHT);

		break;
	}
}
 8001e58:	e02d      	b.n	8001eb6 <motors_update+0x7e>
		DC_stop(&DC_motor);
 8001e5a:	481a      	ldr	r0, [pc, #104]	; (8001ec4 <motors_update+0x8c>)
 8001e5c:	f7ff f92b 	bl	80010b6 <DC_stop>
		if(FC_struct.parameters.current_qty != FC_struct.parameters.target_qty)
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <motors_update+0x88>)
 8001e62:	7d1b      	ldrb	r3, [r3, #20]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <motors_update+0x88>)
 8001e68:	7d5b      	ldrb	r3, [r3, #21]
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d00a      	beq.n	8001e86 <motors_update+0x4e>
			FC_struct.mode = EXTRUDE;
 8001e70:	4b13      	ldr	r3, [pc, #76]	; (8001ec0 <motors_update+0x88>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
			FC_struct.parameters.current_qty++;
 8001e76:	4b12      	ldr	r3, [pc, #72]	; (8001ec0 <motors_update+0x88>)
 8001e78:	7d1b      	ldrb	r3, [r3, #20]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	4b0f      	ldr	r3, [pc, #60]	; (8001ec0 <motors_update+0x88>)
 8001e82:	751a      	strb	r2, [r3, #20]
		break;
 8001e84:	e017      	b.n	8001eb6 <motors_update+0x7e>
			FC_struct.parameters.ACTIVE_START_FLAG = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <motors_update+0x88>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	761a      	strb	r2, [r3, #24]
		break;
 8001e8c:	e013      	b.n	8001eb6 <motors_update+0x7e>
		HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_SET);
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2104      	movs	r1, #4
 8001e92:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <motors_update+0x90>)
 8001e94:	f002 f980 	bl	8004198 <HAL_GPIO_WritePin>
		stepper_extrude_weight(motor);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f001 f945 	bl	8003128 <stepper_extrude_weight>
		break;
 8001e9e:	e00a      	b.n	8001eb6 <motors_update+0x7e>
		stepper_stop(&extruder);
 8001ea0:	480a      	ldr	r0, [pc, #40]	; (8001ecc <motors_update+0x94>)
 8001ea2:	f000 ff5f 	bl	8002d64 <stepper_stop>
		DC_set_angle(dc_motor, 360, 50, RIGHT);
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	2232      	movs	r2, #50	; 0x32
 8001eaa:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001eae:	6838      	ldr	r0, [r7, #0]
 8001eb0:	f7ff f950 	bl	8001154 <DC_set_angle>
		break;
 8001eb4:	bf00      	nop
}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000528 	.word	0x20000528
 8001ec4:	200000b8 	.word	0x200000b8
 8001ec8:	48000c00 	.word	0x48000c00
 8001ecc:	20000094 	.word	0x20000094

08001ed0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed6:	f107 0314 	add.w	r3, r7, #20
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ee6:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <MX_GPIO_Init+0x144>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eea:	4a4a      	ldr	r2, [pc, #296]	; (8002014 <MX_GPIO_Init+0x144>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ef2:	4b48      	ldr	r3, [pc, #288]	; (8002014 <MX_GPIO_Init+0x144>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	613b      	str	r3, [r7, #16]
 8001efc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001efe:	4b45      	ldr	r3, [pc, #276]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	4a44      	ldr	r2, [pc, #272]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0a:	4b42      	ldr	r3, [pc, #264]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1a:	4a3e      	ldr	r2, [pc, #248]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f2e:	4b39      	ldr	r3, [pc, #228]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	4a38      	ldr	r2, [pc, #224]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f34:	f043 0308 	orr.w	r3, r3, #8
 8001f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	607b      	str	r3, [r7, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f46:	4b33      	ldr	r3, [pc, #204]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4a:	4a32      	ldr	r2, [pc, #200]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f4c:	f043 0302 	orr.w	r3, r3, #2
 8001f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f52:	4b30      	ldr	r3, [pc, #192]	; (8002014 <MX_GPIO_Init+0x144>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	603b      	str	r3, [r7, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001f64:	482c      	ldr	r0, [pc, #176]	; (8002018 <MX_GPIO_Init+0x148>)
 8001f66:	f002 f917 	bl	8004198 <HAL_GPIO_WritePin>
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2120      	movs	r1, #32
 8001f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f72:	f002 f911 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2104      	movs	r1, #4
 8001f7a:	4828      	ldr	r0, [pc, #160]	; (800201c <MX_GPIO_Init+0x14c>)
 8001f7c:	f002 f90c 	bl	8004198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f86:	4b26      	ldr	r3, [pc, #152]	; (8002020 <MX_GPIO_Init+0x150>)
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4820      	ldr	r0, [pc, #128]	; (8002018 <MX_GPIO_Init+0x148>)
 8001f96:	f001 ff6d 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f9a:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001f9e:	617b      	str	r3, [r7, #20]
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4819      	ldr	r0, [pc, #100]	; (8002018 <MX_GPIO_Init+0x148>)
 8001fb4:	f001 ff5e 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001fb8:	2320      	movs	r3, #32
 8001fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	f107 0314 	add.w	r3, r7, #20
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd2:	f001 ff4f 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTRD_SLEEP_Pin;
 8001fd6:	2304      	movs	r3, #4
 8001fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRD_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8001fe6:	f107 0314 	add.w	r3, r7, #20
 8001fea:	4619      	mov	r1, r3
 8001fec:	480b      	ldr	r0, [pc, #44]	; (800201c <MX_GPIO_Init+0x14c>)
 8001fee:	f001 ff41 	bl	8003e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001ff2:	2340      	movs	r3, #64	; 0x40
 8001ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <MX_GPIO_Init+0x154>)
 8002006:	f001 ff35 	bl	8003e74 <HAL_GPIO_Init>

}
 800200a:	bf00      	nop
 800200c:	3728      	adds	r7, #40	; 0x28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	48000800 	.word	0x48000800
 800201c:	48000c00 	.word	0x48000c00
 8002020:	10210000 	.word	0x10210000
 8002024:	48000400 	.word	0x48000400

08002028 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 800202c:	4b16      	ldr	r3, [pc, #88]	; (8002088 <MX_LPTIM1_Init+0x60>)
 800202e:	4a17      	ldr	r2, [pc, #92]	; (800208c <MX_LPTIM1_Init+0x64>)
 8002030:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002032:	4b15      	ldr	r3, [pc, #84]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002038:	4b13      	ldr	r3, [pc, #76]	; (8002088 <MX_LPTIM1_Init+0x60>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800203e:	4b12      	ldr	r3, [pc, #72]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8002044:	4b10      	ldr	r3, [pc, #64]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 800204a:	4b0f      	ldr	r3, [pc, #60]	; (8002088 <MX_LPTIM1_Init+0x60>)
 800204c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002050:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002052:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002054:	2200      	movs	r2, #0
 8002056:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <MX_LPTIM1_Init+0x60>)
 800205a:	2200      	movs	r2, #0
 800205c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 800205e:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002060:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002064:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002066:	4b08      	ldr	r3, [pc, #32]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002068:	2200      	movs	r2, #0
 800206a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 800206c:	4b06      	ldr	r3, [pc, #24]	; (8002088 <MX_LPTIM1_Init+0x60>)
 800206e:	2200      	movs	r2, #0
 8002070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002072:	4805      	ldr	r0, [pc, #20]	; (8002088 <MX_LPTIM1_Init+0x60>)
 8002074:	f002 f8a8 	bl	80041c8 <HAL_LPTIM_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 800207e:	f000 f959 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	2000054c 	.word	0x2000054c
 800208c:	40007c00 	.word	0x40007c00

08002090 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b0a4      	sub	sp, #144	; 0x90
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002098:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	605a      	str	r2, [r3, #4]
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	60da      	str	r2, [r3, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020a8:	f107 0314 	add.w	r3, r7, #20
 80020ac:	2268      	movs	r2, #104	; 0x68
 80020ae:	2100      	movs	r1, #0
 80020b0:	4618      	mov	r0, r3
 80020b2:	f005 fea1 	bl	8007df8 <memset>
  if(lptimHandle->Instance==LPTIM1)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a25      	ldr	r2, [pc, #148]	; (8002150 <HAL_LPTIM_MspInit+0xc0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d142      	bne.n	8002146 <HAL_LPTIM_MspInit+0xb6>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80020c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020c4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020ca:	f107 0314 	add.w	r3, r7, #20
 80020ce:	4618      	mov	r0, r3
 80020d0:	f003 fa1e 	bl	8005510 <HAL_RCCEx_PeriphCLKConfig>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 80020da:	f000 f92b 	bl	8002334 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 80020e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e2:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 80020e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020e8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_LPTIM_MspInit+0xc4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = DC_ENC_B_Pin|DC_ENC_A_Pin;
 800210e:	23a0      	movs	r3, #160	; 0xa0
 8002110:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8002124:	2301      	movs	r3, #1
 8002126:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800212e:	4619      	mov	r1, r3
 8002130:	4809      	ldr	r0, [pc, #36]	; (8002158 <HAL_LPTIM_MspInit+0xc8>)
 8002132:	f001 fe9f 	bl	8003e74 <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2100      	movs	r1, #0
 800213a:	2041      	movs	r0, #65	; 0x41
 800213c:	f001 fe63 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8002140:	2041      	movs	r0, #65	; 0x41
 8002142:	f001 fe7c 	bl	8003e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8002146:	bf00      	nop
 8002148:	3790      	adds	r7, #144	; 0x90
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40007c00 	.word	0x40007c00
 8002154:	40021000 	.word	0x40021000
 8002158:	48000400 	.word	0x48000400

0800215c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002162:	f001 fcd5 	bl	8003b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002166:	f000 f859 	bl	800221c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800216a:	f7ff feb1 	bl	8001ed0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800216e:	f001 fc19 	bl	80039a4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8002172:	f001 f8f5 	bl	8003360 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002176:	f001 f9a1 	bl	80034bc <MX_TIM2_Init>
  MX_TIM3_Init();
 800217a:	f001 f9ef 	bl	800355c <MX_TIM3_Init>
  MX_TIM6_Init();
 800217e:	f001 fa43 	bl	8003608 <MX_TIM6_Init>
  MX_TIM16_Init();
 8002182:	f001 fa77 	bl	8003674 <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8002186:	f7ff ff4f 	bl	8002028 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  encoder_init(ENC_BTN_GPIO_Port, ENC_BTN_Pin, 20);
 800218a:	2214      	movs	r2, #20
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	481a      	ldr	r0, [pc, #104]	; (80021f8 <main+0x9c>)
 8002190:	f7ff fc10 	bl	80019b4 <encoder_init>
  delay_init();
 8002194:	f7ff fbea 	bl	800196c <delay_init>
  ST7920_Init();
 8002198:	f7ff f9e6 	bl	8001568 <ST7920_Init>
  stepper_init(&extruder, &htim1, TIM_CHANNEL_1, &htim2, EXT_DIR_GPIO_Port,
 800219c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	4b16      	ldr	r3, [pc, #88]	; (80021fc <main+0xa0>)
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <main+0xa4>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	4916      	ldr	r1, [pc, #88]	; (8002204 <main+0xa8>)
 80021ac:	4816      	ldr	r0, [pc, #88]	; (8002208 <main+0xac>)
 80021ae:	f000 fdbd 	bl	8002d2c <stepper_init>
  EXT_DIR_Pin);
  DC_motor_Init(&DC_motor, &htim16, TIM_CHANNEL_1, CUT_DIR_IN1_GPIO_Port,
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <main+0xb0>)
 80021b4:	9303      	str	r3, [sp, #12]
 80021b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021ba:	9302      	str	r3, [sp, #8]
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <main+0xa0>)
 80021be:	9301      	str	r3, [sp, #4]
 80021c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <main+0xa0>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	4911      	ldr	r1, [pc, #68]	; (8002210 <main+0xb4>)
 80021cc:	4811      	ldr	r0, [pc, #68]	; (8002214 <main+0xb8>)
 80021ce:	f7fe feb2 	bl	8000f36 <DC_motor_Init>
  CUT_DIR_IN1_Pin, CUT_DIR_IN2_GPIO_Port, CUT_DIR_IN2_Pin, &hlptim1);
  Init_menu(&cursor_pos);
 80021d2:	4811      	ldr	r0, [pc, #68]	; (8002218 <main+0xbc>)
 80021d4:	f000 fadb 	bl	800278e <Init_menu>
  Filament_Cutter_Init(&extruder, &DC_motor);
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <main+0xb8>)
 80021da:	480b      	ldr	r0, [pc, #44]	; (8002208 <main+0xac>)
 80021dc:	f7ff fdec 	bl	8001db8 <Filament_Cutter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		motors_update(&extruder, &DC_motor);
 80021e0:	490c      	ldr	r1, [pc, #48]	; (8002214 <main+0xb8>)
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <main+0xac>)
 80021e4:	f7ff fe28 	bl	8001e38 <motors_update>
		ENC_Button_Action(&cursor_pos);
 80021e8:	480b      	ldr	r0, [pc, #44]	; (8002218 <main+0xbc>)
 80021ea:	f7ff fc89 	bl	8001b00 <ENC_Button_Action>
		menu_update(&cursor_pos);
 80021ee:	480a      	ldr	r0, [pc, #40]	; (8002218 <main+0xbc>)
 80021f0:	f000 fa9e 	bl	8002730 <menu_update>
		motors_update(&extruder, &DC_motor);
 80021f4:	e7f4      	b.n	80021e0 <main+0x84>
 80021f6:	bf00      	nop
 80021f8:	48000400 	.word	0x48000400
 80021fc:	48000800 	.word	0x48000800
 8002200:	200006b4 	.word	0x200006b4
 8002204:	20000668 	.word	0x20000668
 8002208:	20000094 	.word	0x20000094
 800220c:	2000054c 	.word	0x2000054c
 8002210:	20000700 	.word	0x20000700
 8002214:	200000b8 	.word	0x200000b8
 8002218:	200005c8 	.word	0x200005c8

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b096      	sub	sp, #88	; 0x58
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	2244      	movs	r2, #68	; 0x44
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f005 fde4 	bl	8007df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	463b      	mov	r3, r7
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
 8002236:	605a      	str	r2, [r3, #4]
 8002238:	609a      	str	r2, [r3, #8]
 800223a:	60da      	str	r2, [r3, #12]
 800223c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800223e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002242:	f002 fae9 	bl	8004818 <HAL_PWREx_ControlVoltageScaling>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800224c:	f000 f872 	bl	8002334 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002250:	2302      	movs	r3, #2
 8002252:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002254:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800225a:	2340      	movs	r3, #64	; 0x40
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800225e:	2302      	movs	r3, #2
 8002260:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002262:	2302      	movs	r3, #2
 8002264:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002266:	2301      	movs	r3, #1
 8002268:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800226a:	230a      	movs	r3, #10
 800226c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800226e:	2307      	movs	r3, #7
 8002270:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002272:	2302      	movs	r3, #2
 8002274:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002276:	2302      	movs	r3, #2
 8002278:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4618      	mov	r0, r3
 8002280:	f002 fb20 	bl	80048c4 <HAL_RCC_OscConfig>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800228a:	f000 f853 	bl	8002334 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800228e:	230f      	movs	r3, #15
 8002290:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002292:	2303      	movs	r3, #3
 8002294:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800229a:	2300      	movs	r3, #0
 800229c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80022a2:	463b      	mov	r3, r7
 80022a4:	2104      	movs	r1, #4
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 ff2c 	bl	8005104 <HAL_RCC_ClockConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022b2:	f000 f83f 	bl	8002334 <Error_Handler>
  }
}
 80022b6:	bf00      	nop
 80022b8:	3758      	adds	r7, #88	; 0x58
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

	FC_struct.mode = STANDBY;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
	//FC_struct.parameters.current_qty = 0;
	if(FC_struct.parameters.current_qty == (FC_struct.parameters.target_qty - 1))
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_LPTIM_AutoReloadMatchCallback+0x24>)
 80022d0:	7d1b      	ldrb	r3, [r3, #20]
	{
		//cursor_pos.FL_position = DEFAULT;
	}

	CUTTING_PROCESS_FLAG = 0;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <HAL_LPTIM_AutoReloadMatchCallback+0x28>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]
	//printf("DC_INT\n");

}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	20000528 	.word	0x20000528
 80022e8:	200000e6 	.word	0x200000e6

080022ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	if(FIRST_MISS_FLAG == 1)
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d10c      	bne.n	8002318 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (htim->Instance == extruder.slave_timer.htim->Instance)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d105      	bne.n	8002318 <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			EXTRUDE_PROCESS_FLAG = 0;
 800230c:	4b07      	ldr	r3, [pc, #28]	; (800232c <HAL_TIM_PeriodElapsedCallback+0x40>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = CUTTING;
 8002312:	4b07      	ldr	r3, [pc, #28]	; (8002330 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8002314:	2202      	movs	r2, #2
 8002316:	701a      	strb	r2, [r3, #0]
			//printf("EXTR_INT\n");
		}
	}
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	200004f0 	.word	0x200004f0
 8002328:	20000094 	.word	0x20000094
 800232c:	2000050c 	.word	0x2000050c
 8002330:	20000528 	.word	0x20000528

08002334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002338:	b672      	cpsid	i
}
 800233a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800233c:	e7fe      	b.n	800233c <Error_Handler+0x8>
	...

08002340 <update_first_layer>:
extern filament_cutter FC_struct;
extern dc_motor DC_motor;
extern encoder_button enc_btn;

void update_first_layer(cursor_position* curr_position)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	if(curr_position->FL_position != curr_position->FL_prev_position)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	785b      	ldrb	r3, [r3, #1]
 8002350:	429a      	cmp	r2, r3
 8002352:	d066      	beq.n	8002422 <update_first_layer+0xe2>
	{
		switch(curr_position->FL_position)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d85d      	bhi.n	8002418 <update_first_layer+0xd8>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <update_first_layer+0x24>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	08002379 	.word	0x08002379
 8002368:	08002399 	.word	0x08002399
 800236c:	080023bb 	.word	0x080023bb
 8002370:	080023d5 	.word	0x080023d5
 8002374:	080023f7 	.word	0x080023f7
		{
			case DEFAULT:
			DC_stop(&DC_motor);
 8002378:	482c      	ldr	r0, [pc, #176]	; (800242c <update_first_layer+0xec>)
 800237a:	f7fe fe9c 	bl	80010b6 <DC_stop>
			ST7920_GraphicMode(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe ffee 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002384:	f7ff f8a0 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe ffe9 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800238e:	f7ff f89b 	bl	80014c8 <ST7920_Clear>

			default_screen();
 8002392:	f000 fb07 	bl	80029a4 <default_screen>
			break;
 8002396:	e040      	b.n	800241a <update_first_layer+0xda>

			case START:
			default_screen();
 8002398:	f000 fb04 	bl	80029a4 <default_screen>

			// highlighting "START"
			ST7920_GraphicMode(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe ffdf 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(88, 48, 80, 16);
 80023a2:	2310      	movs	r3, #16
 80023a4:	2250      	movs	r2, #80	; 0x50
 80023a6:	2130      	movs	r1, #48	; 0x30
 80023a8:	2058      	movs	r0, #88	; 0x58
 80023aa:	f7ff fa81 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80023ae:	f7ff f881 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe ffd4 	bl	8001360 <ST7920_GraphicMode>
			break;
 80023b8:	e02f      	b.n	800241a <update_first_layer+0xda>

			case ACTIVE_START:
			ST7920_GraphicMode(1);
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7fe ffd0 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023c0:	f7ff f882 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7fe ffcb 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80023ca:	f7ff f87d 	bl	80014c8 <ST7920_Clear>
			active_start_screen();
 80023ce:	f000 fc5d 	bl	8002c8c <active_start_screen>


			break;
 80023d2:	e022      	b.n	800241a <update_first_layer+0xda>


			case STOP:
			active_start_screen();
 80023d4:	f000 fc5a 	bl	8002c8c <active_start_screen>

			// highlighting
			ST7920_GraphicMode(1);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7fe ffc1 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(48, 50, 35, 16);
 80023de:	2310      	movs	r3, #16
 80023e0:	2223      	movs	r2, #35	; 0x23
 80023e2:	2132      	movs	r1, #50	; 0x32
 80023e4:	2030      	movs	r0, #48	; 0x30
 80023e6:	f7ff fa63 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80023ea:	f7ff f863 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80023ee:	2000      	movs	r0, #0
 80023f0:	f7fe ffb6 	bl	8001360 <ST7920_GraphicMode>
			break;
 80023f4:	e011      	b.n	800241a <update_first_layer+0xda>

			case SETTINGS:
			default_screen();
 80023f6:	f000 fad5 	bl	80029a4 <default_screen>
			// highlighting "SETTINGS"
			ST7920_GraphicMode(1);
 80023fa:	2001      	movs	r0, #1
 80023fc:	f7fe ffb0 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 16, 80, 16);
 8002400:	2310      	movs	r3, #16
 8002402:	2250      	movs	r2, #80	; 0x50
 8002404:	2110      	movs	r1, #16
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fa52 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800240c:	f7ff f852 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe ffa5 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002416:	e000      	b.n	800241a <update_first_layer+0xda>

			default:

			break;
 8002418:	bf00      	nop

		}

		curr_position->FL_prev_position = curr_position->FL_position;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	705a      	strb	r2, [r3, #1]
	}
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	200000b8 	.word	0x200000b8

08002430 <update_second_layer>:


void update_second_layer(cursor_position* curr_position)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	if(curr_position->SL_position != curr_position->SL_prev_position)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	789a      	ldrb	r2, [r3, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	78db      	ldrb	r3, [r3, #3]
 8002440:	429a      	cmp	r2, r3
 8002442:	f000 809e 	beq.w	8002582 <update_second_layer+0x152>
	{

		switch(curr_position->SL_position)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	789b      	ldrb	r3, [r3, #2]
 800244a:	2b04      	cmp	r3, #4
 800244c:	f200 8094 	bhi.w	8002578 <update_second_layer+0x148>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <update_second_layer+0x28>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	08002545 	.word	0x08002545
 800245c:	0800246d 	.word	0x0800246d
 8002460:	080024a3 	.word	0x080024a3
 8002464:	080024d9 	.word	0x080024d9
 8002468:	0800250f 	.word	0x0800250f
		{
		case FIL_DIA:
			ST7920_GraphicMode(1);
 800246c:	2001      	movs	r0, #1
 800246e:	f7fe ff77 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002472:	f7ff f829 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002476:	2000      	movs	r0, #0
 8002478:	f7fe ff72 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800247c:	f7ff f824 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002480:	f000 faba 	bl	80029f8 <settings_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8002484:	2001      	movs	r0, #1
 8002486:	f7fe ff6b 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800248a:	230e      	movs	r3, #14
 800248c:	224f      	movs	r2, #79	; 0x4f
 800248e:	2100      	movs	r1, #0
 8002490:	2000      	movs	r0, #0
 8002492:	f7ff fa0d 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002496:	f7ff f80d 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe ff60 	bl	8001360 <ST7920_GraphicMode>

			break;
 80024a0:	e06b      	b.n	800257a <update_second_layer+0x14a>

		case FIL_DEN:
			ST7920_GraphicMode(1);
 80024a2:	2001      	movs	r0, #1
 80024a4:	f7fe ff5c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024a8:	f7ff f80e 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe ff57 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024b2:	f7ff f809 	bl	80014c8 <ST7920_Clear>

			// highlighting
			settings_screen();
 80024b6:	f000 fa9f 	bl	80029f8 <settings_screen>
			ST7920_GraphicMode(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7fe ff50 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 80024c0:	230f      	movs	r3, #15
 80024c2:	224f      	movs	r2, #79	; 0x4f
 80024c4:	210f      	movs	r1, #15
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff f9f2 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80024cc:	f7fe fff2 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe ff45 	bl	8001360 <ST7920_GraphicMode>

			break;
 80024d6:	e050      	b.n	800257a <update_second_layer+0x14a>

		case SAMPLE_WEIGHT:
			ST7920_GraphicMode(1);
 80024d8:	2001      	movs	r0, #1
 80024da:	f7fe ff41 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024de:	f7fe fff3 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80024e2:	2000      	movs	r0, #0
 80024e4:	f7fe ff3c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024e8:	f7fe ffee 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 80024ec:	f000 fa84 	bl	80029f8 <settings_screen>

			ST7920_GraphicMode(1);
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7fe ff35 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 15);
 80024f6:	230f      	movs	r3, #15
 80024f8:	224f      	movs	r2, #79	; 0x4f
 80024fa:	211e      	movs	r1, #30
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7ff f9d7 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002502:	f7fe ffd7 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe ff2a 	bl	8001360 <ST7920_GraphicMode>
			break;
 800250c:	e035      	b.n	800257a <update_second_layer+0x14a>

		case QUANTITY:
			ST7920_GraphicMode(1);
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe ff26 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002514:	f7fe ffd8 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe ff21 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800251e:	f7fe ffd3 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002522:	f000 fa69 	bl	80029f8 <settings_screen>

			ST7920_GraphicMode(1);
 8002526:	2001      	movs	r0, #1
 8002528:	f7fe ff1a 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 15);
 800252c:	230f      	movs	r3, #15
 800252e:	224f      	movs	r2, #79	; 0x4f
 8002530:	2130      	movs	r1, #48	; 0x30
 8002532:	2000      	movs	r0, #0
 8002534:	f7ff f9bc 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002538:	f7fe ffbc 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe ff0f 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002542:	e01a      	b.n	800257a <update_second_layer+0x14a>

		case BACK:
			ST7920_GraphicMode(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe ff0b 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800254a:	f7fe ffbd 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe ff06 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002554:	f7fe ffb8 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002558:	f000 fa4e 	bl	80029f8 <settings_screen>

			ST7920_GraphicMode(1);
 800255c:	2001      	movs	r0, #1
 800255e:	f7fe feff 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(80, 48, 79, 15);
 8002562:	230f      	movs	r3, #15
 8002564:	224f      	movs	r2, #79	; 0x4f
 8002566:	2130      	movs	r1, #48	; 0x30
 8002568:	2050      	movs	r0, #80	; 0x50
 800256a:	f7ff f9a1 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800256e:	f7fe ffa1 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe fef4 	bl	8001360 <ST7920_GraphicMode>


		default:

			break;
 8002578:	bf00      	nop
		}

		curr_position->SL_prev_position = curr_position->SL_position;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	789a      	ldrb	r2, [r3, #2]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	70da      	strb	r2, [r3, #3]
	}

}
 8002582:	bf00      	nop
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop

0800258c <update_third_layer>:


void update_third_layer(cursor_position* curr_position)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
	if(curr_position->TL_position != curr_position->TL_prev_position)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	791a      	ldrb	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	795b      	ldrb	r3, [r3, #5]
 800259c:	429a      	cmp	r2, r3
 800259e:	f000 80c0 	beq.w	8002722 <update_third_layer+0x196>
	{
		switch(curr_position->TL_position)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	791b      	ldrb	r3, [r3, #4]
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	f200 80b6 	bhi.w	8002718 <update_third_layer+0x18c>
 80025ac:	a201      	add	r2, pc, #4	; (adr r2, 80025b4 <update_third_layer+0x28>)
 80025ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b2:	bf00      	nop
 80025b4:	080025d1 	.word	0x080025d1
 80025b8:	08002607 	.word	0x08002607
 80025bc:	0800263d 	.word	0x0800263d
 80025c0:	08002673 	.word	0x08002673
 80025c4:	080026a9 	.word	0x080026a9
 80025c8:	080026df 	.word	0x080026df
 80025cc:	080026f9 	.word	0x080026f9
		{
		case DIAMETER_175:
			ST7920_GraphicMode(1);
 80025d0:	2001      	movs	r0, #1
 80025d2:	f7fe fec5 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025d6:	f7fe ff77 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe fec0 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025e0:	f7fe ff72 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 80025e4:	f000 fa30 	bl	8002a48 <diameter_screen>

			ST7920_GraphicMode(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7fe feb9 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 80025ee:	230e      	movs	r3, #14
 80025f0:	224f      	movs	r2, #79	; 0x4f
 80025f2:	2100      	movs	r1, #0
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff f95b 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80025fa:	f7fe ff5b 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80025fe:	2000      	movs	r0, #0
 8002600:	f7fe feae 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002604:	e089      	b.n	800271a <update_third_layer+0x18e>

		case DIAMETER_285:
			ST7920_GraphicMode(1);
 8002606:	2001      	movs	r0, #1
 8002608:	f7fe feaa 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800260c:	f7fe ff5c 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002610:	2000      	movs	r0, #0
 8002612:	f7fe fea5 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002616:	f7fe ff57 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 800261a:	f000 fa15 	bl	8002a48 <diameter_screen>

			ST7920_GraphicMode(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f7fe fe9e 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 8002624:	230f      	movs	r3, #15
 8002626:	224f      	movs	r2, #79	; 0x4f
 8002628:	210f      	movs	r1, #15
 800262a:	2000      	movs	r0, #0
 800262c:	f7ff f940 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002630:	f7fe ff40 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002634:	2000      	movs	r0, #0
 8002636:	f7fe fe93 	bl	8001360 <ST7920_GraphicMode>
			break;
 800263a:	e06e      	b.n	800271a <update_third_layer+0x18e>

		case DENSITY_PLA:
			ST7920_GraphicMode(1);
 800263c:	2001      	movs	r0, #1
 800263e:	f7fe fe8f 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002642:	f7fe ff41 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002646:	2000      	movs	r0, #0
 8002648:	f7fe fe8a 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800264c:	f7fe ff3c 	bl	80014c8 <ST7920_Clear>
			density_screen();
 8002650:	f000 fa3a 	bl	8002ac8 <density_screen>

			ST7920_GraphicMode(1);
 8002654:	2001      	movs	r0, #1
 8002656:	f7fe fe83 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800265a:	230e      	movs	r3, #14
 800265c:	224f      	movs	r2, #79	; 0x4f
 800265e:	2100      	movs	r1, #0
 8002660:	2000      	movs	r0, #0
 8002662:	f7ff f925 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002666:	f7fe ff25 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800266a:	2000      	movs	r0, #0
 800266c:	f7fe fe78 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002670:	e053      	b.n	800271a <update_third_layer+0x18e>

		case DENSITY_ABS:
			ST7920_GraphicMode(1);
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fe74 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002678:	f7fe ff26 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800267c:	2000      	movs	r0, #0
 800267e:	f7fe fe6f 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002682:	f7fe ff21 	bl	80014c8 <ST7920_Clear>
			density_screen();
 8002686:	f000 fa1f 	bl	8002ac8 <density_screen>

			ST7920_GraphicMode(1);
 800268a:	2001      	movs	r0, #1
 800268c:	f7fe fe68 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 8002690:	230e      	movs	r3, #14
 8002692:	224f      	movs	r2, #79	; 0x4f
 8002694:	210f      	movs	r1, #15
 8002696:	2000      	movs	r0, #0
 8002698:	f7ff f90a 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800269c:	f7fe ff0a 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80026a0:	2000      	movs	r0, #0
 80026a2:	f7fe fe5d 	bl	8001360 <ST7920_GraphicMode>
			break;
 80026a6:	e038      	b.n	800271a <update_third_layer+0x18e>

		case DENSITY_PETG:
			ST7920_GraphicMode(1);
 80026a8:	2001      	movs	r0, #1
 80026aa:	f7fe fe59 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026ae:	f7fe ff0b 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f7fe fe54 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026b8:	f7fe ff06 	bl	80014c8 <ST7920_Clear>
			density_screen();
 80026bc:	f000 fa04 	bl	8002ac8 <density_screen>

			ST7920_GraphicMode(1);
 80026c0:	2001      	movs	r0, #1
 80026c2:	f7fe fe4d 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 14);
 80026c6:	230e      	movs	r3, #14
 80026c8:	224f      	movs	r2, #79	; 0x4f
 80026ca:	211e      	movs	r1, #30
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff f8ef 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80026d2:	f7fe feef 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80026d6:	2000      	movs	r0, #0
 80026d8:	f7fe fe42 	bl	8001360 <ST7920_GraphicMode>
			break;
 80026dc:	e01d      	b.n	800271a <update_third_layer+0x18e>

		case WEIGHT:
			ST7920_GraphicMode(1);
 80026de:	2001      	movs	r0, #1
 80026e0:	f7fe fe3e 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026e4:	f7fe fef0 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026e8:	2000      	movs	r0, #0
 80026ea:	f7fe fe39 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026ee:	f7fe feeb 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 80026f2:	f000 fa93 	bl	8002c1c <weight_screen>

			break;
 80026f6:	e010      	b.n	800271a <update_third_layer+0x18e>

		case QTY:
			ST7920_GraphicMode(1);
 80026f8:	2001      	movs	r0, #1
 80026fa:	f7fe fe31 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026fe:	f7fe fee3 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002702:	2000      	movs	r0, #0
 8002704:	f7fe fe2c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002708:	f7fe fede 	bl	80014c8 <ST7920_Clear>

			quantity_screen(FC_struct.parameters.target_qty);
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <update_third_layer+0x1a0>)
 800270e:	7d5b      	ldrb	r3, [r3, #21]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fad5 	bl	8002cc0 <quantity_screen>

			break;
 8002716:	e000      	b.n	800271a <update_third_layer+0x18e>

		default:
			break;
 8002718:	bf00      	nop

		}

		curr_position->TL_prev_position = curr_position->TL_position;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	791a      	ldrb	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	715a      	strb	r2, [r3, #5]

	}

}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000528 	.word	0x20000528

08002730 <menu_update>:



void menu_update(cursor_position* curr_position)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	update_enc(curr_position);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 f849 	bl	80027d0 <update_enc>

	if(curr_position->current_layer == FIRST_LAYER)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	799b      	ldrb	r3, [r3, #6]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <menu_update+0x1e>
	{

		update_first_layer(curr_position);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fdfa 	bl	8002340 <update_first_layer>
		{
			weight_screen_update();
		}
	}

}
 800274c:	e01b      	b.n	8002786 <menu_update+0x56>
	else if(curr_position->current_layer == SECOND_LAYER)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	799b      	ldrb	r3, [r3, #6]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d103      	bne.n	800275e <menu_update+0x2e>
		update_second_layer(curr_position);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff fe6a 	bl	8002430 <update_second_layer>
}
 800275c:	e013      	b.n	8002786 <menu_update+0x56>
	else if(curr_position->current_layer == THIRD_LAYER)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	799b      	ldrb	r3, [r3, #6]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d10f      	bne.n	8002786 <menu_update+0x56>
		update_third_layer(curr_position);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff10 	bl	800258c <update_third_layer>
		if(curr_position->TL_position == QTY)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	791b      	ldrb	r3, [r3, #4]
 8002770:	2b06      	cmp	r3, #6
 8002772:	d102      	bne.n	800277a <menu_update+0x4a>
			quantity_screen_update();
 8002774:	f000 fab0 	bl	8002cd8 <quantity_screen_update>
}
 8002778:	e005      	b.n	8002786 <menu_update+0x56>
		else if(curr_position->TL_position == WEIGHT)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	2b05      	cmp	r3, #5
 8002780:	d101      	bne.n	8002786 <menu_update+0x56>
			weight_screen_update();
 8002782:	f000 fa57 	bl	8002c34 <weight_screen_update>
}
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}

0800278e <Init_menu>:


void Init_menu(cursor_position* curr_position)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
	curr_position->FL_position = DEFAULT;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	701a      	strb	r2, [r3, #0]
	curr_position->SL_position = FIL_DIA;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	709a      	strb	r2, [r3, #2]
	curr_position->TL_position = DIAMETER_175;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	711a      	strb	r2, [r3, #4]
	curr_position->FL_prev_position = START;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	705a      	strb	r2, [r3, #1]
	curr_position->SL_prev_position = NONE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2205      	movs	r2, #5
 80027b2:	70da      	strb	r2, [r3, #3]
	curr_position->TL_prev_position = NONE;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2205      	movs	r2, #5
 80027b8:	715a      	strb	r2, [r3, #5]
	curr_position->current_layer = FIRST_LAYER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	719a      	strb	r2, [r3, #6]
	menu_update(curr_position);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ffb5 	bl	8002730 <menu_update>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
	...

080027d0 <update_enc>:



void update_enc(cursor_position* curr_position)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

	uint16_t enc_value;
	enc_value = enc_get_counter();
 80027d8:	f7ff f920 	bl	8001a1c <enc_get_counter>
 80027dc:	4603      	mov	r3, r0
 80027de:	81fb      	strh	r3, [r7, #14]
	enc_value /= 4;
 80027e0:	89fb      	ldrh	r3, [r7, #14]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	81fb      	strh	r3, [r7, #14]

	if(curr_position->current_layer == FIRST_LAYER)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	799b      	ldrb	r3, [r3, #6]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d131      	bne.n	8002852 <update_enc+0x82>
	{
		if(enc_get_counter() > 20)
 80027ee:	f7ff f915 	bl	8001a1c <enc_get_counter>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b14      	cmp	r3, #20
 80027f6:	d90a      	bls.n	800280e <update_enc+0x3e>
		{
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <update_enc+0x1b0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2200      	movs	r2, #0
 80027fe:	625a      	str	r2, [r3, #36]	; 0x24
			enc_value = enc_get_counter();
 8002800:	f7ff f90c 	bl	8001a1c <enc_get_counter>
 8002804:	4603      	mov	r3, r0
 8002806:	81fb      	strh	r3, [r7, #14]
			enc_value /= 4;
 8002808:	89fb      	ldrh	r3, [r7, #14]
 800280a:	089b      	lsrs	r3, r3, #2
 800280c:	81fb      	strh	r3, [r7, #14]
		}

		if(!FC_struct.parameters.ACTIVE_START_FLAG)
 800280e:	4b5d      	ldr	r3, [pc, #372]	; (8002984 <update_enc+0x1b4>)
 8002810:	7e1b      	ldrb	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d115      	bne.n	8002842 <update_enc+0x72>
		{
			if(enc_value == 0)
 8002816:	89fb      	ldrh	r3, [r7, #14]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <update_enc+0x54>
			{
				curr_position->FL_position = DEFAULT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]


	}


}
 8002822:	e0a9      	b.n	8002978 <update_enc+0x1a8>
			else if(enc_value == 1)
 8002824:	89fb      	ldrh	r3, [r7, #14]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d103      	bne.n	8002832 <update_enc+0x62>
				curr_position->FL_position = SETTINGS;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2204      	movs	r2, #4
 800282e:	701a      	strb	r2, [r3, #0]
}
 8002830:	e0a2      	b.n	8002978 <update_enc+0x1a8>
			else if(enc_value == 2)
 8002832:	89fb      	ldrh	r3, [r7, #14]
 8002834:	2b02      	cmp	r3, #2
 8002836:	f040 809f 	bne.w	8002978 <update_enc+0x1a8>
				curr_position->FL_position = START;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	701a      	strb	r2, [r3, #0]
}
 8002840:	e09a      	b.n	8002978 <update_enc+0x1a8>
		else if (enc_value == 4)
 8002842:	89fb      	ldrh	r3, [r7, #14]
 8002844:	2b04      	cmp	r3, #4
 8002846:	f040 8097 	bne.w	8002978 <update_enc+0x1a8>
			curr_position->FL_position = STOP;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	701a      	strb	r2, [r3, #0]
}
 8002850:	e092      	b.n	8002978 <update_enc+0x1a8>
	else if(curr_position->current_layer == SECOND_LAYER)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	799b      	ldrb	r3, [r3, #6]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d12e      	bne.n	80028b8 <update_enc+0xe8>
		if(enc_get_counter() > 20)
 800285a:	f7ff f8df 	bl	8001a1c <enc_get_counter>
 800285e:	4603      	mov	r3, r0
 8002860:	2b14      	cmp	r3, #20
 8002862:	d90a      	bls.n	800287a <update_enc+0xaa>
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8002864:	4b46      	ldr	r3, [pc, #280]	; (8002980 <update_enc+0x1b0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2200      	movs	r2, #0
 800286a:	625a      	str	r2, [r3, #36]	; 0x24
			enc_value = enc_get_counter();
 800286c:	f7ff f8d6 	bl	8001a1c <enc_get_counter>
 8002870:	4603      	mov	r3, r0
 8002872:	81fb      	strh	r3, [r7, #14]
			enc_value /= 4;
 8002874:	89fb      	ldrh	r3, [r7, #14]
 8002876:	089b      	lsrs	r3, r3, #2
 8002878:	81fb      	strh	r3, [r7, #14]
		if(enc_value == 1)
 800287a:	89fb      	ldrh	r3, [r7, #14]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <update_enc+0xb6>
			curr_position->SL_position = FIL_DIA;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	709a      	strb	r2, [r3, #2]
		if(enc_value == 2)
 8002886:	89fb      	ldrh	r3, [r7, #14]
 8002888:	2b02      	cmp	r3, #2
 800288a:	d102      	bne.n	8002892 <update_enc+0xc2>
			curr_position->SL_position = FIL_DEN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	709a      	strb	r2, [r3, #2]
		if(enc_value == 3)
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d102      	bne.n	800289e <update_enc+0xce>
			curr_position->SL_position = SAMPLE_WEIGHT;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2203      	movs	r2, #3
 800289c:	709a      	strb	r2, [r3, #2]
		if(enc_value == 4)
 800289e:	89fb      	ldrh	r3, [r7, #14]
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d102      	bne.n	80028aa <update_enc+0xda>
			curr_position->SL_position = QUANTITY;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2204      	movs	r2, #4
 80028a8:	709a      	strb	r2, [r3, #2]
		if(enc_value == 0)
 80028aa:	89fb      	ldrh	r3, [r7, #14]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d163      	bne.n	8002978 <update_enc+0x1a8>
			curr_position->SL_position = BACK;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	709a      	strb	r2, [r3, #2]
}
 80028b6:	e05f      	b.n	8002978 <update_enc+0x1a8>
	else if(curr_position->current_layer == THIRD_LAYER)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	799b      	ldrb	r3, [r3, #6]
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d15b      	bne.n	8002978 <update_enc+0x1a8>
		if(curr_position->SL_position == FIL_DIA)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	789b      	ldrb	r3, [r3, #2]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d11c      	bne.n	8002902 <update_enc+0x132>
			if(enc_get_counter() > 20)
 80028c8:	f7ff f8a8 	bl	8001a1c <enc_get_counter>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b14      	cmp	r3, #20
 80028d0:	d90a      	bls.n	80028e8 <update_enc+0x118>
				__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <update_enc+0x1b0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
				enc_value = enc_get_counter();
 80028da:	f7ff f89f 	bl	8001a1c <enc_get_counter>
 80028de:	4603      	mov	r3, r0
 80028e0:	81fb      	strh	r3, [r7, #14]
				enc_value /= 4;
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	089b      	lsrs	r3, r3, #2
 80028e6:	81fb      	strh	r3, [r7, #14]
			if(enc_value == 0)
 80028e8:	89fb      	ldrh	r3, [r7, #14]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d102      	bne.n	80028f4 <update_enc+0x124>
				curr_position->TL_position = DIAMETER_175;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	711a      	strb	r2, [r3, #4]
			if(enc_value == 1)
 80028f4:	89fb      	ldrh	r3, [r7, #14]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d13e      	bne.n	8002978 <update_enc+0x1a8>
				curr_position->TL_position = DIAMETER_285;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	711a      	strb	r2, [r3, #4]
}
 8002900:	e03a      	b.n	8002978 <update_enc+0x1a8>
		else if(curr_position->SL_position == FIL_DEN)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	789b      	ldrb	r3, [r3, #2]
 8002906:	2b02      	cmp	r3, #2
 8002908:	d122      	bne.n	8002950 <update_enc+0x180>
			if(enc_get_counter() > 20)
 800290a:	f7ff f887 	bl	8001a1c <enc_get_counter>
 800290e:	4603      	mov	r3, r0
 8002910:	2b14      	cmp	r3, #20
 8002912:	d90a      	bls.n	800292a <update_enc+0x15a>
				__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8002914:	4b1a      	ldr	r3, [pc, #104]	; (8002980 <update_enc+0x1b0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2200      	movs	r2, #0
 800291a:	625a      	str	r2, [r3, #36]	; 0x24
				enc_value = enc_get_counter();
 800291c:	f7ff f87e 	bl	8001a1c <enc_get_counter>
 8002920:	4603      	mov	r3, r0
 8002922:	81fb      	strh	r3, [r7, #14]
				enc_value /= 4;
 8002924:	89fb      	ldrh	r3, [r7, #14]
 8002926:	089b      	lsrs	r3, r3, #2
 8002928:	81fb      	strh	r3, [r7, #14]
			if(enc_value == 0)
 800292a:	89fb      	ldrh	r3, [r7, #14]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d102      	bne.n	8002936 <update_enc+0x166>
				curr_position->TL_position = DENSITY_PLA;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2202      	movs	r2, #2
 8002934:	711a      	strb	r2, [r3, #4]
			if(enc_value == 1)
 8002936:	89fb      	ldrh	r3, [r7, #14]
 8002938:	2b01      	cmp	r3, #1
 800293a:	d102      	bne.n	8002942 <update_enc+0x172>
				curr_position->TL_position = DENSITY_ABS;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2203      	movs	r2, #3
 8002940:	711a      	strb	r2, [r3, #4]
			if(enc_value == 2)
 8002942:	89fb      	ldrh	r3, [r7, #14]
 8002944:	2b02      	cmp	r3, #2
 8002946:	d117      	bne.n	8002978 <update_enc+0x1a8>
				curr_position->TL_position = DENSITY_PETG;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2204      	movs	r2, #4
 800294c:	711a      	strb	r2, [r3, #4]
}
 800294e:	e013      	b.n	8002978 <update_enc+0x1a8>
		else if(curr_position->SL_position == SAMPLE_WEIGHT)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	789b      	ldrb	r3, [r3, #2]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d103      	bne.n	8002960 <update_enc+0x190>
			FC_struct.parameters.temp_weight = enc_value;
 8002958:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <update_enc+0x1b4>)
 800295a:	89fb      	ldrh	r3, [r7, #14]
 800295c:	81d3      	strh	r3, [r2, #14]
}
 800295e:	e00b      	b.n	8002978 <update_enc+0x1a8>
		else if(curr_position->SL_position == QUANTITY)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	789b      	ldrb	r3, [r3, #2]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d107      	bne.n	8002978 <update_enc+0x1a8>
			FC_struct.parameters.temp_qty_increment = enc_value;
 8002968:	89fb      	ldrh	r3, [r7, #14]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <update_enc+0x1b4>)
 800296e:	75da      	strb	r2, [r3, #23]
			FC_struct.parameters.temp_qty = FC_struct.parameters.temp_qty_increment;
 8002970:	4b04      	ldr	r3, [pc, #16]	; (8002984 <update_enc+0x1b4>)
 8002972:	7dda      	ldrb	r2, [r3, #23]
 8002974:	4b03      	ldr	r3, [pc, #12]	; (8002984 <update_enc+0x1b4>)
 8002976:	759a      	strb	r2, [r3, #22]
}
 8002978:	bf00      	nop
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	200005d0 	.word	0x200005d0
 8002984:	20000528 	.word	0x20000528

08002988 <clear_screen>:


void clear_screen()
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
	ST7920_GraphicMode(1);
 800298c:	2001      	movs	r0, #1
 800298e:	f7fe fce7 	bl	8001360 <ST7920_GraphicMode>
	ST7920_Clear();
 8002992:	f7fe fd99 	bl	80014c8 <ST7920_Clear>
	ST7920_GraphicMode(0);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe fce2 	bl	8001360 <ST7920_GraphicMode>
	ST7920_Clear();
 800299c:	f7fe fd94 	bl	80014c8 <ST7920_Clear>
}
 80029a0:	bf00      	nop
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <default_screen>:

void default_screen()
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"FILAMENT CUTTER");
 80029a8:	4a10      	ldr	r2, [pc, #64]	; (80029ec <default_screen+0x48>)
 80029aa:	2100      	movs	r1, #0
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7fe fc93 	bl	80012d8 <ST7920_SendString>
	ST7920_GraphicMode(1);
 80029b2:	2001      	movs	r0, #1
 80029b4:	f7fe fcd4 	bl	8001360 <ST7920_GraphicMode>
	ST7920_Clear();
 80029b8:	f7fe fd86 	bl	80014c8 <ST7920_Clear>
	DrawRectangle(0, 0, 127, 14);
 80029bc:	230e      	movs	r3, #14
 80029be:	227f      	movs	r2, #127	; 0x7f
 80029c0:	2100      	movs	r1, #0
 80029c2:	2000      	movs	r0, #0
 80029c4:	f7fe feea 	bl	800179c <DrawRectangle>
	ST7920_Update();
 80029c8:	f7fe fd74 	bl	80014b4 <ST7920_Update>
	ST7920_GraphicMode(0);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe fcc7 	bl	8001360 <ST7920_GraphicMode>
	ST7920_SendString(1,0,"1.Settings");
 80029d2:	4a07      	ldr	r2, [pc, #28]	; (80029f0 <default_screen+0x4c>)
 80029d4:	2100      	movs	r1, #0
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7fe fc7e 	bl	80012d8 <ST7920_SendString>
	//ST7920_SendString(3,0,"STOP");
	ST7920_SendString(3,5," START");
 80029dc:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <default_screen+0x50>)
 80029de:	2105      	movs	r1, #5
 80029e0:	2003      	movs	r0, #3
 80029e2:	f7fe fc79 	bl	80012d8 <ST7920_SendString>

}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	080086a8 	.word	0x080086a8
 80029f0:	080086b8 	.word	0x080086b8
 80029f4:	080086c4 	.word	0x080086c4

080029f8 <settings_screen>:



void settings_screen()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"1.Diameter");
 80029fc:	4a0d      	ldr	r2, [pc, #52]	; (8002a34 <settings_screen+0x3c>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7fe fc69 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1,0,"2.Density");
 8002a06:	4a0c      	ldr	r2, [pc, #48]	; (8002a38 <settings_screen+0x40>)
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f7fe fc64 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(2,0,"3.Weight");
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <settings_screen+0x44>)
 8002a12:	2100      	movs	r1, #0
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7fe fc5f 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,0,"4.QTY");
 8002a1a:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <settings_screen+0x48>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	2003      	movs	r0, #3
 8002a20:	f7fe fc5a 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,5,"5.BACK");
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <settings_screen+0x4c>)
 8002a26:	2105      	movs	r1, #5
 8002a28:	2003      	movs	r0, #3
 8002a2a:	f7fe fc55 	bl	80012d8 <ST7920_SendString>

}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	080086cc 	.word	0x080086cc
 8002a38:	080086d8 	.word	0x080086d8
 8002a3c:	080086e4 	.word	0x080086e4
 8002a40:	080086f0 	.word	0x080086f0
 8002a44:	080086f8 	.word	0x080086f8

08002a48 <diameter_screen>:


void diameter_screen()
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_diameter == Filament_diameter_175)
 8002a4c:	4b18      	ldr	r3, [pc, #96]	; (8002ab0 <diameter_screen+0x68>)
 8002a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a52:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8002a56:	eef4 7a47 	vcmp.f32	s15, s14
 8002a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5e:	d109      	bne.n	8002a74 <diameter_screen+0x2c>
	{
		ST7920_SendString(0, 0, "1.75 mm <<");
 8002a60:	4a14      	ldr	r2, [pc, #80]	; (8002ab4 <diameter_screen+0x6c>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fc37 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm");
 8002a6a:	4a13      	ldr	r2, [pc, #76]	; (8002ab8 <diameter_screen+0x70>)
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fc32 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density == Filament_diameter_285)
 8002a74:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <diameter_screen+0x68>)
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7fd fd65 	bl	8000548 <__aeabi_f2d>
 8002a7e:	a30a      	add	r3, pc, #40	; (adr r3, 8002aa8 <diameter_screen+0x60>)
 8002a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a84:	f7fe f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <diameter_screen+0x48>
	{
		ST7920_SendString(0, 0, "1.75 mm");
		ST7920_SendString(1, 0, "2.85 mm <<");
	}
}
 8002a8e:	e009      	b.n	8002aa4 <diameter_screen+0x5c>
		ST7920_SendString(0, 0, "1.75 mm");
 8002a90:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <diameter_screen+0x74>)
 8002a92:	2100      	movs	r1, #0
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7fe fc1f 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm <<");
 8002a9a:	4a09      	ldr	r2, [pc, #36]	; (8002ac0 <diameter_screen+0x78>)
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7fe fc1a 	bl	80012d8 <ST7920_SendString>
}
 8002aa4:	bf00      	nop
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	cccccccd 	.word	0xcccccccd
 8002aac:	4006cccc 	.word	0x4006cccc
 8002ab0:	20000528 	.word	0x20000528
 8002ab4:	08008700 	.word	0x08008700
 8002ab8:	0800870c 	.word	0x0800870c
 8002abc:	08008714 	.word	0x08008714
 8002ac0:	0800871c 	.word	0x0800871c
 8002ac4:	00000000 	.word	0x00000000

08002ac8 <density_screen>:


void density_screen()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_density >= (Filament_density_PLA-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PLA+0.001))
 8002acc:	4b4c      	ldr	r3, [pc, #304]	; (8002c00 <density_screen+0x138>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fd fd39 	bl	8000548 <__aeabi_f2d>
 8002ad6:	a33e      	add	r3, pc, #248	; (adr r3, 8002bd0 <density_screen+0x108>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	f7fe f812 	bl	8000b04 <__aeabi_dcmpge>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d01b      	beq.n	8002b1e <density_screen+0x56>
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <density_screen+0x138>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fd fd2c 	bl	8000548 <__aeabi_f2d>
 8002af0:	a339      	add	r3, pc, #228	; (adr r3, 8002bd8 <density_screen+0x110>)
 8002af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af6:	f7fd fffb 	bl	8000af0 <__aeabi_dcmple>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00e      	beq.n	8002b1e <density_screen+0x56>
	{
		ST7920_SendString(0, 0, "1. PLA <<");
 8002b00:	4a40      	ldr	r2, [pc, #256]	; (8002c04 <density_screen+0x13c>)
 8002b02:	2100      	movs	r1, #0
 8002b04:	2000      	movs	r0, #0
 8002b06:	f7fe fbe7 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002b0a:	4a3f      	ldr	r2, [pc, #252]	; (8002c08 <density_screen+0x140>)
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	2001      	movs	r0, #1
 8002b10:	f7fe fbe2 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002b14:	4a3d      	ldr	r2, [pc, #244]	; (8002c0c <density_screen+0x144>)
 8002b16:	2100      	movs	r1, #0
 8002b18:	2002      	movs	r0, #2
 8002b1a:	f7fe fbdd 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_ABS-0.001) && (FC_struct.parameters.filament_density <= Filament_density_ABS+0.001))
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <density_screen+0x138>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7fd fd10 	bl	8000548 <__aeabi_f2d>
 8002b28:	a32d      	add	r3, pc, #180	; (adr r3, 8002be0 <density_screen+0x118>)
 8002b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b2e:	f7fd ffe9 	bl	8000b04 <__aeabi_dcmpge>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d01b      	beq.n	8002b70 <density_screen+0xa8>
 8002b38:	4b31      	ldr	r3, [pc, #196]	; (8002c00 <density_screen+0x138>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd03 	bl	8000548 <__aeabi_f2d>
 8002b42:	a329      	add	r3, pc, #164	; (adr r3, 8002be8 <density_screen+0x120>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd ffd2 	bl	8000af0 <__aeabi_dcmple>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00e      	beq.n	8002b70 <density_screen+0xa8>
	{
		ST7920_SendString(0, 0, "1. PLA");
 8002b52:	4a2f      	ldr	r2, [pc, #188]	; (8002c10 <density_screen+0x148>)
 8002b54:	2100      	movs	r1, #0
 8002b56:	2000      	movs	r0, #0
 8002b58:	f7fe fbbe 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS <<");
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	; (8002c14 <density_screen+0x14c>)
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7fe fbb9 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002b66:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <density_screen+0x144>)
 8002b68:	2100      	movs	r1, #0
 8002b6a:	2002      	movs	r0, #2
 8002b6c:	f7fe fbb4 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002b70:	4b23      	ldr	r3, [pc, #140]	; (8002c00 <density_screen+0x138>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fd fce7 	bl	8000548 <__aeabi_f2d>
 8002b7a:	a31d      	add	r3, pc, #116	; (adr r3, 8002bf0 <density_screen+0x128>)
 8002b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b80:	f7fd ffc0 	bl	8000b04 <__aeabi_dcmpge>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d100      	bne.n	8002b8c <density_screen+0xc4>
	{
		ST7920_SendString(0, 0, "1. PLA");
		ST7920_SendString(1, 0, "2. ABS");
		ST7920_SendString(2, 0, "3. PETG <<");
	}
}
 8002b8a:	e01c      	b.n	8002bc6 <density_screen+0xfe>
	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002b8c:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <density_screen+0x138>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7fd fcd9 	bl	8000548 <__aeabi_f2d>
 8002b96:	a318      	add	r3, pc, #96	; (adr r3, 8002bf8 <density_screen+0x130>)
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	f7fd ffa8 	bl	8000af0 <__aeabi_dcmple>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d100      	bne.n	8002ba8 <density_screen+0xe0>
}
 8002ba6:	e00e      	b.n	8002bc6 <density_screen+0xfe>
		ST7920_SendString(0, 0, "1. PLA");
 8002ba8:	4a19      	ldr	r2, [pc, #100]	; (8002c10 <density_screen+0x148>)
 8002baa:	2100      	movs	r1, #0
 8002bac:	2000      	movs	r0, #0
 8002bae:	f7fe fb93 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <density_screen+0x140>)
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fe fb8e 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG <<");
 8002bbc:	4a16      	ldr	r2, [pc, #88]	; (8002c18 <density_screen+0x150>)
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f7fe fb89 	bl	80012d8 <ST7920_SendString>
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	f3af 8000 	nop.w
 8002bd0:	a9fbe76d 	.word	0xa9fbe76d
 8002bd4:	3ff3d2f1 	.word	0x3ff3d2f1
 8002bd8:	d0e56041 	.word	0xd0e56041
 8002bdc:	3ff3db22 	.word	0x3ff3db22
 8002be0:	76c8b43a 	.word	0x76c8b43a
 8002be4:	3ff09fbe 	.word	0x3ff09fbe
 8002be8:	9db22d0e 	.word	0x9db22d0e
 8002bec:	3ff0a7ef 	.word	0x3ff0a7ef
 8002bf0:	e76c8b44 	.word	0xe76c8b44
 8002bf4:	3ff3a9fb 	.word	0x3ff3a9fb
 8002bf8:	0e560418 	.word	0x0e560418
 8002bfc:	3ff3b22d 	.word	0x3ff3b22d
 8002c00:	20000528 	.word	0x20000528
 8002c04:	08008728 	.word	0x08008728
 8002c08:	08008734 	.word	0x08008734
 8002c0c:	0800873c 	.word	0x0800873c
 8002c10:	08008744 	.word	0x08008744
 8002c14:	0800874c 	.word	0x0800874c
 8002c18:	08008758 	.word	0x08008758

08002c1c <weight_screen>:


void weight_screen()
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "Weight[g]: ");
 8002c20:	4a03      	ldr	r2, [pc, #12]	; (8002c30 <weight_screen+0x14>)
 8002c22:	2100      	movs	r1, #0
 8002c24:	2000      	movs	r0, #0
 8002c26:	f7fe fb57 	bl	80012d8 <ST7920_SendString>

}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	08008764 	.word	0x08008764

08002c34 <weight_screen_update>:


void weight_screen_update()
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
	static uint8_t weight_prev_value;
	char weight_value[4];

	if(weight_prev_value != FC_struct.parameters.temp_weight)
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <weight_screen_update+0x4c>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	4b10      	ldr	r3, [pc, #64]	; (8002c84 <weight_screen_update+0x50>)
 8002c42:	89db      	ldrh	r3, [r3, #14]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d016      	beq.n	8002c76 <weight_screen_update+0x42>
	{
		clear_screen();
 8002c48:	f7ff fe9e 	bl	8002988 <clear_screen>
		weight_screen();
 8002c4c:	f7ff ffe6 	bl	8002c1c <weight_screen>

		weight_prev_value = FC_struct.parameters.temp_weight;
 8002c50:	4b0c      	ldr	r3, [pc, #48]	; (8002c84 <weight_screen_update+0x50>)
 8002c52:	89db      	ldrh	r3, [r3, #14]
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <weight_screen_update+0x4c>)
 8002c58:	701a      	strb	r2, [r3, #0]
		sprintf(weight_value, "%d", FC_struct.parameters.temp_weight);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <weight_screen_update+0x50>)
 8002c5c:	89db      	ldrh	r3, [r3, #14]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4909      	ldr	r1, [pc, #36]	; (8002c88 <weight_screen_update+0x54>)
 8002c64:	4618      	mov	r0, r3
 8002c66:	f005 f8cf 	bl	8007e08 <siprintf>
		ST7920_SendString(0, 5, weight_value);
 8002c6a:	1d3b      	adds	r3, r7, #4
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	2105      	movs	r1, #5
 8002c70:	2000      	movs	r0, #0
 8002c72:	f7fe fb31 	bl	80012d8 <ST7920_SendString>
	}

}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200000d4 	.word	0x200000d4
 8002c84:	20000528 	.word	0x20000528
 8002c88:	08008770 	.word	0x08008770

08002c8c <active_start_screen>:

void active_start_screen()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "Working...");
 8002c90:	4a08      	ldr	r2, [pc, #32]	; (8002cb4 <active_start_screen+0x28>)
 8002c92:	2100      	movs	r1, #0
 8002c94:	2000      	movs	r0, #0
 8002c96:	f7fe fb1f 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1, 0, "0/500 [cm]");
 8002c9a:	4a07      	ldr	r2, [pc, #28]	; (8002cb8 <active_start_screen+0x2c>)
 8002c9c:	2100      	movs	r1, #0
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7fe fb1a 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3, 3, "STOP");
 8002ca4:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <active_start_screen+0x30>)
 8002ca6:	2103      	movs	r1, #3
 8002ca8:	2003      	movs	r0, #3
 8002caa:	f7fe fb15 	bl	80012d8 <ST7920_SendString>

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	08008774 	.word	0x08008774
 8002cb8:	08008780 	.word	0x08008780
 8002cbc:	0800878c 	.word	0x0800878c

08002cc0 <quantity_screen>:


void quantity_screen()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "QTY: ");
 8002cc4:	4a03      	ldr	r2, [pc, #12]	; (8002cd4 <quantity_screen+0x14>)
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f7fe fb05 	bl	80012d8 <ST7920_SendString>

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08008794 	.word	0x08008794

08002cd8 <quantity_screen_update>:

void quantity_screen_update()
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
	static uint8_t qty_prev_value;
	char qty_value[4];

	if(qty_prev_value != FC_struct.parameters.temp_qty)
 8002cde:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <quantity_screen_update+0x48>)
 8002ce0:	7d9a      	ldrb	r2, [r3, #22]
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <quantity_screen_update+0x4c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d015      	beq.n	8002d16 <quantity_screen_update+0x3e>
	{
		clear_screen();
 8002cea:	f7ff fe4d 	bl	8002988 <clear_screen>
		quantity_screen();
 8002cee:	f7ff ffe7 	bl	8002cc0 <quantity_screen>

		qty_prev_value = FC_struct.parameters.temp_qty;
 8002cf2:	4b0b      	ldr	r3, [pc, #44]	; (8002d20 <quantity_screen_update+0x48>)
 8002cf4:	7d9a      	ldrb	r2, [r3, #22]
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <quantity_screen_update+0x4c>)
 8002cf8:	701a      	strb	r2, [r3, #0]
		sprintf(qty_value, "%d", FC_struct.parameters.temp_qty);
 8002cfa:	4b09      	ldr	r3, [pc, #36]	; (8002d20 <quantity_screen_update+0x48>)
 8002cfc:	7d9b      	ldrb	r3, [r3, #22]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	4909      	ldr	r1, [pc, #36]	; (8002d28 <quantity_screen_update+0x50>)
 8002d04:	4618      	mov	r0, r3
 8002d06:	f005 f87f 	bl	8007e08 <siprintf>
		ST7920_SendString(0, 2, qty_value);
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2102      	movs	r1, #2
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fae1 	bl	80012d8 <ST7920_SendString>
	}

}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000528 	.word	0x20000528
 8002d24:	200000d5 	.word	0x200000d5
 8002d28:	08008770 	.word	0x08008770

08002d2c <stepper_init>:

extern filament_cutter FC_struct;

void stepper_init(stepper_motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		TIM_HandleTypeDef *slave_timer, GPIO_TypeDef* Dir_port, uint16_t Dir_pin)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b085      	sub	sp, #20
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
	motor->timer.htim = htim;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	601a      	str	r2, [r3, #0]
	motor->timer.channel = channel;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	605a      	str	r2, [r3, #4]
	motor->slave_timer.htim = slave_timer;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	683a      	ldr	r2, [r7, #0]
 8002d4a:	609a      	str	r2, [r3, #8]
	motor->DIR_port = Dir_port;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	615a      	str	r2, [r3, #20]
	motor->DIR_pin = Dir_pin;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8bba      	ldrh	r2, [r7, #28]
 8002d56:	831a      	strh	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <stepper_stop>:

// Basic stepper motor control functions

void stepper_stop(stepper_motor *motor)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
	motor->mode = IDLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	745a      	strb	r2, [r3, #17]
	HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2104      	movs	r1, #4
 8002d76:	4825      	ldr	r0, [pc, #148]	; (8002e0c <stepper_stop+0xa8>)
 8002d78:	f001 fa0e 	bl	8004198 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, 0);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d105      	bne.n	8002d90 <stepper_stop+0x2c>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d8e:	e02c      	b.n	8002dea <stepper_stop+0x86>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d105      	bne.n	8002da4 <stepper_stop+0x40>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	6393      	str	r3, [r2, #56]	; 0x38
 8002da2:	e022      	b.n	8002dea <stepper_stop+0x86>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d105      	bne.n	8002db8 <stepper_stop+0x54>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	2300      	movs	r3, #0
 8002db4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002db6:	e018      	b.n	8002dea <stepper_stop+0x86>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d105      	bne.n	8002dcc <stepper_stop+0x68>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	e00e      	b.n	8002dea <stepper_stop+0x86>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d105      	bne.n	8002de0 <stepper_stop+0x7c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	e004      	b.n	8002dea <stepper_stop+0x86>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(motor->timer.htim, motor->timer.channel);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	4619      	mov	r1, r3
 8002df4:	4610      	mov	r0, r2
 8002df6:	f003 f967 	bl	80060c8 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(motor->slave_timer.htim);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f002 ffec 	bl	8005ddc <HAL_TIM_Base_Stop_IT>

}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	48000c00 	.word	0x48000c00

08002e10 <stepper_set_dir>:

void stepper_set_dir(stepper_motor *motor, stepper_dir direction)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	460b      	mov	r3, r1
 8002e1a:	70fb      	strb	r3, [r7, #3]
	motor->dir = direction;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	741a      	strb	r2, [r3, #16]
	if(motor->dir == CW)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7c1b      	ldrb	r3, [r3, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d108      	bne.n	8002e3c <stepper_set_dir+0x2c>
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_RESET);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6958      	ldr	r0, [r3, #20]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	8b1b      	ldrh	r3, [r3, #24]
 8002e32:	2200      	movs	r2, #0
 8002e34:	4619      	mov	r1, r3
 8002e36:	f001 f9af 	bl	8004198 <HAL_GPIO_WritePin>

	else
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
	}
}
 8002e3a:	e007      	b.n	8002e4c <stepper_set_dir+0x3c>
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6958      	ldr	r0, [r3, #20]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	8b1b      	ldrh	r3, [r3, #24]
 8002e44:	2201      	movs	r2, #1
 8002e46:	4619      	mov	r1, r3
 8002e48:	f001 f9a6 	bl	8004198 <HAL_GPIO_WritePin>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <stepper_set_speed>:

void stepper_set_speed(stepper_motor *motor, uint32_t speed)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
	uint32_t freq, counter;

	if(speed > 100)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b64      	cmp	r3, #100	; 0x64
 8002e62:	d902      	bls.n	8002e6a <stepper_set_speed+0x16>
	{
		speed = 100;
 8002e64:	2364      	movs	r3, #100	; 0x64
 8002e66:	603b      	str	r3, [r7, #0]
 8002e68:	e006      	b.n	8002e78 <stepper_set_speed+0x24>
	}

	else if(speed == 0)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <stepper_set_speed+0x24>
	{
		stepper_stop(motor);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff77 	bl	8002d64 <stepper_stop>
		return;
 8002e76:	e068      	b.n	8002f4a <stepper_set_speed+0xf6>
	}

	freq = (speed * (STEPEER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ)) / STEPPER_MOTOR_MAX_SPEED;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e7e:	fb02 f303 	mul.w	r3, r2, r3
 8002e82:	4a33      	ldr	r2, [pc, #204]	; (8002f50 <stepper_set_speed+0xfc>)
 8002e84:	fba2 2303 	umull	r2, r3, r2, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	60fb      	str	r3, [r7, #12]

	counter = HAL_RCC_GetPCLK1Freq() / (motor->timer.htim->Init.Prescaler * freq);
 8002e8c:	f002 fab4 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8002e90:	4601      	mov	r1, r0
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	fb02 f303 	mul.w	r3, r2, r3
 8002e9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea2:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(motor->timer.htim, 0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->timer.htim, counter - 1);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68ba      	ldr	r2, [r7, #8]
 8002eb6:	3a01      	subs	r2, #1
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68ba      	ldr	r2, [r7, #8]
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, (counter/2)-1);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <stepper_set_speed+0x88>
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	085a      	lsrs	r2, r3, #1
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	3a01      	subs	r2, #1
 8002ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8002eda:	e036      	b.n	8002f4a <stepper_set_speed+0xf6>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	2b04      	cmp	r3, #4
 8002ee2:	d107      	bne.n	8002ef4 <stepper_set_speed+0xa0>
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	6812      	ldr	r2, [r2, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ef2:	e02a      	b.n	8002f4a <stepper_set_speed+0xf6>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b08      	cmp	r3, #8
 8002efa:	d107      	bne.n	8002f0c <stepper_set_speed+0xb8>
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	085b      	lsrs	r3, r3, #1
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	6812      	ldr	r2, [r2, #0]
 8002f04:	6812      	ldr	r2, [r2, #0]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002f0a:	e01e      	b.n	8002f4a <stepper_set_speed+0xf6>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b0c      	cmp	r3, #12
 8002f12:	d107      	bne.n	8002f24 <stepper_set_speed+0xd0>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	085b      	lsrs	r3, r3, #1
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	6812      	ldr	r2, [r2, #0]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	e012      	b.n	8002f4a <stepper_set_speed+0xf6>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	d107      	bne.n	8002f3c <stepper_set_speed+0xe8>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
 8002f3a:	e006      	b.n	8002f4a <stepper_set_speed+0xf6>
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	085b      	lsrs	r3, r3, #1
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	65d3      	str	r3, [r2, #92]	; 0x5c

}
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	51eb851f 	.word	0x51eb851f

08002f54 <stepper_set_angle>:


void stepper_set_angle(stepper_motor *motor, uint32_t angle, uint32_t speed, stepper_dir dir)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	70fb      	strb	r3, [r7, #3]
	motor->mode = ANGLE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2201      	movs	r2, #1
 8002f66:	745a      	strb	r2, [r3, #17]
	stepper_set_dir(motor, dir);
 8002f68:	78fb      	ldrb	r3, [r7, #3]
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f7ff ff4f 	bl	8002e10 <stepper_set_dir>
	stepper_set_speed(motor, speed);
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f7ff ff6d 	bl	8002e54 <stepper_set_speed>


	// set angle
	motor->step_counter = 0;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	61da      	str	r2, [r3, #28]
	motor->steps_to_count = angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	22c8      	movs	r2, #200	; 0xc8
 8002f84:	fb02 f303 	mul.w	r3, r2, r3
 8002f88:	08db      	lsrs	r3, r3, #3
 8002f8a:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <stepper_set_angle+0x9c>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	089a      	lsrs	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	621a      	str	r2, [r3, #32]


	if(0 == motor->steps_to_count)
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d102      	bne.n	8002fa4 <stepper_set_angle+0x50>
	{
		stepper_stop(motor);
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f7ff fee0 	bl	8002d64 <stepper_stop>
	}
	__HAL_TIM_SET_COUNTER(motor->slave_timer.htim, 0);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->slave_timer.htim, motor->steps_to_count - 1);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1a      	ldr	r2, [r3, #32]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	3a01      	subs	r2, #1
 8002fc6:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(motor->slave_timer.htim);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f002 fea9 	bl	8005d24 <HAL_TIM_Base_Start_IT>
	FIRST_MISS_FLAG = 1;
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <stepper_set_angle+0xa0>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(motor->timer.htim, motor->timer.channel);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	f002 ff8a 	bl	8005efc <HAL_TIM_PWM_Start>

}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	16c16c17 	.word	0x16c16c17
 8002ff4:	200004f0 	.word	0x200004f0

08002ff8 <stepper_centimeters_to_rotations>:


void stepper_centimeters_to_rotations(stepper_motor *motor, uint32_t centimeters, uint32_t speed, stepper_dir dir)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	70fb      	strb	r3, [r7, #3]
	uint32_t target_angle;
	target_angle = (uint32_t)centimeters / (FULL_ROTATION_LENGTH_CM);
 8003006:	68b8      	ldr	r0, [r7, #8]
 8003008:	f7fd fa7c 	bl	8000504 <__aeabi_ui2d>
 800300c:	a30e      	add	r3, pc, #56	; (adr r3, 8003048 <stepper_centimeters_to_rotations+0x50>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd fc1b 	bl	800084c <__aeabi_ddiv>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4610      	mov	r0, r2
 800301c:	4619      	mov	r1, r3
 800301e:	f7fd fd85 	bl	8000b2c <__aeabi_d2uiz>
 8003022:	4603      	mov	r3, r0
 8003024:	617b      	str	r3, [r7, #20]
	target_angle *= 360;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	617b      	str	r3, [r7, #20]
	stepper_set_angle(motor, target_angle, speed, dir);
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6979      	ldr	r1, [r7, #20]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f7ff ff8b 	bl	8002f54 <stepper_set_angle>
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	c083126f 	.word	0xc083126f
 800304c:	400ba1ca 	.word	0x400ba1ca

08003050 <stepper_grams_to_centimeters>:


uint32_t stepper_grams_to_centimeters(stepper_motor *motor, uint16_t grams, float filament_diameter, float filament_density)
{
 8003050:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	460b      	mov	r3, r1
 800305c:	ed87 0a01 	vstr	s0, [r7, #4]
 8003060:	edc7 0a00 	vstr	s1, [r7]
 8003064:	817b      	strh	r3, [r7, #10]
	// dlugosc[m] = 4*waga[g]/ (density[g/cm3] * PI * srednica_fil[mm] * srednica fil[mm])
	float length;
	length = (4*grams)/ (filament_density * 3.14 * filament_diameter * filament_diameter);
 8003066:	897b      	ldrh	r3, [r7, #10]
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	4618      	mov	r0, r3
 800306c:	f7fd fa5a 	bl	8000524 <__aeabi_i2d>
 8003070:	4604      	mov	r4, r0
 8003072:	460d      	mov	r5, r1
 8003074:	6838      	ldr	r0, [r7, #0]
 8003076:	f7fd fa67 	bl	8000548 <__aeabi_f2d>
 800307a:	a329      	add	r3, pc, #164	; (adr r3, 8003120 <stepper_grams_to_centimeters+0xd0>)
 800307c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003080:	f7fd faba 	bl	80005f8 <__aeabi_dmul>
 8003084:	4602      	mov	r2, r0
 8003086:	460b      	mov	r3, r1
 8003088:	4690      	mov	r8, r2
 800308a:	4699      	mov	r9, r3
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f7fd fa5b 	bl	8000548 <__aeabi_f2d>
 8003092:	4602      	mov	r2, r0
 8003094:	460b      	mov	r3, r1
 8003096:	4640      	mov	r0, r8
 8003098:	4649      	mov	r1, r9
 800309a:	f7fd faad 	bl	80005f8 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4690      	mov	r8, r2
 80030a4:	4699      	mov	r9, r3
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fa4e 	bl	8000548 <__aeabi_f2d>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	4640      	mov	r0, r8
 80030b2:	4649      	mov	r1, r9
 80030b4:	f7fd faa0 	bl	80005f8 <__aeabi_dmul>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4620      	mov	r0, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	f7fd fbc4 	bl	800084c <__aeabi_ddiv>
 80030c4:	4602      	mov	r2, r0
 80030c6:	460b      	mov	r3, r1
 80030c8:	4610      	mov	r0, r2
 80030ca:	4619      	mov	r1, r3
 80030cc:	f7fd fd4e 	bl	8000b6c <__aeabi_d2f>
 80030d0:	4603      	mov	r3, r0
 80030d2:	617b      	str	r3, [r7, #20]
	FC_struct.parameters.current_length_cm = length * 100;
 80030d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003118 <stepper_grams_to_centimeters+0xc8>
 80030dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030e4:	ee17 3a90 	vmov	r3, s15
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <stepper_grams_to_centimeters+0xcc>)
 80030ec:	825a      	strh	r2, [r3, #18]
	return truncf(length * 100);
 80030ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003118 <stepper_grams_to_centimeters+0xc8>
 80030f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030fa:	eeb0 0a67 	vmov.f32	s0, s15
 80030fe:	f005 fab1 	bl	8008664 <truncf>
 8003102:	eef0 7a40 	vmov.f32	s15, s0
 8003106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800310a:	ee17 3a90 	vmov	r3, s15
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003118:	42c80000 	.word	0x42c80000
 800311c:	20000528 	.word	0x20000528
 8003120:	51eb851f 	.word	0x51eb851f
 8003124:	40091eb8 	.word	0x40091eb8

08003128 <stepper_extrude_weight>:

void stepper_extrude_weight(stepper_motor *motor)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	if(EXTRUDE_PROCESS_FLAG == 0)
 8003130:	4b12      	ldr	r3, [pc, #72]	; (800317c <stepper_extrude_weight+0x54>)
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d11c      	bne.n	8003174 <stepper_extrude_weight+0x4c>
	{
		//printf("Start Extrude\n");
		CUTTING_PROCESS_FLAG = 0;
 800313a:	4b11      	ldr	r3, [pc, #68]	; (8003180 <stepper_extrude_weight+0x58>)
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 1;
 8003140:	4b0e      	ldr	r3, [pc, #56]	; (800317c <stepper_extrude_weight+0x54>)
 8003142:	2201      	movs	r2, #1
 8003144:	701a      	strb	r2, [r3, #0]
		uint32_t centimeters;
		centimeters = stepper_grams_to_centimeters(motor, FC_struct.parameters.target_weight, FC_struct.parameters.filament_diameter, FC_struct.parameters.filament_density);
 8003146:	4b0f      	ldr	r3, [pc, #60]	; (8003184 <stepper_extrude_weight+0x5c>)
 8003148:	899b      	ldrh	r3, [r3, #12]
 800314a:	4a0e      	ldr	r2, [pc, #56]	; (8003184 <stepper_extrude_weight+0x5c>)
 800314c:	edd2 7a02 	vldr	s15, [r2, #8]
 8003150:	4a0c      	ldr	r2, [pc, #48]	; (8003184 <stepper_extrude_weight+0x5c>)
 8003152:	ed92 7a01 	vldr	s14, [r2, #4]
 8003156:	eef0 0a47 	vmov.f32	s1, s14
 800315a:	eeb0 0a67 	vmov.f32	s0, s15
 800315e:	4619      	mov	r1, r3
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff75 	bl	8003050 <stepper_grams_to_centimeters>
 8003166:	60f8      	str	r0, [r7, #12]
		stepper_centimeters_to_rotations(motor, centimeters, 80, CW);
 8003168:	2300      	movs	r3, #0
 800316a:	2250      	movs	r2, #80	; 0x50
 800316c:	68f9      	ldr	r1, [r7, #12]
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff ff42 	bl	8002ff8 <stepper_centimeters_to_rotations>
	}

}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	2000050c 	.word	0x2000050c
 8003180:	200000e6 	.word	0x200000e6
 8003184:	20000528 	.word	0x20000528

08003188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800318e:	4b0f      	ldr	r3, [pc, #60]	; (80031cc <HAL_MspInit+0x44>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	4a0e      	ldr	r2, [pc, #56]	; (80031cc <HAL_MspInit+0x44>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6613      	str	r3, [r2, #96]	; 0x60
 800319a:	4b0c      	ldr	r3, [pc, #48]	; (80031cc <HAL_MspInit+0x44>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	607b      	str	r3, [r7, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_MspInit+0x44>)
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	4a08      	ldr	r2, [pc, #32]	; (80031cc <HAL_MspInit+0x44>)
 80031ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b0:	6593      	str	r3, [r2, #88]	; 0x58
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_MspInit+0x44>)
 80031b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	603b      	str	r3, [r7, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	bf00      	nop
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <NMI_Handler+0x4>

080031d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <HardFault_Handler+0x4>

080031dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <MemManage_Handler+0x4>

080031e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <UsageFault_Handler+0x4>

080031ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003200:	bf00      	nop
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800320a:	b480      	push	{r7}
 800320c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800321c:	f000 fcd4 	bl	8003bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003220:	bf00      	nop
 8003222:	bd80      	pop	{r7, pc}

08003224 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003228:	4802      	ldr	r0, [pc, #8]	; (8003234 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800322a:	f003 f909 	bl	8006440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000668 	.word	0x20000668

08003238 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800323c:	4803      	ldr	r0, [pc, #12]	; (800324c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800323e:	f003 f8ff 	bl	8006440 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003242:	4803      	ldr	r0, [pc, #12]	; (8003250 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003244:	f003 f8fc 	bl	8006440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003248:	bf00      	nop
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000668 	.word	0x20000668
 8003250:	20000700 	.word	0x20000700

08003254 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003258:	4802      	ldr	r0, [pc, #8]	; (8003264 <TIM1_CC_IRQHandler+0x10>)
 800325a:	f003 f8f1 	bl	8006440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	20000668 	.word	0x20000668

08003268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800326c:	4802      	ldr	r0, [pc, #8]	; (8003278 <TIM2_IRQHandler+0x10>)
 800326e:	f003 f8e7 	bl	8006440 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003272:	bf00      	nop
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	200006b4 	.word	0x200006b4

0800327c <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003280:	4802      	ldr	r0, [pc, #8]	; (800328c <LPTIM1_IRQHandler+0x10>)
 8003282:	f001 f8b2 	bl	80043ea <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	2000054c 	.word	0x2000054c

08003290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003298:	4a14      	ldr	r2, [pc, #80]	; (80032ec <_sbrk+0x5c>)
 800329a:	4b15      	ldr	r3, [pc, #84]	; (80032f0 <_sbrk+0x60>)
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032a4:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032ac:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <_sbrk+0x64>)
 80032ae:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <_sbrk+0x68>)
 80032b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d207      	bcs.n	80032d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032c0:	f004 fd70 	bl	8007da4 <__errno>
 80032c4:	4603      	mov	r3, r0
 80032c6:	220c      	movs	r2, #12
 80032c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032ca:	f04f 33ff 	mov.w	r3, #4294967295
 80032ce:	e009      	b.n	80032e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032d6:	4b07      	ldr	r3, [pc, #28]	; (80032f4 <_sbrk+0x64>)
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4413      	add	r3, r2
 80032de:	4a05      	ldr	r2, [pc, #20]	; (80032f4 <_sbrk+0x64>)
 80032e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032e2:	68fb      	ldr	r3, [r7, #12]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	20028000 	.word	0x20028000
 80032f0:	00000400 	.word	0x00000400
 80032f4:	200000d8 	.word	0x200000d8
 80032f8:	200007e8 	.word	0x200007e8

080032fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <SystemInit+0x5c>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003306:	4a14      	ldr	r2, [pc, #80]	; (8003358 <SystemInit+0x5c>)
 8003308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003310:	4b12      	ldr	r3, [pc, #72]	; (800335c <SystemInit+0x60>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a11      	ldr	r2, [pc, #68]	; (800335c <SystemInit+0x60>)
 8003316:	f043 0301 	orr.w	r3, r3, #1
 800331a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800331c:	4b0f      	ldr	r3, [pc, #60]	; (800335c <SystemInit+0x60>)
 800331e:	2200      	movs	r2, #0
 8003320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003322:	4b0e      	ldr	r3, [pc, #56]	; (800335c <SystemInit+0x60>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a0d      	ldr	r2, [pc, #52]	; (800335c <SystemInit+0x60>)
 8003328:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800332c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003332:	4b0a      	ldr	r3, [pc, #40]	; (800335c <SystemInit+0x60>)
 8003334:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003338:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <SystemInit+0x60>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a07      	ldr	r2, [pc, #28]	; (800335c <SystemInit+0x60>)
 8003340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003346:	4b05      	ldr	r3, [pc, #20]	; (800335c <SystemInit+0x60>)
 8003348:	2200      	movs	r2, #0
 800334a:	619a      	str	r2, [r3, #24]
}
 800334c:	bf00      	nop
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	e000ed00 	.word	0xe000ed00
 800335c:	40021000 	.word	0x40021000

08003360 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b09a      	sub	sp, #104	; 0x68
 8003364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800336a:	2200      	movs	r2, #0
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	605a      	str	r2, [r3, #4]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003374:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	605a      	str	r2, [r3, #4]
 800337e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003380:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	609a      	str	r2, [r3, #8]
 800338c:	60da      	str	r2, [r3, #12]
 800338e:	611a      	str	r2, [r3, #16]
 8003390:	615a      	str	r2, [r3, #20]
 8003392:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003394:	1d3b      	adds	r3, r7, #4
 8003396:	222c      	movs	r2, #44	; 0x2c
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f004 fd2c 	bl	8007df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033a2:	4a45      	ldr	r2, [pc, #276]	; (80034b8 <MX_TIM1_Init+0x158>)
 80033a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 80033a6:	4b43      	ldr	r3, [pc, #268]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033a8:	2250      	movs	r2, #80	; 0x50
 80033aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ac:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80033b2:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80033b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033ba:	4b3e      	ldr	r3, [pc, #248]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80033c0:	4b3c      	ldr	r3, [pc, #240]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80033cc:	4839      	ldr	r0, [pc, #228]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033ce:	f002 fbfd 	bl	8005bcc <HAL_TIM_Base_Init>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80033d8:	f7fe ffac 	bl	8002334 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033e0:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80033e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80033e6:	4619      	mov	r1, r3
 80033e8:	4832      	ldr	r0, [pc, #200]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033ea:	f003 fa59 	bl	80068a0 <HAL_TIM_ConfigClockSource>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80033f4:	f7fe ff9e 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033f8:	482e      	ldr	r0, [pc, #184]	; (80034b4 <MX_TIM1_Init+0x154>)
 80033fa:	f002 fd1e 	bl	8005e3a <HAL_TIM_PWM_Init>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8003404:	f7fe ff96 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003408:	2340      	movs	r3, #64	; 0x40
 800340a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 800340c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003410:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003416:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800341a:	4619      	mov	r1, r3
 800341c:	4825      	ldr	r0, [pc, #148]	; (80034b4 <MX_TIM1_Init+0x154>)
 800341e:	f003 ffab 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003428:	f7fe ff84 	bl	8002334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800342c:	2360      	movs	r3, #96	; 0x60
 800342e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8003430:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003434:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003436:	2300      	movs	r3, #0
 8003438:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800343a:	2300      	movs	r3, #0
 800343c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800343e:	2300      	movs	r3, #0
 8003440:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003442:	2300      	movs	r3, #0
 8003444:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003446:	2300      	movs	r3, #0
 8003448:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800344a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800344e:	2200      	movs	r2, #0
 8003450:	4619      	mov	r1, r3
 8003452:	4818      	ldr	r0, [pc, #96]	; (80034b4 <MX_TIM1_Init+0x154>)
 8003454:	f003 f914 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 800345e:	f7fe ff69 	bl	8002334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003462:	2300      	movs	r3, #0
 8003464:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003466:	2300      	movs	r3, #0
 8003468:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800346e:	2300      	movs	r3, #0
 8003470:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003476:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800347a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003480:	2300      	movs	r3, #0
 8003482:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003484:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800348e:	2300      	movs	r3, #0
 8003490:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003492:	1d3b      	adds	r3, r7, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4807      	ldr	r0, [pc, #28]	; (80034b4 <MX_TIM1_Init+0x154>)
 8003498:	f003 ffdc 	bl	8007454 <HAL_TIMEx_ConfigBreakDeadTime>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80034a2:	f7fe ff47 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80034a6:	4803      	ldr	r0, [pc, #12]	; (80034b4 <MX_TIM1_Init+0x154>)
 80034a8:	f000 fa1e 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 80034ac:	bf00      	nop
 80034ae:	3768      	adds	r7, #104	; 0x68
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000668 	.word	0x20000668
 80034b8:	40012c00 	.word	0x40012c00

080034bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b088      	sub	sp, #32
 80034c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80034c2:	f107 030c 	add.w	r3, r7, #12
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]
 80034cc:	609a      	str	r2, [r3, #8]
 80034ce:	60da      	str	r2, [r3, #12]
 80034d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034d2:	463b      	mov	r3, r7
 80034d4:	2200      	movs	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034dc:	4b1e      	ldr	r3, [pc, #120]	; (8003558 <MX_TIM2_Init+0x9c>)
 80034de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80034e4:	4b1c      	ldr	r3, [pc, #112]	; (8003558 <MX_TIM2_Init+0x9c>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ea:	4b1b      	ldr	r3, [pc, #108]	; (8003558 <MX_TIM2_Init+0x9c>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80034f0:	4b19      	ldr	r3, [pc, #100]	; (8003558 <MX_TIM2_Init+0x9c>)
 80034f2:	f04f 32ff 	mov.w	r2, #4294967295
 80034f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034f8:	4b17      	ldr	r3, [pc, #92]	; (8003558 <MX_TIM2_Init+0x9c>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034fe:	4b16      	ldr	r3, [pc, #88]	; (8003558 <MX_TIM2_Init+0x9c>)
 8003500:	2200      	movs	r2, #0
 8003502:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003504:	4814      	ldr	r0, [pc, #80]	; (8003558 <MX_TIM2_Init+0x9c>)
 8003506:	f002 fb61 	bl	8005bcc <HAL_TIM_Base_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003510:	f7fe ff10 	bl	8002334 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8003514:	2307      	movs	r3, #7
 8003516:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003518:	2300      	movs	r3, #0
 800351a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800351c:	f107 030c 	add.w	r3, r7, #12
 8003520:	4619      	mov	r1, r3
 8003522:	480d      	ldr	r0, [pc, #52]	; (8003558 <MX_TIM2_Init+0x9c>)
 8003524:	f003 fa82 	bl	8006a2c <HAL_TIM_SlaveConfigSynchro>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800352e:	f7fe ff01 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003532:	2300      	movs	r3, #0
 8003534:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800353a:	463b      	mov	r3, r7
 800353c:	4619      	mov	r1, r3
 800353e:	4806      	ldr	r0, [pc, #24]	; (8003558 <MX_TIM2_Init+0x9c>)
 8003540:	f003 ff1a 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800354a:	f7fe fef3 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800354e:	bf00      	nop
 8003550:	3720      	adds	r7, #32
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200006b4 	.word	0x200006b4

0800355c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b08c      	sub	sp, #48	; 0x30
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003562:	f107 030c 	add.w	r3, r7, #12
 8003566:	2224      	movs	r2, #36	; 0x24
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fc44 	bl	8007df8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003570:	463b      	mov	r3, r7
 8003572:	2200      	movs	r2, #0
 8003574:	601a      	str	r2, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
 8003578:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <MX_TIM3_Init+0xa4>)
 800357c:	4a21      	ldr	r2, [pc, #132]	; (8003604 <MX_TIM3_Init+0xa8>)
 800357e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003580:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <MX_TIM3_Init+0xa4>)
 8003582:	2200      	movs	r2, #0
 8003584:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003586:	4b1e      	ldr	r3, [pc, #120]	; (8003600 <MX_TIM3_Init+0xa4>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800358c:	4b1c      	ldr	r3, [pc, #112]	; (8003600 <MX_TIM3_Init+0xa4>)
 800358e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003592:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003594:	4b1a      	ldr	r3, [pc, #104]	; (8003600 <MX_TIM3_Init+0xa4>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359a:	4b19      	ldr	r3, [pc, #100]	; (8003600 <MX_TIM3_Init+0xa4>)
 800359c:	2200      	movs	r2, #0
 800359e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80035a0:	2303      	movs	r3, #3
 80035a2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80035a4:	2300      	movs	r3, #0
 80035a6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80035a8:	2301      	movs	r3, #1
 80035aa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80035b0:	230f      	movs	r3, #15
 80035b2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80035b4:	2302      	movs	r3, #2
 80035b6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035b8:	2301      	movs	r3, #1
 80035ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035bc:	2300      	movs	r3, #0
 80035be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80035c0:	230f      	movs	r3, #15
 80035c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80035c4:	f107 030c 	add.w	r3, r7, #12
 80035c8:	4619      	mov	r1, r3
 80035ca:	480d      	ldr	r0, [pc, #52]	; (8003600 <MX_TIM3_Init+0xa4>)
 80035cc:	f002 fe04 	bl	80061d8 <HAL_TIM_Encoder_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80035d6:	f7fe fead 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e2:	463b      	mov	r3, r7
 80035e4:	4619      	mov	r1, r3
 80035e6:	4806      	ldr	r0, [pc, #24]	; (8003600 <MX_TIM3_Init+0xa4>)
 80035e8:	f003 fec6 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80035f2:	f7fe fe9f 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80035f6:	bf00      	nop
 80035f8:	3730      	adds	r7, #48	; 0x30
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	200005d0 	.word	0x200005d0
 8003604:	40000400 	.word	0x40000400

08003608 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003618:	4b14      	ldr	r3, [pc, #80]	; (800366c <MX_TIM6_Init+0x64>)
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <MX_TIM6_Init+0x68>)
 800361c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 800361e:	4b13      	ldr	r3, [pc, #76]	; (800366c <MX_TIM6_Init+0x64>)
 8003620:	2250      	movs	r2, #80	; 0x50
 8003622:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <MX_TIM6_Init+0x64>)
 8003626:	2200      	movs	r2, #0
 8003628:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800362a:	4b10      	ldr	r3, [pc, #64]	; (800366c <MX_TIM6_Init+0x64>)
 800362c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003630:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003632:	4b0e      	ldr	r3, [pc, #56]	; (800366c <MX_TIM6_Init+0x64>)
 8003634:	2200      	movs	r2, #0
 8003636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003638:	480c      	ldr	r0, [pc, #48]	; (800366c <MX_TIM6_Init+0x64>)
 800363a:	f002 fac7 	bl	8005bcc <HAL_TIM_Base_Init>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003644:	f7fe fe76 	bl	8002334 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003648:	2300      	movs	r3, #0
 800364a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003650:	1d3b      	adds	r3, r7, #4
 8003652:	4619      	mov	r1, r3
 8003654:	4805      	ldr	r0, [pc, #20]	; (800366c <MX_TIM6_Init+0x64>)
 8003656:	f003 fe8f 	bl	8007378 <HAL_TIMEx_MasterConfigSynchronization>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003660:	f7fe fe68 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003664:	bf00      	nop
 8003666:	3710      	adds	r7, #16
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	2000061c 	.word	0x2000061c
 8003670:	40001000 	.word	0x40001000

08003674 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b092      	sub	sp, #72	; 0x48
 8003678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800367a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	605a      	str	r2, [r3, #4]
 8003684:	609a      	str	r2, [r3, #8]
 8003686:	60da      	str	r2, [r3, #12]
 8003688:	611a      	str	r2, [r3, #16]
 800368a:	615a      	str	r2, [r3, #20]
 800368c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800368e:	463b      	mov	r3, r7
 8003690:	222c      	movs	r2, #44	; 0x2c
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f004 fbaf 	bl	8007df8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800369a:	4b30      	ldr	r3, [pc, #192]	; (800375c <MX_TIM16_Init+0xe8>)
 800369c:	4a30      	ldr	r2, [pc, #192]	; (8003760 <MX_TIM16_Init+0xec>)
 800369e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <MX_TIM16_Init+0xe8>)
 80036a2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80036a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036a8:	4b2c      	ldr	r3, [pc, #176]	; (800375c <MX_TIM16_Init+0xe8>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <MX_TIM16_Init+0xe8>)
 80036b0:	2263      	movs	r2, #99	; 0x63
 80036b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036b4:	4b29      	ldr	r3, [pc, #164]	; (800375c <MX_TIM16_Init+0xe8>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80036ba:	4b28      	ldr	r3, [pc, #160]	; (800375c <MX_TIM16_Init+0xe8>)
 80036bc:	2200      	movs	r2, #0
 80036be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c0:	4b26      	ldr	r3, [pc, #152]	; (800375c <MX_TIM16_Init+0xe8>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80036c6:	4825      	ldr	r0, [pc, #148]	; (800375c <MX_TIM16_Init+0xe8>)
 80036c8:	f002 fa80 	bl	8005bcc <HAL_TIM_Base_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80036d2:	f7fe fe2f 	bl	8002334 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80036d6:	4821      	ldr	r0, [pc, #132]	; (800375c <MX_TIM16_Init+0xe8>)
 80036d8:	f002 fbaf 	bl	8005e3a <HAL_TIM_PWM_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80036e2:	f7fe fe27 	bl	8002334 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036e6:	2360      	movs	r3, #96	; 0x60
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 80036ea:	2363      	movs	r3, #99	; 0x63
 80036ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036ee:	2300      	movs	r3, #0
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036f2:	2300      	movs	r3, #0
 80036f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036f6:	2300      	movs	r3, #0
 80036f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036fe:	2300      	movs	r3, #0
 8003700:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003702:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003706:	2200      	movs	r2, #0
 8003708:	4619      	mov	r1, r3
 800370a:	4814      	ldr	r0, [pc, #80]	; (800375c <MX_TIM16_Init+0xe8>)
 800370c:	f002 ffb8 	bl	8006680 <HAL_TIM_PWM_ConfigChannel>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8003716:	f7fe fe0d 	bl	8002334 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003722:	2300      	movs	r3, #0
 8003724:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800372e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003732:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003734:	2300      	movs	r3, #0
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003738:	463b      	mov	r3, r7
 800373a:	4619      	mov	r1, r3
 800373c:	4807      	ldr	r0, [pc, #28]	; (800375c <MX_TIM16_Init+0xe8>)
 800373e:	f003 fe89 	bl	8007454 <HAL_TIMEx_ConfigBreakDeadTime>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8003748:	f7fe fdf4 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800374c:	4803      	ldr	r0, [pc, #12]	; (800375c <MX_TIM16_Init+0xe8>)
 800374e:	f000 f8cb 	bl	80038e8 <HAL_TIM_MspPostInit>

}
 8003752:	bf00      	nop
 8003754:	3748      	adds	r7, #72	; 0x48
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000700 	.word	0x20000700
 8003760:	40014400 	.word	0x40014400

08003764 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a38      	ldr	r2, [pc, #224]	; (8003854 <HAL_TIM_Base_MspInit+0xf0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d124      	bne.n	80037c0 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003776:	4b38      	ldr	r3, [pc, #224]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377a:	4a37      	ldr	r2, [pc, #220]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 800377c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003780:	6613      	str	r3, [r2, #96]	; 0x60
 8003782:	4b35      	ldr	r3, [pc, #212]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2100      	movs	r1, #0
 8003792:	2018      	movs	r0, #24
 8003794:	f000 fb37 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003798:	2018      	movs	r0, #24
 800379a:	f000 fb50 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2100      	movs	r1, #0
 80037a2:	2019      	movs	r0, #25
 80037a4:	f000 fb2f 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80037a8:	2019      	movs	r0, #25
 80037aa:	f000 fb48 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2100      	movs	r1, #0
 80037b2:	201b      	movs	r0, #27
 80037b4:	f000 fb27 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80037b8:	201b      	movs	r0, #27
 80037ba:	f000 fb40 	bl	8003e3e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80037be:	e044      	b.n	800384a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c8:	d114      	bne.n	80037f4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ca:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a22      	ldr	r2, [pc, #136]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 80037d0:	f043 0301 	orr.w	r3, r3, #1
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	201c      	movs	r0, #28
 80037e8:	f000 fb0d 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037ec:	201c      	movs	r0, #28
 80037ee:	f000 fb26 	bl	8003e3e <HAL_NVIC_EnableIRQ>
}
 80037f2:	e02a      	b.n	800384a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a18      	ldr	r2, [pc, #96]	; (800385c <HAL_TIM_Base_MspInit+0xf8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d10c      	bne.n	8003818 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80037fe:	4b16      	ldr	r3, [pc, #88]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	4a15      	ldr	r2, [pc, #84]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003804:	f043 0310 	orr.w	r3, r3, #16
 8003808:	6593      	str	r3, [r2, #88]	; 0x58
 800380a:	4b13      	ldr	r3, [pc, #76]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 800380c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380e:	f003 0310 	and.w	r3, r3, #16
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
}
 8003816:	e018      	b.n	800384a <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a10      	ldr	r2, [pc, #64]	; (8003860 <HAL_TIM_Base_MspInit+0xfc>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d113      	bne.n	800384a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003822:	4b0d      	ldr	r3, [pc, #52]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003826:	4a0c      	ldr	r2, [pc, #48]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382c:	6613      	str	r3, [r2, #96]	; 0x60
 800382e:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <HAL_TIM_Base_MspInit+0xf4>)
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800383a:	2200      	movs	r2, #0
 800383c:	2100      	movs	r1, #0
 800383e:	2019      	movs	r0, #25
 8003840:	f000 fae1 	bl	8003e06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003844:	2019      	movs	r0, #25
 8003846:	f000 fafa 	bl	8003e3e <HAL_NVIC_EnableIRQ>
}
 800384a:	bf00      	nop
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40021000 	.word	0x40021000
 800385c:	40001000 	.word	0x40001000
 8003860:	40014400 	.word	0x40014400

08003864 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08a      	sub	sp, #40	; 0x28
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	60da      	str	r2, [r3, #12]
 800387a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a17      	ldr	r2, [pc, #92]	; (80038e0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d128      	bne.n	80038d8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003886:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a16      	ldr	r2, [pc, #88]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 800388c:	f043 0302 	orr.w	r3, r3, #2
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
 8003892:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 8003894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80038a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a2:	4a10      	ldr	r2, [pc, #64]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <HAL_TIM_Encoder_MspInit+0x80>)
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80038b6:	23c0      	movs	r3, #192	; 0xc0
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80038c6:	2302      	movs	r3, #2
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d4:	f000 face 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80038d8:	bf00      	nop
 80038da:	3728      	adds	r7, #40	; 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40021000 	.word	0x40021000

080038e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f0:	f107 0314 	add.w	r3, r7, #20
 80038f4:	2200      	movs	r2, #0
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	60da      	str	r2, [r3, #12]
 80038fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <HAL_TIM_MspPostInit+0xac>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d11e      	bne.n	8003948 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800390a:	4b23      	ldr	r3, [pc, #140]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 8003910:	f043 0301 	orr.w	r3, r3, #1
 8003914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003916:	4b20      	ldr	r3, [pc, #128]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 8003918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EXT_STEP_Pin;
 8003922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003928:	2302      	movs	r3, #2
 800392a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2300      	movs	r3, #0
 8003932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003934:	2301      	movs	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_STEP_GPIO_Port, &GPIO_InitStruct);
 8003938:	f107 0314 	add.w	r3, r7, #20
 800393c:	4619      	mov	r1, r3
 800393e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003942:	f000 fa97 	bl	8003e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003946:	e021      	b.n	800398c <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a13      	ldr	r2, [pc, #76]	; (800399c <HAL_TIM_MspPostInit+0xb4>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d11c      	bne.n	800398c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003952:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 8003958:	f043 0302 	orr.w	r3, r3, #2
 800395c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800395e:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_TIM_MspPostInit+0xb0>)
 8003960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CUTT_PWM_Pin;
 800396a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800396e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003970:	2302      	movs	r3, #2
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800397c:	230e      	movs	r3, #14
 800397e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CUTT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	4619      	mov	r1, r3
 8003986:	4806      	ldr	r0, [pc, #24]	; (80039a0 <HAL_TIM_MspPostInit+0xb8>)
 8003988:	f000 fa74 	bl	8003e74 <HAL_GPIO_Init>
}
 800398c:	bf00      	nop
 800398e:	3728      	adds	r7, #40	; 0x28
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40012c00 	.word	0x40012c00
 8003998:	40021000 	.word	0x40021000
 800399c:	40014400 	.word	0x40014400
 80039a0:	48000400 	.word	0x48000400

080039a4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039a8:	4b14      	ldr	r3, [pc, #80]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039aa:	4a15      	ldr	r2, [pc, #84]	; (8003a00 <MX_USART2_UART_Init+0x5c>)
 80039ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039ae:	4b13      	ldr	r3, [pc, #76]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039b6:	4b11      	ldr	r3, [pc, #68]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039bc:	4b0f      	ldr	r3, [pc, #60]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039be:	2200      	movs	r2, #0
 80039c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039c2:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039c8:	4b0c      	ldr	r3, [pc, #48]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039ca:	220c      	movs	r2, #12
 80039cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039ce:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039d4:	4b09      	ldr	r3, [pc, #36]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80039da:	4b08      	ldr	r3, [pc, #32]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039dc:	2200      	movs	r2, #0
 80039de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039e6:	4805      	ldr	r0, [pc, #20]	; (80039fc <MX_USART2_UART_Init+0x58>)
 80039e8:	f003 fdca 	bl	8007580 <HAL_UART_Init>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80039f2:	f7fe fc9f 	bl	8002334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039f6:	bf00      	nop
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	2000074c 	.word	0x2000074c
 8003a00:	40004400 	.word	0x40004400

08003a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b0a4      	sub	sp, #144	; 0x90
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	2268      	movs	r2, #104	; 0x68
 8003a22:	2100      	movs	r1, #0
 8003a24:	4618      	mov	r0, r3
 8003a26:	f004 f9e7 	bl	8007df8 <memset>
  if(uartHandle->Instance==USART2)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a21      	ldr	r2, [pc, #132]	; (8003ab4 <HAL_UART_MspInit+0xb0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d13a      	bne.n	8003aaa <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a34:	2302      	movs	r3, #2
 8003a36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a3c:	f107 0314 	add.w	r3, r7, #20
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 fd65 	bl	8005510 <HAL_RCCEx_PeriphCLKConfig>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d001      	beq.n	8003a50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a4c:	f7fe fc72 	bl	8002334 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a50:	4b19      	ldr	r3, [pc, #100]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a54:	4a18      	ldr	r2, [pc, #96]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	613b      	str	r3, [r7, #16]
 8003a66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6c:	4a12      	ldr	r2, [pc, #72]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a74:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <HAL_UART_MspInit+0xb4>)
 8003a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003a80:	230c      	movs	r3, #12
 8003a82:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a84:	2302      	movs	r3, #2
 8003a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a90:	2303      	movs	r3, #3
 8003a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003a96:	2307      	movs	r3, #7
 8003a98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aa6:	f000 f9e5 	bl	8003e74 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003aaa:	bf00      	nop
 8003aac:	3790      	adds	r7, #144	; 0x90
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	40021000 	.word	0x40021000

08003abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ac0:	f7ff fc1c 	bl	80032fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003ac4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003ac6:	e003      	b.n	8003ad0 <LoopCopyDataInit>

08003ac8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003aca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003acc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003ace:	3104      	adds	r1, #4

08003ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003ad0:	480a      	ldr	r0, [pc, #40]	; (8003afc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ad4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003ad6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003ad8:	d3f6      	bcc.n	8003ac8 <CopyDataInit>
	ldr	r2, =_sbss
 8003ada:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003adc:	e002      	b.n	8003ae4 <LoopFillZerobss>

08003ade <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003ade:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ae0:	f842 3b04 	str.w	r3, [r2], #4

08003ae4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <LoopForever+0x16>)
	cmp	r2, r3
 8003ae6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ae8:	d3f9      	bcc.n	8003ade <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003aea:	f004 f961 	bl	8007db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003aee:	f7fe fb35 	bl	800215c <main>

08003af2 <LoopForever>:

LoopForever:
    b LoopForever
 8003af2:	e7fe      	b.n	8003af2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003af4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003af8:	08008828 	.word	0x08008828
	ldr	r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003b00:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003b04:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003b08:	200007e4 	.word	0x200007e4

08003b0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003b0c:	e7fe      	b.n	8003b0c <ADC1_IRQHandler>
	...

08003b10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b1a:	4b0c      	ldr	r3, [pc, #48]	; (8003b4c <HAL_Init+0x3c>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	; (8003b4c <HAL_Init+0x3c>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b24:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b26:	2003      	movs	r0, #3
 8003b28:	f000 f962 	bl	8003df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f000 f80f 	bl	8003b50 <HAL_InitTick>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	71fb      	strb	r3, [r7, #7]
 8003b3c:	e001      	b.n	8003b42 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003b3e:	f7ff fb23 	bl	8003188 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003b42:	79fb      	ldrb	r3, [r7, #7]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40022000 	.word	0x40022000

08003b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003b5c:	4b17      	ldr	r3, [pc, #92]	; (8003bbc <HAL_InitTick+0x6c>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d023      	beq.n	8003bac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003b64:	4b16      	ldr	r3, [pc, #88]	; (8003bc0 <HAL_InitTick+0x70>)
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	4b14      	ldr	r3, [pc, #80]	; (8003bbc <HAL_InitTick+0x6c>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 f96d 	bl	8003e5a <HAL_SYSTICK_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10f      	bne.n	8003ba6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d809      	bhi.n	8003ba0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 f937 	bl	8003e06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b98:	4a0a      	ldr	r2, [pc, #40]	; (8003bc4 <HAL_InitTick+0x74>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	e007      	b.n	8003bb0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e004      	b.n	8003bb0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	73fb      	strb	r3, [r7, #15]
 8003baa:	e001      	b.n	8003bb0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3710      	adds	r7, #16
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	2000000c 	.word	0x2000000c
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	20000008 	.word	0x20000008

08003bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <HAL_IncTick+0x20>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	4b06      	ldr	r3, [pc, #24]	; (8003bec <HAL_IncTick+0x24>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4a04      	ldr	r2, [pc, #16]	; (8003bec <HAL_IncTick+0x24>)
 8003bda:	6013      	str	r3, [r2, #0]
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	2000000c 	.word	0x2000000c
 8003bec:	200007d0 	.word	0x200007d0

08003bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8003bf4:	4b03      	ldr	r3, [pc, #12]	; (8003c04 <HAL_GetTick+0x14>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200007d0 	.word	0x200007d0

08003c08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c10:	f7ff ffee 	bl	8003bf0 <HAL_GetTick>
 8003c14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c20:	d005      	beq.n	8003c2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <HAL_Delay+0x44>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c2e:	bf00      	nop
 8003c30:	f7ff ffde 	bl	8003bf0 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d8f7      	bhi.n	8003c30 <HAL_Delay+0x28>
  {
  }
}
 8003c40:	bf00      	nop
 8003c42:	bf00      	nop
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	2000000c 	.word	0x2000000c

08003c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c60:	4b0c      	ldr	r3, [pc, #48]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c82:	4a04      	ldr	r2, [pc, #16]	; (8003c94 <__NVIC_SetPriorityGrouping+0x44>)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	60d3      	str	r3, [r2, #12]
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	0a1b      	lsrs	r3, r3, #8
 8003ca2:	f003 0307 	and.w	r3, r3, #7
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	e000ed00 	.word	0xe000ed00

08003cb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	4603      	mov	r3, r0
 8003cbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	db0b      	blt.n	8003cde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cc6:	79fb      	ldrb	r3, [r7, #7]
 8003cc8:	f003 021f 	and.w	r2, r3, #31
 8003ccc:	4907      	ldr	r1, [pc, #28]	; (8003cec <__NVIC_EnableIRQ+0x38>)
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	e000e100 	.word	0xe000e100

08003cf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	db0a      	blt.n	8003d1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	490c      	ldr	r1, [pc, #48]	; (8003d3c <__NVIC_SetPriority+0x4c>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	0112      	lsls	r2, r2, #4
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	440b      	add	r3, r1
 8003d14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d18:	e00a      	b.n	8003d30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	4908      	ldr	r1, [pc, #32]	; (8003d40 <__NVIC_SetPriority+0x50>)
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	3b04      	subs	r3, #4
 8003d28:	0112      	lsls	r2, r2, #4
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	761a      	strb	r2, [r3, #24]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	e000e100 	.word	0xe000e100
 8003d40:	e000ed00 	.word	0xe000ed00

08003d44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b089      	sub	sp, #36	; 0x24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f1c3 0307 	rsb	r3, r3, #7
 8003d5e:	2b04      	cmp	r3, #4
 8003d60:	bf28      	it	cs
 8003d62:	2304      	movcs	r3, #4
 8003d64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2b06      	cmp	r3, #6
 8003d6c:	d902      	bls.n	8003d74 <NVIC_EncodePriority+0x30>
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3b03      	subs	r3, #3
 8003d72:	e000      	b.n	8003d76 <NVIC_EncodePriority+0x32>
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	43da      	mvns	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	401a      	ands	r2, r3
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	43d9      	mvns	r1, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	4313      	orrs	r3, r2
         );
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dbc:	d301      	bcc.n	8003dc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e00f      	b.n	8003de2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dc2:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <SysTick_Config+0x40>)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dca:	210f      	movs	r1, #15
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f7ff ff8e 	bl	8003cf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dd4:	4b05      	ldr	r3, [pc, #20]	; (8003dec <SysTick_Config+0x40>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dda:	4b04      	ldr	r3, [pc, #16]	; (8003dec <SysTick_Config+0x40>)
 8003ddc:	2207      	movs	r2, #7
 8003dde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	e000e010 	.word	0xe000e010

08003df0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f7ff ff29 	bl	8003c50 <__NVIC_SetPriorityGrouping>
}
 8003dfe:	bf00      	nop
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b086      	sub	sp, #24
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	607a      	str	r2, [r7, #4]
 8003e12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e18:	f7ff ff3e 	bl	8003c98 <__NVIC_GetPriorityGrouping>
 8003e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ff8e 	bl	8003d44 <NVIC_EncodePriority>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff5d 	bl	8003cf0 <__NVIC_SetPriority>
}
 8003e36:	bf00      	nop
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	4603      	mov	r3, r0
 8003e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff31 	bl	8003cb4 <__NVIC_EnableIRQ>
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff ffa2 	bl	8003dac <SysTick_Config>
 8003e68:	4603      	mov	r3, r0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3708      	adds	r7, #8
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
	...

08003e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b087      	sub	sp, #28
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e82:	e154      	b.n	800412e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	2101      	movs	r1, #1
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	4013      	ands	r3, r2
 8003e92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 8146 	beq.w	8004128 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d00b      	beq.n	8003ebc <HAL_GPIO_Init+0x48>
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d007      	beq.n	8003ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003eb0:	2b11      	cmp	r3, #17
 8003eb2:	d003      	beq.n	8003ebc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2b12      	cmp	r3, #18
 8003eba:	d130      	bne.n	8003f1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	2203      	movs	r2, #3
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	68da      	ldr	r2, [r3, #12]
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	43db      	mvns	r3, r3
 8003efc:	693a      	ldr	r2, [r7, #16]
 8003efe:	4013      	ands	r3, r2
 8003f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0201 	and.w	r2, r3, #1
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	2203      	movs	r2, #3
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4013      	ands	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d003      	beq.n	8003f5e <HAL_GPIO_Init+0xea>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	2b12      	cmp	r3, #18
 8003f5c:	d123      	bne.n	8003fa6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	08da      	lsrs	r2, r3, #3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3208      	adds	r2, #8
 8003f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	220f      	movs	r2, #15
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43db      	mvns	r3, r3
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	691a      	ldr	r2, [r3, #16]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	08da      	lsrs	r2, r3, #3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	3208      	adds	r2, #8
 8003fa0:	6939      	ldr	r1, [r7, #16]
 8003fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f003 0203 	and.w	r2, r3, #3
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 80a0 	beq.w	8004128 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_GPIO_Init+0x2d8>)
 8003fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_GPIO_Init+0x2d8>)
 8003fee:	f043 0301 	orr.w	r3, r3, #1
 8003ff2:	6613      	str	r3, [r2, #96]	; 0x60
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_GPIO_Init+0x2d8>)
 8003ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004000:	4a53      	ldr	r2, [pc, #332]	; (8004150 <HAL_GPIO_Init+0x2dc>)
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	089b      	lsrs	r3, r3, #2
 8004006:	3302      	adds	r3, #2
 8004008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f003 0303 	and.w	r3, r3, #3
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	220f      	movs	r2, #15
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	693a      	ldr	r2, [r7, #16]
 8004020:	4013      	ands	r3, r2
 8004022:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800402a:	d019      	beq.n	8004060 <HAL_GPIO_Init+0x1ec>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a49      	ldr	r2, [pc, #292]	; (8004154 <HAL_GPIO_Init+0x2e0>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <HAL_GPIO_Init+0x1e8>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a48      	ldr	r2, [pc, #288]	; (8004158 <HAL_GPIO_Init+0x2e4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00d      	beq.n	8004058 <HAL_GPIO_Init+0x1e4>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a47      	ldr	r2, [pc, #284]	; (800415c <HAL_GPIO_Init+0x2e8>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d007      	beq.n	8004054 <HAL_GPIO_Init+0x1e0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a46      	ldr	r2, [pc, #280]	; (8004160 <HAL_GPIO_Init+0x2ec>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_GPIO_Init+0x1dc>
 800404c:	2304      	movs	r3, #4
 800404e:	e008      	b.n	8004062 <HAL_GPIO_Init+0x1ee>
 8004050:	2307      	movs	r3, #7
 8004052:	e006      	b.n	8004062 <HAL_GPIO_Init+0x1ee>
 8004054:	2303      	movs	r3, #3
 8004056:	e004      	b.n	8004062 <HAL_GPIO_Init+0x1ee>
 8004058:	2302      	movs	r3, #2
 800405a:	e002      	b.n	8004062 <HAL_GPIO_Init+0x1ee>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_GPIO_Init+0x1ee>
 8004060:	2300      	movs	r3, #0
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	f002 0203 	and.w	r2, r2, #3
 8004068:	0092      	lsls	r2, r2, #2
 800406a:	4093      	lsls	r3, r2
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004072:	4937      	ldr	r1, [pc, #220]	; (8004150 <HAL_GPIO_Init+0x2dc>)
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004080:	4b38      	ldr	r3, [pc, #224]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	43db      	mvns	r3, r3
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d003      	beq.n	80040a4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80040a4:	4a2f      	ldr	r2, [pc, #188]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80040aa:	4b2e      	ldr	r3, [pc, #184]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	4013      	ands	r3, r2
 80040b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d003      	beq.n	80040ce <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040d4:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	43db      	mvns	r3, r3
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4013      	ands	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d003      	beq.n	80040f8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040f8:	4a1a      	ldr	r2, [pc, #104]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	43db      	mvns	r3, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4013      	ands	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004122:	4a10      	ldr	r2, [pc, #64]	; (8004164 <HAL_GPIO_Init+0x2f0>)
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	f47f aea3 	bne.w	8003e84 <HAL_GPIO_Init+0x10>
  }
}
 800413e:	bf00      	nop
 8004140:	bf00      	nop
 8004142:	371c      	adds	r7, #28
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	40021000 	.word	0x40021000
 8004150:	40010000 	.word	0x40010000
 8004154:	48000400 	.word	0x48000400
 8004158:	48000800 	.word	0x48000800
 800415c:	48000c00 	.word	0x48000c00
 8004160:	48001000 	.word	0x48001000
 8004164:	40010400 	.word	0x40010400

08004168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691a      	ldr	r2, [r3, #16]
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	4013      	ands	r3, r2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	e001      	b.n	800418a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004186:	2300      	movs	r3, #0
 8004188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800418a:	7bfb      	ldrb	r3, [r7, #15]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	460b      	mov	r3, r1
 80041a2:	807b      	strh	r3, [r7, #2]
 80041a4:	4613      	mov	r3, r2
 80041a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041a8:	787b      	ldrb	r3, [r7, #1]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041ae:	887a      	ldrh	r2, [r7, #2]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041b4:	e002      	b.n	80041bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b6:	887a      	ldrh	r2, [r7, #2]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e08f      	b.n	80042fa <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d106      	bne.n	80041fa <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7fd ff4b 	bl	8002090 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2202      	movs	r2, #2
 80041fe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d004      	beq.n	800421c <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800421a:	d103      	bne.n	8004224 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 031e 	bic.w	r3, r3, #30
 8004222:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800422c:	4293      	cmp	r3, r2
 800422e:	d005      	beq.n	800423c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004236:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800423a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	4b31      	ldr	r3, [pc, #196]	; (8004304 <HAL_LPTIM_Init+0x13c>)
 8004240:	4013      	ands	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800424c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8004252:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004258:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800425e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004276:	4313      	orrs	r3, r2
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d004      	beq.n	8004290 <HAL_LPTIM_Init+0xc8>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800428e:	d107      	bne.n	80042a0 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004298:	4313      	orrs	r3, r2
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4313      	orrs	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d00a      	beq.n	80042c2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042b4:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80042ba:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a0e      	ldr	r2, [pc, #56]	; (8004308 <HAL_LPTIM_Init+0x140>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	430a      	orrs	r2, r1
 80042e2:	621a      	str	r2, [r3, #32]
 80042e4:	e004      	b.n	80042f0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042ee:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	ff19f1fe 	.word	0xff19f1fe
 8004308:	40007c00 	.word	0x40007c00

0800430c <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0306 	bic.w	r3, r3, #6
 800432c:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800434e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691a      	ldr	r2, [r3, #16]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2210      	movs	r2, #16
 8004366:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004370:	2110      	movs	r1, #16
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f91e 	bl	80045b4 <LPTIM_WaitForFlag>
 8004378:	4603      	mov	r3, r0
 800437a:	2b03      	cmp	r3, #3
 800437c:	d101      	bne.n	8004382 <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e02f      	b.n	80043e2 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f946 	bl	8004614 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f905 	bl	8004598 <HAL_LPTIM_GetState>
 800438e:	4603      	mov	r3, r0
 8004390:	2b03      	cmp	r3, #3
 8004392:	d101      	bne.n	8004398 <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e024      	b.n	80043e2 <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043a6:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0220 	orr.w	r2, r2, #32
 80043b6:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f042 0201 	orr.w	r2, r2, #1
 80043c6:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	691a      	ldr	r2, [r3, #16]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0204 	orr.w	r2, r2, #4
 80043d6:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0301 	and.w	r3, r3, #1
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d10d      	bne.n	800441c <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b01      	cmp	r3, #1
 800440c:	d106      	bne.n	800441c <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2201      	movs	r2, #1
 8004414:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 f882 	bl	8004520 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0302 	and.w	r3, r3, #2
 8004426:	2b02      	cmp	r3, #2
 8004428:	d10d      	bne.n	8004446 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b02      	cmp	r3, #2
 8004436:	d106      	bne.n	8004446 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2202      	movs	r2, #2
 800443e:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7fd ff3d 	bl	80022c0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b04      	cmp	r3, #4
 8004452:	d10d      	bne.n	8004470 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	2b04      	cmp	r3, #4
 8004460:	d106      	bne.n	8004470 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2204      	movs	r2, #4
 8004468:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f862 	bl	8004534 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b08      	cmp	r3, #8
 800447c:	d10d      	bne.n	800449a <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d106      	bne.n	800449a <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2208      	movs	r2, #8
 8004492:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f857 	bl	8004548 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2b10      	cmp	r3, #16
 80044a6:	d10d      	bne.n	80044c4 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 0310 	and.w	r3, r3, #16
 80044b2:	2b10      	cmp	r3, #16
 80044b4:	d106      	bne.n	80044c4 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2210      	movs	r2, #16
 80044bc:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 f84c 	bl	800455c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b20      	cmp	r3, #32
 80044d0:	d10d      	bne.n	80044ee <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 0320 	and.w	r3, r3, #32
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d106      	bne.n	80044ee <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2220      	movs	r2, #32
 80044e6:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f841 	bl	8004570 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f8:	2b40      	cmp	r3, #64	; 0x40
 80044fa:	d10d      	bne.n	8004518 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004506:	2b40      	cmp	r3, #64	; 0x40
 8004508:	d106      	bne.n	8004518 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2240      	movs	r2, #64	; 0x40
 8004510:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 f836 	bl	8004584 <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004518:	bf00      	nop
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004528:	bf00      	nop
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004534:	b480      	push	{r7}
 8004536:	b083      	sub	sp, #12
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004550:	bf00      	nop
 8004552:	370c      	adds	r7, #12
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045a6:	b2db      	uxtb	r3, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <LPTIM_WaitForFlag+0x58>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a12      	ldr	r2, [pc, #72]	; (8004610 <LPTIM_WaitForFlag+0x5c>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	0b9b      	lsrs	r3, r3, #14
 80045ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045d2:	fb02 f303 	mul.w	r3, r2, r3
 80045d6:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	683a      	ldr	r2, [r7, #0]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d002      	beq.n	80045fe <LPTIM_WaitForFlag+0x4a>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ec      	bne.n	80045d8 <LPTIM_WaitForFlag+0x24>

  return result;
 80045fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	20000004 	.word	0x20000004
 8004610:	d1b71759 	.word	0xd1b71759

08004614 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 800461c:	2300      	movs	r3, #0
 800461e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004620:	b672      	cpsid	i
}
 8004622:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a71      	ldr	r2, [pc, #452]	; (80047f0 <LPTIM_Disable+0x1dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d003      	beq.n	8004636 <LPTIM_Disable+0x22>
 800462e:	4a71      	ldr	r2, [pc, #452]	; (80047f4 <LPTIM_Disable+0x1e0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d007      	beq.n	8004644 <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004634:	e00d      	b.n	8004652 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004636:	4b70      	ldr	r3, [pc, #448]	; (80047f8 <LPTIM_Disable+0x1e4>)
 8004638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004640:	61fb      	str	r3, [r7, #28]
      break;
 8004642:	e006      	b.n	8004652 <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004644:	4b6c      	ldr	r3, [pc, #432]	; (80047f8 <LPTIM_Disable+0x1e4>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800464e:	61fb      	str	r3, [r7, #28]
      break;
 8004650:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	60fb      	str	r3, [r7, #12]
  tmpOR = hlptim->Instance->OR;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	60bb      	str	r3, [r7, #8]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5c      	ldr	r2, [pc, #368]	; (80047f0 <LPTIM_Disable+0x1dc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d003      	beq.n	800468c <LPTIM_Disable+0x78>
 8004684:	4a5b      	ldr	r2, [pc, #364]	; (80047f4 <LPTIM_Disable+0x1e0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d00d      	beq.n	80046a6 <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800468a:	e019      	b.n	80046c0 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 800468c:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <LPTIM_Disable+0x1e4>)
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	4a59      	ldr	r2, [pc, #356]	; (80047f8 <LPTIM_Disable+0x1e4>)
 8004692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004696:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004698:	4b57      	ldr	r3, [pc, #348]	; (80047f8 <LPTIM_Disable+0x1e4>)
 800469a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469c:	4a56      	ldr	r2, [pc, #344]	; (80047f8 <LPTIM_Disable+0x1e4>)
 800469e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80046a2:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 80046a4:	e00c      	b.n	80046c0 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80046a6:	4b54      	ldr	r3, [pc, #336]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046aa:	4a53      	ldr	r2, [pc, #332]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046ac:	f043 0320 	orr.w	r3, r3, #32
 80046b0:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80046b2:	4b51      	ldr	r3, [pc, #324]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	4a50      	ldr	r2, [pc, #320]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046b8:	f023 0320 	bic.w	r3, r3, #32
 80046bc:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 80046be:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d102      	bne.n	80046cc <LPTIM_Disable+0xb8>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d075      	beq.n	80047b8 <LPTIM_Disable+0x1a4>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a47      	ldr	r2, [pc, #284]	; (80047f0 <LPTIM_Disable+0x1dc>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d003      	beq.n	80046de <LPTIM_Disable+0xca>
 80046d6:	4a47      	ldr	r2, [pc, #284]	; (80047f4 <LPTIM_Disable+0x1e0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d009      	beq.n	80046f0 <LPTIM_Disable+0xdc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80046dc:	e011      	b.n	8004702 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80046de:	4b46      	ldr	r3, [pc, #280]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	4a44      	ldr	r2, [pc, #272]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046e6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80046ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 80046ee:	e008      	b.n	8004702 <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80046f8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80046fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8004700:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01a      	beq.n	800473e <LPTIM_Disable+0x12a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 0201 	orr.w	r2, r2, #1
 8004716:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004720:	2108      	movs	r1, #8
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ff46 	bl	80045b4 <LPTIM_WaitForFlag>
 8004728:	4603      	mov	r3, r0
 800472a:	2b03      	cmp	r3, #3
 800472c:	d103      	bne.n	8004736 <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2203      	movs	r2, #3
 8004732:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2208      	movs	r2, #8
 800473c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01a      	beq.n	800477a <LPTIM_Disable+0x166>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691a      	ldr	r2, [r3, #16]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68fa      	ldr	r2, [r7, #12]
 800475a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800475c:	2110      	movs	r1, #16
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff ff28 	bl	80045b4 <LPTIM_WaitForFlag>
 8004764:	4603      	mov	r3, r0
 8004766:	2b03      	cmp	r3, #3
 8004768:	d103      	bne.n	8004772 <LPTIM_Disable+0x15e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2203      	movs	r2, #3
 800476e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2210      	movs	r2, #16
 8004778:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <LPTIM_Disable+0x1dc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d003      	beq.n	800478c <LPTIM_Disable+0x178>
 8004784:	4a1b      	ldr	r2, [pc, #108]	; (80047f4 <LPTIM_Disable+0x1e0>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00b      	beq.n	80047a2 <LPTIM_Disable+0x18e>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 800478a:	e016      	b.n	80047ba <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 800478c:	4b1a      	ldr	r3, [pc, #104]	; (80047f8 <LPTIM_Disable+0x1e4>)
 800478e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004792:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004796:	4918      	ldr	r1, [pc, #96]	; (80047f8 <LPTIM_Disable+0x1e4>)
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4313      	orrs	r3, r2
 800479c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80047a0:	e00b      	b.n	80047ba <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80047a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047ac:	4912      	ldr	r1, [pc, #72]	; (80047f8 <LPTIM_Disable+0x1e4>)
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80047b6:	e000      	b.n	80047ba <LPTIM_Disable+0x1a6>
    }
  }
 80047b8:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	691a      	ldr	r2, [r3, #16]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	69ba      	ldr	r2, [r7, #24]
 80047d0:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80047e2:	b662      	cpsie	i
}
 80047e4:	bf00      	nop

  __enable_irq();
}
 80047e6:	bf00      	nop
 80047e8:	3720      	adds	r7, #32
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40007c00 	.word	0x40007c00
 80047f4:	40009400 	.word	0x40009400
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004800:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_PWREx_GetVoltageRange+0x18>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40007000 	.word	0x40007000

08004818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004826:	d130      	bne.n	800488a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004828:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004834:	d038      	beq.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800483e:	4a1e      	ldr	r2, [pc, #120]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004846:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2232      	movs	r2, #50	; 0x32
 800484c:	fb02 f303 	mul.w	r3, r2, r3
 8004850:	4a1b      	ldr	r2, [pc, #108]	; (80048c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004852:	fba2 2303 	umull	r2, r3, r2, r3
 8004856:	0c9b      	lsrs	r3, r3, #18
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800485c:	e002      	b.n	8004864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3b01      	subs	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004864:	4b14      	ldr	r3, [pc, #80]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d102      	bne.n	8004878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f2      	bne.n	800485e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004878:	4b0f      	ldr	r3, [pc, #60]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004884:	d110      	bne.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e00f      	b.n	80048aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800488a:	4b0b      	ldr	r3, [pc, #44]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004896:	d007      	beq.n	80048a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004898:	4b07      	ldr	r3, [pc, #28]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048a0:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40007000 	.word	0x40007000
 80048bc:	20000004 	.word	0x20000004
 80048c0:	431bde83 	.word	0x431bde83

080048c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b088      	sub	sp, #32
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d102      	bne.n	80048d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f000 bc11 	b.w	80050fa <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048d8:	4ba0      	ldr	r3, [pc, #640]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	f003 030c 	and.w	r3, r3, #12
 80048e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048e2:	4b9e      	ldr	r3, [pc, #632]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f000 80e4 	beq.w	8004ac2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048fa:	69bb      	ldr	r3, [r7, #24]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d007      	beq.n	8004910 <HAL_RCC_OscConfig+0x4c>
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	2b0c      	cmp	r3, #12
 8004904:	f040 808b 	bne.w	8004a1e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	2b01      	cmp	r3, #1
 800490c:	f040 8087 	bne.w	8004a1e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004910:	4b92      	ldr	r3, [pc, #584]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <HAL_RCC_OscConfig+0x64>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d101      	bne.n	8004928 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e3e8      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1a      	ldr	r2, [r3, #32]
 800492c:	4b8b      	ldr	r3, [pc, #556]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0308 	and.w	r3, r3, #8
 8004934:	2b00      	cmp	r3, #0
 8004936:	d004      	beq.n	8004942 <HAL_RCC_OscConfig+0x7e>
 8004938:	4b88      	ldr	r3, [pc, #544]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004940:	e005      	b.n	800494e <HAL_RCC_OscConfig+0x8a>
 8004942:	4b86      	ldr	r3, [pc, #536]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494e:	4293      	cmp	r3, r2
 8004950:	d223      	bcs.n	800499a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fd7a 	bl	8005450 <RCC_SetFlashLatencyFromMSIRange>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e3c9      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004966:	4b7d      	ldr	r3, [pc, #500]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7c      	ldr	r2, [pc, #496]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 800496c:	f043 0308 	orr.w	r3, r3, #8
 8004970:	6013      	str	r3, [r2, #0]
 8004972:	4b7a      	ldr	r3, [pc, #488]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	4977      	ldr	r1, [pc, #476]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004984:	4b75      	ldr	r3, [pc, #468]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	4972      	ldr	r1, [pc, #456]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004994:	4313      	orrs	r3, r2
 8004996:	604b      	str	r3, [r1, #4]
 8004998:	e025      	b.n	80049e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800499a:	4b70      	ldr	r3, [pc, #448]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a6f      	ldr	r2, [pc, #444]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049a0:	f043 0308 	orr.w	r3, r3, #8
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	4b6d      	ldr	r3, [pc, #436]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a1b      	ldr	r3, [r3, #32]
 80049b2:	496a      	ldr	r1, [pc, #424]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049b8:	4b68      	ldr	r3, [pc, #416]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	021b      	lsls	r3, r3, #8
 80049c6:	4965      	ldr	r1, [pc, #404]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 fd3a 	bl	8005450 <RCC_SetFlashLatencyFromMSIRange>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e389      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049e6:	f000 fc6f 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 80049ea:	4602      	mov	r2, r0
 80049ec:	4b5b      	ldr	r3, [pc, #364]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 030f 	and.w	r3, r3, #15
 80049f6:	495a      	ldr	r1, [pc, #360]	; (8004b60 <HAL_RCC_OscConfig+0x29c>)
 80049f8:	5ccb      	ldrb	r3, [r1, r3]
 80049fa:	f003 031f 	and.w	r3, r3, #31
 80049fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004a02:	4a58      	ldr	r2, [pc, #352]	; (8004b64 <HAL_RCC_OscConfig+0x2a0>)
 8004a04:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004a06:	4b58      	ldr	r3, [pc, #352]	; (8004b68 <HAL_RCC_OscConfig+0x2a4>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f8a0 	bl	8003b50 <HAL_InitTick>
 8004a10:	4603      	mov	r3, r0
 8004a12:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d052      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004a1a:	7bfb      	ldrb	r3, [r7, #15]
 8004a1c:	e36d      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d032      	beq.n	8004a8c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004a26:	4b4d      	ldr	r3, [pc, #308]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a4c      	ldr	r2, [pc, #304]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a32:	f7ff f8dd 	bl	8003bf0 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a3a:	f7ff f8d9 	bl	8003bf0 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e356      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a4c:	4b43      	ldr	r3, [pc, #268]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d0f0      	beq.n	8004a3a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a58:	4b40      	ldr	r3, [pc, #256]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a3f      	ldr	r2, [pc, #252]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a5e:	f043 0308 	orr.w	r3, r3, #8
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	4b3d      	ldr	r3, [pc, #244]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	493a      	ldr	r1, [pc, #232]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a76:	4b39      	ldr	r3, [pc, #228]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	4935      	ldr	r1, [pc, #212]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]
 8004a8a:	e01a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a8c:	4b33      	ldr	r3, [pc, #204]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a32      	ldr	r2, [pc, #200]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004a92:	f023 0301 	bic.w	r3, r3, #1
 8004a96:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a98:	f7ff f8aa 	bl	8003bf0 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aa0:	f7ff f8a6 	bl	8003bf0 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e323      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004ab2:	4b2a      	ldr	r3, [pc, #168]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x1dc>
 8004abe:	e000      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ac0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d073      	beq.n	8004bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004ace:	69bb      	ldr	r3, [r7, #24]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d005      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x21c>
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	2b0c      	cmp	r3, #12
 8004ad8:	d10e      	bne.n	8004af8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d10b      	bne.n	8004af8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae0:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d063      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x2f0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d15f      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e300      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b00:	d106      	bne.n	8004b10 <HAL_RCC_OscConfig+0x24c>
 8004b02:	4b16      	ldr	r3, [pc, #88]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a15      	ldr	r2, [pc, #84]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e01d      	b.n	8004b4c <HAL_RCC_OscConfig+0x288>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b18:	d10c      	bne.n	8004b34 <HAL_RCC_OscConfig+0x270>
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a0f      	ldr	r2, [pc, #60]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b24:	6013      	str	r3, [r2, #0]
 8004b26:	4b0d      	ldr	r3, [pc, #52]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCC_OscConfig+0x288>
 8004b34:	4b09      	ldr	r3, [pc, #36]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a08      	ldr	r2, [pc, #32]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b3e:	6013      	str	r3, [r2, #0]
 8004b40:	4b06      	ldr	r3, [pc, #24]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a05      	ldr	r2, [pc, #20]	; (8004b5c <HAL_RCC_OscConfig+0x298>)
 8004b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01b      	beq.n	8004b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7ff f84c 	bl	8003bf0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b5a:	e010      	b.n	8004b7e <HAL_RCC_OscConfig+0x2ba>
 8004b5c:	40021000 	.word	0x40021000
 8004b60:	0800879c 	.word	0x0800879c
 8004b64:	20000004 	.word	0x20000004
 8004b68:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7ff f840 	bl	8003bf0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e2bd      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b7e:	4baf      	ldr	r3, [pc, #700]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0f0      	beq.n	8004b6c <HAL_RCC_OscConfig+0x2a8>
 8004b8a:	e014      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8c:	f7ff f830 	bl	8003bf0 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b94:	f7ff f82c 	bl	8003bf0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b64      	cmp	r3, #100	; 0x64
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e2a9      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ba6:	4ba5      	ldr	r3, [pc, #660]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2d0>
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d060      	beq.n	8004c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b04      	cmp	r3, #4
 8004bc6:	d005      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x310>
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	2b0c      	cmp	r3, #12
 8004bcc:	d119      	bne.n	8004c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d116      	bne.n	8004c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bd4:	4b99      	ldr	r3, [pc, #612]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_OscConfig+0x328>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e286      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bec:	4b93      	ldr	r3, [pc, #588]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	061b      	lsls	r3, r3, #24
 8004bfa:	4990      	ldr	r1, [pc, #576]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c00:	e040      	b.n	8004c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d023      	beq.n	8004c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c0a:	4b8c      	ldr	r3, [pc, #560]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a8b      	ldr	r2, [pc, #556]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c16:	f7fe ffeb 	bl	8003bf0 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c1e:	f7fe ffe7 	bl	8003bf0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e264      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c30:	4b82      	ldr	r3, [pc, #520]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3c:	4b7f      	ldr	r3, [pc, #508]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	061b      	lsls	r3, r3, #24
 8004c4a:	497c      	ldr	r1, [pc, #496]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	604b      	str	r3, [r1, #4]
 8004c50:	e018      	b.n	8004c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c52:	4b7a      	ldr	r3, [pc, #488]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a79      	ldr	r2, [pc, #484]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fe ffc7 	bl	8003bf0 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c66:	f7fe ffc3 	bl	8003bf0 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e240      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c78:	4b70      	ldr	r3, [pc, #448]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d03c      	beq.n	8004d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d01c      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c98:	4b68      	ldr	r3, [pc, #416]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c9e:	4a67      	ldr	r2, [pc, #412]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004ca0:	f043 0301 	orr.w	r3, r3, #1
 8004ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca8:	f7fe ffa2 	bl	8003bf0 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cb0:	f7fe ff9e 	bl	8003bf0 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e21b      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004cc2:	4b5e      	ldr	r3, [pc, #376]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d0ef      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x3ec>
 8004cd0:	e01b      	b.n	8004d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cd2:	4b5a      	ldr	r3, [pc, #360]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004cda:	f023 0301 	bic.w	r3, r3, #1
 8004cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce2:	f7fe ff85 	bl	8003bf0 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cea:	f7fe ff81 	bl	8003bf0 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e1fe      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cfc:	4b4f      	ldr	r3, [pc, #316]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d02:	f003 0302 	and.w	r3, r3, #2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1ef      	bne.n	8004cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f000 80a6 	beq.w	8004e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004d1c:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10d      	bne.n	8004d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4b44      	ldr	r3, [pc, #272]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	4a43      	ldr	r2, [pc, #268]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	6593      	str	r3, [r2, #88]	; 0x58
 8004d34:	4b41      	ldr	r3, [pc, #260]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d44:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <HAL_RCC_OscConfig+0x57c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d50:	4b3b      	ldr	r3, [pc, #236]	; (8004e40 <HAL_RCC_OscConfig+0x57c>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a3a      	ldr	r2, [pc, #232]	; (8004e40 <HAL_RCC_OscConfig+0x57c>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5c:	f7fe ff48 	bl	8003bf0 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fe ff44 	bl	8003bf0 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1c1      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d76:	4b32      	ldr	r3, [pc, #200]	; (8004e40 <HAL_RCC_OscConfig+0x57c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d108      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4d8>
 8004d8a:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d90:	4a2a      	ldr	r2, [pc, #168]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004d92:	f043 0301 	orr.w	r3, r3, #1
 8004d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d9a:	e024      	b.n	8004de6 <HAL_RCC_OscConfig+0x522>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b05      	cmp	r3, #5
 8004da2:	d110      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x502>
 8004da4:	4b25      	ldr	r3, [pc, #148]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004daa:	4a24      	ldr	r2, [pc, #144]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dac:	f043 0304 	orr.w	r3, r3, #4
 8004db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004db4:	4b21      	ldr	r3, [pc, #132]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	4a20      	ldr	r2, [pc, #128]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dc4:	e00f      	b.n	8004de6 <HAL_RCC_OscConfig+0x522>
 8004dc6:	4b1d      	ldr	r3, [pc, #116]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dce:	f023 0301 	bic.w	r3, r3, #1
 8004dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004dd6:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	4a17      	ldr	r2, [pc, #92]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004dde:	f023 0304 	bic.w	r3, r3, #4
 8004de2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dee:	f7fe feff 	bl	8003bf0 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004df4:	e00a      	b.n	8004e0c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004df6:	f7fe fefb 	bl	8003bf0 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e176      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_OscConfig+0x578>)
 8004e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0ed      	beq.n	8004df6 <HAL_RCC_OscConfig+0x532>
 8004e1a:	e01a      	b.n	8004e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1c:	f7fe fee8 	bl	8003bf0 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e22:	e00f      	b.n	8004e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fee4 	bl	8003bf0 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d906      	bls.n	8004e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e15f      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e44:	4baa      	ldr	r3, [pc, #680]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1e8      	bne.n	8004e24 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d105      	bne.n	8004e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e58:	4ba5      	ldr	r3, [pc, #660]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	4aa4      	ldr	r2, [pc, #656]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d03c      	beq.n	8004eea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01c      	beq.n	8004eb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e78:	4b9d      	ldr	r3, [pc, #628]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004e7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e7e:	4a9c      	ldr	r2, [pc, #624]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e88:	f7fe feb2 	bl	8003bf0 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e8e:	e008      	b.n	8004ea2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e90:	f7fe feae 	bl	8003bf0 <HAL_GetTick>
 8004e94:	4602      	mov	r2, r0
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	1ad3      	subs	r3, r2, r3
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e12b      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ea2:	4b93      	ldr	r3, [pc, #588]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004ea4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea8:	f003 0302 	and.w	r3, r3, #2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0ef      	beq.n	8004e90 <HAL_RCC_OscConfig+0x5cc>
 8004eb0:	e01b      	b.n	8004eea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004eb2:	4b8f      	ldr	r3, [pc, #572]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004eb8:	4a8d      	ldr	r2, [pc, #564]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004eba:	f023 0301 	bic.w	r3, r3, #1
 8004ebe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec2:	f7fe fe95 	bl	8003bf0 <HAL_GetTick>
 8004ec6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004eca:	f7fe fe91 	bl	8003bf0 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e10e      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004edc:	4b84      	ldr	r3, [pc, #528]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004ede:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1ef      	bne.n	8004eca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 8102 	beq.w	80050f8 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	f040 80c5 	bne.w	8005088 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004efe:	4b7c      	ldr	r3, [pc, #496]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 0203 	and.w	r2, r3, #3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d12c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d123      	bne.n	8004f6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d11b      	bne.n	8004f6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d113      	bne.n	8004f6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4e:	085b      	lsrs	r3, r3, #1
 8004f50:	3b01      	subs	r3, #1
 8004f52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d109      	bne.n	8004f6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	085b      	lsrs	r3, r3, #1
 8004f64:	3b01      	subs	r3, #1
 8004f66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d067      	beq.n	800503c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b0c      	cmp	r3, #12
 8004f70:	d062      	beq.n	8005038 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f72:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d001      	beq.n	8004f82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0bb      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f82:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a5a      	ldr	r2, [pc, #360]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f8e:	f7fe fe2f 	bl	8003bf0 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f94:	e008      	b.n	8004fa8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f96:	f7fe fe2b 	bl	8003bf0 <HAL_GetTick>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d901      	bls.n	8004fa8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	e0a8      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fa8:	4b51      	ldr	r3, [pc, #324]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1f0      	bne.n	8004f96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fb4:	4b4e      	ldr	r3, [pc, #312]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	4b4e      	ldr	r3, [pc, #312]	; (80050f4 <HAL_RCC_OscConfig+0x830>)
 8004fba:	4013      	ands	r3, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	0112      	lsls	r2, r2, #4
 8004fc8:	4311      	orrs	r1, r2
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004fce:	0212      	lsls	r2, r2, #8
 8004fd0:	4311      	orrs	r1, r2
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fd6:	0852      	lsrs	r2, r2, #1
 8004fd8:	3a01      	subs	r2, #1
 8004fda:	0552      	lsls	r2, r2, #21
 8004fdc:	4311      	orrs	r1, r2
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fe2:	0852      	lsrs	r2, r2, #1
 8004fe4:	3a01      	subs	r2, #1
 8004fe6:	0652      	lsls	r2, r2, #25
 8004fe8:	4311      	orrs	r1, r2
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fee:	06d2      	lsls	r2, r2, #27
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	493f      	ldr	r1, [pc, #252]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a3c      	ldr	r2, [pc, #240]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8004ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005002:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005004:	4b3a      	ldr	r3, [pc, #232]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4a39      	ldr	r2, [pc, #228]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800500a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800500e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005010:	f7fe fdee 	bl	8003bf0 <HAL_GetTick>
 8005014:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005018:	f7fe fdea 	bl	8003bf0 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e067      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800502a:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d0f0      	beq.n	8005018 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005036:	e05f      	b.n	80050f8 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e05e      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503c:	4b2c      	ldr	r3, [pc, #176]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d157      	bne.n	80050f8 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005048:	4b29      	ldr	r3, [pc, #164]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a28      	ldr	r2, [pc, #160]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005054:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	4a25      	ldr	r2, [pc, #148]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800505a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800505e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005060:	f7fe fdc6 	bl	8003bf0 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005068:	f7fe fdc2 	bl	8003bf0 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e03f      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507a:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d0f0      	beq.n	8005068 <HAL_RCC_OscConfig+0x7a4>
 8005086:	e037      	b.n	80050f8 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	2b0c      	cmp	r3, #12
 800508c:	d02d      	beq.n	80050ea <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800508e:	4b18      	ldr	r3, [pc, #96]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a17      	ldr	r2, [pc, #92]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 8005094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005098:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d105      	bne.n	80050b2 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050a6:	4b12      	ldr	r3, [pc, #72]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 80050ac:	f023 0303 	bic.w	r3, r3, #3
 80050b0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80050b2:	4b0f      	ldr	r3, [pc, #60]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	4a0e      	ldr	r2, [pc, #56]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 80050b8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80050bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c2:	f7fe fd95 	bl	8003bf0 <HAL_GetTick>
 80050c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050c8:	e008      	b.n	80050dc <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fe fd91 	bl	8003bf0 <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e00e      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050dc:	4b04      	ldr	r3, [pc, #16]	; (80050f0 <HAL_RCC_OscConfig+0x82c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCC_OscConfig+0x806>
 80050e8:	e006      	b.n	80050f8 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e005      	b.n	80050fa <HAL_RCC_OscConfig+0x836>
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000
 80050f4:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80050f8:	2300      	movs	r3, #0
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3720      	adds	r7, #32
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop

08005104 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0c8      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005118:	4b66      	ldr	r3, [pc, #408]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0307 	and.w	r3, r3, #7
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d910      	bls.n	8005148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005126:	4b63      	ldr	r3, [pc, #396]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f023 0207 	bic.w	r2, r3, #7
 800512e:	4961      	ldr	r1, [pc, #388]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4313      	orrs	r3, r2
 8005134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005136:	4b5f      	ldr	r3, [pc, #380]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0307 	and.w	r3, r3, #7
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	429a      	cmp	r2, r3
 8005142:	d001      	beq.n	8005148 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e0b0      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d04c      	beq.n	80051ee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	2b03      	cmp	r3, #3
 800515a:	d107      	bne.n	800516c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800515c:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d121      	bne.n	80051ac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e09e      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d107      	bne.n	8005184 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005174:	4b50      	ldr	r3, [pc, #320]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d115      	bne.n	80051ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e092      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800518c:	4b4a      	ldr	r3, [pc, #296]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e086      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519c:	4b46      	ldr	r3, [pc, #280]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e07e      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ac:	4b42      	ldr	r3, [pc, #264]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f023 0203 	bic.w	r2, r3, #3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	493f      	ldr	r1, [pc, #252]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051be:	f7fe fd17 	bl	8003bf0 <HAL_GetTick>
 80051c2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c4:	e00a      	b.n	80051dc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c6:	f7fe fd13 	bl	8003bf0 <HAL_GetTick>
 80051ca:	4602      	mov	r2, r0
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d901      	bls.n	80051dc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e066      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051dc:	4b36      	ldr	r3, [pc, #216]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f003 020c 	and.w	r2, r3, #12
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d1eb      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d008      	beq.n	800520c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051fa:	4b2f      	ldr	r3, [pc, #188]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	492c      	ldr	r1, [pc, #176]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005208:	4313      	orrs	r3, r2
 800520a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800520c:	4b29      	ldr	r3, [pc, #164]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0307 	and.w	r3, r3, #7
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d210      	bcs.n	800523c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800521a:	4b26      	ldr	r3, [pc, #152]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f023 0207 	bic.w	r2, r3, #7
 8005222:	4924      	ldr	r1, [pc, #144]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	4313      	orrs	r3, r2
 8005228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b22      	ldr	r3, [pc, #136]	; (80052b4 <HAL_RCC_ClockConfig+0x1b0>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e036      	b.n	80052aa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	4918      	ldr	r1, [pc, #96]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d009      	beq.n	800527a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	00db      	lsls	r3, r3, #3
 8005274:	4910      	ldr	r1, [pc, #64]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005276:	4313      	orrs	r3, r2
 8005278:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800527a:	f000 f825 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 800527e:	4602      	mov	r2, r0
 8005280:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <HAL_RCC_ClockConfig+0x1b4>)
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 030f 	and.w	r3, r3, #15
 800528a:	490c      	ldr	r1, [pc, #48]	; (80052bc <HAL_RCC_ClockConfig+0x1b8>)
 800528c:	5ccb      	ldrb	r3, [r1, r3]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005298:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800529a:	4b0a      	ldr	r3, [pc, #40]	; (80052c4 <HAL_RCC_ClockConfig+0x1c0>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f7fe fc56 	bl	8003b50 <HAL_InitTick>
 80052a4:	4603      	mov	r3, r0
 80052a6:	72fb      	strb	r3, [r7, #11]

  return status;
 80052a8:	7afb      	ldrb	r3, [r7, #11]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40022000 	.word	0x40022000
 80052b8:	40021000 	.word	0x40021000
 80052bc:	0800879c 	.word	0x0800879c
 80052c0:	20000004 	.word	0x20000004
 80052c4:	20000008 	.word	0x20000008

080052c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b089      	sub	sp, #36	; 0x24
 80052cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	61fb      	str	r3, [r7, #28]
 80052d2:	2300      	movs	r3, #0
 80052d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052d6:	4b3e      	ldr	r3, [pc, #248]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f003 030c 	and.w	r3, r3, #12
 80052de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052e0:	4b3b      	ldr	r3, [pc, #236]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	f003 0303 	and.w	r3, r3, #3
 80052e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x34>
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d121      	bne.n	800533a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d11e      	bne.n	800533a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052fc:	4b34      	ldr	r3, [pc, #208]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d107      	bne.n	8005318 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005308:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800530a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800530e:	0a1b      	lsrs	r3, r3, #8
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	e005      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005318:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	091b      	lsrs	r3, r3, #4
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005324:	4a2b      	ldr	r2, [pc, #172]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d10d      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005338:	e00a      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d102      	bne.n	8005346 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005340:	4b25      	ldr	r3, [pc, #148]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005342:	61bb      	str	r3, [r7, #24]
 8005344:	e004      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d101      	bne.n	8005350 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800534c:	4b23      	ldr	r3, [pc, #140]	; (80053dc <HAL_RCC_GetSysClockFreq+0x114>)
 800534e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	2b0c      	cmp	r3, #12
 8005354:	d134      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005356:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	f003 0303 	and.w	r3, r3, #3
 800535e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b02      	cmp	r3, #2
 8005364:	d003      	beq.n	800536e <HAL_RCC_GetSysClockFreq+0xa6>
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	2b03      	cmp	r3, #3
 800536a:	d003      	beq.n	8005374 <HAL_RCC_GetSysClockFreq+0xac>
 800536c:	e005      	b.n	800537a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800536e:	4b1a      	ldr	r3, [pc, #104]	; (80053d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005370:	617b      	str	r3, [r7, #20]
      break;
 8005372:	e005      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005374:	4b19      	ldr	r3, [pc, #100]	; (80053dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005376:	617b      	str	r3, [r7, #20]
      break;
 8005378:	e002      	b.n	8005380 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	617b      	str	r3, [r7, #20]
      break;
 800537e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005380:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	3301      	adds	r3, #1
 800538c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	0a1b      	lsrs	r3, r3, #8
 8005394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	fb02 f203 	mul.w	r2, r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a6:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	0e5b      	lsrs	r3, r3, #25
 80053ac:	f003 0303 	and.w	r3, r3, #3
 80053b0:	3301      	adds	r3, #1
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80053be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80053c0:	69bb      	ldr	r3, [r7, #24]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3724      	adds	r7, #36	; 0x24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	080087b4 	.word	0x080087b4
 80053d8:	00f42400 	.word	0x00f42400
 80053dc:	007a1200 	.word	0x007a1200

080053e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20000004 	.word	0x20000004

080053f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053fc:	f7ff fff0 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0a1b      	lsrs	r3, r3, #8
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCC_GetPCLK1Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	080087ac 	.word	0x080087ac

08005424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005428:	f7ff ffda 	bl	80053e0 <HAL_RCC_GetHCLKFreq>
 800542c:	4602      	mov	r2, r0
 800542e:	4b06      	ldr	r3, [pc, #24]	; (8005448 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	0adb      	lsrs	r3, r3, #11
 8005434:	f003 0307 	and.w	r3, r3, #7
 8005438:	4904      	ldr	r1, [pc, #16]	; (800544c <HAL_RCC_GetPCLK2Freq+0x28>)
 800543a:	5ccb      	ldrb	r3, [r1, r3]
 800543c:	f003 031f 	and.w	r3, r3, #31
 8005440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005444:	4618      	mov	r0, r3
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40021000 	.word	0x40021000
 800544c:	080087ac 	.word	0x080087ac

08005450 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800545c:	4b2a      	ldr	r3, [pc, #168]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800545e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005468:	f7ff f9c8 	bl	80047fc <HAL_PWREx_GetVoltageRange>
 800546c:	6178      	str	r0, [r7, #20]
 800546e:	e014      	b.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005470:	4b25      	ldr	r3, [pc, #148]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005474:	4a24      	ldr	r2, [pc, #144]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800547a:	6593      	str	r3, [r2, #88]	; 0x58
 800547c:	4b22      	ldr	r3, [pc, #136]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800547e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005484:	60fb      	str	r3, [r7, #12]
 8005486:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005488:	f7ff f9b8 	bl	80047fc <HAL_PWREx_GetVoltageRange>
 800548c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005492:	4a1d      	ldr	r2, [pc, #116]	; (8005508 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005494:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005498:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d10b      	bne.n	80054ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d919      	bls.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2ba0      	cmp	r3, #160	; 0xa0
 80054ac:	d902      	bls.n	80054b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054ae:	2302      	movs	r3, #2
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	e013      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054b4:	2301      	movs	r3, #1
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	e010      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d902      	bls.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80054c0:	2303      	movs	r3, #3
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e00a      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d102      	bne.n	80054d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054cc:	2302      	movs	r3, #2
 80054ce:	613b      	str	r3, [r7, #16]
 80054d0:	e004      	b.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b70      	cmp	r3, #112	; 0x70
 80054d6:	d101      	bne.n	80054dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054d8:	2301      	movs	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054dc:	4b0b      	ldr	r3, [pc, #44]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f023 0207 	bic.w	r2, r3, #7
 80054e4:	4909      	ldr	r1, [pc, #36]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054ec:	4b07      	ldr	r3, [pc, #28]	; (800550c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	40022000 	.word	0x40022000

08005510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b086      	sub	sp, #24
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005518:	2300      	movs	r3, #0
 800551a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800551c:	2300      	movs	r3, #0
 800551e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005528:	2b00      	cmp	r3, #0
 800552a:	d031      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005530:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005534:	d01a      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005536:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800553a:	d814      	bhi.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800553c:	2b00      	cmp	r3, #0
 800553e:	d009      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005540:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005544:	d10f      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005546:	4b5d      	ldr	r3, [pc, #372]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	4a5c      	ldr	r2, [pc, #368]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800554c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005550:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005552:	e00c      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3304      	adds	r3, #4
 8005558:	2100      	movs	r1, #0
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fa44 	bl	80059e8 <RCCEx_PLLSAI1_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005564:	e003      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	74fb      	strb	r3, [r7, #19]
      break;
 800556a:	e000      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800556c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800556e:	7cfb      	ldrb	r3, [r7, #19]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10b      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005574:	4b51      	ldr	r3, [pc, #324]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005582:	494e      	ldr	r1, [pc, #312]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800558a:	e001      	b.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558c:	7cfb      	ldrb	r3, [r7, #19]
 800558e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 809e 	beq.w	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800559e:	2300      	movs	r3, #0
 80055a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80055a2:	4b46      	ldr	r3, [pc, #280]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00d      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055b8:	4b40      	ldr	r3, [pc, #256]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055bc:	4a3f      	ldr	r2, [pc, #252]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055c2:	6593      	str	r3, [r2, #88]	; 0x58
 80055c4:	4b3d      	ldr	r3, [pc, #244]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80055c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055cc:	60bb      	str	r3, [r7, #8]
 80055ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055d0:	2301      	movs	r3, #1
 80055d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d4:	4b3a      	ldr	r3, [pc, #232]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a39      	ldr	r2, [pc, #228]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055e0:	f7fe fb06 	bl	8003bf0 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055e6:	e009      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e8:	f7fe fb02 	bl	8003bf0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d902      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	74fb      	strb	r3, [r7, #19]
        break;
 80055fa:	e005      	b.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055fc:	4b30      	ldr	r3, [pc, #192]	; (80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d15a      	bne.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800560e:	4b2b      	ldr	r3, [pc, #172]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005614:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005618:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	429a      	cmp	r2, r3
 8005628:	d019      	beq.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800562a:	4b24      	ldr	r3, [pc, #144]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005636:	4b21      	ldr	r3, [pc, #132]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	4a1f      	ldr	r2, [pc, #124]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800563e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005646:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564c:	4a1b      	ldr	r2, [pc, #108]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800564e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005656:	4a19      	ldr	r2, [pc, #100]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b00      	cmp	r3, #0
 8005666:	d016      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fe fac2 	bl	8003bf0 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800566e:	e00b      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005670:	f7fe fabe 	bl	8003bf0 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f241 3288 	movw	r2, #5000	; 0x1388
 800567e:	4293      	cmp	r3, r2
 8005680:	d902      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	74fb      	strb	r3, [r7, #19]
            break;
 8005686:	e006      	b.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005688:	4b0c      	ldr	r3, [pc, #48]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800568a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0ec      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005696:	7cfb      	ldrb	r3, [r7, #19]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800569c:	4b07      	ldr	r3, [pc, #28]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800569e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056aa:	4904      	ldr	r1, [pc, #16]	; (80056bc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80056b2:	e009      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80056b4:	7cfb      	ldrb	r3, [r7, #19]
 80056b6:	74bb      	strb	r3, [r7, #18]
 80056b8:	e006      	b.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80056ba:	bf00      	nop
 80056bc:	40021000 	.word	0x40021000
 80056c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056c4:	7cfb      	ldrb	r3, [r7, #19]
 80056c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056c8:	7c7b      	ldrb	r3, [r7, #17]
 80056ca:	2b01      	cmp	r3, #1
 80056cc:	d105      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ce:	4b9e      	ldr	r3, [pc, #632]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d2:	4a9d      	ldr	r2, [pc, #628]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056e6:	4b98      	ldr	r3, [pc, #608]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ec:	f023 0203 	bic.w	r2, r3, #3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	4994      	ldr	r1, [pc, #592]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005708:	4b8f      	ldr	r3, [pc, #572]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800570a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800570e:	f023 020c 	bic.w	r2, r3, #12
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005716:	498c      	ldr	r1, [pc, #560]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00a      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800572a:	4b87      	ldr	r3, [pc, #540]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800572c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005738:	4983      	ldr	r1, [pc, #524]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800574c:	4b7e      	ldr	r3, [pc, #504]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800574e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	497b      	ldr	r1, [pc, #492]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800575c:	4313      	orrs	r3, r2
 800575e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0320 	and.w	r3, r3, #32
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00a      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800576e:	4b76      	ldr	r3, [pc, #472]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005774:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800577c:	4972      	ldr	r1, [pc, #456]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005790:	4b6d      	ldr	r3, [pc, #436]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005796:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	496a      	ldr	r1, [pc, #424]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80057b2:	4b65      	ldr	r3, [pc, #404]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057c0:	4961      	ldr	r1, [pc, #388]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00a      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057d4:	4b5c      	ldr	r3, [pc, #368]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e2:	4959      	ldr	r1, [pc, #356]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00a      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057f6:	4b54      	ldr	r3, [pc, #336]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80057f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	4950      	ldr	r1, [pc, #320]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00a      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005818:	4b4b      	ldr	r3, [pc, #300]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800581a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005826:	4948      	ldr	r1, [pc, #288]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005828:	4313      	orrs	r3, r2
 800582a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00a      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800583a:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800583c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005840:	f023 0203 	bic.w	r2, r3, #3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005848:	493f      	ldr	r1, [pc, #252]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800584a:	4313      	orrs	r3, r2
 800584c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d028      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800585c:	4b3a      	ldr	r3, [pc, #232]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800586a:	4937      	ldr	r1, [pc, #220]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005876:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800587a:	d106      	bne.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800587c:	4b32      	ldr	r3, [pc, #200]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	4a31      	ldr	r2, [pc, #196]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005882:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005886:	60d3      	str	r3, [r2, #12]
 8005888:	e011      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005892:	d10c      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	3304      	adds	r3, #4
 8005898:	2101      	movs	r1, #1
 800589a:	4618      	mov	r0, r3
 800589c:	f000 f8a4 	bl	80059e8 <RCCEx_PLLSAI1_Config>
 80058a0:	4603      	mov	r3, r0
 80058a2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80058a4:	7cfb      	ldrb	r3, [r7, #19]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80058aa:	7cfb      	ldrb	r3, [r7, #19]
 80058ac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d028      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c8:	491f      	ldr	r1, [pc, #124]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058d8:	d106      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4a1a      	ldr	r2, [pc, #104]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058e4:	60d3      	str	r3, [r2, #12]
 80058e6:	e011      	b.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058f0:	d10c      	bne.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3304      	adds	r3, #4
 80058f6:	2101      	movs	r1, #1
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 f875 	bl	80059e8 <RCCEx_PLLSAI1_Config>
 80058fe:	4603      	mov	r3, r0
 8005900:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005902:	7cfb      	ldrb	r3, [r7, #19]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005908:	7cfb      	ldrb	r3, [r7, #19]
 800590a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d02b      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005918:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005926:	4908      	ldr	r1, [pc, #32]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005936:	d109      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	4a02      	ldr	r2, [pc, #8]	; (8005948 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800593e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005942:	60d3      	str	r3, [r2, #12]
 8005944:	e014      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005946:	bf00      	nop
 8005948:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005950:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005954:	d10c      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	3304      	adds	r3, #4
 800595a:	2101      	movs	r1, #1
 800595c:	4618      	mov	r0, r3
 800595e:	f000 f843 	bl	80059e8 <RCCEx_PLLSAI1_Config>
 8005962:	4603      	mov	r3, r0
 8005964:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d001      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 800596c:	7cfb      	ldrb	r3, [r7, #19]
 800596e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01c      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800597c:	4b19      	ldr	r3, [pc, #100]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800597e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005982:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800598a:	4916      	ldr	r1, [pc, #88]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800598c:	4313      	orrs	r3, r2
 800598e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800599a:	d10c      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	3304      	adds	r3, #4
 80059a0:	2102      	movs	r1, #2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 f820 	bl	80059e8 <RCCEx_PLLSAI1_Config>
 80059a8:	4603      	mov	r3, r0
 80059aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80059ac:	7cfb      	ldrb	r3, [r7, #19]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059c2:	4b08      	ldr	r3, [pc, #32]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d0:	4904      	ldr	r1, [pc, #16]	; (80059e4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	40021000 	.word	0x40021000

080059e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80059f6:	4b74      	ldr	r3, [pc, #464]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d018      	beq.n	8005a34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a02:	4b71      	ldr	r3, [pc, #452]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0203 	and.w	r2, r3, #3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d10d      	bne.n	8005a2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
       ||
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d009      	beq.n	8005a2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a1a:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	091b      	lsrs	r3, r3, #4
 8005a20:	f003 0307 	and.w	r3, r3, #7
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
       ||
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d047      	beq.n	8005abe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
 8005a32:	e044      	b.n	8005abe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d018      	beq.n	8005a6e <RCCEx_PLLSAI1_Config+0x86>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d825      	bhi.n	8005a8c <RCCEx_PLLSAI1_Config+0xa4>
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d002      	beq.n	8005a4a <RCCEx_PLLSAI1_Config+0x62>
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d009      	beq.n	8005a5c <RCCEx_PLLSAI1_Config+0x74>
 8005a48:	e020      	b.n	8005a8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a4a:	4b5f      	ldr	r3, [pc, #380]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0302 	and.w	r3, r3, #2
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11d      	bne.n	8005a92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a5a:	e01a      	b.n	8005a92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a5c:	4b5a      	ldr	r3, [pc, #360]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d116      	bne.n	8005a96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a6c:	e013      	b.n	8005a96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a6e:	4b56      	ldr	r3, [pc, #344]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10f      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a7a:	4b53      	ldr	r3, [pc, #332]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a8a:	e006      	b.n	8005a9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	e004      	b.n	8005a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a92:	bf00      	nop
 8005a94:	e002      	b.n	8005a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a96:	bf00      	nop
 8005a98:	e000      	b.n	8005a9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005a9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10d      	bne.n	8005abe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005aa2:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6819      	ldr	r1, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	011b      	lsls	r3, r3, #4
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	4943      	ldr	r1, [pc, #268]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d17c      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ac4:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3f      	ldr	r2, [pc, #252]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ad0:	f7fe f88e 	bl	8003bf0 <HAL_GetTick>
 8005ad4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ad6:	e009      	b.n	8005aec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ad8:	f7fe f88a 	bl	8003bf0 <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d902      	bls.n	8005aec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8005aea:	e005      	b.n	8005af8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005aec:	4b36      	ldr	r3, [pc, #216]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1ef      	bne.n	8005ad8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005af8:	7bfb      	ldrb	r3, [r7, #15]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d15f      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d110      	bne.n	8005b26 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b04:	4b30      	ldr	r3, [pc, #192]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005b0c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6892      	ldr	r2, [r2, #8]
 8005b14:	0211      	lsls	r1, r2, #8
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	68d2      	ldr	r2, [r2, #12]
 8005b1a:	06d2      	lsls	r2, r2, #27
 8005b1c:	430a      	orrs	r2, r1
 8005b1e:	492a      	ldr	r1, [pc, #168]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	610b      	str	r3, [r1, #16]
 8005b24:	e027      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d112      	bne.n	8005b52 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b2c:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6892      	ldr	r2, [r2, #8]
 8005b3c:	0211      	lsls	r1, r2, #8
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6912      	ldr	r2, [r2, #16]
 8005b42:	0852      	lsrs	r2, r2, #1
 8005b44:	3a01      	subs	r2, #1
 8005b46:	0552      	lsls	r2, r2, #21
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	491f      	ldr	r1, [pc, #124]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	610b      	str	r3, [r1, #16]
 8005b50:	e011      	b.n	8005b76 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b52:	4b1d      	ldr	r3, [pc, #116]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b5a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6892      	ldr	r2, [r2, #8]
 8005b62:	0211      	lsls	r1, r2, #8
 8005b64:	687a      	ldr	r2, [r7, #4]
 8005b66:	6952      	ldr	r2, [r2, #20]
 8005b68:	0852      	lsrs	r2, r2, #1
 8005b6a:	3a01      	subs	r2, #1
 8005b6c:	0652      	lsls	r2, r2, #25
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	4915      	ldr	r1, [pc, #84]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a13      	ldr	r2, [pc, #76]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005b7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b80:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b82:	f7fe f835 	bl	8003bf0 <HAL_GetTick>
 8005b86:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b88:	e009      	b.n	8005b9e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005b8a:	f7fe f831 	bl	8003bf0 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d902      	bls.n	8005b9e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	73fb      	strb	r3, [r7, #15]
          break;
 8005b9c:	e005      	b.n	8005baa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0ef      	beq.n	8005b8a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bb0:	4b05      	ldr	r3, [pc, #20]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bb2:	691a      	ldr	r2, [r3, #16]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	4903      	ldr	r1, [pc, #12]	; (8005bc8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000

08005bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e049      	b.n	8005c72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f7fd fdb6 	bl	8003764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	3304      	adds	r3, #4
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	f000 ff78 	bl	8006b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
	...

08005c7c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d001      	beq.n	8005c94 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e038      	b.n	8005d06 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <HAL_TIM_Base_Start+0x98>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d00e      	beq.n	8005cc4 <HAL_TIM_Base_Start+0x48>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIM_Base_Start+0x48>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_TIM_Base_Start+0x9c>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIM_Base_Start+0x48>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a17      	ldr	r2, [pc, #92]	; (8005d1c <HAL_TIM_Base_Start+0xa0>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d115      	bne.n	8005cf0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689a      	ldr	r2, [r3, #8]
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <HAL_TIM_Base_Start+0xa4>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d015      	beq.n	8005d02 <HAL_TIM_Base_Start+0x86>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cdc:	d011      	beq.n	8005d02 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f042 0201 	orr.w	r2, r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cee:	e008      	b.n	8005d02 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0201 	orr.w	r2, r2, #1
 8005cfe:	601a      	str	r2, [r3, #0]
 8005d00:	e000      	b.n	8005d04 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3714      	adds	r7, #20
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	40012c00 	.word	0x40012c00
 8005d18:	40000400 	.word	0x40000400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	00010007 	.word	0x00010007

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e040      	b.n	8005dbe <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1c      	ldr	r2, [pc, #112]	; (8005dcc <HAL_TIM_Base_Start_IT+0xa8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00e      	beq.n	8005d7c <HAL_TIM_Base_Start_IT+0x58>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d66:	d009      	beq.n	8005d7c <HAL_TIM_Base_Start_IT+0x58>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xac>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d004      	beq.n	8005d7c <HAL_TIM_Base_Start_IT+0x58>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xb0>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d115      	bne.n	8005da8 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	4b15      	ldr	r3, [pc, #84]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xb4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2b06      	cmp	r3, #6
 8005d8c:	d015      	beq.n	8005dba <HAL_TIM_Base_Start_IT+0x96>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d94:	d011      	beq.n	8005dba <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0201 	orr.w	r2, r2, #1
 8005da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da6:	e008      	b.n	8005dba <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0201 	orr.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	e000      	b.n	8005dbc <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40000400 	.word	0x40000400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	00010007 	.word	0x00010007

08005ddc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f022 0201 	bic.w	r2, r2, #1
 8005df2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6a1a      	ldr	r2, [r3, #32]
 8005dfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10f      	bne.n	8005e24 <HAL_TIM_Base_Stop_IT+0x48>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6a1a      	ldr	r2, [r3, #32]
 8005e0a:	f240 4344 	movw	r3, #1092	; 0x444
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d107      	bne.n	8005e24 <HAL_TIM_Base_Stop_IT+0x48>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr

08005e3a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b082      	sub	sp, #8
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d101      	bne.n	8005e4c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e049      	b.n	8005ee0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d106      	bne.n	8005e66 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 f841 	bl	8005ee8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2202      	movs	r2, #2
 8005e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	f000 fe41 	bl	8006b00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ede:	2300      	movs	r3, #0
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3708      	adds	r7, #8
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b084      	sub	sp, #16
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x24>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e03c      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	d109      	bne.n	8005f3a <HAL_TIM_PWM_Start+0x3e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	bf14      	ite	ne
 8005f32:	2301      	movne	r3, #1
 8005f34:	2300      	moveq	r3, #0
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	e02f      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b08      	cmp	r3, #8
 8005f3e:	d109      	bne.n	8005f54 <HAL_TIM_PWM_Start+0x58>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	bf14      	ite	ne
 8005f4c:	2301      	movne	r3, #1
 8005f4e:	2300      	moveq	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	e022      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d109      	bne.n	8005f6e <HAL_TIM_PWM_Start+0x72>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	bf14      	ite	ne
 8005f66:	2301      	movne	r3, #1
 8005f68:	2300      	moveq	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	e015      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	d109      	bne.n	8005f88 <HAL_TIM_PWM_Start+0x8c>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	bf14      	ite	ne
 8005f80:	2301      	movne	r3, #1
 8005f82:	2300      	moveq	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	e008      	b.n	8005f9a <HAL_TIM_PWM_Start+0x9e>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	bf14      	ite	ne
 8005f94:	2301      	movne	r3, #1
 8005f96:	2300      	moveq	r3, #0
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e083      	b.n	80060aa <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d104      	bne.n	8005fb2 <HAL_TIM_PWM_Start+0xb6>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fb0:	e023      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2b04      	cmp	r3, #4
 8005fb6:	d104      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0xc6>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2202      	movs	r2, #2
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fc0:	e01b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2b08      	cmp	r3, #8
 8005fc6:	d104      	bne.n	8005fd2 <HAL_TIM_PWM_Start+0xd6>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2202      	movs	r2, #2
 8005fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fd0:	e013      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b0c      	cmp	r3, #12
 8005fd6:	d104      	bne.n	8005fe2 <HAL_TIM_PWM_Start+0xe6>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fe0:	e00b      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b10      	cmp	r3, #16
 8005fe6:	d104      	bne.n	8005ff2 <HAL_TIM_PWM_Start+0xf6>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2202      	movs	r2, #2
 8005fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff0:	e003      	b.n	8005ffa <HAL_TIM_PWM_Start+0xfe>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2202      	movs	r2, #2
 8005ff6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2201      	movs	r2, #1
 8006000:	6839      	ldr	r1, [r7, #0]
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f992 	bl	800732c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <HAL_TIM_PWM_Start+0x1b8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d009      	beq.n	8006026 <HAL_TIM_PWM_Start+0x12a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a28      	ldr	r2, [pc, #160]	; (80060b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d004      	beq.n	8006026 <HAL_TIM_PWM_Start+0x12a>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a26      	ldr	r2, [pc, #152]	; (80060bc <HAL_TIM_PWM_Start+0x1c0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_Start+0x12e>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_TIM_PWM_Start+0x130>
 800602a:	2300      	movs	r3, #0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800603e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_TIM_PWM_Start+0x1b8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d00e      	beq.n	8006068 <HAL_TIM_PWM_Start+0x16c>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006052:	d009      	beq.n	8006068 <HAL_TIM_PWM_Start+0x16c>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a19      	ldr	r2, [pc, #100]	; (80060c0 <HAL_TIM_PWM_Start+0x1c4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIM_PWM_Start+0x16c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <HAL_TIM_PWM_Start+0x1bc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d115      	bne.n	8006094 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <HAL_TIM_PWM_Start+0x1c8>)
 8006070:	4013      	ands	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b06      	cmp	r3, #6
 8006078:	d015      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1aa>
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006080:	d011      	beq.n	80060a6 <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f042 0201 	orr.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006092:	e008      	b.n	80060a6 <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f042 0201 	orr.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]
 80060a4:	e000      	b.n	80060a8 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400
 80060c0:	40000400 	.word	0x40000400
 80060c4:	00010007 	.word	0x00010007

080060c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2200      	movs	r2, #0
 80060d8:	6839      	ldr	r1, [r7, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f926 	bl	800732c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a39      	ldr	r2, [pc, #228]	; (80061cc <HAL_TIM_PWM_Stop+0x104>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d009      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x36>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a38      	ldr	r2, [pc, #224]	; (80061d0 <HAL_TIM_PWM_Stop+0x108>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d004      	beq.n	80060fe <HAL_TIM_PWM_Stop+0x36>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a36      	ldr	r2, [pc, #216]	; (80061d4 <HAL_TIM_PWM_Stop+0x10c>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d101      	bne.n	8006102 <HAL_TIM_PWM_Stop+0x3a>
 80060fe:	2301      	movs	r3, #1
 8006100:	e000      	b.n	8006104 <HAL_TIM_PWM_Stop+0x3c>
 8006102:	2300      	movs	r3, #0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6a1a      	ldr	r2, [r3, #32]
 800610e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006112:	4013      	ands	r3, r2
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10f      	bne.n	8006138 <HAL_TIM_PWM_Stop+0x70>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6a1a      	ldr	r2, [r3, #32]
 800611e:	f240 4344 	movw	r3, #1092	; 0x444
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_TIM_PWM_Stop+0x70>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006136:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6a1a      	ldr	r2, [r3, #32]
 800613e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006142:	4013      	ands	r3, r2
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10f      	bne.n	8006168 <HAL_TIM_PWM_Stop+0xa0>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a1a      	ldr	r2, [r3, #32]
 800614e:	f240 4344 	movw	r3, #1092	; 0x444
 8006152:	4013      	ands	r3, r2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d107      	bne.n	8006168 <HAL_TIM_PWM_Stop+0xa0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d104      	bne.n	8006178 <HAL_TIM_PWM_Stop+0xb0>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006176:	e023      	b.n	80061c0 <HAL_TIM_PWM_Stop+0xf8>
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	2b04      	cmp	r3, #4
 800617c:	d104      	bne.n	8006188 <HAL_TIM_PWM_Stop+0xc0>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006186:	e01b      	b.n	80061c0 <HAL_TIM_PWM_Stop+0xf8>
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	2b08      	cmp	r3, #8
 800618c:	d104      	bne.n	8006198 <HAL_TIM_PWM_Stop+0xd0>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006196:	e013      	b.n	80061c0 <HAL_TIM_PWM_Stop+0xf8>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d104      	bne.n	80061a8 <HAL_TIM_PWM_Stop+0xe0>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061a6:	e00b      	b.n	80061c0 <HAL_TIM_PWM_Stop+0xf8>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	2b10      	cmp	r3, #16
 80061ac:	d104      	bne.n	80061b8 <HAL_TIM_PWM_Stop+0xf0>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061b6:	e003      	b.n	80061c0 <HAL_TIM_PWM_Stop+0xf8>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3708      	adds	r7, #8
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40014000 	.word	0x40014000
 80061d4:	40014400 	.word	0x40014400

080061d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e097      	b.n	800631c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d106      	bne.n	8006206 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7fd fb2f 	bl	8003864 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2202      	movs	r2, #2
 800620a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800621c:	f023 0307 	bic.w	r3, r3, #7
 8006220:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	4610      	mov	r0, r2
 800622e:	f000 fc67 	bl	8006b00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	699b      	ldr	r3, [r3, #24]
 8006240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625a:	f023 0303 	bic.w	r3, r3, #3
 800625e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	699b      	ldr	r3, [r3, #24]
 8006268:	021b      	lsls	r3, r3, #8
 800626a:	4313      	orrs	r3, r2
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	4313      	orrs	r3, r2
 8006270:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006278:	f023 030c 	bic.w	r3, r3, #12
 800627c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006284:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006288:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	4313      	orrs	r3, r2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	011a      	lsls	r2, r3, #4
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6a1b      	ldr	r3, [r3, #32]
 80062a6:	031b      	lsls	r3, r3, #12
 80062a8:	4313      	orrs	r3, r2
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80062b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80062be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	4313      	orrs	r3, r2
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	4313      	orrs	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	697a      	ldr	r2, [r7, #20]
 80062d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2201      	movs	r2, #1
 80062f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2201      	movs	r2, #1
 8006306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2201      	movs	r2, #1
 8006316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006334:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800633c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006344:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800634c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d110      	bne.n	8006376 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d102      	bne.n	8006360 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800635a:	7b7b      	ldrb	r3, [r7, #13]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e069      	b.n	8006438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006374:	e031      	b.n	80063da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2b04      	cmp	r3, #4
 800637a:	d110      	bne.n	800639e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800637c:	7bbb      	ldrb	r3, [r7, #14]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d102      	bne.n	8006388 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006382:	7b3b      	ldrb	r3, [r7, #12]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d001      	beq.n	800638c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	e055      	b.n	8006438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800639c:	e01d      	b.n	80063da <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d108      	bne.n	80063b6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80063a4:	7bbb      	ldrb	r3, [r7, #14]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d105      	bne.n	80063b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d102      	bne.n	80063b6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80063b0:	7b3b      	ldrb	r3, [r7, #12]
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	d001      	beq.n	80063ba <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e03e      	b.n	8006438 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2202      	movs	r2, #2
 80063be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2202      	movs	r2, #2
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2202      	movs	r2, #2
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_TIM_Encoder_Start+0xc4>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d008      	beq.n	80063f8 <HAL_TIM_Encoder_Start+0xd4>
 80063e6:	e00f      	b.n	8006408 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2201      	movs	r2, #1
 80063ee:	2100      	movs	r1, #0
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 ff9b 	bl	800732c <TIM_CCxChannelCmd>
      break;
 80063f6:	e016      	b.n	8006426 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	2201      	movs	r2, #1
 80063fe:	2104      	movs	r1, #4
 8006400:	4618      	mov	r0, r3
 8006402:	f000 ff93 	bl	800732c <TIM_CCxChannelCmd>
      break;
 8006406:	e00e      	b.n	8006426 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2201      	movs	r2, #1
 800640e:	2100      	movs	r1, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f000 ff8b 	bl	800732c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2201      	movs	r2, #1
 800641c:	2104      	movs	r1, #4
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff84 	bl	800732c <TIM_CCxChannelCmd>
      break;
 8006424:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d122      	bne.n	800649c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f003 0302 	and.w	r3, r3, #2
 8006460:	2b02      	cmp	r3, #2
 8006462:	d11b      	bne.n	800649c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f06f 0202 	mvn.w	r2, #2
 800646c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2201      	movs	r2, #1
 8006472:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	f003 0303 	and.w	r3, r3, #3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fb1e 	bl	8006ac4 <HAL_TIM_IC_CaptureCallback>
 8006488:	e005      	b.n	8006496 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fb10 	bl	8006ab0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fb21 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2200      	movs	r2, #0
 800649a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0304 	and.w	r3, r3, #4
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d122      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f003 0304 	and.w	r3, r3, #4
 80064b4:	2b04      	cmp	r3, #4
 80064b6:	d11b      	bne.n	80064f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f06f 0204 	mvn.w	r2, #4
 80064c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2202      	movs	r2, #2
 80064c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	699b      	ldr	r3, [r3, #24]
 80064ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d003      	beq.n	80064de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 faf4 	bl	8006ac4 <HAL_TIM_IC_CaptureCallback>
 80064dc:	e005      	b.n	80064ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 fae6 	bl	8006ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 faf7 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d122      	bne.n	8006544 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b08      	cmp	r3, #8
 800650a:	d11b      	bne.n	8006544 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f06f 0208 	mvn.w	r2, #8
 8006514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2204      	movs	r2, #4
 800651a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69db      	ldr	r3, [r3, #28]
 8006522:	f003 0303 	and.w	r3, r3, #3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 faca 	bl	8006ac4 <HAL_TIM_IC_CaptureCallback>
 8006530:	e005      	b.n	800653e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fabc 	bl	8006ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 facd 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0310 	and.w	r3, r3, #16
 800654e:	2b10      	cmp	r3, #16
 8006550:	d122      	bne.n	8006598 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0310 	and.w	r3, r3, #16
 800655c:	2b10      	cmp	r3, #16
 800655e:	d11b      	bne.n	8006598 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0210 	mvn.w	r2, #16
 8006568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2208      	movs	r2, #8
 800656e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800657a:	2b00      	cmp	r3, #0
 800657c:	d003      	beq.n	8006586 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 faa0 	bl	8006ac4 <HAL_TIM_IC_CaptureCallback>
 8006584:	e005      	b.n	8006592 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fa92 	bl	8006ab0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 faa3 	bl	8006ad8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	691b      	ldr	r3, [r3, #16]
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d10e      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d107      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f06f 0201 	mvn.w	r2, #1
 80065bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fb fe94 	bl	80022ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d10e      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065dc:	2b80      	cmp	r3, #128	; 0x80
 80065de:	d107      	bne.n	80065f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 ffb4 	bl	8007558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065fe:	d10e      	bne.n	800661e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660a:	2b80      	cmp	r3, #128	; 0x80
 800660c:	d107      	bne.n	800661e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 ffa7 	bl	800756c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d10e      	bne.n	800664a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d107      	bne.n	800664a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006642:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fa51 	bl	8006aec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0320 	and.w	r3, r3, #32
 8006654:	2b20      	cmp	r3, #32
 8006656:	d10e      	bne.n	8006676 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	f003 0320 	and.w	r3, r3, #32
 8006662:	2b20      	cmp	r3, #32
 8006664:	d107      	bne.n	8006676 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f06f 0220 	mvn.w	r2, #32
 800666e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 ff67 	bl	8007544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006696:	2302      	movs	r3, #2
 8006698:	e0fd      	b.n	8006896 <HAL_TIM_PWM_ConfigChannel+0x216>
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b14      	cmp	r3, #20
 80066a6:	f200 80f0 	bhi.w	800688a <HAL_TIM_PWM_ConfigChannel+0x20a>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	08006705 	.word	0x08006705
 80066b4:	0800688b 	.word	0x0800688b
 80066b8:	0800688b 	.word	0x0800688b
 80066bc:	0800688b 	.word	0x0800688b
 80066c0:	08006745 	.word	0x08006745
 80066c4:	0800688b 	.word	0x0800688b
 80066c8:	0800688b 	.word	0x0800688b
 80066cc:	0800688b 	.word	0x0800688b
 80066d0:	08006787 	.word	0x08006787
 80066d4:	0800688b 	.word	0x0800688b
 80066d8:	0800688b 	.word	0x0800688b
 80066dc:	0800688b 	.word	0x0800688b
 80066e0:	080067c7 	.word	0x080067c7
 80066e4:	0800688b 	.word	0x0800688b
 80066e8:	0800688b 	.word	0x0800688b
 80066ec:	0800688b 	.word	0x0800688b
 80066f0:	08006809 	.word	0x08006809
 80066f4:	0800688b 	.word	0x0800688b
 80066f8:	0800688b 	.word	0x0800688b
 80066fc:	0800688b 	.word	0x0800688b
 8006700:	08006849 	.word	0x08006849
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fa66 	bl	8006bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699a      	ldr	r2, [r3, #24]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0208 	orr.w	r2, r2, #8
 800671e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0204 	bic.w	r2, r2, #4
 800672e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6999      	ldr	r1, [r3, #24]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	691a      	ldr	r2, [r3, #16]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	619a      	str	r2, [r3, #24]
      break;
 8006742:	e0a3      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68b9      	ldr	r1, [r7, #8]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fac2 	bl	8006cd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	699a      	ldr	r2, [r3, #24]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800675e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	699a      	ldr	r2, [r3, #24]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800676e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	6999      	ldr	r1, [r3, #24]
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	021a      	lsls	r2, r3, #8
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	430a      	orrs	r2, r1
 8006782:	619a      	str	r2, [r3, #24]
      break;
 8006784:	e082      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 fb1b 	bl	8006dc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69da      	ldr	r2, [r3, #28]
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0208 	orr.w	r2, r2, #8
 80067a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	69da      	ldr	r2, [r3, #28]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0204 	bic.w	r2, r2, #4
 80067b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69d9      	ldr	r1, [r3, #28]
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	691a      	ldr	r2, [r3, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	430a      	orrs	r2, r1
 80067c2:	61da      	str	r2, [r3, #28]
      break;
 80067c4:	e062      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fb73 	bl	8006eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69da      	ldr	r2, [r3, #28]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	021a      	lsls	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	61da      	str	r2, [r3, #28]
      break;
 8006806:	e041      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68b9      	ldr	r1, [r7, #8]
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fbb0 	bl	8006f74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f042 0208 	orr.w	r2, r2, #8
 8006822:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0204 	bic.w	r2, r2, #4
 8006832:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	691a      	ldr	r2, [r3, #16]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	430a      	orrs	r2, r1
 8006844:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006846:	e021      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fbe8 	bl	8007024 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006862:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006872:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	021a      	lsls	r2, r3, #8
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	430a      	orrs	r2, r1
 8006886:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006888:	e000      	b.n	800688c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800688a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d101      	bne.n	80068b8 <HAL_TIM_ConfigClockSource+0x18>
 80068b4:	2302      	movs	r3, #2
 80068b6:	e0b5      	b.n	8006a24 <HAL_TIM_ConfigClockSource+0x184>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2201      	movs	r2, #1
 80068bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	689b      	ldr	r3, [r3, #8]
 80068ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80068da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068f4:	d03e      	beq.n	8006974 <HAL_TIM_ConfigClockSource+0xd4>
 80068f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068fa:	f200 8087 	bhi.w	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 80068fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006902:	f000 8085 	beq.w	8006a10 <HAL_TIM_ConfigClockSource+0x170>
 8006906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800690a:	d87f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800690c:	2b70      	cmp	r3, #112	; 0x70
 800690e:	d01a      	beq.n	8006946 <HAL_TIM_ConfigClockSource+0xa6>
 8006910:	2b70      	cmp	r3, #112	; 0x70
 8006912:	d87b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006914:	2b60      	cmp	r3, #96	; 0x60
 8006916:	d050      	beq.n	80069ba <HAL_TIM_ConfigClockSource+0x11a>
 8006918:	2b60      	cmp	r3, #96	; 0x60
 800691a:	d877      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800691c:	2b50      	cmp	r3, #80	; 0x50
 800691e:	d03c      	beq.n	800699a <HAL_TIM_ConfigClockSource+0xfa>
 8006920:	2b50      	cmp	r3, #80	; 0x50
 8006922:	d873      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	d058      	beq.n	80069da <HAL_TIM_ConfigClockSource+0x13a>
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d86f      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800692c:	2b30      	cmp	r3, #48	; 0x30
 800692e:	d064      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006930:	2b30      	cmp	r3, #48	; 0x30
 8006932:	d86b      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 8006934:	2b20      	cmp	r3, #32
 8006936:	d060      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006938:	2b20      	cmp	r3, #32
 800693a:	d867      	bhi.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05c      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
 8006940:	2b10      	cmp	r3, #16
 8006942:	d05a      	beq.n	80069fa <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006944:	e062      	b.n	8006a0c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6818      	ldr	r0, [r3, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	6899      	ldr	r1, [r3, #8]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f000 fcc9 	bl	80072ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006968:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	609a      	str	r2, [r3, #8]
      break;
 8006972:	e04e      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	6899      	ldr	r1, [r3, #8]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	f000 fcb2 	bl	80072ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689a      	ldr	r2, [r3, #8]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006996:	609a      	str	r2, [r3, #8]
      break;
 8006998:	e03b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6818      	ldr	r0, [r3, #0]
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	6859      	ldr	r1, [r3, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	461a      	mov	r2, r3
 80069a8:	f000 fc26 	bl	80071f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2150      	movs	r1, #80	; 0x50
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fc7f 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 80069b8:	e02b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6818      	ldr	r0, [r3, #0]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	6859      	ldr	r1, [r3, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	461a      	mov	r2, r3
 80069c8:	f000 fc45 	bl	8007256 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2160      	movs	r1, #96	; 0x60
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 fc6f 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 80069d8:	e01b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f000 fc06 	bl	80071f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2140      	movs	r1, #64	; 0x40
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 fc5f 	bl	80072b6 <TIM_ITRx_SetConfig>
      break;
 80069f8:	e00b      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	4619      	mov	r1, r3
 8006a04:	4610      	mov	r0, r2
 8006a06:	f000 fc56 	bl	80072b6 <TIM_ITRx_SetConfig>
        break;
 8006a0a:	e002      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006a0c:	bf00      	nop
 8006a0e:	e000      	b.n	8006a12 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006a10:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3710      	adds	r7, #16
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
 8006a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e031      	b.n	8006aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fb3e 	bl	80070d8 <TIM_SlaveTimer_SetConfig>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	e018      	b.n	8006aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006aa6:	2300      	movs	r3, #0
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3708      	adds	r7, #8
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006acc:	bf00      	nop
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad6:	4770      	bx	lr

08006ad8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ae0:	bf00      	nop
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a2e      	ldr	r2, [pc, #184]	; (8006bcc <TIM_Base_SetConfig+0xcc>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d007      	beq.n	8006b28 <TIM_Base_SetConfig+0x28>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b1e:	d003      	beq.n	8006b28 <TIM_Base_SetConfig+0x28>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a2b      	ldr	r2, [pc, #172]	; (8006bd0 <TIM_Base_SetConfig+0xd0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d108      	bne.n	8006b3a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	68fa      	ldr	r2, [r7, #12]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a23      	ldr	r2, [pc, #140]	; (8006bcc <TIM_Base_SetConfig+0xcc>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_Base_SetConfig+0x62>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b48:	d00b      	beq.n	8006b62 <TIM_Base_SetConfig+0x62>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a20      	ldr	r2, [pc, #128]	; (8006bd0 <TIM_Base_SetConfig+0xd0>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_Base_SetConfig+0x62>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a1f      	ldr	r2, [pc, #124]	; (8006bd4 <TIM_Base_SetConfig+0xd4>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_Base_SetConfig+0x62>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a1e      	ldr	r2, [pc, #120]	; (8006bd8 <TIM_Base_SetConfig+0xd8>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d108      	bne.n	8006b74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	689a      	ldr	r2, [r3, #8]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0c      	ldr	r2, [pc, #48]	; (8006bcc <TIM_Base_SetConfig+0xcc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d007      	beq.n	8006bb0 <TIM_Base_SetConfig+0xb0>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0c      	ldr	r2, [pc, #48]	; (8006bd4 <TIM_Base_SetConfig+0xd4>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d003      	beq.n	8006bb0 <TIM_Base_SetConfig+0xb0>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a0b      	ldr	r2, [pc, #44]	; (8006bd8 <TIM_Base_SetConfig+0xd8>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d103      	bne.n	8006bb8 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	615a      	str	r2, [r3, #20]
}
 8006bbe:	bf00      	nop
 8006bc0:	3714      	adds	r7, #20
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40012c00 	.word	0x40012c00
 8006bd0:	40000400 	.word	0x40000400
 8006bd4:	40014000 	.word	0x40014000
 8006bd8:	40014400 	.word	0x40014400

08006bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 0302 	bic.w	r3, r3, #2
 8006c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a24      	ldr	r2, [pc, #144]	; (8006cc8 <TIM_OC1_SetConfig+0xec>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d007      	beq.n	8006c4c <TIM_OC1_SetConfig+0x70>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a23      	ldr	r2, [pc, #140]	; (8006ccc <TIM_OC1_SetConfig+0xf0>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d003      	beq.n	8006c4c <TIM_OC1_SetConfig+0x70>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a22      	ldr	r2, [pc, #136]	; (8006cd0 <TIM_OC1_SetConfig+0xf4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d10c      	bne.n	8006c66 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f023 0308 	bic.w	r3, r3, #8
 8006c52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	f023 0304 	bic.w	r3, r3, #4
 8006c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a17      	ldr	r2, [pc, #92]	; (8006cc8 <TIM_OC1_SetConfig+0xec>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d007      	beq.n	8006c7e <TIM_OC1_SetConfig+0xa2>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a16      	ldr	r2, [pc, #88]	; (8006ccc <TIM_OC1_SetConfig+0xf0>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d003      	beq.n	8006c7e <TIM_OC1_SetConfig+0xa2>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <TIM_OC1_SetConfig+0xf4>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d111      	bne.n	8006ca2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40012c00 	.word	0x40012c00
 8006ccc:	40014000 	.word	0x40014000
 8006cd0:	40014400 	.word	0x40014400

08006cd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f023 0210 	bic.w	r2, r3, #16
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	021b      	lsls	r3, r3, #8
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 0320 	bic.w	r3, r3, #32
 8006d22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	697a      	ldr	r2, [r7, #20]
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d10d      	bne.n	8006d54 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	697a      	ldr	r2, [r7, #20]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a19      	ldr	r2, [pc, #100]	; (8006dbc <TIM_OC2_SetConfig+0xe8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d007      	beq.n	8006d6c <TIM_OC2_SetConfig+0x98>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a18      	ldr	r2, [pc, #96]	; (8006dc0 <TIM_OC2_SetConfig+0xec>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_OC2_SetConfig+0x98>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <TIM_OC2_SetConfig+0xf0>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d113      	bne.n	8006d94 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	4313      	orrs	r3, r2
 8006d86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	693a      	ldr	r2, [r7, #16]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	621a      	str	r2, [r3, #32]
}
 8006dae:	bf00      	nop
 8006db0:	371c      	adds	r7, #28
 8006db2:	46bd      	mov	sp, r7
 8006db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db8:	4770      	bx	lr
 8006dba:	bf00      	nop
 8006dbc:	40012c00 	.word	0x40012c00
 8006dc0:	40014000 	.word	0x40014000
 8006dc4:	40014400 	.word	0x40014400

08006dc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	021b      	lsls	r3, r3, #8
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a21      	ldr	r2, [pc, #132]	; (8006eac <TIM_OC3_SetConfig+0xe4>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10d      	bne.n	8006e46 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	021b      	lsls	r3, r3, #8
 8006e38:	697a      	ldr	r2, [r7, #20]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a18      	ldr	r2, [pc, #96]	; (8006eac <TIM_OC3_SetConfig+0xe4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d007      	beq.n	8006e5e <TIM_OC3_SetConfig+0x96>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a17      	ldr	r2, [pc, #92]	; (8006eb0 <TIM_OC3_SetConfig+0xe8>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d003      	beq.n	8006e5e <TIM_OC3_SetConfig+0x96>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a16      	ldr	r2, [pc, #88]	; (8006eb4 <TIM_OC3_SetConfig+0xec>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d113      	bne.n	8006e86 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	695b      	ldr	r3, [r3, #20]
 8006e72:	011b      	lsls	r3, r3, #4
 8006e74:	693a      	ldr	r2, [r7, #16]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	011b      	lsls	r3, r3, #4
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	697a      	ldr	r2, [r7, #20]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40014000 	.word	0x40014000
 8006eb4:	40014400 	.word	0x40014400

08006eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	69db      	ldr	r3, [r3, #28]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	031b      	lsls	r3, r3, #12
 8006f0e:	693a      	ldr	r2, [r7, #16]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <TIM_OC4_SetConfig+0xb0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_OC4_SetConfig+0x74>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a13      	ldr	r2, [pc, #76]	; (8006f6c <TIM_OC4_SetConfig+0xb4>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_OC4_SetConfig+0x74>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a12      	ldr	r2, [pc, #72]	; (8006f70 <TIM_OC4_SetConfig+0xb8>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d109      	bne.n	8006f40 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	695b      	ldr	r3, [r3, #20]
 8006f38:	019b      	lsls	r3, r3, #6
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	697a      	ldr	r2, [r7, #20]
 8006f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40012c00 	.word	0x40012c00
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400

08006f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b087      	sub	sp, #28
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a1b      	ldr	r3, [r3, #32]
 8006f82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a1b      	ldr	r3, [r3, #32]
 8006f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <TIM_OC5_SetConfig+0xa4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d007      	beq.n	8006fde <TIM_OC5_SetConfig+0x6a>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a12      	ldr	r2, [pc, #72]	; (800701c <TIM_OC5_SetConfig+0xa8>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d003      	beq.n	8006fde <TIM_OC5_SetConfig+0x6a>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a11      	ldr	r2, [pc, #68]	; (8007020 <TIM_OC5_SetConfig+0xac>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d109      	bne.n	8006ff2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	695b      	ldr	r3, [r3, #20]
 8006fea:	021b      	lsls	r3, r3, #8
 8006fec:	697a      	ldr	r2, [r7, #20]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	693a      	ldr	r2, [r7, #16]
 800700a:	621a      	str	r2, [r3, #32]
}
 800700c:	bf00      	nop
 800700e:	371c      	adds	r7, #28
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	40012c00 	.word	0x40012c00
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400

08007024 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a1b      	ldr	r3, [r3, #32]
 800703e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800704a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	021b      	lsls	r3, r3, #8
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800706a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	693a      	ldr	r2, [r7, #16]
 8007074:	4313      	orrs	r3, r2
 8007076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4a14      	ldr	r2, [pc, #80]	; (80070cc <TIM_OC6_SetConfig+0xa8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d007      	beq.n	8007090 <TIM_OC6_SetConfig+0x6c>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a13      	ldr	r2, [pc, #76]	; (80070d0 <TIM_OC6_SetConfig+0xac>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_OC6_SetConfig+0x6c>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a12      	ldr	r2, [pc, #72]	; (80070d4 <TIM_OC6_SetConfig+0xb0>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d109      	bne.n	80070a4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	695b      	ldr	r3, [r3, #20]
 800709c:	029b      	lsls	r3, r3, #10
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685a      	ldr	r2, [r3, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	693a      	ldr	r2, [r7, #16]
 80070bc:	621a      	str	r2, [r3, #32]
}
 80070be:	bf00      	nop
 80070c0:	371c      	adds	r7, #28
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	40012c00 	.word	0x40012c00
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400

080070d8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b086      	sub	sp, #24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070f0:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	697a      	ldr	r2, [r7, #20]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007102:	f023 0307 	bic.w	r3, r3, #7
 8007106:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b70      	cmp	r3, #112	; 0x70
 8007120:	d01a      	beq.n	8007158 <TIM_SlaveTimer_SetConfig+0x80>
 8007122:	2b70      	cmp	r3, #112	; 0x70
 8007124:	d860      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007126:	2b60      	cmp	r3, #96	; 0x60
 8007128:	d054      	beq.n	80071d4 <TIM_SlaveTimer_SetConfig+0xfc>
 800712a:	2b60      	cmp	r3, #96	; 0x60
 800712c:	d85c      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800712e:	2b50      	cmp	r3, #80	; 0x50
 8007130:	d046      	beq.n	80071c0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007132:	2b50      	cmp	r3, #80	; 0x50
 8007134:	d858      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007136:	2b40      	cmp	r3, #64	; 0x40
 8007138:	d019      	beq.n	800716e <TIM_SlaveTimer_SetConfig+0x96>
 800713a:	2b40      	cmp	r3, #64	; 0x40
 800713c:	d854      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800713e:	2b30      	cmp	r3, #48	; 0x30
 8007140:	d054      	beq.n	80071ec <TIM_SlaveTimer_SetConfig+0x114>
 8007142:	2b30      	cmp	r3, #48	; 0x30
 8007144:	d850      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 8007146:	2b20      	cmp	r3, #32
 8007148:	d050      	beq.n	80071ec <TIM_SlaveTimer_SetConfig+0x114>
 800714a:	2b20      	cmp	r3, #32
 800714c:	d84c      	bhi.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d04c      	beq.n	80071ec <TIM_SlaveTimer_SetConfig+0x114>
 8007152:	2b10      	cmp	r3, #16
 8007154:	d04a      	beq.n	80071ec <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8007156:	e047      	b.n	80071e8 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6818      	ldr	r0, [r3, #0]
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	68d9      	ldr	r1, [r3, #12]
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	f000 f8c0 	bl	80072ec <TIM_ETR_SetConfig>
      break;
 800716c:	e03f      	b.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b05      	cmp	r3, #5
 8007174:	d101      	bne.n	800717a <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e03a      	b.n	80071f0 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	699b      	ldr	r3, [r3, #24]
 8007198:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071a0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	691b      	ldr	r3, [r3, #16]
 80071a6:	011b      	lsls	r3, r3, #4
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	68fa      	ldr	r2, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	621a      	str	r2, [r3, #32]
      break;
 80071be:	e016      	b.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6818      	ldr	r0, [r3, #0]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	6899      	ldr	r1, [r3, #8]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	461a      	mov	r2, r3
 80071ce:	f000 f813 	bl	80071f8 <TIM_TI1_ConfigInputStage>
      break;
 80071d2:	e00c      	b.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6818      	ldr	r0, [r3, #0]
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	6899      	ldr	r1, [r3, #8]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	461a      	mov	r2, r3
 80071e2:	f000 f838 	bl	8007256 <TIM_TI2_ConfigInputStage>
      break;
 80071e6:	e002      	b.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80071e8:	bf00      	nop
 80071ea:	e000      	b.n	80071ee <TIM_SlaveTimer_SetConfig+0x116>
        break;
 80071ec:	bf00      	nop
  }
  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3718      	adds	r7, #24
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	60f8      	str	r0, [r7, #12]
 8007200:	60b9      	str	r1, [r7, #8]
 8007202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f023 0201 	bic.w	r2, r3, #1
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 030a 	bic.w	r3, r3, #10
 8007234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	621a      	str	r2, [r3, #32]
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007256:	b480      	push	{r7}
 8007258:	b087      	sub	sp, #28
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	f023 0210 	bic.w	r2, r3, #16
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	031b      	lsls	r3, r3, #12
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	4313      	orrs	r3, r2
 800728a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	011b      	lsls	r3, r3, #4
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	697a      	ldr	r2, [r7, #20]
 80072a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	621a      	str	r2, [r3, #32]
}
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b085      	sub	sp, #20
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	f043 0307 	orr.w	r3, r3, #7
 80072d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68fa      	ldr	r2, [r7, #12]
 80072de:	609a      	str	r2, [r3, #8]
}
 80072e0:	bf00      	nop
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	60b9      	str	r1, [r7, #8]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007306:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	431a      	orrs	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4313      	orrs	r3, r2
 8007314:	697a      	ldr	r2, [r7, #20]
 8007316:	4313      	orrs	r3, r2
 8007318:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	697a      	ldr	r2, [r7, #20]
 800731e:	609a      	str	r2, [r3, #8]
}
 8007320:	bf00      	nop
 8007322:	371c      	adds	r7, #28
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr

0800732c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800732c:	b480      	push	{r7}
 800732e:	b087      	sub	sp, #28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	f003 031f 	and.w	r3, r3, #31
 800733e:	2201      	movs	r2, #1
 8007340:	fa02 f303 	lsl.w	r3, r2, r3
 8007344:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	6a1a      	ldr	r2, [r3, #32]
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	43db      	mvns	r3, r3
 800734e:	401a      	ands	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6a1a      	ldr	r2, [r3, #32]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	f003 031f 	and.w	r3, r3, #31
 800735e:	6879      	ldr	r1, [r7, #4]
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	621a      	str	r2, [r3, #32]
}
 800736a:	bf00      	nop
 800736c:	371c      	adds	r7, #28
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
	...

08007378 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007388:	2b01      	cmp	r3, #1
 800738a:	d101      	bne.n	8007390 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800738c:	2302      	movs	r3, #2
 800738e:	e054      	b.n	800743a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2202      	movs	r2, #2
 800739c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a24      	ldr	r2, [pc, #144]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d108      	bne.n	80073cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80073c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4313      	orrs	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a17      	ldr	r2, [pc, #92]	; (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d00e      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073f8:	d009      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a13      	ldr	r2, [pc, #76]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d004      	beq.n	800740e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a11      	ldr	r2, [pc, #68]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d10c      	bne.n	8007428 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007414:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	4313      	orrs	r3, r2
 800741e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40012c00 	.word	0x40012c00
 800744c:	40000400 	.word	0x40000400
 8007450:	40014000 	.word	0x40014000

08007454 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800746c:	2302      	movs	r3, #2
 800746e:	e060      	b.n	8007532 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	4313      	orrs	r3, r2
 8007492:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	4313      	orrs	r3, r2
 80074a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	699b      	ldr	r3, [r3, #24]
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a14      	ldr	r2, [pc, #80]	; (8007540 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d115      	bne.n	8007520 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fe:	051b      	lsls	r3, r3, #20
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	4313      	orrs	r3, r2
 800751e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40012c00 	.word	0x40012c00

08007544 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800754c:	bf00      	nop
 800754e:	370c      	adds	r7, #12
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	e040      	b.n	8007614 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007596:	2b00      	cmp	r3, #0
 8007598:	d106      	bne.n	80075a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7fc fa2e 	bl	8003a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2224      	movs	r2, #36	; 0x24
 80075ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f022 0201 	bic.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f82c 	bl	800761c <UART_SetConfig>
 80075c4:	4603      	mov	r3, r0
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d101      	bne.n	80075ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e022      	b.n	8007614 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d002      	beq.n	80075dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa7c 	bl	8007ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685a      	ldr	r2, [r3, #4]
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	689a      	ldr	r2, [r3, #8]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f042 0201 	orr.w	r2, r2, #1
 800760a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 fb03 	bl	8007c18 <UART_CheckIdleState>
 8007612:	4603      	mov	r3, r0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3708      	adds	r7, #8
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800761c:	b5b0      	push	{r4, r5, r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007624:	2300      	movs	r3, #0
 8007626:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	431a      	orrs	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	431a      	orrs	r2, r3
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	4313      	orrs	r3, r2
 800763e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	4ba4      	ldr	r3, [pc, #656]	; (80078d8 <UART_SetConfig+0x2bc>)
 8007648:	4013      	ands	r3, r2
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	6812      	ldr	r2, [r2, #0]
 800764e:	69f9      	ldr	r1, [r7, #28]
 8007650:	430b      	orrs	r3, r1
 8007652:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	430a      	orrs	r2, r1
 8007668:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	699b      	ldr	r3, [r3, #24]
 800766e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a99      	ldr	r2, [pc, #612]	; (80078dc <UART_SetConfig+0x2c0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	69fa      	ldr	r2, [r7, #28]
 8007680:	4313      	orrs	r3, r2
 8007682:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689b      	ldr	r3, [r3, #8]
 800768a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69fa      	ldr	r2, [r7, #28]
 8007694:	430a      	orrs	r2, r1
 8007696:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a90      	ldr	r2, [pc, #576]	; (80078e0 <UART_SetConfig+0x2c4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d121      	bne.n	80076e6 <UART_SetConfig+0xca>
 80076a2:	4b90      	ldr	r3, [pc, #576]	; (80078e4 <UART_SetConfig+0x2c8>)
 80076a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076a8:	f003 0303 	and.w	r3, r3, #3
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d817      	bhi.n	80076e0 <UART_SetConfig+0xc4>
 80076b0:	a201      	add	r2, pc, #4	; (adr r2, 80076b8 <UART_SetConfig+0x9c>)
 80076b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076b6:	bf00      	nop
 80076b8:	080076c9 	.word	0x080076c9
 80076bc:	080076d5 	.word	0x080076d5
 80076c0:	080076cf 	.word	0x080076cf
 80076c4:	080076db 	.word	0x080076db
 80076c8:	2301      	movs	r3, #1
 80076ca:	76fb      	strb	r3, [r7, #27]
 80076cc:	e0bc      	b.n	8007848 <UART_SetConfig+0x22c>
 80076ce:	2302      	movs	r3, #2
 80076d0:	76fb      	strb	r3, [r7, #27]
 80076d2:	e0b9      	b.n	8007848 <UART_SetConfig+0x22c>
 80076d4:	2304      	movs	r3, #4
 80076d6:	76fb      	strb	r3, [r7, #27]
 80076d8:	e0b6      	b.n	8007848 <UART_SetConfig+0x22c>
 80076da:	2308      	movs	r3, #8
 80076dc:	76fb      	strb	r3, [r7, #27]
 80076de:	e0b3      	b.n	8007848 <UART_SetConfig+0x22c>
 80076e0:	2310      	movs	r3, #16
 80076e2:	76fb      	strb	r3, [r7, #27]
 80076e4:	e0b0      	b.n	8007848 <UART_SetConfig+0x22c>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a7f      	ldr	r2, [pc, #508]	; (80078e8 <UART_SetConfig+0x2cc>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d132      	bne.n	8007756 <UART_SetConfig+0x13a>
 80076f0:	4b7c      	ldr	r3, [pc, #496]	; (80078e4 <UART_SetConfig+0x2c8>)
 80076f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f6:	f003 030c 	and.w	r3, r3, #12
 80076fa:	2b0c      	cmp	r3, #12
 80076fc:	d828      	bhi.n	8007750 <UART_SetConfig+0x134>
 80076fe:	a201      	add	r2, pc, #4	; (adr r2, 8007704 <UART_SetConfig+0xe8>)
 8007700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007704:	08007739 	.word	0x08007739
 8007708:	08007751 	.word	0x08007751
 800770c:	08007751 	.word	0x08007751
 8007710:	08007751 	.word	0x08007751
 8007714:	08007745 	.word	0x08007745
 8007718:	08007751 	.word	0x08007751
 800771c:	08007751 	.word	0x08007751
 8007720:	08007751 	.word	0x08007751
 8007724:	0800773f 	.word	0x0800773f
 8007728:	08007751 	.word	0x08007751
 800772c:	08007751 	.word	0x08007751
 8007730:	08007751 	.word	0x08007751
 8007734:	0800774b 	.word	0x0800774b
 8007738:	2300      	movs	r3, #0
 800773a:	76fb      	strb	r3, [r7, #27]
 800773c:	e084      	b.n	8007848 <UART_SetConfig+0x22c>
 800773e:	2302      	movs	r3, #2
 8007740:	76fb      	strb	r3, [r7, #27]
 8007742:	e081      	b.n	8007848 <UART_SetConfig+0x22c>
 8007744:	2304      	movs	r3, #4
 8007746:	76fb      	strb	r3, [r7, #27]
 8007748:	e07e      	b.n	8007848 <UART_SetConfig+0x22c>
 800774a:	2308      	movs	r3, #8
 800774c:	76fb      	strb	r3, [r7, #27]
 800774e:	e07b      	b.n	8007848 <UART_SetConfig+0x22c>
 8007750:	2310      	movs	r3, #16
 8007752:	76fb      	strb	r3, [r7, #27]
 8007754:	e078      	b.n	8007848 <UART_SetConfig+0x22c>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a64      	ldr	r2, [pc, #400]	; (80078ec <UART_SetConfig+0x2d0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d120      	bne.n	80077a2 <UART_SetConfig+0x186>
 8007760:	4b60      	ldr	r3, [pc, #384]	; (80078e4 <UART_SetConfig+0x2c8>)
 8007762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007766:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800776a:	2b30      	cmp	r3, #48	; 0x30
 800776c:	d013      	beq.n	8007796 <UART_SetConfig+0x17a>
 800776e:	2b30      	cmp	r3, #48	; 0x30
 8007770:	d814      	bhi.n	800779c <UART_SetConfig+0x180>
 8007772:	2b20      	cmp	r3, #32
 8007774:	d009      	beq.n	800778a <UART_SetConfig+0x16e>
 8007776:	2b20      	cmp	r3, #32
 8007778:	d810      	bhi.n	800779c <UART_SetConfig+0x180>
 800777a:	2b00      	cmp	r3, #0
 800777c:	d002      	beq.n	8007784 <UART_SetConfig+0x168>
 800777e:	2b10      	cmp	r3, #16
 8007780:	d006      	beq.n	8007790 <UART_SetConfig+0x174>
 8007782:	e00b      	b.n	800779c <UART_SetConfig+0x180>
 8007784:	2300      	movs	r3, #0
 8007786:	76fb      	strb	r3, [r7, #27]
 8007788:	e05e      	b.n	8007848 <UART_SetConfig+0x22c>
 800778a:	2302      	movs	r3, #2
 800778c:	76fb      	strb	r3, [r7, #27]
 800778e:	e05b      	b.n	8007848 <UART_SetConfig+0x22c>
 8007790:	2304      	movs	r3, #4
 8007792:	76fb      	strb	r3, [r7, #27]
 8007794:	e058      	b.n	8007848 <UART_SetConfig+0x22c>
 8007796:	2308      	movs	r3, #8
 8007798:	76fb      	strb	r3, [r7, #27]
 800779a:	e055      	b.n	8007848 <UART_SetConfig+0x22c>
 800779c:	2310      	movs	r3, #16
 800779e:	76fb      	strb	r3, [r7, #27]
 80077a0:	e052      	b.n	8007848 <UART_SetConfig+0x22c>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a52      	ldr	r2, [pc, #328]	; (80078f0 <UART_SetConfig+0x2d4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d120      	bne.n	80077ee <UART_SetConfig+0x1d2>
 80077ac:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <UART_SetConfig+0x2c8>)
 80077ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077b6:	2bc0      	cmp	r3, #192	; 0xc0
 80077b8:	d013      	beq.n	80077e2 <UART_SetConfig+0x1c6>
 80077ba:	2bc0      	cmp	r3, #192	; 0xc0
 80077bc:	d814      	bhi.n	80077e8 <UART_SetConfig+0x1cc>
 80077be:	2b80      	cmp	r3, #128	; 0x80
 80077c0:	d009      	beq.n	80077d6 <UART_SetConfig+0x1ba>
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d810      	bhi.n	80077e8 <UART_SetConfig+0x1cc>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d002      	beq.n	80077d0 <UART_SetConfig+0x1b4>
 80077ca:	2b40      	cmp	r3, #64	; 0x40
 80077cc:	d006      	beq.n	80077dc <UART_SetConfig+0x1c0>
 80077ce:	e00b      	b.n	80077e8 <UART_SetConfig+0x1cc>
 80077d0:	2300      	movs	r3, #0
 80077d2:	76fb      	strb	r3, [r7, #27]
 80077d4:	e038      	b.n	8007848 <UART_SetConfig+0x22c>
 80077d6:	2302      	movs	r3, #2
 80077d8:	76fb      	strb	r3, [r7, #27]
 80077da:	e035      	b.n	8007848 <UART_SetConfig+0x22c>
 80077dc:	2304      	movs	r3, #4
 80077de:	76fb      	strb	r3, [r7, #27]
 80077e0:	e032      	b.n	8007848 <UART_SetConfig+0x22c>
 80077e2:	2308      	movs	r3, #8
 80077e4:	76fb      	strb	r3, [r7, #27]
 80077e6:	e02f      	b.n	8007848 <UART_SetConfig+0x22c>
 80077e8:	2310      	movs	r3, #16
 80077ea:	76fb      	strb	r3, [r7, #27]
 80077ec:	e02c      	b.n	8007848 <UART_SetConfig+0x22c>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a3a      	ldr	r2, [pc, #232]	; (80078dc <UART_SetConfig+0x2c0>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d125      	bne.n	8007844 <UART_SetConfig+0x228>
 80077f8:	4b3a      	ldr	r3, [pc, #232]	; (80078e4 <UART_SetConfig+0x2c8>)
 80077fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007802:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007806:	d017      	beq.n	8007838 <UART_SetConfig+0x21c>
 8007808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800780c:	d817      	bhi.n	800783e <UART_SetConfig+0x222>
 800780e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007812:	d00b      	beq.n	800782c <UART_SetConfig+0x210>
 8007814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007818:	d811      	bhi.n	800783e <UART_SetConfig+0x222>
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <UART_SetConfig+0x20a>
 800781e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007822:	d006      	beq.n	8007832 <UART_SetConfig+0x216>
 8007824:	e00b      	b.n	800783e <UART_SetConfig+0x222>
 8007826:	2300      	movs	r3, #0
 8007828:	76fb      	strb	r3, [r7, #27]
 800782a:	e00d      	b.n	8007848 <UART_SetConfig+0x22c>
 800782c:	2302      	movs	r3, #2
 800782e:	76fb      	strb	r3, [r7, #27]
 8007830:	e00a      	b.n	8007848 <UART_SetConfig+0x22c>
 8007832:	2304      	movs	r3, #4
 8007834:	76fb      	strb	r3, [r7, #27]
 8007836:	e007      	b.n	8007848 <UART_SetConfig+0x22c>
 8007838:	2308      	movs	r3, #8
 800783a:	76fb      	strb	r3, [r7, #27]
 800783c:	e004      	b.n	8007848 <UART_SetConfig+0x22c>
 800783e:	2310      	movs	r3, #16
 8007840:	76fb      	strb	r3, [r7, #27]
 8007842:	e001      	b.n	8007848 <UART_SetConfig+0x22c>
 8007844:	2310      	movs	r3, #16
 8007846:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a23      	ldr	r2, [pc, #140]	; (80078dc <UART_SetConfig+0x2c0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	f040 8084 	bne.w	800795c <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007854:	7efb      	ldrb	r3, [r7, #27]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d823      	bhi.n	80078a2 <UART_SetConfig+0x286>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0x244>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007885 	.word	0x08007885
 8007864:	080078a3 	.word	0x080078a3
 8007868:	0800788d 	.word	0x0800788d
 800786c:	080078a3 	.word	0x080078a3
 8007870:	08007893 	.word	0x08007893
 8007874:	080078a3 	.word	0x080078a3
 8007878:	080078a3 	.word	0x080078a3
 800787c:	080078a3 	.word	0x080078a3
 8007880:	0800789b 	.word	0x0800789b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007884:	f7fd fdb8 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8007888:	6178      	str	r0, [r7, #20]
        break;
 800788a:	e00f      	b.n	80078ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <UART_SetConfig+0x2d8>)
 800788e:	617b      	str	r3, [r7, #20]
        break;
 8007890:	e00c      	b.n	80078ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007892:	f7fd fd19 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8007896:	6178      	str	r0, [r7, #20]
        break;
 8007898:	e008      	b.n	80078ac <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800789a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800789e:	617b      	str	r3, [r7, #20]
        break;
 80078a0:	e004      	b.n	80078ac <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	76bb      	strb	r3, [r7, #26]
        break;
 80078aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f000 8102 	beq.w	8007ab8 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	4613      	mov	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4413      	add	r3, r2
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d305      	bcc.n	80078d0 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d913      	bls.n	80078f8 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	76bb      	strb	r3, [r7, #26]
 80078d4:	e0f0      	b.n	8007ab8 <UART_SetConfig+0x49c>
 80078d6:	bf00      	nop
 80078d8:	efff69f3 	.word	0xefff69f3
 80078dc:	40008000 	.word	0x40008000
 80078e0:	40013800 	.word	0x40013800
 80078e4:	40021000 	.word	0x40021000
 80078e8:	40004400 	.word	0x40004400
 80078ec:	40004800 	.word	0x40004800
 80078f0:	40004c00 	.word	0x40004c00
 80078f4:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f04f 0100 	mov.w	r1, #0
 8007900:	f04f 0200 	mov.w	r2, #0
 8007904:	f04f 0300 	mov.w	r3, #0
 8007908:	020b      	lsls	r3, r1, #8
 800790a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800790e:	0202      	lsls	r2, r0, #8
 8007910:	6879      	ldr	r1, [r7, #4]
 8007912:	6849      	ldr	r1, [r1, #4]
 8007914:	0849      	lsrs	r1, r1, #1
 8007916:	4608      	mov	r0, r1
 8007918:	f04f 0100 	mov.w	r1, #0
 800791c:	1814      	adds	r4, r2, r0
 800791e:	eb43 0501 	adc.w	r5, r3, r1
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	461a      	mov	r2, r3
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	4620      	mov	r0, r4
 800792e:	4629      	mov	r1, r5
 8007930:	f7f9 f96c 	bl	8000c0c <__aeabi_uldivmod>
 8007934:	4602      	mov	r2, r0
 8007936:	460b      	mov	r3, r1
 8007938:	4613      	mov	r3, r2
 800793a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007942:	d308      	bcc.n	8007956 <UART_SetConfig+0x33a>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800794a:	d204      	bcs.n	8007956 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	60da      	str	r2, [r3, #12]
 8007954:	e0b0      	b.n	8007ab8 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	76bb      	strb	r3, [r7, #26]
 800795a:	e0ad      	b.n	8007ab8 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007964:	d15c      	bne.n	8007a20 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007966:	7efb      	ldrb	r3, [r7, #27]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d828      	bhi.n	80079be <UART_SetConfig+0x3a2>
 800796c:	a201      	add	r2, pc, #4	; (adr r2, 8007974 <UART_SetConfig+0x358>)
 800796e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007972:	bf00      	nop
 8007974:	08007999 	.word	0x08007999
 8007978:	080079a1 	.word	0x080079a1
 800797c:	080079a9 	.word	0x080079a9
 8007980:	080079bf 	.word	0x080079bf
 8007984:	080079af 	.word	0x080079af
 8007988:	080079bf 	.word	0x080079bf
 800798c:	080079bf 	.word	0x080079bf
 8007990:	080079bf 	.word	0x080079bf
 8007994:	080079b7 	.word	0x080079b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007998:	f7fd fd2e 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 800799c:	6178      	str	r0, [r7, #20]
        break;
 800799e:	e013      	b.n	80079c8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079a0:	f7fd fd40 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 80079a4:	6178      	str	r0, [r7, #20]
        break;
 80079a6:	e00f      	b.n	80079c8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a8:	4b49      	ldr	r3, [pc, #292]	; (8007ad0 <UART_SetConfig+0x4b4>)
 80079aa:	617b      	str	r3, [r7, #20]
        break;
 80079ac:	e00c      	b.n	80079c8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ae:	f7fd fc8b 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 80079b2:	6178      	str	r0, [r7, #20]
        break;
 80079b4:	e008      	b.n	80079c8 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079ba:	617b      	str	r3, [r7, #20]
        break;
 80079bc:	e004      	b.n	80079c8 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80079c2:	2301      	movs	r3, #1
 80079c4:	76bb      	strb	r3, [r7, #26]
        break;
 80079c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d074      	beq.n	8007ab8 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	005a      	lsls	r2, r3, #1
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	085b      	lsrs	r3, r3, #1
 80079d8:	441a      	add	r2, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	fbb2 f3f3 	udiv	r3, r2, r3
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d916      	bls.n	8007a1a <UART_SetConfig+0x3fe>
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079f2:	d212      	bcs.n	8007a1a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	f023 030f 	bic.w	r3, r3, #15
 80079fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	085b      	lsrs	r3, r3, #1
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	f003 0307 	and.w	r3, r3, #7
 8007a08:	b29a      	uxth	r2, r3
 8007a0a:	89fb      	ldrh	r3, [r7, #14]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	89fa      	ldrh	r2, [r7, #14]
 8007a16:	60da      	str	r2, [r3, #12]
 8007a18:	e04e      	b.n	8007ab8 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	76bb      	strb	r3, [r7, #26]
 8007a1e:	e04b      	b.n	8007ab8 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a20:	7efb      	ldrb	r3, [r7, #27]
 8007a22:	2b08      	cmp	r3, #8
 8007a24:	d827      	bhi.n	8007a76 <UART_SetConfig+0x45a>
 8007a26:	a201      	add	r2, pc, #4	; (adr r2, 8007a2c <UART_SetConfig+0x410>)
 8007a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2c:	08007a51 	.word	0x08007a51
 8007a30:	08007a59 	.word	0x08007a59
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a77 	.word	0x08007a77
 8007a3c:	08007a67 	.word	0x08007a67
 8007a40:	08007a77 	.word	0x08007a77
 8007a44:	08007a77 	.word	0x08007a77
 8007a48:	08007a77 	.word	0x08007a77
 8007a4c:	08007a6f 	.word	0x08007a6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a50:	f7fd fcd2 	bl	80053f8 <HAL_RCC_GetPCLK1Freq>
 8007a54:	6178      	str	r0, [r7, #20]
        break;
 8007a56:	e013      	b.n	8007a80 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a58:	f7fd fce4 	bl	8005424 <HAL_RCC_GetPCLK2Freq>
 8007a5c:	6178      	str	r0, [r7, #20]
        break;
 8007a5e:	e00f      	b.n	8007a80 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <UART_SetConfig+0x4b4>)
 8007a62:	617b      	str	r3, [r7, #20]
        break;
 8007a64:	e00c      	b.n	8007a80 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a66:	f7fd fc2f 	bl	80052c8 <HAL_RCC_GetSysClockFreq>
 8007a6a:	6178      	str	r0, [r7, #20]
        break;
 8007a6c:	e008      	b.n	8007a80 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a72:	617b      	str	r3, [r7, #20]
        break;
 8007a74:	e004      	b.n	8007a80 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	76bb      	strb	r3, [r7, #26]
        break;
 8007a7e:	bf00      	nop
    }

    if (pclk != 0U)
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d018      	beq.n	8007ab8 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	085a      	lsrs	r2, r3, #1
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	441a      	add	r2, r3
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	2b0f      	cmp	r3, #15
 8007aa0:	d908      	bls.n	8007ab4 <UART_SetConfig+0x498>
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aa8:	d204      	bcs.n	8007ab4 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	60da      	str	r2, [r3, #12]
 8007ab2:	e001      	b.n	8007ab8 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ac4:	7ebb      	ldrb	r3, [r7, #26]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3720      	adds	r7, #32
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	00f42400 	.word	0x00f42400

08007ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	f003 0301 	and.w	r3, r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00a      	beq.n	8007afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	430a      	orrs	r2, r1
 8007afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00a      	beq.n	8007b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	430a      	orrs	r2, r1
 8007b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	f003 0304 	and.w	r3, r3, #4
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d00a      	beq.n	8007b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00a      	beq.n	8007b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d00a      	beq.n	8007b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	430a      	orrs	r2, r1
 8007b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8a:	f003 0320 	and.w	r3, r3, #32
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d01a      	beq.n	8007bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	430a      	orrs	r2, r1
 8007bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bd2:	d10a      	bne.n	8007bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	430a      	orrs	r2, r1
 8007be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d00a      	beq.n	8007c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	430a      	orrs	r2, r1
 8007c0a:	605a      	str	r2, [r3, #4]
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af02      	add	r7, sp, #8
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2200      	movs	r2, #0
 8007c24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c28:	f7fb ffe2 	bl	8003bf0 <HAL_GetTick>
 8007c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d10e      	bne.n	8007c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 f82d 	bl	8007caa <UART_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d001      	beq.n	8007c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e023      	b.n	8007ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d10e      	bne.n	8007c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c6c:	9300      	str	r3, [sp, #0]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f817 	bl	8007caa <UART_WaitOnFlagUntilTimeout>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d001      	beq.n	8007c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c82:	2303      	movs	r3, #3
 8007c84:	e00d      	b.n	8007ca2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3710      	adds	r7, #16
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b084      	sub	sp, #16
 8007cae:	af00      	add	r7, sp, #0
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cba:	e05e      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cbc:	69bb      	ldr	r3, [r7, #24]
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d05a      	beq.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc4:	f7fb ff94 	bl	8003bf0 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d302      	bcc.n	8007cda <UART_WaitOnFlagUntilTimeout+0x30>
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d11b      	bne.n	8007d12 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ce8:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	689a      	ldr	r2, [r3, #8]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f022 0201 	bic.w	r2, r2, #1
 8007cf8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2220      	movs	r2, #32
 8007d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e043      	b.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0304 	and.w	r3, r3, #4
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d02c      	beq.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d2e:	d124      	bne.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d38:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	681a      	ldr	r2, [r3, #0]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d48:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	689a      	ldr	r2, [r3, #8]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f022 0201 	bic.w	r2, r2, #1
 8007d58:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2220      	movs	r2, #32
 8007d64:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2220      	movs	r2, #32
 8007d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007d76:	2303      	movs	r3, #3
 8007d78:	e00f      	b.n	8007d9a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69da      	ldr	r2, [r3, #28]
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4013      	ands	r3, r2
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	bf0c      	ite	eq
 8007d8a:	2301      	moveq	r3, #1
 8007d8c:	2300      	movne	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	461a      	mov	r2, r3
 8007d92:	79fb      	ldrb	r3, [r7, #7]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d091      	beq.n	8007cbc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
	...

08007da4 <__errno>:
 8007da4:	4b01      	ldr	r3, [pc, #4]	; (8007dac <__errno+0x8>)
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	20000010 	.word	0x20000010

08007db0 <__libc_init_array>:
 8007db0:	b570      	push	{r4, r5, r6, lr}
 8007db2:	4d0d      	ldr	r5, [pc, #52]	; (8007de8 <__libc_init_array+0x38>)
 8007db4:	4c0d      	ldr	r4, [pc, #52]	; (8007dec <__libc_init_array+0x3c>)
 8007db6:	1b64      	subs	r4, r4, r5
 8007db8:	10a4      	asrs	r4, r4, #2
 8007dba:	2600      	movs	r6, #0
 8007dbc:	42a6      	cmp	r6, r4
 8007dbe:	d109      	bne.n	8007dd4 <__libc_init_array+0x24>
 8007dc0:	4d0b      	ldr	r5, [pc, #44]	; (8007df0 <__libc_init_array+0x40>)
 8007dc2:	4c0c      	ldr	r4, [pc, #48]	; (8007df4 <__libc_init_array+0x44>)
 8007dc4:	f000 fc64 	bl	8008690 <_init>
 8007dc8:	1b64      	subs	r4, r4, r5
 8007dca:	10a4      	asrs	r4, r4, #2
 8007dcc:	2600      	movs	r6, #0
 8007dce:	42a6      	cmp	r6, r4
 8007dd0:	d105      	bne.n	8007dde <__libc_init_array+0x2e>
 8007dd2:	bd70      	pop	{r4, r5, r6, pc}
 8007dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dd8:	4798      	blx	r3
 8007dda:	3601      	adds	r6, #1
 8007ddc:	e7ee      	b.n	8007dbc <__libc_init_array+0xc>
 8007dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007de2:	4798      	blx	r3
 8007de4:	3601      	adds	r6, #1
 8007de6:	e7f2      	b.n	8007dce <__libc_init_array+0x1e>
 8007de8:	08008820 	.word	0x08008820
 8007dec:	08008820 	.word	0x08008820
 8007df0:	08008820 	.word	0x08008820
 8007df4:	08008824 	.word	0x08008824

08007df8 <memset>:
 8007df8:	4402      	add	r2, r0
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d100      	bne.n	8007e02 <memset+0xa>
 8007e00:	4770      	bx	lr
 8007e02:	f803 1b01 	strb.w	r1, [r3], #1
 8007e06:	e7f9      	b.n	8007dfc <memset+0x4>

08007e08 <siprintf>:
 8007e08:	b40e      	push	{r1, r2, r3}
 8007e0a:	b500      	push	{lr}
 8007e0c:	b09c      	sub	sp, #112	; 0x70
 8007e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e10:	9002      	str	r0, [sp, #8]
 8007e12:	9006      	str	r0, [sp, #24]
 8007e14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e18:	4809      	ldr	r0, [pc, #36]	; (8007e40 <siprintf+0x38>)
 8007e1a:	9107      	str	r1, [sp, #28]
 8007e1c:	9104      	str	r1, [sp, #16]
 8007e1e:	4909      	ldr	r1, [pc, #36]	; (8007e44 <siprintf+0x3c>)
 8007e20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e24:	9105      	str	r1, [sp, #20]
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	a902      	add	r1, sp, #8
 8007e2c:	f000 f868 	bl	8007f00 <_svfiprintf_r>
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
 8007e36:	b01c      	add	sp, #112	; 0x70
 8007e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3c:	b003      	add	sp, #12
 8007e3e:	4770      	bx	lr
 8007e40:	20000010 	.word	0x20000010
 8007e44:	ffff0208 	.word	0xffff0208

08007e48 <__ssputs_r>:
 8007e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4c:	688e      	ldr	r6, [r1, #8]
 8007e4e:	429e      	cmp	r6, r3
 8007e50:	4682      	mov	sl, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	4690      	mov	r8, r2
 8007e56:	461f      	mov	r7, r3
 8007e58:	d838      	bhi.n	8007ecc <__ssputs_r+0x84>
 8007e5a:	898a      	ldrh	r2, [r1, #12]
 8007e5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e60:	d032      	beq.n	8007ec8 <__ssputs_r+0x80>
 8007e62:	6825      	ldr	r5, [r4, #0]
 8007e64:	6909      	ldr	r1, [r1, #16]
 8007e66:	eba5 0901 	sub.w	r9, r5, r1
 8007e6a:	6965      	ldr	r5, [r4, #20]
 8007e6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e74:	3301      	adds	r3, #1
 8007e76:	444b      	add	r3, r9
 8007e78:	106d      	asrs	r5, r5, #1
 8007e7a:	429d      	cmp	r5, r3
 8007e7c:	bf38      	it	cc
 8007e7e:	461d      	movcc	r5, r3
 8007e80:	0553      	lsls	r3, r2, #21
 8007e82:	d531      	bpl.n	8007ee8 <__ssputs_r+0xa0>
 8007e84:	4629      	mov	r1, r5
 8007e86:	f000 fb47 	bl	8008518 <_malloc_r>
 8007e8a:	4606      	mov	r6, r0
 8007e8c:	b950      	cbnz	r0, 8007ea4 <__ssputs_r+0x5c>
 8007e8e:	230c      	movs	r3, #12
 8007e90:	f8ca 3000 	str.w	r3, [sl]
 8007e94:	89a3      	ldrh	r3, [r4, #12]
 8007e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e9a:	81a3      	strh	r3, [r4, #12]
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ea4:	6921      	ldr	r1, [r4, #16]
 8007ea6:	464a      	mov	r2, r9
 8007ea8:	f000 fabe 	bl	8008428 <memcpy>
 8007eac:	89a3      	ldrh	r3, [r4, #12]
 8007eae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	81a3      	strh	r3, [r4, #12]
 8007eb8:	6126      	str	r6, [r4, #16]
 8007eba:	6165      	str	r5, [r4, #20]
 8007ebc:	444e      	add	r6, r9
 8007ebe:	eba5 0509 	sub.w	r5, r5, r9
 8007ec2:	6026      	str	r6, [r4, #0]
 8007ec4:	60a5      	str	r5, [r4, #8]
 8007ec6:	463e      	mov	r6, r7
 8007ec8:	42be      	cmp	r6, r7
 8007eca:	d900      	bls.n	8007ece <__ssputs_r+0x86>
 8007ecc:	463e      	mov	r6, r7
 8007ece:	4632      	mov	r2, r6
 8007ed0:	6820      	ldr	r0, [r4, #0]
 8007ed2:	4641      	mov	r1, r8
 8007ed4:	f000 fab6 	bl	8008444 <memmove>
 8007ed8:	68a3      	ldr	r3, [r4, #8]
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	1b9b      	subs	r3, r3, r6
 8007ede:	4432      	add	r2, r6
 8007ee0:	60a3      	str	r3, [r4, #8]
 8007ee2:	6022      	str	r2, [r4, #0]
 8007ee4:	2000      	movs	r0, #0
 8007ee6:	e7db      	b.n	8007ea0 <__ssputs_r+0x58>
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f000 fb6f 	bl	80085cc <_realloc_r>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1e1      	bne.n	8007eb8 <__ssputs_r+0x70>
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f000 fabe 	bl	8008478 <_free_r>
 8007efc:	e7c7      	b.n	8007e8e <__ssputs_r+0x46>
	...

08007f00 <_svfiprintf_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4698      	mov	r8, r3
 8007f06:	898b      	ldrh	r3, [r1, #12]
 8007f08:	061b      	lsls	r3, r3, #24
 8007f0a:	b09d      	sub	sp, #116	; 0x74
 8007f0c:	4607      	mov	r7, r0
 8007f0e:	460d      	mov	r5, r1
 8007f10:	4614      	mov	r4, r2
 8007f12:	d50e      	bpl.n	8007f32 <_svfiprintf_r+0x32>
 8007f14:	690b      	ldr	r3, [r1, #16]
 8007f16:	b963      	cbnz	r3, 8007f32 <_svfiprintf_r+0x32>
 8007f18:	2140      	movs	r1, #64	; 0x40
 8007f1a:	f000 fafd 	bl	8008518 <_malloc_r>
 8007f1e:	6028      	str	r0, [r5, #0]
 8007f20:	6128      	str	r0, [r5, #16]
 8007f22:	b920      	cbnz	r0, 8007f2e <_svfiprintf_r+0x2e>
 8007f24:	230c      	movs	r3, #12
 8007f26:	603b      	str	r3, [r7, #0]
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	e0d1      	b.n	80080d2 <_svfiprintf_r+0x1d2>
 8007f2e:	2340      	movs	r3, #64	; 0x40
 8007f30:	616b      	str	r3, [r5, #20]
 8007f32:	2300      	movs	r3, #0
 8007f34:	9309      	str	r3, [sp, #36]	; 0x24
 8007f36:	2320      	movs	r3, #32
 8007f38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f40:	2330      	movs	r3, #48	; 0x30
 8007f42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80080ec <_svfiprintf_r+0x1ec>
 8007f46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f4a:	f04f 0901 	mov.w	r9, #1
 8007f4e:	4623      	mov	r3, r4
 8007f50:	469a      	mov	sl, r3
 8007f52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f56:	b10a      	cbz	r2, 8007f5c <_svfiprintf_r+0x5c>
 8007f58:	2a25      	cmp	r2, #37	; 0x25
 8007f5a:	d1f9      	bne.n	8007f50 <_svfiprintf_r+0x50>
 8007f5c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f60:	d00b      	beq.n	8007f7a <_svfiprintf_r+0x7a>
 8007f62:	465b      	mov	r3, fp
 8007f64:	4622      	mov	r2, r4
 8007f66:	4629      	mov	r1, r5
 8007f68:	4638      	mov	r0, r7
 8007f6a:	f7ff ff6d 	bl	8007e48 <__ssputs_r>
 8007f6e:	3001      	adds	r0, #1
 8007f70:	f000 80aa 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f76:	445a      	add	r2, fp
 8007f78:	9209      	str	r2, [sp, #36]	; 0x24
 8007f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 80a2 	beq.w	80080c8 <_svfiprintf_r+0x1c8>
 8007f84:	2300      	movs	r3, #0
 8007f86:	f04f 32ff 	mov.w	r2, #4294967295
 8007f8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f8e:	f10a 0a01 	add.w	sl, sl, #1
 8007f92:	9304      	str	r3, [sp, #16]
 8007f94:	9307      	str	r3, [sp, #28]
 8007f96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007f9a:	931a      	str	r3, [sp, #104]	; 0x68
 8007f9c:	4654      	mov	r4, sl
 8007f9e:	2205      	movs	r2, #5
 8007fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa4:	4851      	ldr	r0, [pc, #324]	; (80080ec <_svfiprintf_r+0x1ec>)
 8007fa6:	f7f8 f91b 	bl	80001e0 <memchr>
 8007faa:	9a04      	ldr	r2, [sp, #16]
 8007fac:	b9d8      	cbnz	r0, 8007fe6 <_svfiprintf_r+0xe6>
 8007fae:	06d0      	lsls	r0, r2, #27
 8007fb0:	bf44      	itt	mi
 8007fb2:	2320      	movmi	r3, #32
 8007fb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fb8:	0711      	lsls	r1, r2, #28
 8007fba:	bf44      	itt	mi
 8007fbc:	232b      	movmi	r3, #43	; 0x2b
 8007fbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fc6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fc8:	d015      	beq.n	8007ff6 <_svfiprintf_r+0xf6>
 8007fca:	9a07      	ldr	r2, [sp, #28]
 8007fcc:	4654      	mov	r4, sl
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f04f 0c0a 	mov.w	ip, #10
 8007fd4:	4621      	mov	r1, r4
 8007fd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fda:	3b30      	subs	r3, #48	; 0x30
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d94e      	bls.n	800807e <_svfiprintf_r+0x17e>
 8007fe0:	b1b0      	cbz	r0, 8008010 <_svfiprintf_r+0x110>
 8007fe2:	9207      	str	r2, [sp, #28]
 8007fe4:	e014      	b.n	8008010 <_svfiprintf_r+0x110>
 8007fe6:	eba0 0308 	sub.w	r3, r0, r8
 8007fea:	fa09 f303 	lsl.w	r3, r9, r3
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	46a2      	mov	sl, r4
 8007ff4:	e7d2      	b.n	8007f9c <_svfiprintf_r+0x9c>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	1d19      	adds	r1, r3, #4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	9103      	str	r1, [sp, #12]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	bfbb      	ittet	lt
 8008002:	425b      	neglt	r3, r3
 8008004:	f042 0202 	orrlt.w	r2, r2, #2
 8008008:	9307      	strge	r3, [sp, #28]
 800800a:	9307      	strlt	r3, [sp, #28]
 800800c:	bfb8      	it	lt
 800800e:	9204      	strlt	r2, [sp, #16]
 8008010:	7823      	ldrb	r3, [r4, #0]
 8008012:	2b2e      	cmp	r3, #46	; 0x2e
 8008014:	d10c      	bne.n	8008030 <_svfiprintf_r+0x130>
 8008016:	7863      	ldrb	r3, [r4, #1]
 8008018:	2b2a      	cmp	r3, #42	; 0x2a
 800801a:	d135      	bne.n	8008088 <_svfiprintf_r+0x188>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	9203      	str	r2, [sp, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	bfb8      	it	lt
 8008028:	f04f 33ff 	movlt.w	r3, #4294967295
 800802c:	3402      	adds	r4, #2
 800802e:	9305      	str	r3, [sp, #20]
 8008030:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80080fc <_svfiprintf_r+0x1fc>
 8008034:	7821      	ldrb	r1, [r4, #0]
 8008036:	2203      	movs	r2, #3
 8008038:	4650      	mov	r0, sl
 800803a:	f7f8 f8d1 	bl	80001e0 <memchr>
 800803e:	b140      	cbz	r0, 8008052 <_svfiprintf_r+0x152>
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	eba0 000a 	sub.w	r0, r0, sl
 8008046:	fa03 f000 	lsl.w	r0, r3, r0
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	4303      	orrs	r3, r0
 800804e:	3401      	adds	r4, #1
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008056:	4826      	ldr	r0, [pc, #152]	; (80080f0 <_svfiprintf_r+0x1f0>)
 8008058:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800805c:	2206      	movs	r2, #6
 800805e:	f7f8 f8bf 	bl	80001e0 <memchr>
 8008062:	2800      	cmp	r0, #0
 8008064:	d038      	beq.n	80080d8 <_svfiprintf_r+0x1d8>
 8008066:	4b23      	ldr	r3, [pc, #140]	; (80080f4 <_svfiprintf_r+0x1f4>)
 8008068:	bb1b      	cbnz	r3, 80080b2 <_svfiprintf_r+0x1b2>
 800806a:	9b03      	ldr	r3, [sp, #12]
 800806c:	3307      	adds	r3, #7
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	3308      	adds	r3, #8
 8008074:	9303      	str	r3, [sp, #12]
 8008076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008078:	4433      	add	r3, r6
 800807a:	9309      	str	r3, [sp, #36]	; 0x24
 800807c:	e767      	b.n	8007f4e <_svfiprintf_r+0x4e>
 800807e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008082:	460c      	mov	r4, r1
 8008084:	2001      	movs	r0, #1
 8008086:	e7a5      	b.n	8007fd4 <_svfiprintf_r+0xd4>
 8008088:	2300      	movs	r3, #0
 800808a:	3401      	adds	r4, #1
 800808c:	9305      	str	r3, [sp, #20]
 800808e:	4619      	mov	r1, r3
 8008090:	f04f 0c0a 	mov.w	ip, #10
 8008094:	4620      	mov	r0, r4
 8008096:	f810 2b01 	ldrb.w	r2, [r0], #1
 800809a:	3a30      	subs	r2, #48	; 0x30
 800809c:	2a09      	cmp	r2, #9
 800809e:	d903      	bls.n	80080a8 <_svfiprintf_r+0x1a8>
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c5      	beq.n	8008030 <_svfiprintf_r+0x130>
 80080a4:	9105      	str	r1, [sp, #20]
 80080a6:	e7c3      	b.n	8008030 <_svfiprintf_r+0x130>
 80080a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ac:	4604      	mov	r4, r0
 80080ae:	2301      	movs	r3, #1
 80080b0:	e7f0      	b.n	8008094 <_svfiprintf_r+0x194>
 80080b2:	ab03      	add	r3, sp, #12
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	462a      	mov	r2, r5
 80080b8:	4b0f      	ldr	r3, [pc, #60]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080ba:	a904      	add	r1, sp, #16
 80080bc:	4638      	mov	r0, r7
 80080be:	f3af 8000 	nop.w
 80080c2:	1c42      	adds	r2, r0, #1
 80080c4:	4606      	mov	r6, r0
 80080c6:	d1d6      	bne.n	8008076 <_svfiprintf_r+0x176>
 80080c8:	89ab      	ldrh	r3, [r5, #12]
 80080ca:	065b      	lsls	r3, r3, #25
 80080cc:	f53f af2c 	bmi.w	8007f28 <_svfiprintf_r+0x28>
 80080d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080d2:	b01d      	add	sp, #116	; 0x74
 80080d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d8:	ab03      	add	r3, sp, #12
 80080da:	9300      	str	r3, [sp, #0]
 80080dc:	462a      	mov	r2, r5
 80080de:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <_svfiprintf_r+0x1f8>)
 80080e0:	a904      	add	r1, sp, #16
 80080e2:	4638      	mov	r0, r7
 80080e4:	f000 f87a 	bl	80081dc <_printf_i>
 80080e8:	e7eb      	b.n	80080c2 <_svfiprintf_r+0x1c2>
 80080ea:	bf00      	nop
 80080ec:	080087e4 	.word	0x080087e4
 80080f0:	080087ee 	.word	0x080087ee
 80080f4:	00000000 	.word	0x00000000
 80080f8:	08007e49 	.word	0x08007e49
 80080fc:	080087ea 	.word	0x080087ea

08008100 <_printf_common>:
 8008100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	4616      	mov	r6, r2
 8008106:	4699      	mov	r9, r3
 8008108:	688a      	ldr	r2, [r1, #8]
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008110:	4293      	cmp	r3, r2
 8008112:	bfb8      	it	lt
 8008114:	4613      	movlt	r3, r2
 8008116:	6033      	str	r3, [r6, #0]
 8008118:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800811c:	4607      	mov	r7, r0
 800811e:	460c      	mov	r4, r1
 8008120:	b10a      	cbz	r2, 8008126 <_printf_common+0x26>
 8008122:	3301      	adds	r3, #1
 8008124:	6033      	str	r3, [r6, #0]
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	0699      	lsls	r1, r3, #26
 800812a:	bf42      	ittt	mi
 800812c:	6833      	ldrmi	r3, [r6, #0]
 800812e:	3302      	addmi	r3, #2
 8008130:	6033      	strmi	r3, [r6, #0]
 8008132:	6825      	ldr	r5, [r4, #0]
 8008134:	f015 0506 	ands.w	r5, r5, #6
 8008138:	d106      	bne.n	8008148 <_printf_common+0x48>
 800813a:	f104 0a19 	add.w	sl, r4, #25
 800813e:	68e3      	ldr	r3, [r4, #12]
 8008140:	6832      	ldr	r2, [r6, #0]
 8008142:	1a9b      	subs	r3, r3, r2
 8008144:	42ab      	cmp	r3, r5
 8008146:	dc26      	bgt.n	8008196 <_printf_common+0x96>
 8008148:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800814c:	1e13      	subs	r3, r2, #0
 800814e:	6822      	ldr	r2, [r4, #0]
 8008150:	bf18      	it	ne
 8008152:	2301      	movne	r3, #1
 8008154:	0692      	lsls	r2, r2, #26
 8008156:	d42b      	bmi.n	80081b0 <_printf_common+0xb0>
 8008158:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800815c:	4649      	mov	r1, r9
 800815e:	4638      	mov	r0, r7
 8008160:	47c0      	blx	r8
 8008162:	3001      	adds	r0, #1
 8008164:	d01e      	beq.n	80081a4 <_printf_common+0xa4>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	68e5      	ldr	r5, [r4, #12]
 800816a:	6832      	ldr	r2, [r6, #0]
 800816c:	f003 0306 	and.w	r3, r3, #6
 8008170:	2b04      	cmp	r3, #4
 8008172:	bf08      	it	eq
 8008174:	1aad      	subeq	r5, r5, r2
 8008176:	68a3      	ldr	r3, [r4, #8]
 8008178:	6922      	ldr	r2, [r4, #16]
 800817a:	bf0c      	ite	eq
 800817c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008180:	2500      	movne	r5, #0
 8008182:	4293      	cmp	r3, r2
 8008184:	bfc4      	itt	gt
 8008186:	1a9b      	subgt	r3, r3, r2
 8008188:	18ed      	addgt	r5, r5, r3
 800818a:	2600      	movs	r6, #0
 800818c:	341a      	adds	r4, #26
 800818e:	42b5      	cmp	r5, r6
 8008190:	d11a      	bne.n	80081c8 <_printf_common+0xc8>
 8008192:	2000      	movs	r0, #0
 8008194:	e008      	b.n	80081a8 <_printf_common+0xa8>
 8008196:	2301      	movs	r3, #1
 8008198:	4652      	mov	r2, sl
 800819a:	4649      	mov	r1, r9
 800819c:	4638      	mov	r0, r7
 800819e:	47c0      	blx	r8
 80081a0:	3001      	adds	r0, #1
 80081a2:	d103      	bne.n	80081ac <_printf_common+0xac>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ac:	3501      	adds	r5, #1
 80081ae:	e7c6      	b.n	800813e <_printf_common+0x3e>
 80081b0:	18e1      	adds	r1, r4, r3
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	2030      	movs	r0, #48	; 0x30
 80081b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081ba:	4422      	add	r2, r4
 80081bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081c4:	3302      	adds	r3, #2
 80081c6:	e7c7      	b.n	8008158 <_printf_common+0x58>
 80081c8:	2301      	movs	r3, #1
 80081ca:	4622      	mov	r2, r4
 80081cc:	4649      	mov	r1, r9
 80081ce:	4638      	mov	r0, r7
 80081d0:	47c0      	blx	r8
 80081d2:	3001      	adds	r0, #1
 80081d4:	d0e6      	beq.n	80081a4 <_printf_common+0xa4>
 80081d6:	3601      	adds	r6, #1
 80081d8:	e7d9      	b.n	800818e <_printf_common+0x8e>
	...

080081dc <_printf_i>:
 80081dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	460c      	mov	r4, r1
 80081e2:	4691      	mov	r9, r2
 80081e4:	7e27      	ldrb	r7, [r4, #24]
 80081e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80081e8:	2f78      	cmp	r7, #120	; 0x78
 80081ea:	4680      	mov	r8, r0
 80081ec:	469a      	mov	sl, r3
 80081ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80081f2:	d807      	bhi.n	8008204 <_printf_i+0x28>
 80081f4:	2f62      	cmp	r7, #98	; 0x62
 80081f6:	d80a      	bhi.n	800820e <_printf_i+0x32>
 80081f8:	2f00      	cmp	r7, #0
 80081fa:	f000 80d8 	beq.w	80083ae <_printf_i+0x1d2>
 80081fe:	2f58      	cmp	r7, #88	; 0x58
 8008200:	f000 80a3 	beq.w	800834a <_printf_i+0x16e>
 8008204:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008208:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800820c:	e03a      	b.n	8008284 <_printf_i+0xa8>
 800820e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008212:	2b15      	cmp	r3, #21
 8008214:	d8f6      	bhi.n	8008204 <_printf_i+0x28>
 8008216:	a001      	add	r0, pc, #4	; (adr r0, 800821c <_printf_i+0x40>)
 8008218:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800821c:	08008275 	.word	0x08008275
 8008220:	08008289 	.word	0x08008289
 8008224:	08008205 	.word	0x08008205
 8008228:	08008205 	.word	0x08008205
 800822c:	08008205 	.word	0x08008205
 8008230:	08008205 	.word	0x08008205
 8008234:	08008289 	.word	0x08008289
 8008238:	08008205 	.word	0x08008205
 800823c:	08008205 	.word	0x08008205
 8008240:	08008205 	.word	0x08008205
 8008244:	08008205 	.word	0x08008205
 8008248:	08008395 	.word	0x08008395
 800824c:	080082b9 	.word	0x080082b9
 8008250:	08008377 	.word	0x08008377
 8008254:	08008205 	.word	0x08008205
 8008258:	08008205 	.word	0x08008205
 800825c:	080083b7 	.word	0x080083b7
 8008260:	08008205 	.word	0x08008205
 8008264:	080082b9 	.word	0x080082b9
 8008268:	08008205 	.word	0x08008205
 800826c:	08008205 	.word	0x08008205
 8008270:	0800837f 	.word	0x0800837f
 8008274:	680b      	ldr	r3, [r1, #0]
 8008276:	1d1a      	adds	r2, r3, #4
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	600a      	str	r2, [r1, #0]
 800827c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008280:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008284:	2301      	movs	r3, #1
 8008286:	e0a3      	b.n	80083d0 <_printf_i+0x1f4>
 8008288:	6825      	ldr	r5, [r4, #0]
 800828a:	6808      	ldr	r0, [r1, #0]
 800828c:	062e      	lsls	r6, r5, #24
 800828e:	f100 0304 	add.w	r3, r0, #4
 8008292:	d50a      	bpl.n	80082aa <_printf_i+0xce>
 8008294:	6805      	ldr	r5, [r0, #0]
 8008296:	600b      	str	r3, [r1, #0]
 8008298:	2d00      	cmp	r5, #0
 800829a:	da03      	bge.n	80082a4 <_printf_i+0xc8>
 800829c:	232d      	movs	r3, #45	; 0x2d
 800829e:	426d      	negs	r5, r5
 80082a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082a4:	485e      	ldr	r0, [pc, #376]	; (8008420 <_printf_i+0x244>)
 80082a6:	230a      	movs	r3, #10
 80082a8:	e019      	b.n	80082de <_printf_i+0x102>
 80082aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80082ae:	6805      	ldr	r5, [r0, #0]
 80082b0:	600b      	str	r3, [r1, #0]
 80082b2:	bf18      	it	ne
 80082b4:	b22d      	sxthne	r5, r5
 80082b6:	e7ef      	b.n	8008298 <_printf_i+0xbc>
 80082b8:	680b      	ldr	r3, [r1, #0]
 80082ba:	6825      	ldr	r5, [r4, #0]
 80082bc:	1d18      	adds	r0, r3, #4
 80082be:	6008      	str	r0, [r1, #0]
 80082c0:	0628      	lsls	r0, r5, #24
 80082c2:	d501      	bpl.n	80082c8 <_printf_i+0xec>
 80082c4:	681d      	ldr	r5, [r3, #0]
 80082c6:	e002      	b.n	80082ce <_printf_i+0xf2>
 80082c8:	0669      	lsls	r1, r5, #25
 80082ca:	d5fb      	bpl.n	80082c4 <_printf_i+0xe8>
 80082cc:	881d      	ldrh	r5, [r3, #0]
 80082ce:	4854      	ldr	r0, [pc, #336]	; (8008420 <_printf_i+0x244>)
 80082d0:	2f6f      	cmp	r7, #111	; 0x6f
 80082d2:	bf0c      	ite	eq
 80082d4:	2308      	moveq	r3, #8
 80082d6:	230a      	movne	r3, #10
 80082d8:	2100      	movs	r1, #0
 80082da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082de:	6866      	ldr	r6, [r4, #4]
 80082e0:	60a6      	str	r6, [r4, #8]
 80082e2:	2e00      	cmp	r6, #0
 80082e4:	bfa2      	ittt	ge
 80082e6:	6821      	ldrge	r1, [r4, #0]
 80082e8:	f021 0104 	bicge.w	r1, r1, #4
 80082ec:	6021      	strge	r1, [r4, #0]
 80082ee:	b90d      	cbnz	r5, 80082f4 <_printf_i+0x118>
 80082f0:	2e00      	cmp	r6, #0
 80082f2:	d04d      	beq.n	8008390 <_printf_i+0x1b4>
 80082f4:	4616      	mov	r6, r2
 80082f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082fa:	fb03 5711 	mls	r7, r3, r1, r5
 80082fe:	5dc7      	ldrb	r7, [r0, r7]
 8008300:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008304:	462f      	mov	r7, r5
 8008306:	42bb      	cmp	r3, r7
 8008308:	460d      	mov	r5, r1
 800830a:	d9f4      	bls.n	80082f6 <_printf_i+0x11a>
 800830c:	2b08      	cmp	r3, #8
 800830e:	d10b      	bne.n	8008328 <_printf_i+0x14c>
 8008310:	6823      	ldr	r3, [r4, #0]
 8008312:	07df      	lsls	r7, r3, #31
 8008314:	d508      	bpl.n	8008328 <_printf_i+0x14c>
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6861      	ldr	r1, [r4, #4]
 800831a:	4299      	cmp	r1, r3
 800831c:	bfde      	ittt	le
 800831e:	2330      	movle	r3, #48	; 0x30
 8008320:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008324:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008328:	1b92      	subs	r2, r2, r6
 800832a:	6122      	str	r2, [r4, #16]
 800832c:	f8cd a000 	str.w	sl, [sp]
 8008330:	464b      	mov	r3, r9
 8008332:	aa03      	add	r2, sp, #12
 8008334:	4621      	mov	r1, r4
 8008336:	4640      	mov	r0, r8
 8008338:	f7ff fee2 	bl	8008100 <_printf_common>
 800833c:	3001      	adds	r0, #1
 800833e:	d14c      	bne.n	80083da <_printf_i+0x1fe>
 8008340:	f04f 30ff 	mov.w	r0, #4294967295
 8008344:	b004      	add	sp, #16
 8008346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800834a:	4835      	ldr	r0, [pc, #212]	; (8008420 <_printf_i+0x244>)
 800834c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	680e      	ldr	r6, [r1, #0]
 8008354:	061f      	lsls	r7, r3, #24
 8008356:	f856 5b04 	ldr.w	r5, [r6], #4
 800835a:	600e      	str	r6, [r1, #0]
 800835c:	d514      	bpl.n	8008388 <_printf_i+0x1ac>
 800835e:	07d9      	lsls	r1, r3, #31
 8008360:	bf44      	itt	mi
 8008362:	f043 0320 	orrmi.w	r3, r3, #32
 8008366:	6023      	strmi	r3, [r4, #0]
 8008368:	b91d      	cbnz	r5, 8008372 <_printf_i+0x196>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	f023 0320 	bic.w	r3, r3, #32
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	2310      	movs	r3, #16
 8008374:	e7b0      	b.n	80082d8 <_printf_i+0xfc>
 8008376:	6823      	ldr	r3, [r4, #0]
 8008378:	f043 0320 	orr.w	r3, r3, #32
 800837c:	6023      	str	r3, [r4, #0]
 800837e:	2378      	movs	r3, #120	; 0x78
 8008380:	4828      	ldr	r0, [pc, #160]	; (8008424 <_printf_i+0x248>)
 8008382:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008386:	e7e3      	b.n	8008350 <_printf_i+0x174>
 8008388:	065e      	lsls	r6, r3, #25
 800838a:	bf48      	it	mi
 800838c:	b2ad      	uxthmi	r5, r5
 800838e:	e7e6      	b.n	800835e <_printf_i+0x182>
 8008390:	4616      	mov	r6, r2
 8008392:	e7bb      	b.n	800830c <_printf_i+0x130>
 8008394:	680b      	ldr	r3, [r1, #0]
 8008396:	6826      	ldr	r6, [r4, #0]
 8008398:	6960      	ldr	r0, [r4, #20]
 800839a:	1d1d      	adds	r5, r3, #4
 800839c:	600d      	str	r5, [r1, #0]
 800839e:	0635      	lsls	r5, r6, #24
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	d501      	bpl.n	80083a8 <_printf_i+0x1cc>
 80083a4:	6018      	str	r0, [r3, #0]
 80083a6:	e002      	b.n	80083ae <_printf_i+0x1d2>
 80083a8:	0671      	lsls	r1, r6, #25
 80083aa:	d5fb      	bpl.n	80083a4 <_printf_i+0x1c8>
 80083ac:	8018      	strh	r0, [r3, #0]
 80083ae:	2300      	movs	r3, #0
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	4616      	mov	r6, r2
 80083b4:	e7ba      	b.n	800832c <_printf_i+0x150>
 80083b6:	680b      	ldr	r3, [r1, #0]
 80083b8:	1d1a      	adds	r2, r3, #4
 80083ba:	600a      	str	r2, [r1, #0]
 80083bc:	681e      	ldr	r6, [r3, #0]
 80083be:	6862      	ldr	r2, [r4, #4]
 80083c0:	2100      	movs	r1, #0
 80083c2:	4630      	mov	r0, r6
 80083c4:	f7f7 ff0c 	bl	80001e0 <memchr>
 80083c8:	b108      	cbz	r0, 80083ce <_printf_i+0x1f2>
 80083ca:	1b80      	subs	r0, r0, r6
 80083cc:	6060      	str	r0, [r4, #4]
 80083ce:	6863      	ldr	r3, [r4, #4]
 80083d0:	6123      	str	r3, [r4, #16]
 80083d2:	2300      	movs	r3, #0
 80083d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083d8:	e7a8      	b.n	800832c <_printf_i+0x150>
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	4632      	mov	r2, r6
 80083de:	4649      	mov	r1, r9
 80083e0:	4640      	mov	r0, r8
 80083e2:	47d0      	blx	sl
 80083e4:	3001      	adds	r0, #1
 80083e6:	d0ab      	beq.n	8008340 <_printf_i+0x164>
 80083e8:	6823      	ldr	r3, [r4, #0]
 80083ea:	079b      	lsls	r3, r3, #30
 80083ec:	d413      	bmi.n	8008416 <_printf_i+0x23a>
 80083ee:	68e0      	ldr	r0, [r4, #12]
 80083f0:	9b03      	ldr	r3, [sp, #12]
 80083f2:	4298      	cmp	r0, r3
 80083f4:	bfb8      	it	lt
 80083f6:	4618      	movlt	r0, r3
 80083f8:	e7a4      	b.n	8008344 <_printf_i+0x168>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4632      	mov	r2, r6
 80083fe:	4649      	mov	r1, r9
 8008400:	4640      	mov	r0, r8
 8008402:	47d0      	blx	sl
 8008404:	3001      	adds	r0, #1
 8008406:	d09b      	beq.n	8008340 <_printf_i+0x164>
 8008408:	3501      	adds	r5, #1
 800840a:	68e3      	ldr	r3, [r4, #12]
 800840c:	9903      	ldr	r1, [sp, #12]
 800840e:	1a5b      	subs	r3, r3, r1
 8008410:	42ab      	cmp	r3, r5
 8008412:	dcf2      	bgt.n	80083fa <_printf_i+0x21e>
 8008414:	e7eb      	b.n	80083ee <_printf_i+0x212>
 8008416:	2500      	movs	r5, #0
 8008418:	f104 0619 	add.w	r6, r4, #25
 800841c:	e7f5      	b.n	800840a <_printf_i+0x22e>
 800841e:	bf00      	nop
 8008420:	080087f5 	.word	0x080087f5
 8008424:	08008806 	.word	0x08008806

08008428 <memcpy>:
 8008428:	440a      	add	r2, r1
 800842a:	4291      	cmp	r1, r2
 800842c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008430:	d100      	bne.n	8008434 <memcpy+0xc>
 8008432:	4770      	bx	lr
 8008434:	b510      	push	{r4, lr}
 8008436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800843a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800843e:	4291      	cmp	r1, r2
 8008440:	d1f9      	bne.n	8008436 <memcpy+0xe>
 8008442:	bd10      	pop	{r4, pc}

08008444 <memmove>:
 8008444:	4288      	cmp	r0, r1
 8008446:	b510      	push	{r4, lr}
 8008448:	eb01 0402 	add.w	r4, r1, r2
 800844c:	d902      	bls.n	8008454 <memmove+0x10>
 800844e:	4284      	cmp	r4, r0
 8008450:	4623      	mov	r3, r4
 8008452:	d807      	bhi.n	8008464 <memmove+0x20>
 8008454:	1e43      	subs	r3, r0, #1
 8008456:	42a1      	cmp	r1, r4
 8008458:	d008      	beq.n	800846c <memmove+0x28>
 800845a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800845e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008462:	e7f8      	b.n	8008456 <memmove+0x12>
 8008464:	4402      	add	r2, r0
 8008466:	4601      	mov	r1, r0
 8008468:	428a      	cmp	r2, r1
 800846a:	d100      	bne.n	800846e <memmove+0x2a>
 800846c:	bd10      	pop	{r4, pc}
 800846e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008472:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008476:	e7f7      	b.n	8008468 <memmove+0x24>

08008478 <_free_r>:
 8008478:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800847a:	2900      	cmp	r1, #0
 800847c:	d048      	beq.n	8008510 <_free_r+0x98>
 800847e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008482:	9001      	str	r0, [sp, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f1a1 0404 	sub.w	r4, r1, #4
 800848a:	bfb8      	it	lt
 800848c:	18e4      	addlt	r4, r4, r3
 800848e:	f000 f8d3 	bl	8008638 <__malloc_lock>
 8008492:	4a20      	ldr	r2, [pc, #128]	; (8008514 <_free_r+0x9c>)
 8008494:	9801      	ldr	r0, [sp, #4]
 8008496:	6813      	ldr	r3, [r2, #0]
 8008498:	4615      	mov	r5, r2
 800849a:	b933      	cbnz	r3, 80084aa <_free_r+0x32>
 800849c:	6063      	str	r3, [r4, #4]
 800849e:	6014      	str	r4, [r2, #0]
 80084a0:	b003      	add	sp, #12
 80084a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084a6:	f000 b8cd 	b.w	8008644 <__malloc_unlock>
 80084aa:	42a3      	cmp	r3, r4
 80084ac:	d90b      	bls.n	80084c6 <_free_r+0x4e>
 80084ae:	6821      	ldr	r1, [r4, #0]
 80084b0:	1862      	adds	r2, r4, r1
 80084b2:	4293      	cmp	r3, r2
 80084b4:	bf04      	itt	eq
 80084b6:	681a      	ldreq	r2, [r3, #0]
 80084b8:	685b      	ldreq	r3, [r3, #4]
 80084ba:	6063      	str	r3, [r4, #4]
 80084bc:	bf04      	itt	eq
 80084be:	1852      	addeq	r2, r2, r1
 80084c0:	6022      	streq	r2, [r4, #0]
 80084c2:	602c      	str	r4, [r5, #0]
 80084c4:	e7ec      	b.n	80084a0 <_free_r+0x28>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x58>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x4e>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x78>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1dd      	bne.n	80084a0 <_free_r+0x28>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7d7      	b.n	80084a0 <_free_r+0x28>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x80>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d3      	b.n	80084a0 <_free_r+0x28>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7c7      	b.n	80084a0 <_free_r+0x28>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	200000dc 	.word	0x200000dc

08008518 <_malloc_r>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	1ccd      	adds	r5, r1, #3
 800851c:	f025 0503 	bic.w	r5, r5, #3
 8008520:	3508      	adds	r5, #8
 8008522:	2d0c      	cmp	r5, #12
 8008524:	bf38      	it	cc
 8008526:	250c      	movcc	r5, #12
 8008528:	2d00      	cmp	r5, #0
 800852a:	4606      	mov	r6, r0
 800852c:	db01      	blt.n	8008532 <_malloc_r+0x1a>
 800852e:	42a9      	cmp	r1, r5
 8008530:	d903      	bls.n	800853a <_malloc_r+0x22>
 8008532:	230c      	movs	r3, #12
 8008534:	6033      	str	r3, [r6, #0]
 8008536:	2000      	movs	r0, #0
 8008538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800853a:	f000 f87d 	bl	8008638 <__malloc_lock>
 800853e:	4921      	ldr	r1, [pc, #132]	; (80085c4 <_malloc_r+0xac>)
 8008540:	680a      	ldr	r2, [r1, #0]
 8008542:	4614      	mov	r4, r2
 8008544:	b99c      	cbnz	r4, 800856e <_malloc_r+0x56>
 8008546:	4f20      	ldr	r7, [pc, #128]	; (80085c8 <_malloc_r+0xb0>)
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	b923      	cbnz	r3, 8008556 <_malloc_r+0x3e>
 800854c:	4621      	mov	r1, r4
 800854e:	4630      	mov	r0, r6
 8008550:	f000 f862 	bl	8008618 <_sbrk_r>
 8008554:	6038      	str	r0, [r7, #0]
 8008556:	4629      	mov	r1, r5
 8008558:	4630      	mov	r0, r6
 800855a:	f000 f85d 	bl	8008618 <_sbrk_r>
 800855e:	1c43      	adds	r3, r0, #1
 8008560:	d123      	bne.n	80085aa <_malloc_r+0x92>
 8008562:	230c      	movs	r3, #12
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	4630      	mov	r0, r6
 8008568:	f000 f86c 	bl	8008644 <__malloc_unlock>
 800856c:	e7e3      	b.n	8008536 <_malloc_r+0x1e>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	1b5b      	subs	r3, r3, r5
 8008572:	d417      	bmi.n	80085a4 <_malloc_r+0x8c>
 8008574:	2b0b      	cmp	r3, #11
 8008576:	d903      	bls.n	8008580 <_malloc_r+0x68>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	441c      	add	r4, r3
 800857c:	6025      	str	r5, [r4, #0]
 800857e:	e004      	b.n	800858a <_malloc_r+0x72>
 8008580:	6863      	ldr	r3, [r4, #4]
 8008582:	42a2      	cmp	r2, r4
 8008584:	bf0c      	ite	eq
 8008586:	600b      	streq	r3, [r1, #0]
 8008588:	6053      	strne	r3, [r2, #4]
 800858a:	4630      	mov	r0, r6
 800858c:	f000 f85a 	bl	8008644 <__malloc_unlock>
 8008590:	f104 000b 	add.w	r0, r4, #11
 8008594:	1d23      	adds	r3, r4, #4
 8008596:	f020 0007 	bic.w	r0, r0, #7
 800859a:	1ac2      	subs	r2, r0, r3
 800859c:	d0cc      	beq.n	8008538 <_malloc_r+0x20>
 800859e:	1a1b      	subs	r3, r3, r0
 80085a0:	50a3      	str	r3, [r4, r2]
 80085a2:	e7c9      	b.n	8008538 <_malloc_r+0x20>
 80085a4:	4622      	mov	r2, r4
 80085a6:	6864      	ldr	r4, [r4, #4]
 80085a8:	e7cc      	b.n	8008544 <_malloc_r+0x2c>
 80085aa:	1cc4      	adds	r4, r0, #3
 80085ac:	f024 0403 	bic.w	r4, r4, #3
 80085b0:	42a0      	cmp	r0, r4
 80085b2:	d0e3      	beq.n	800857c <_malloc_r+0x64>
 80085b4:	1a21      	subs	r1, r4, r0
 80085b6:	4630      	mov	r0, r6
 80085b8:	f000 f82e 	bl	8008618 <_sbrk_r>
 80085bc:	3001      	adds	r0, #1
 80085be:	d1dd      	bne.n	800857c <_malloc_r+0x64>
 80085c0:	e7cf      	b.n	8008562 <_malloc_r+0x4a>
 80085c2:	bf00      	nop
 80085c4:	200000dc 	.word	0x200000dc
 80085c8:	200000e0 	.word	0x200000e0

080085cc <_realloc_r>:
 80085cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ce:	4607      	mov	r7, r0
 80085d0:	4614      	mov	r4, r2
 80085d2:	460e      	mov	r6, r1
 80085d4:	b921      	cbnz	r1, 80085e0 <_realloc_r+0x14>
 80085d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80085da:	4611      	mov	r1, r2
 80085dc:	f7ff bf9c 	b.w	8008518 <_malloc_r>
 80085e0:	b922      	cbnz	r2, 80085ec <_realloc_r+0x20>
 80085e2:	f7ff ff49 	bl	8008478 <_free_r>
 80085e6:	4625      	mov	r5, r4
 80085e8:	4628      	mov	r0, r5
 80085ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80085ec:	f000 f830 	bl	8008650 <_malloc_usable_size_r>
 80085f0:	42a0      	cmp	r0, r4
 80085f2:	d20f      	bcs.n	8008614 <_realloc_r+0x48>
 80085f4:	4621      	mov	r1, r4
 80085f6:	4638      	mov	r0, r7
 80085f8:	f7ff ff8e 	bl	8008518 <_malloc_r>
 80085fc:	4605      	mov	r5, r0
 80085fe:	2800      	cmp	r0, #0
 8008600:	d0f2      	beq.n	80085e8 <_realloc_r+0x1c>
 8008602:	4631      	mov	r1, r6
 8008604:	4622      	mov	r2, r4
 8008606:	f7ff ff0f 	bl	8008428 <memcpy>
 800860a:	4631      	mov	r1, r6
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff ff33 	bl	8008478 <_free_r>
 8008612:	e7e9      	b.n	80085e8 <_realloc_r+0x1c>
 8008614:	4635      	mov	r5, r6
 8008616:	e7e7      	b.n	80085e8 <_realloc_r+0x1c>

08008618 <_sbrk_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4d06      	ldr	r5, [pc, #24]	; (8008634 <_sbrk_r+0x1c>)
 800861c:	2300      	movs	r3, #0
 800861e:	4604      	mov	r4, r0
 8008620:	4608      	mov	r0, r1
 8008622:	602b      	str	r3, [r5, #0]
 8008624:	f7fa fe34 	bl	8003290 <_sbrk>
 8008628:	1c43      	adds	r3, r0, #1
 800862a:	d102      	bne.n	8008632 <_sbrk_r+0x1a>
 800862c:	682b      	ldr	r3, [r5, #0]
 800862e:	b103      	cbz	r3, 8008632 <_sbrk_r+0x1a>
 8008630:	6023      	str	r3, [r4, #0]
 8008632:	bd38      	pop	{r3, r4, r5, pc}
 8008634:	200007d4 	.word	0x200007d4

08008638 <__malloc_lock>:
 8008638:	4801      	ldr	r0, [pc, #4]	; (8008640 <__malloc_lock+0x8>)
 800863a:	f000 b811 	b.w	8008660 <__retarget_lock_acquire_recursive>
 800863e:	bf00      	nop
 8008640:	200007dc 	.word	0x200007dc

08008644 <__malloc_unlock>:
 8008644:	4801      	ldr	r0, [pc, #4]	; (800864c <__malloc_unlock+0x8>)
 8008646:	f000 b80c 	b.w	8008662 <__retarget_lock_release_recursive>
 800864a:	bf00      	nop
 800864c:	200007dc 	.word	0x200007dc

08008650 <_malloc_usable_size_r>:
 8008650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008654:	1f18      	subs	r0, r3, #4
 8008656:	2b00      	cmp	r3, #0
 8008658:	bfbc      	itt	lt
 800865a:	580b      	ldrlt	r3, [r1, r0]
 800865c:	18c0      	addlt	r0, r0, r3
 800865e:	4770      	bx	lr

08008660 <__retarget_lock_acquire_recursive>:
 8008660:	4770      	bx	lr

08008662 <__retarget_lock_release_recursive>:
 8008662:	4770      	bx	lr

08008664 <truncf>:
 8008664:	ee10 3a10 	vmov	r3, s0
 8008668:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800866c:	3a7f      	subs	r2, #127	; 0x7f
 800866e:	2a16      	cmp	r2, #22
 8008670:	ee10 1a10 	vmov	r1, s0
 8008674:	dc07      	bgt.n	8008686 <truncf+0x22>
 8008676:	2a00      	cmp	r2, #0
 8008678:	bfa5      	ittet	ge
 800867a:	4b04      	ldrge	r3, [pc, #16]	; (800868c <truncf+0x28>)
 800867c:	4113      	asrge	r3, r2
 800867e:	f003 4300 	andlt.w	r3, r3, #2147483648	; 0x80000000
 8008682:	ea21 0303 	bicge.w	r3, r1, r3
 8008686:	ee00 3a10 	vmov	s0, r3
 800868a:	4770      	bx	lr
 800868c:	007fffff 	.word	0x007fffff

08008690 <_init>:
 8008690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008692:	bf00      	nop
 8008694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008696:	bc08      	pop	{r3}
 8008698:	469e      	mov	lr, r3
 800869a:	4770      	bx	lr

0800869c <_fini>:
 800869c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800869e:	bf00      	nop
 80086a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a2:	bc08      	pop	{r3}
 80086a4:	469e      	mov	lr, r3
 80086a6:	4770      	bx	lr
