
Filament_cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008700  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a38  08008a38  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008a38  08008a38  00018a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a40  08008a40  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a44  08008a44  00018a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008a48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000764  20000074  08008abc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007d8  08008abc  000207d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001dd23  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038cf  00000000  00000000  0003ddc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00041698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011a8  00000000  00000000  000429a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025458  00000000  00000000  00043b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b92  00000000  00000000  00068fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd751  00000000  00000000  0007fb32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015d283  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005350  00000000  00000000  0015d2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008888 	.word	0x08008888

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08008888 	.word	0x08008888

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2uiz>:
 8000b2c:	004a      	lsls	r2, r1, #1
 8000b2e:	d211      	bcs.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d211      	bcs.n	8000b5a <__aeabi_d2uiz+0x2e>
 8000b36:	d50d      	bpl.n	8000b54 <__aeabi_d2uiz+0x28>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d40e      	bmi.n	8000b60 <__aeabi_d2uiz+0x34>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	4770      	bx	lr
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_d2uiz+0x3a>
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2f>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b74:	bf24      	itt	cs
 8000b76:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b7a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b7e:	d90d      	bls.n	8000b9c <__aeabi_d2f+0x30>
 8000b80:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b84:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b88:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b8c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b90:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b94:	bf08      	it	eq
 8000b96:	f020 0001 	biceq.w	r0, r0, #1
 8000b9a:	4770      	bx	lr
 8000b9c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ba0:	d121      	bne.n	8000be6 <__aeabi_d2f+0x7a>
 8000ba2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ba6:	bfbc      	itt	lt
 8000ba8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	4770      	bxlt	lr
 8000bae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bb2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bb6:	f1c2 0218 	rsb	r2, r2, #24
 8000bba:	f1c2 0c20 	rsb	ip, r2, #32
 8000bbe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bc2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bc6:	bf18      	it	ne
 8000bc8:	f040 0001 	orrne.w	r0, r0, #1
 8000bcc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bd4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bd8:	ea40 000c 	orr.w	r0, r0, ip
 8000bdc:	fa23 f302 	lsr.w	r3, r3, r2
 8000be0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000be4:	e7cc      	b.n	8000b80 <__aeabi_d2f+0x14>
 8000be6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bea:	d107      	bne.n	8000bfc <__aeabi_d2f+0x90>
 8000bec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bf6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bfa:	4770      	bxne	lr
 8000bfc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop

08000c0c <__aeabi_uldivmod>:
 8000c0c:	b953      	cbnz	r3, 8000c24 <__aeabi_uldivmod+0x18>
 8000c0e:	b94a      	cbnz	r2, 8000c24 <__aeabi_uldivmod+0x18>
 8000c10:	2900      	cmp	r1, #0
 8000c12:	bf08      	it	eq
 8000c14:	2800      	cmpeq	r0, #0
 8000c16:	bf1c      	itt	ne
 8000c18:	f04f 31ff 	movne.w	r1, #4294967295
 8000c1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c20:	f000 b96e 	b.w	8000f00 <__aeabi_idiv0>
 8000c24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c2c:	f000 f806 	bl	8000c3c <__udivmoddi4>
 8000c30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c38:	b004      	add	sp, #16
 8000c3a:	4770      	bx	lr

08000c3c <__udivmoddi4>:
 8000c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c40:	9d08      	ldr	r5, [sp, #32]
 8000c42:	4604      	mov	r4, r0
 8000c44:	468c      	mov	ip, r1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 8083 	bne.w	8000d52 <__udivmoddi4+0x116>
 8000c4c:	428a      	cmp	r2, r1
 8000c4e:	4617      	mov	r7, r2
 8000c50:	d947      	bls.n	8000ce2 <__udivmoddi4+0xa6>
 8000c52:	fab2 f282 	clz	r2, r2
 8000c56:	b142      	cbz	r2, 8000c6a <__udivmoddi4+0x2e>
 8000c58:	f1c2 0020 	rsb	r0, r2, #32
 8000c5c:	fa24 f000 	lsr.w	r0, r4, r0
 8000c60:	4091      	lsls	r1, r2
 8000c62:	4097      	lsls	r7, r2
 8000c64:	ea40 0c01 	orr.w	ip, r0, r1
 8000c68:	4094      	lsls	r4, r2
 8000c6a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6e:	0c23      	lsrs	r3, r4, #16
 8000c70:	fbbc f6f8 	udiv	r6, ip, r8
 8000c74:	fa1f fe87 	uxth.w	lr, r7
 8000c78:	fb08 c116 	mls	r1, r8, r6, ip
 8000c7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c80:	fb06 f10e 	mul.w	r1, r6, lr
 8000c84:	4299      	cmp	r1, r3
 8000c86:	d909      	bls.n	8000c9c <__udivmoddi4+0x60>
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8e:	f080 8119 	bcs.w	8000ec4 <__udivmoddi4+0x288>
 8000c92:	4299      	cmp	r1, r3
 8000c94:	f240 8116 	bls.w	8000ec4 <__udivmoddi4+0x288>
 8000c98:	3e02      	subs	r6, #2
 8000c9a:	443b      	add	r3, r7
 8000c9c:	1a5b      	subs	r3, r3, r1
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	45a6      	cmp	lr, r4
 8000cb2:	d909      	bls.n	8000cc8 <__udivmoddi4+0x8c>
 8000cb4:	193c      	adds	r4, r7, r4
 8000cb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cba:	f080 8105 	bcs.w	8000ec8 <__udivmoddi4+0x28c>
 8000cbe:	45a6      	cmp	lr, r4
 8000cc0:	f240 8102 	bls.w	8000ec8 <__udivmoddi4+0x28c>
 8000cc4:	3802      	subs	r0, #2
 8000cc6:	443c      	add	r4, r7
 8000cc8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ccc:	eba4 040e 	sub.w	r4, r4, lr
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	b11d      	cbz	r5, 8000cdc <__udivmoddi4+0xa0>
 8000cd4:	40d4      	lsrs	r4, r2
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cdc:	4631      	mov	r1, r6
 8000cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce2:	b902      	cbnz	r2, 8000ce6 <__udivmoddi4+0xaa>
 8000ce4:	deff      	udf	#255	; 0xff
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d150      	bne.n	8000d90 <__udivmoddi4+0x154>
 8000cee:	1bcb      	subs	r3, r1, r7
 8000cf0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf4:	fa1f f887 	uxth.w	r8, r7
 8000cf8:	2601      	movs	r6, #1
 8000cfa:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfe:	0c21      	lsrs	r1, r4, #16
 8000d00:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d08:	fb08 f30c 	mul.w	r3, r8, ip
 8000d0c:	428b      	cmp	r3, r1
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0xe4>
 8000d10:	1879      	adds	r1, r7, r1
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0xe2>
 8000d18:	428b      	cmp	r3, r1
 8000d1a:	f200 80e9 	bhi.w	8000ef0 <__udivmoddi4+0x2b4>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1ac9      	subs	r1, r1, r3
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d2c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x10c>
 8000d38:	193c      	adds	r4, r7, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x10a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80d9 	bhi.w	8000ef8 <__udivmoddi4+0x2bc>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e7bf      	b.n	8000cd2 <__udivmoddi4+0x96>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d909      	bls.n	8000d6a <__udivmoddi4+0x12e>
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	f000 80b1 	beq.w	8000ebe <__udivmoddi4+0x282>
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d62:	4630      	mov	r0, r6
 8000d64:	4631      	mov	r1, r6
 8000d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6a:	fab3 f683 	clz	r6, r3
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	d14a      	bne.n	8000e08 <__udivmoddi4+0x1cc>
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d302      	bcc.n	8000d7c <__udivmoddi4+0x140>
 8000d76:	4282      	cmp	r2, r0
 8000d78:	f200 80b8 	bhi.w	8000eec <__udivmoddi4+0x2b0>
 8000d7c:	1a84      	subs	r4, r0, r2
 8000d7e:	eb61 0103 	sbc.w	r1, r1, r3
 8000d82:	2001      	movs	r0, #1
 8000d84:	468c      	mov	ip, r1
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d0a8      	beq.n	8000cdc <__udivmoddi4+0xa0>
 8000d8a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8e:	e7a5      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000d90:	f1c2 0320 	rsb	r3, r2, #32
 8000d94:	fa20 f603 	lsr.w	r6, r0, r3
 8000d98:	4097      	lsls	r7, r2
 8000d9a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da2:	40d9      	lsrs	r1, r3
 8000da4:	4330      	orrs	r0, r6
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dac:	fa1f f887 	uxth.w	r8, r7
 8000db0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db8:	fb06 f108 	mul.w	r1, r6, r8
 8000dbc:	4299      	cmp	r1, r3
 8000dbe:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x19c>
 8000dc4:	18fb      	adds	r3, r7, r3
 8000dc6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dca:	f080 808d 	bcs.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 808a 	bls.w	8000ee8 <__udivmoddi4+0x2ac>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	443b      	add	r3, r7
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b281      	uxth	r1, r0
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de8:	fb00 f308 	mul.w	r3, r0, r8
 8000dec:	428b      	cmp	r3, r1
 8000dee:	d907      	bls.n	8000e00 <__udivmoddi4+0x1c4>
 8000df0:	1879      	adds	r1, r7, r1
 8000df2:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df6:	d273      	bcs.n	8000ee0 <__udivmoddi4+0x2a4>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d971      	bls.n	8000ee0 <__udivmoddi4+0x2a4>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4439      	add	r1, r7
 8000e00:	1acb      	subs	r3, r1, r3
 8000e02:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e06:	e778      	b.n	8000cfa <__udivmoddi4+0xbe>
 8000e08:	f1c6 0c20 	rsb	ip, r6, #32
 8000e0c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e10:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e14:	431c      	orrs	r4, r3
 8000e16:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e1a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e22:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e26:	431f      	orrs	r7, r3
 8000e28:	0c3b      	lsrs	r3, r7, #16
 8000e2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2e:	fa1f f884 	uxth.w	r8, r4
 8000e32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e36:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e3a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3e:	458a      	cmp	sl, r1
 8000e40:	fa02 f206 	lsl.w	r2, r2, r6
 8000e44:	fa00 f306 	lsl.w	r3, r0, r6
 8000e48:	d908      	bls.n	8000e5c <__udivmoddi4+0x220>
 8000e4a:	1861      	adds	r1, r4, r1
 8000e4c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e50:	d248      	bcs.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e52:	458a      	cmp	sl, r1
 8000e54:	d946      	bls.n	8000ee4 <__udivmoddi4+0x2a8>
 8000e56:	f1a9 0902 	sub.w	r9, r9, #2
 8000e5a:	4421      	add	r1, r4
 8000e5c:	eba1 010a 	sub.w	r1, r1, sl
 8000e60:	b2bf      	uxth	r7, r7
 8000e62:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e66:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e6a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6e:	fb00 f808 	mul.w	r8, r0, r8
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d907      	bls.n	8000e86 <__udivmoddi4+0x24a>
 8000e76:	19e7      	adds	r7, r4, r7
 8000e78:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e7c:	d22e      	bcs.n	8000edc <__udivmoddi4+0x2a0>
 8000e7e:	45b8      	cmp	r8, r7
 8000e80:	d92c      	bls.n	8000edc <__udivmoddi4+0x2a0>
 8000e82:	3802      	subs	r0, #2
 8000e84:	4427      	add	r7, r4
 8000e86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e8a:	eba7 0708 	sub.w	r7, r7, r8
 8000e8e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e92:	454f      	cmp	r7, r9
 8000e94:	46c6      	mov	lr, r8
 8000e96:	4649      	mov	r1, r9
 8000e98:	d31a      	bcc.n	8000ed0 <__udivmoddi4+0x294>
 8000e9a:	d017      	beq.n	8000ecc <__udivmoddi4+0x290>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x27a>
 8000e9e:	ebb3 020e 	subs.w	r2, r3, lr
 8000ea2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eaa:	40f2      	lsrs	r2, r6
 8000eac:	ea4c 0202 	orr.w	r2, ip, r2
 8000eb0:	40f7      	lsrs	r7, r6
 8000eb2:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb6:	2600      	movs	r6, #0
 8000eb8:	4631      	mov	r1, r6
 8000eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ebe:	462e      	mov	r6, r5
 8000ec0:	4628      	mov	r0, r5
 8000ec2:	e70b      	b.n	8000cdc <__udivmoddi4+0xa0>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fd      	b.n	8000cc8 <__udivmoddi4+0x8c>
 8000ecc:	4543      	cmp	r3, r8
 8000ece:	d2e5      	bcs.n	8000e9c <__udivmoddi4+0x260>
 8000ed0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed4:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed8:	3801      	subs	r0, #1
 8000eda:	e7df      	b.n	8000e9c <__udivmoddi4+0x260>
 8000edc:	4608      	mov	r0, r1
 8000ede:	e7d2      	b.n	8000e86 <__udivmoddi4+0x24a>
 8000ee0:	4660      	mov	r0, ip
 8000ee2:	e78d      	b.n	8000e00 <__udivmoddi4+0x1c4>
 8000ee4:	4681      	mov	r9, r0
 8000ee6:	e7b9      	b.n	8000e5c <__udivmoddi4+0x220>
 8000ee8:	4666      	mov	r6, ip
 8000eea:	e775      	b.n	8000dd8 <__udivmoddi4+0x19c>
 8000eec:	4630      	mov	r0, r6
 8000eee:	e74a      	b.n	8000d86 <__udivmoddi4+0x14a>
 8000ef0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef4:	4439      	add	r1, r7
 8000ef6:	e713      	b.n	8000d20 <__udivmoddi4+0xe4>
 8000ef8:	3802      	subs	r0, #2
 8000efa:	443c      	add	r4, r7
 8000efc:	e724      	b.n	8000d48 <__udivmoddi4+0x10c>
 8000efe:	bf00      	nop

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <DC_motor_encoder_Init>:
 */

#include "L298_dc.h"


void DC_motor_encoder_Init(dc_motor *motor) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_AUTORELOAD(motor->encoder_timer, FULL_ROTATION_PULSE);
	//HAL_TIM_Encoder_Start(motor->encoder_timer, TIM_CHANNEL_ALL);
	HAL_LPTIM_Encoder_Start_IT(motor->encoder_timer, FULL_ROTATION_PULSE);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f241 1192 	movw	r1, #4498	; 0x1192
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 faf5 	bl	8004504 <HAL_LPTIM_Encoder_Start_IT>
	/* Enable Autoreload match interrupt */
	__HAL_LPTIM_ENABLE_IT(motor->encoder_timer, LPTIM_IT_ARRM);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 0202 	orr.w	r2, r2, #2
 8000f2c:	609a      	str	r2, [r3, #8]
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <DC_motor_Init>:

void DC_motor_Init(dc_motor *motor, TIM_HandleTypeDef *Timer,
		uint32_t PWM_Channel, GPIO_TypeDef *Port_IN1, uint16_t IN1_Pin,
		GPIO_TypeDef *Port_IN2, uint16_t IN2_Pin,
		LPTIM_HandleTypeDef *Encoder_timer) {
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b084      	sub	sp, #16
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	603b      	str	r3, [r7, #0]
	motor->pwm_timer.htim = Timer;
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	601a      	str	r2, [r3, #0]
	motor->pwm_timer.channel = PWM_Channel;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	605a      	str	r2, [r3, #4]

	motor->Port_IN1 = Port_IN1;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	683a      	ldr	r2, [r7, #0]
 8000f54:	609a      	str	r2, [r3, #8]
	motor->Port_IN2 = Port_IN2;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	60da      	str	r2, [r3, #12]
	motor->Pin_IN1 = IN1_Pin;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	8b3a      	ldrh	r2, [r7, #24]
 8000f60:	821a      	strh	r2, [r3, #16]
	motor->Pin_IN2 = IN2_Pin;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	8c3a      	ldrh	r2, [r7, #32]
 8000f66:	825a      	strh	r2, [r3, #18]
	motor->encoder_timer = Encoder_timer;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f6c:	619a      	str	r2, [r3, #24]

	DC_motor_encoder_Init(motor);
 8000f6e:	68f8      	ldr	r0, [r7, #12]
 8000f70:	f7ff ffc8 	bl	8000f04 <DC_motor_encoder_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DC_set_speed>:

void DC_set_speed(dc_motor *motor, uint8_t speed) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	460b      	mov	r3, r1
 8000f86:	70fb      	strb	r3, [r7, #3]
	if (speed > 100) speed = 100;
 8000f88:	78fb      	ldrb	r3, [r7, #3]
 8000f8a:	2b64      	cmp	r3, #100	; 0x64
 8000f8c:	d901      	bls.n	8000f92 <DC_set_speed+0x16>
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COUNTER(motor->pwm_timer.htim, 0);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d105      	bne.n	8000fb0 <DC_set_speed+0x34>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	78fa      	ldrb	r2, [r7, #3]
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fae:	e02c      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d105      	bne.n	8000fc4 <DC_set_speed+0x48>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000fc2:	e022      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d105      	bne.n	8000fd8 <DC_set_speed+0x5c>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000fd6:	e018      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b0c      	cmp	r3, #12
 8000fde:	d105      	bne.n	8000fec <DC_set_speed+0x70>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	78fb      	ldrb	r3, [r7, #3]
 8000fe8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000fea:	e00e      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b10      	cmp	r3, #16
 8000ff2:	d105      	bne.n	8001000 <DC_set_speed+0x84>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	78fb      	ldrb	r3, [r7, #3]
 8000ffc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ffe:	e004      	b.n	800100a <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <DC_set_direction>:

void DC_set_direction(dc_motor *motor, DC_direction DIR) {
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	70fb      	strb	r3, [r7, #3]
	motor->DIR = DIR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	78fa      	ldrb	r2, [r7, #3]
 8001026:	751a      	strb	r2, [r3, #20]

	if (motor->DIR == LEFT) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7d1b      	ldrb	r3, [r3, #20]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d110      	bne.n	8001052 <DC_set_direction+0x3c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_RESET);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6898      	ldr	r0, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	8a1b      	ldrh	r3, [r3, #16]
 8001038:	2200      	movs	r2, #0
 800103a:	4619      	mov	r1, r3
 800103c:	f003 f9a8 	bl	8004390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68d8      	ldr	r0, [r3, #12]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8a5b      	ldrh	r3, [r3, #18]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	f003 f9a0 	bl	8004390 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
	}
}
 8001050:	e00f      	b.n	8001072 <DC_set_direction+0x5c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6898      	ldr	r0, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	8a1b      	ldrh	r3, [r3, #16]
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f003 f997 	bl	8004390 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68d8      	ldr	r0, [r3, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	8a5b      	ldrh	r3, [r3, #18]
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f003 f98f 	bl	8004390 <HAL_GPIO_WritePin>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <DC_rotate>:

void DC_rotate(dc_motor *motor, DC_direction DIR, uint8_t speed) {
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	460b      	mov	r3, r1
 8001084:	70fb      	strb	r3, [r7, #3]
 8001086:	4613      	mov	r3, r2
 8001088:	70bb      	strb	r3, [r7, #2]
	DC_set_direction(motor, DIR);
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	4619      	mov	r1, r3
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff ffc1 	bl	8001016 <DC_set_direction>
	DC_set_speed(motor, speed);
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff6f 	bl	8000f7c <DC_set_speed>

	HAL_TIM_PWM_Start(motor->pwm_timer.htim, motor->pwm_timer.channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4619      	mov	r1, r3
 80010a8:	4610      	mov	r0, r2
 80010aa:	f005 f823 	bl	80060f4 <HAL_TIM_PWM_Start>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <DC_stop>:

void DC_stop(dc_motor *motor) {
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6898      	ldr	r0, [r3, #8]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	8a1b      	ldrh	r3, [r3, #16]
 80010c6:	2201      	movs	r2, #1
 80010c8:	4619      	mov	r1, r3
 80010ca:	f003 f961 	bl	8004390 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	68d8      	ldr	r0, [r3, #12]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	8a5b      	ldrh	r3, [r3, #18]
 80010d6:	2201      	movs	r2, #1
 80010d8:	4619      	mov	r1, r3
 80010da:	f003 f959 	bl	8004390 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d105      	bne.n	80010f2 <DC_stop+0x3c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2264      	movs	r2, #100	; 0x64
 80010ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010f0:	e02c      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d105      	bne.n	8001106 <DC_stop+0x50>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	2364      	movs	r3, #100	; 0x64
 8001102:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001104:	e022      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b08      	cmp	r3, #8
 800110c:	d105      	bne.n	800111a <DC_stop+0x64>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2364      	movs	r3, #100	; 0x64
 8001116:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001118:	e018      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	d105      	bne.n	800112e <DC_stop+0x78>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800112c:	e00e      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b10      	cmp	r3, #16
 8001134:	d105      	bne.n	8001142 <DC_stop+0x8c>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	2364      	movs	r3, #100	; 0x64
 800113e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001140:	e004      	b.n	800114c <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2364      	movs	r3, #100	; 0x64
 800114a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <DC_set_angle>:
}

uint16_t pulses_to_count;

void DC_set_angle(dc_motor *motor, uint16_t angle, uint8_t speed, DC_direction DIR)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	807b      	strh	r3, [r7, #2]
 8001166:	460b      	mov	r3, r1
 8001168:	707b      	strb	r3, [r7, #1]
 800116a:	4613      	mov	r3, r2
 800116c:	703b      	strb	r3, [r7, #0]
	if(CUTTING_PROCESS_FLAG == 0)
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <DC_set_angle+0x70>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	2b00      	cmp	r3, #0
 8001176:	d120      	bne.n	80011ba <DC_set_angle+0x66>
	{
		CUTTING_PROCESS_FLAG = 1;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <DC_set_angle+0x70>)
 800117a:	2201      	movs	r2, #1
 800117c:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 0;
 800117e:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <DC_set_angle+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		pulses_to_count = (angle * FULL_ROTATION_PULSE * 2) / 360;
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	f242 3224 	movw	r2, #8996	; 0x2324
 800118a:	fb02 f303 	mul.w	r3, r2, r3
 800118e:	4a0f      	ldr	r2, [pc, #60]	; (80011cc <DC_set_angle+0x78>)
 8001190:	fb82 1203 	smull	r1, r2, r2, r3
 8001194:	441a      	add	r2, r3
 8001196:	1212      	asrs	r2, r2, #8
 8001198:	17db      	asrs	r3, r3, #31
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <DC_set_angle+0x7c>)
 80011a0:	801a      	strh	r2, [r3, #0]
		__HAL_LPTIM_AUTORELOAD_SET(motor->encoder_timer, pulses_to_count);
 80011a2:	4b0b      	ldr	r3, [pc, #44]	; (80011d0 <DC_set_angle+0x7c>)
 80011a4:	881a      	ldrh	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	619a      	str	r2, [r3, #24]
		DC_rotate(motor, DIR, speed);
 80011ae:	787a      	ldrb	r2, [r7, #1]
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	4619      	mov	r1, r3
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff60 	bl	800107a <DC_rotate>
	}

}
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000fe 	.word	0x200000fe
 80011c8:	20000508 	.word	0x20000508
 80011cc:	b60b60b7 	.word	0xb60b60b7
 80011d0:	200000fc 	.word	0x200000fc

080011d4 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	e01f      	b.n	8001224 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d005      	beq.n	8001200 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 80011f4:	2201      	movs	r2, #1
 80011f6:	2102      	movs	r1, #2
 80011f8:	480e      	ldr	r0, [pc, #56]	; (8001234 <SendByteSPI+0x60>)
 80011fa:	f003 f8c9 	bl	8004390 <HAL_GPIO_WritePin>
 80011fe:	e004      	b.n	800120a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8001200:	2200      	movs	r2, #0
 8001202:	2102      	movs	r1, #2
 8001204:	480b      	ldr	r0, [pc, #44]	; (8001234 <SendByteSPI+0x60>)
 8001206:	f003 f8c3 	bl	8004390 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 800120a:	2200      	movs	r2, #0
 800120c:	2108      	movs	r1, #8
 800120e:	4809      	ldr	r0, [pc, #36]	; (8001234 <SendByteSPI+0x60>)
 8001210:	f003 f8be 	bl	8004390 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8001214:	2201      	movs	r2, #1
 8001216:	2108      	movs	r1, #8
 8001218:	4806      	ldr	r0, [pc, #24]	; (8001234 <SendByteSPI+0x60>)
 800121a:	f003 f8b9 	bl	8004390 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	3301      	adds	r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b07      	cmp	r3, #7
 8001228:	dddc      	ble.n	80011e4 <SendByteSPI+0x10>

	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	48000800 	.word	0x48000800

08001238 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001242:	2201      	movs	r2, #1
 8001244:	2104      	movs	r1, #4
 8001246:	480f      	ldr	r0, [pc, #60]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001248:	f003 f8a2 	bl	8004390 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 800124c:	20f8      	movs	r0, #248	; 0xf8
 800124e:	f7ff ffc1 	bl	80011d4 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	f023 030f 	bic.w	r3, r3, #15
 8001258:	b2db      	uxtb	r3, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ffba 	bl	80011d4 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	b2db      	uxtb	r3, r3
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ffb4 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 800126c:	2032      	movs	r0, #50	; 0x32
 800126e:	f000 fb87 	bl	8001980 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001272:	2200      	movs	r2, #0
 8001274:	2104      	movs	r1, #4
 8001276:	4803      	ldr	r0, [pc, #12]	; (8001284 <ST7920_SendCmd+0x4c>)
 8001278:	f003 f88a 	bl	8004390 <HAL_GPIO_WritePin>

}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	48000800 	.word	0x48000800

08001288 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001292:	2201      	movs	r2, #1
 8001294:	2104      	movs	r1, #4
 8001296:	480f      	ldr	r0, [pc, #60]	; (80012d4 <ST7920_SendData+0x4c>)
 8001298:	f003 f87a 	bl	8004390 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 800129c:	20fa      	movs	r0, #250	; 0xfa
 800129e:	f7ff ff99 	bl	80011d4 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f023 030f 	bic.w	r3, r3, #15
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff92 	bl	80011d4 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff8c 	bl	80011d4 <SendByteSPI>
	delay_us(50);
 80012bc:	2032      	movs	r0, #50	; 0x32
 80012be:	f000 fb5f 	bl	8001980 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80012c2:	2200      	movs	r2, #0
 80012c4:	2104      	movs	r1, #4
 80012c6:	4803      	ldr	r0, [pc, #12]	; (80012d4 <ST7920_SendData+0x4c>)
 80012c8:	f003 f862 	bl	8004390 <HAL_GPIO_WritePin>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48000800 	.word	0x48000800

080012d8 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d81e      	bhi.n	8001328 <ST7920_SendString+0x50>
 80012ea:	a201      	add	r2, pc, #4	; (adr r2, 80012f0 <ST7920_SendString+0x18>)
 80012ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f0:	08001301 	.word	0x08001301
 80012f4:	0800130b 	.word	0x0800130b
 80012f8:	08001315 	.word	0x08001315
 80012fc:	0800131f 	.word	0x0800131f
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001306:	60bb      	str	r3, [r7, #8]
            break;
 8001308:	e013      	b.n	8001332 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001310:	60bb      	str	r3, [r7, #8]
            break;
 8001312:	e00e      	b.n	8001332 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800131a:	60bb      	str	r3, [r7, #8]
            break;
 800131c:	e009      	b.n	8001332 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 8001324:	60bb      	str	r3, [r7, #8]
            break;
 8001326:	e004      	b.n	8001332 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132e:	60bb      	str	r3, [r7, #8]
            break;
 8001330:	bf00      	nop
    }

    ST7920_SendCmd(col);
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff ff7e 	bl	8001238 <ST7920_SendCmd>

    while (*string)
 800133c:	e006      	b.n	800134c <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ff9e 	bl	8001288 <ST7920_SendData>
    while (*string)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f4      	bne.n	800133e <ST7920_SendString+0x66>
    	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop

08001360 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d115      	bne.n	800139a <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 800136e:	2030      	movs	r0, #48	; 0x30
 8001370:	f7ff ff62 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001374:	2001      	movs	r0, #1
 8001376:	f002 fd43 	bl	8003e00 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800137a:	2034      	movs	r0, #52	; 0x34
 800137c:	f7ff ff5c 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 8001380:	2001      	movs	r0, #1
 8001382:	f002 fd3d 	bl	8003e00 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 8001386:	2036      	movs	r0, #54	; 0x36
 8001388:	f7ff ff56 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 800138c:	2001      	movs	r0, #1
 800138e:	f002 fd37 	bl	8003e00 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <ST7920_GraphicMode+0x5c>)
 8001394:	2201      	movs	r2, #1
 8001396:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8001398:	e00b      	b.n	80013b2 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d108      	bne.n	80013b2 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 80013a0:	2030      	movs	r0, #48	; 0x30
 80013a2:	f7ff ff49 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay (1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f002 fd2a 	bl	8003e00 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <ST7920_GraphicMode+0x5c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	701a      	strb	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000090 	.word	0x20000090

080013c0 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 80013c8:	2300      	movs	r3, #0
 80013ca:	73bb      	strb	r3, [r7, #14]
 80013cc:	e06a      	b.n	80014a4 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 80013ce:	7bbb      	ldrb	r3, [r7, #14]
 80013d0:	2b1f      	cmp	r3, #31
 80013d2:	d830      	bhi.n	8001436 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80013d4:	2300      	movs	r3, #0
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e029      	b.n	800142e <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 80013da:	7bbb      	ldrb	r3, [r7, #14]
 80013dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff28 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff21 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 80013f6:	7bfa      	ldrb	r2, [r7, #15]
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	4413      	add	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff3d 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	7bbb      	ldrb	r3, [r7, #14]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	461a      	mov	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff30 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8001428:	7bfb      	ldrb	r3, [r7, #15]
 800142a:	3301      	adds	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b07      	cmp	r3, #7
 8001432:	d9d2      	bls.n	80013da <ST7920_DrawBitmap+0x1a>
 8001434:	e033      	b.n	800149e <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001436:	2300      	movs	r3, #0
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	e02d      	b.n	8001498 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 800143c:	7bbb      	ldrb	r3, [r7, #14]
 800143e:	3b20      	subs	r3, #32
 8001440:	b2db      	uxtb	r3, r3
 8001442:	b25b      	sxtb	r3, r3
 8001444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001448:	b25b      	sxtb	r3, r3
 800144a:	b2db      	uxtb	r3, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff fef3 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	f063 0377 	orn	r3, r3, #119	; 0x77
 8001458:	b2db      	uxtb	r3, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff feec 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	7bbb      	ldrb	r3, [r7, #14]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4413      	add	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	461a      	mov	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff ff08 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	7bbb      	ldrb	r3, [r7, #14]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fefb 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	3301      	adds	r3, #1
 8001496:	73fb      	strb	r3, [r7, #15]
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b07      	cmp	r3, #7
 800149c:	d9ce      	bls.n	800143c <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	3301      	adds	r3, #1
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	7bbb      	ldrb	r3, [r7, #14]
 80014a6:	2b3f      	cmp	r3, #63	; 0x3f
 80014a8:	d991      	bls.n	80013ce <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 80014b8:	4802      	ldr	r0, [pc, #8]	; (80014c4 <ST7920_Update+0x10>)
 80014ba:	f7ff ff81 	bl	80013c0 <ST7920_DrawBitmap>
}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000104 	.word	0x20000104

080014c8 <ST7920_Clear>:



void ST7920_Clear()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <ST7920_Clear+0x98>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d13a      	bne.n	800154c <ST7920_Clear+0x84>
	{
		uint8_t x, y;
		memset(image, 0, sizeof(image));
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	2100      	movs	r1, #0
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <ST7920_Clear+0x9c>)
 80014de:	f006 fd87 	bl	8007ff0 <memset>
		for(y = 0; y < 64; y++)
 80014e2:	2300      	movs	r3, #0
 80014e4:	71bb      	strb	r3, [r7, #6]
 80014e6:	e02d      	b.n	8001544 <ST7920_Clear+0x7c>
		{
			if(y < 32)
 80014e8:	79bb      	ldrb	r3, [r7, #6]
 80014ea:	2b1f      	cmp	r3, #31
 80014ec:	d80a      	bhi.n	8001504 <ST7920_Clear+0x3c>
			{
				ST7920_SendCmd(0x80 | y);
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fe9e 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 80014fc:	2080      	movs	r0, #128	; 0x80
 80014fe:	f7ff fe9b 	bl	8001238 <ST7920_SendCmd>
 8001502:	e00d      	b.n	8001520 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8001504:	79bb      	ldrb	r3, [r7, #6]
 8001506:	3b20      	subs	r3, #32
 8001508:	b2db      	uxtb	r3, r3
 800150a:	b25b      	sxtb	r3, r3
 800150c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001510:	b25b      	sxtb	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fe8f 	bl	8001238 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 800151a:	2088      	movs	r0, #136	; 0x88
 800151c:	f7ff fe8c 	bl	8001238 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 8001520:	2300      	movs	r3, #0
 8001522:	71fb      	strb	r3, [r7, #7]
 8001524:	e008      	b.n	8001538 <ST7920_Clear+0x70>
			{
				ST7920_SendData(0);
 8001526:	2000      	movs	r0, #0
 8001528:	f7ff feae 	bl	8001288 <ST7920_SendData>
				ST7920_SendData(0);
 800152c:	2000      	movs	r0, #0
 800152e:	f7ff feab 	bl	8001288 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	3301      	adds	r3, #1
 8001536:	71fb      	strb	r3, [r7, #7]
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9f3      	bls.n	8001526 <ST7920_Clear+0x5e>
		for(y = 0; y < 64; y++)
 800153e:	79bb      	ldrb	r3, [r7, #6]
 8001540:	3301      	adds	r3, #1
 8001542:	71bb      	strb	r3, [r7, #6]
 8001544:	79bb      	ldrb	r3, [r7, #6]
 8001546:	2b3f      	cmp	r3, #63	; 0x3f
 8001548:	d9ce      	bls.n	80014e8 <ST7920_Clear+0x20>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 800154a:	e005      	b.n	8001558 <ST7920_Clear+0x90>
		ST7920_SendCmd(0x01);   // clear the display using command
 800154c:	2001      	movs	r0, #1
 800154e:	f7ff fe73 	bl	8001238 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 8001552:	2002      	movs	r0, #2
 8001554:	f002 fc54 	bl	8003e00 <HAL_Delay>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20000090 	.word	0x20000090
 8001564:	20000104 	.word	0x20000104

08001568 <ST7920_Init>:


void ST7920_Init (void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 800156c:	2200      	movs	r2, #0
 800156e:	2101      	movs	r1, #1
 8001570:	481c      	ldr	r0, [pc, #112]	; (80015e4 <ST7920_Init+0x7c>)
 8001572:	f002 ff0d 	bl	8004390 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 8001576:	200a      	movs	r0, #10
 8001578:	f002 fc42 	bl	8003e00 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 800157c:	2201      	movs	r2, #1
 800157e:	2101      	movs	r1, #1
 8001580:	4818      	ldr	r0, [pc, #96]	; (80015e4 <ST7920_Init+0x7c>)
 8001582:	f002 ff05 	bl	8004390 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8001586:	2032      	movs	r0, #50	; 0x32
 8001588:	f002 fc3a 	bl	8003e00 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 800158c:	2030      	movs	r0, #48	; 0x30
 800158e:	f7ff fe53 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8001592:	206e      	movs	r0, #110	; 0x6e
 8001594:	f000 f9f4 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 8001598:	2030      	movs	r0, #48	; 0x30
 800159a:	f7ff fe4d 	bl	8001238 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 800159e:	2028      	movs	r0, #40	; 0x28
 80015a0:	f000 f9ee 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 80015a4:	2008      	movs	r0, #8
 80015a6:	f7ff fe47 	bl	8001238 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 80015aa:	206e      	movs	r0, #110	; 0x6e
 80015ac:	f000 f9e8 	bl	8001980 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 80015b0:	2001      	movs	r0, #1
 80015b2:	f7ff fe41 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 80015b6:	200c      	movs	r0, #12
 80015b8:	f002 fc22 	bl	8003e00 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 80015bc:	2006      	movs	r0, #6
 80015be:	f7ff fe3b 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015c2:	2001      	movs	r0, #1
 80015c4:	f002 fc1c 	bl	8003e00 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 80015c8:	200c      	movs	r0, #12
 80015ca:	f7ff fe35 	bl	8001238 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 80015ce:	2001      	movs	r0, #1
 80015d0:	f002 fc16 	bl	8003e00 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff fe2f 	bl	8001238 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 80015da:	2001      	movs	r0, #1
 80015dc:	f002 fc10 	bl	8003e00 <HAL_Delay>

}
 80015e0:	bf00      	nop
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	48000800 	.word	0x48000800

080015e8 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	460a      	mov	r2, r1
 80015f2:	71fb      	strb	r3, [r7, #7]
 80015f4:	4613      	mov	r3, r2
 80015f6:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 80015f8:	4b29      	ldr	r3, [pc, #164]	; (80016a0 <SetPixel+0xb8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	79ba      	ldrb	r2, [r7, #6]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d248      	bcs.n	8001694 <SetPixel+0xac>
 8001602:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SetPixel+0xbc>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	79fa      	ldrb	r2, [r7, #7]
 8001608:	429a      	cmp	r2, r3
 800160a:	d243      	bcs.n	8001694 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 800160c:	79bb      	ldrb	r3, [r7, #6]
 800160e:	4a25      	ldr	r2, [pc, #148]	; (80016a4 <SetPixel+0xbc>)
 8001610:	7812      	ldrb	r2, [r2, #0]
 8001612:	08d2      	lsrs	r2, r2, #3
 8001614:	b2d2      	uxtb	r2, r2
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	79fa      	ldrb	r2, [r7, #7]
 800161c:	08d2      	lsrs	r2, r2, #3
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	4413      	add	r3, r2
 8001622:	461a      	mov	r2, r3
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <SetPixel+0xc0>)
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	781a      	ldrb	r2, [r3, #0]
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	2180      	movs	r1, #128	; 0x80
 8001636:	fa21 f303 	lsr.w	r3, r1, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b2da      	uxtb	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	701a      	strb	r2, [r3, #0]

    *image = *p;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	781a      	ldrb	r2, [r3, #0]
 8001648:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <SetPixel+0xc0>)
 800164a:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <SetPixel+0xc4>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	79ba      	ldrb	r2, [r7, #6]
 8001652:	429a      	cmp	r2, r3
 8001654:	d202      	bcs.n	800165c <SetPixel+0x74>
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <SetPixel+0xc4>)
 8001658:	79bb      	ldrb	r3, [r7, #6]
 800165a:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <SetPixel+0xc8>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	429a      	cmp	r2, r3
 8001664:	d304      	bcc.n	8001670 <SetPixel+0x88>
 8001666:	79bb      	ldrb	r3, [r7, #6]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <SetPixel+0xc8>)
 800166e:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 8001670:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <SetPixel+0xcc>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	79fa      	ldrb	r2, [r7, #7]
 8001676:	429a      	cmp	r2, r3
 8001678:	d202      	bcs.n	8001680 <SetPixel+0x98>
 800167a:	4a0e      	ldr	r2, [pc, #56]	; (80016b4 <SetPixel+0xcc>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <SetPixel+0xd0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	429a      	cmp	r2, r3
 8001688:	d304      	bcc.n	8001694 <SetPixel+0xac>
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SetPixel+0xd0>)
 8001692:	701a      	strb	r2, [r3, #0]


  }

}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000000 	.word	0x20000000
 80016a4:	20000001 	.word	0x20000001
 80016a8:	20000104 	.word	0x20000104
 80016ac:	20000504 	.word	0x20000504
 80016b0:	20000506 	.word	0x20000506
 80016b4:	20000100 	.word	0x20000100
 80016b8:	20000505 	.word	0x20000505

080016bc <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80016bc:	b590      	push	{r4, r7, lr}
 80016be:	b089      	sub	sp, #36	; 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4604      	mov	r4, r0
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4623      	mov	r3, r4
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	4603      	mov	r3, r0
 80016d0:	71bb      	strb	r3, [r7, #6]
 80016d2:	460b      	mov	r3, r1
 80016d4:	717b      	strb	r3, [r7, #5]
 80016d6:	4613      	mov	r3, r2
 80016d8:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 80016da:	797a      	ldrb	r2, [r7, #5]
 80016dc:	79fb      	ldrb	r3, [r7, #7]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d303      	bcc.n	80016ea <DrawLine+0x2e>
 80016e2:	797a      	ldrb	r2, [r7, #5]
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	e002      	b.n	80016f0 <DrawLine+0x34>
 80016ea:	79fa      	ldrb	r2, [r7, #7]
 80016ec:	797b      	ldrb	r3, [r7, #5]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 80016f2:	793a      	ldrb	r2, [r7, #4]
 80016f4:	79bb      	ldrb	r3, [r7, #6]
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d303      	bcc.n	8001702 <DrawLine+0x46>
 80016fa:	793a      	ldrb	r2, [r7, #4]
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	e002      	b.n	8001708 <DrawLine+0x4c>
 8001702:	79ba      	ldrb	r2, [r7, #6]
 8001704:	793b      	ldrb	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 800170a:	79fa      	ldrb	r2, [r7, #7]
 800170c:	797b      	ldrb	r3, [r7, #5]
 800170e:	429a      	cmp	r2, r3
 8001710:	d201      	bcs.n	8001716 <DrawLine+0x5a>
 8001712:	2301      	movs	r3, #1
 8001714:	e001      	b.n	800171a <DrawLine+0x5e>
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 800171c:	79ba      	ldrb	r2, [r7, #6]
 800171e:	793b      	ldrb	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	d201      	bcs.n	8001728 <DrawLine+0x6c>
 8001724:	2301      	movs	r3, #1
 8001726:	e001      	b.n	800172c <DrawLine+0x70>
 8001728:	f04f 33ff 	mov.w	r3, #4294967295
 800172c:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 8001736:	79ba      	ldrb	r2, [r7, #6]
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff53 	bl	80015e8 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	797b      	ldrb	r3, [r7, #5]
 8001746:	429a      	cmp	r2, r3
 8001748:	d103      	bne.n	8001752 <DrawLine+0x96>
 800174a:	79ba      	ldrb	r2, [r7, #6]
 800174c:	793b      	ldrb	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	d01e      	beq.n	8001790 <DrawLine+0xd4>
    int e2 = err + err;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	425b      	negs	r3, r3
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	429a      	cmp	r2, r3
 8001760:	dd08      	ble.n	8001774 <DrawLine+0xb8>
    {
      err -= dy;
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	79fb      	ldrb	r3, [r7, #7]
 8001770:	4413      	add	r3, r2
 8001772:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	429a      	cmp	r2, r3
 800177a:	dadc      	bge.n	8001736 <DrawLine+0x7a>
    {
      err += dx;
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	4413      	add	r3, r2
 8001782:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	79bb      	ldrb	r3, [r7, #6]
 800178a:	4413      	add	r3, r2
 800178c:	71bb      	strb	r3, [r7, #6]
  {
 800178e:	e7d2      	b.n	8001736 <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8001790:	bf00      	nop
    }
  }
}
 8001792:	bf00      	nop
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd90      	pop	{r4, r7, pc}
	...

0800179c <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4604      	mov	r4, r0
 80017a4:	4608      	mov	r0, r1
 80017a6:	4611      	mov	r1, r2
 80017a8:	461a      	mov	r2, r3
 80017aa:	4623      	mov	r3, r4
 80017ac:	80fb      	strh	r3, [r7, #6]
 80017ae:	4603      	mov	r3, r0
 80017b0:	80bb      	strh	r3, [r7, #4]
 80017b2:	460b      	mov	r3, r1
 80017b4:	807b      	strh	r3, [r7, #2]
 80017b6:	4613      	mov	r3, r2
 80017b8:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 80017ba:	4b3b      	ldr	r3, [pc, #236]	; (80018a8 <DrawRectangle+0x10c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
	if (
 80017c0:	88fa      	ldrh	r2, [r7, #6]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d26b      	bcs.n	800189e <DrawRectangle+0x102>
		y >= numRows
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <DrawRectangle+0x110>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	b29b      	uxth	r3, r3
		x >= numCols ||
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d265      	bcs.n	800189e <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80017d2:	88fa      	ldrh	r2, [r7, #6]
 80017d4:	887b      	ldrh	r3, [r7, #2]
 80017d6:	4413      	add	r3, r2
 80017d8:	4a33      	ldr	r2, [pc, #204]	; (80018a8 <DrawRectangle+0x10c>)
 80017da:	7812      	ldrb	r2, [r2, #0]
 80017dc:	4293      	cmp	r3, r2
 80017de:	db05      	blt.n	80017ec <DrawRectangle+0x50>
		w = numCols - x;
 80017e0:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <DrawRectangle+0x10c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 80017ec:	88ba      	ldrh	r2, [r7, #4]
 80017ee:	883b      	ldrh	r3, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a2e      	ldr	r2, [pc, #184]	; (80018ac <DrawRectangle+0x110>)
 80017f4:	7812      	ldrb	r2, [r2, #0]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	db05      	blt.n	8001806 <DrawRectangle+0x6a>
		h = numRows - y;
 80017fa:	4b2c      	ldr	r3, [pc, #176]	; (80018ac <DrawRectangle+0x110>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	b2d8      	uxtb	r0, r3
 800180a:	88bb      	ldrh	r3, [r7, #4]
 800180c:	b2d9      	uxtb	r1, r3
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4413      	add	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	88bb      	ldrh	r3, [r7, #4]
 800181c:	b2db      	uxtb	r3, r3
 800181e:	f7ff ff4d 	bl	80016bc <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2d8      	uxtb	r0, r3
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	b2db      	uxtb	r3, r3
 800182e:	4413      	add	r3, r2
 8001830:	b2d9      	uxtb	r1, r3
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	887b      	ldrh	r3, [r7, #2]
 8001838:	b2db      	uxtb	r3, r3
 800183a:	4413      	add	r3, r2
 800183c:	b2dc      	uxtb	r4, r3
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	883b      	ldrh	r3, [r7, #0]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	4413      	add	r3, r2
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4622      	mov	r2, r4
 800184c:	f7ff ff36 	bl	80016bc <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	b2d8      	uxtb	r0, r3
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	b2d9      	uxtb	r1, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	b2dc      	uxtb	r4, r3
 800185c:	88bb      	ldrh	r3, [r7, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	883b      	ldrh	r3, [r7, #0]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	4413      	add	r3, r2
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4622      	mov	r2, r4
 800186a:	f7ff ff27 	bl	80016bc <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4413      	add	r3, r2
 8001878:	b2d8      	uxtb	r0, r3
 800187a:	88bb      	ldrh	r3, [r7, #4]
 800187c:	b2d9      	uxtb	r1, r3
 800187e:	88fb      	ldrh	r3, [r7, #6]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4413      	add	r3, r2
 8001888:	b2dc      	uxtb	r4, r3
 800188a:	88bb      	ldrh	r3, [r7, #4]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	883b      	ldrh	r3, [r7, #0]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4413      	add	r3, r2
 8001894:	b2db      	uxtb	r3, r3
 8001896:	4622      	mov	r2, r4
 8001898:	f7ff ff10 	bl	80016bc <DrawLine>
 800189c:	e000      	b.n	80018a0 <DrawRectangle+0x104>
		return;
 800189e:	bf00      	nop
}
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000001 	.word	0x20000001
 80018ac:	20000000 	.word	0x20000000

080018b0 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 80018b0:	b590      	push	{r4, r7, lr}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	4611      	mov	r1, r2
 80018bc:	461a      	mov	r2, r3
 80018be:	4623      	mov	r3, r4
 80018c0:	80fb      	strh	r3, [r7, #6]
 80018c2:	4603      	mov	r3, r0
 80018c4:	80bb      	strh	r3, [r7, #4]
 80018c6:	460b      	mov	r3, r1
 80018c8:	807b      	strh	r3, [r7, #2]
 80018ca:	4613      	mov	r3, r2
 80018cc:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 80018ce:	4b25      	ldr	r3, [pc, #148]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
	if (
 80018d4:	88fa      	ldrh	r2, [r7, #6]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d240      	bcs.n	800195c <DrawFilledRectangle+0xac>
		y >= numRows
 80018da:	4b23      	ldr	r3, [pc, #140]	; (8001968 <DrawFilledRectangle+0xb8>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
		x >= numCols ||
 80018e0:	88ba      	ldrh	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d23a      	bcs.n	800195c <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a1d      	ldr	r2, [pc, #116]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018ee:	7812      	ldrb	r2, [r2, #0]
 80018f0:	4293      	cmp	r3, r2
 80018f2:	db05      	blt.n	8001900 <DrawFilledRectangle+0x50>
		w = numCols - x;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <DrawFilledRectangle+0xb4>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001900:	88ba      	ldrh	r2, [r7, #4]
 8001902:	883b      	ldrh	r3, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	4a18      	ldr	r2, [pc, #96]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4293      	cmp	r3, r2
 800190c:	db05      	blt.n	800191a <DrawFilledRectangle+0x6a>
		h = numRows - y;
 800190e:	4b16      	ldr	r3, [pc, #88]	; (8001968 <DrawFilledRectangle+0xb8>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800191a:	2300      	movs	r3, #0
 800191c:	73fb      	strb	r3, [r7, #15]
 800191e:	e017      	b.n	8001950 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 8001920:	88fb      	ldrh	r3, [r7, #6]
 8001922:	b2d8      	uxtb	r0, r3
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	b2da      	uxtb	r2, r3
 8001928:	7bfb      	ldrb	r3, [r7, #15]
 800192a:	4413      	add	r3, r2
 800192c:	b2d9      	uxtb	r1, r3
 800192e:	88fb      	ldrh	r3, [r7, #6]
 8001930:	b2da      	uxtb	r2, r3
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4413      	add	r3, r2
 8001938:	b2dc      	uxtb	r4, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	b2da      	uxtb	r2, r3
 800193e:	7bfb      	ldrb	r3, [r7, #15]
 8001940:	4413      	add	r3, r2
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4622      	mov	r2, r4
 8001946:	f7ff feb9 	bl	80016bc <DrawLine>
	for (i = 0; i <= h; i++) {
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	3301      	adds	r3, #1
 800194e:	73fb      	strb	r3, [r7, #15]
 8001950:	7bfb      	ldrb	r3, [r7, #15]
 8001952:	b29b      	uxth	r3, r3
 8001954:	883a      	ldrh	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d2e2      	bcs.n	8001920 <DrawFilledRectangle+0x70>
 800195a:	e000      	b.n	800195e <DrawFilledRectangle+0xae>
		return;
 800195c:	bf00      	nop
	}
}
 800195e:	3714      	adds	r7, #20
 8001960:	46bd      	mov	sp, r7
 8001962:	bd90      	pop	{r4, r7, pc}
 8001964:	20000001 	.word	0x20000001
 8001968:	20000000 	.word	0x20000000

0800196c <delay_init>:
//#include "stm32f1xx.h"



void delay_init ()
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <delay_init+0x10>)
 8001972:	f004 fa7f 	bl	8005e74 <HAL_TIM_Base_Start>
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000610 	.word	0x20000610

08001980 <delay_us>:

void delay_us (uint16_t delay)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(_TIMER, 0);  // reset the counter
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <delay_us+0x30>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(_TIMER))<delay);  // wait for the delay to complete
 8001992:	bf00      	nop
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <delay_us+0x30>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3f9      	bcc.n	8001994 <delay_us+0x14>
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	20000610 	.word	0x20000610

080019b4 <encoder_init>:
extern stepper_motor extruder;
extern dc_motor DC_motor;
extern filament_cutter FC_struct;

void encoder_init(GPIO_TypeDef* GPIO_BTN_PORT, uint16_t Button_Pin, uint32_t debounce_time)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	460b      	mov	r3, r1
 80019be:	607a      	str	r2, [r7, #4]
 80019c0:	817b      	strh	r3, [r7, #10]
	enc_btn.PORT = GPIO_BTN_PORT;
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <encoder_init+0x50>)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6013      	str	r3, [r2, #0]
	enc_btn.PIN = Button_Pin;
 80019c8:	4a0e      	ldr	r2, [pc, #56]	; (8001a04 <encoder_init+0x50>)
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	8093      	strh	r3, [r2, #4]
	enc_btn.debounce_time = debounce_time;
 80019ce:	4a0d      	ldr	r2, [pc, #52]	; (8001a04 <encoder_init+0x50>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60d3      	str	r3, [r2, #12]
	enc_btn.BTN_state = DEFA;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <encoder_init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	741a      	strb	r2, [r3, #16]
	enc_btn.last_tick = 0;
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <encoder_init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]

	ENC_Button_RegisterPressCallback(&ENC_Button_PressedTask);
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <encoder_init+0x54>)
 80019e2:	f000 f821 	bl	8001a28 <ENC_Button_RegisterPressCallback>

	__HAL_TIM_SET_AUTORELOAD(_ENC_TIMER, 19);
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <encoder_init+0x58>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2213      	movs	r2, #19
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80019ee:	4b07      	ldr	r3, [pc, #28]	; (8001a0c <encoder_init+0x58>)
 80019f0:	2213      	movs	r2, #19
 80019f2:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(_ENC_TIMER, TIM_CHANNEL_ALL);
 80019f4:	213c      	movs	r1, #60	; 0x3c
 80019f6:	4805      	ldr	r0, [pc, #20]	; (8001a0c <encoder_init+0x58>)
 80019f8:	f004 fd90 	bl	800651c <HAL_TIM_Encoder_Start>
}
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000094 	.word	0x20000094
 8001a08:	08001b35 	.word	0x08001b35
 8001a0c:	200005c4 	.word	0x200005c4

08001a10 <enc_get_counter>:


uint32_t enc_get_counter()
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_ENC_TIMER);
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <enc_get_counter+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	200005c4 	.word	0x200005c4

08001a28 <ENC_Button_RegisterPressCallback>:


void ENC_Button_RegisterPressCallback(void *callback)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
	enc_btn.ButtonPressed = callback;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <ENC_Button_RegisterPressCallback+0x1c>)
 8001a34:	6153      	str	r3, [r2, #20]

}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000094 	.word	0x20000094

08001a48 <ENC_Button_DebounceRoutine>:


void ENC_Button_DebounceRoutine(cursor_position* cur_postion)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - enc_btn.last_tick) > enc_btn.debounce_time)
 8001a50:	f002 f9ca 	bl	8003de8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	1ad2      	subs	r2, r2, r3
 8001a5c:	4b0e      	ldr	r3, [pc, #56]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d915      	bls.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
	{
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001a64:	2140      	movs	r1, #64	; 0x40
 8001a66:	480d      	ldr	r0, [pc, #52]	; (8001a9c <ENC_Button_DebounceRoutine+0x54>)
 8001a68:	f002 fc7a 	bl	8004360 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10b      	bne.n	8001a8a <ENC_Button_DebounceRoutine+0x42>
		{
			enc_btn.BTN_state = PRESSED;
 8001a72:	4b09      	ldr	r3, [pc, #36]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a74:	2202      	movs	r2, #2
 8001a76:	741a      	strb	r2, [r3, #16]
			if(enc_btn.ButtonPressed != NULL)
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
			{
				enc_btn.ButtonPressed(cur_postion);
 8001a80:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	4798      	blx	r3
			enc_btn.BTN_state = DEFA;
		}

	}

}
 8001a88:	e002      	b.n	8001a90 <ENC_Button_DebounceRoutine+0x48>
			enc_btn.BTN_state = DEFA;
 8001a8a:	4b03      	ldr	r3, [pc, #12]	; (8001a98 <ENC_Button_DebounceRoutine+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	741a      	strb	r2, [r3, #16]
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000094 	.word	0x20000094
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <ENC_Button_IdleRoutine>:


void ENC_Button_IdleRoutine()
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001aa4:	2140      	movs	r1, #64	; 0x40
 8001aa6:	4808      	ldr	r0, [pc, #32]	; (8001ac8 <ENC_Button_IdleRoutine+0x28>)
 8001aa8:	f002 fc5a 	bl	8004360 <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <ENC_Button_IdleRoutine+0x22>
	{
		enc_btn.last_tick = HAL_GetTick();
 8001ab2:	f002 f999 	bl	8003de8 <HAL_GetTick>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	4a04      	ldr	r2, [pc, #16]	; (8001acc <ENC_Button_IdleRoutine+0x2c>)
 8001aba:	6093      	str	r3, [r2, #8]
		enc_btn.BTN_state = DEBOUNCE;
 8001abc:	4b03      	ldr	r3, [pc, #12]	; (8001acc <ENC_Button_IdleRoutine+0x2c>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	741a      	strb	r2, [r3, #16]
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	48000400 	.word	0x48000400
 8001acc:	20000094 	.word	0x20000094

08001ad0 <ENC_Button_PressedRoutine>:


void ENC_Button_PressedRoutine()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_SET)
 8001ad4:	2140      	movs	r1, #64	; 0x40
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <ENC_Button_PressedRoutine+0x1c>)
 8001ad8:	f002 fc42 	bl	8004360 <HAL_GPIO_ReadPin>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <ENC_Button_PressedRoutine+0x18>
	{
		enc_btn.BTN_state = DEFA;
 8001ae2:	4b03      	ldr	r3, [pc, #12]	; (8001af0 <ENC_Button_PressedRoutine+0x20>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	741a      	strb	r2, [r3, #16]
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	48000400 	.word	0x48000400
 8001af0:	20000094 	.word	0x20000094

08001af4 <ENC_Button_Action>:


void ENC_Button_Action(cursor_position* cur_postion)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	switch(enc_btn.BTN_state)
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <ENC_Button_Action+0x3c>)
 8001afe:	7c1b      	ldrb	r3, [r3, #16]
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d00d      	beq.n	8001b20 <ENC_Button_Action+0x2c>
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	dc0e      	bgt.n	8001b26 <ENC_Button_Action+0x32>
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <ENC_Button_Action+0x1e>
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d003      	beq.n	8001b18 <ENC_Button_Action+0x24>
		break;
	case PRESSED:
		ENC_Button_PressedRoutine();
		break;
	}
}
 8001b10:	e009      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_IdleRoutine();
 8001b12:	f7ff ffc5 	bl	8001aa0 <ENC_Button_IdleRoutine>
		break;
 8001b16:	e006      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_DebounceRoutine(cur_postion);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff95 	bl	8001a48 <ENC_Button_DebounceRoutine>
		break;
 8001b1e:	e002      	b.n	8001b26 <ENC_Button_Action+0x32>
		ENC_Button_PressedRoutine();
 8001b20:	f7ff ffd6 	bl	8001ad0 <ENC_Button_PressedRoutine>
		break;
 8001b24:	bf00      	nop
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000094 	.word	0x20000094

08001b34 <ENC_Button_PressedTask>:



//void ENC_Button_PressedTask(encoder_button* enc_btn, cursor_position* cursor_pos)
void ENC_Button_PressedTask(cursor_position* cursor_pos)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
	if(cursor_pos->current_layer == FIRST_LAYER)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	799b      	ldrb	r3, [r3, #6]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d136      	bne.n	8001bb2 <ENC_Button_PressedTask+0x7e>
	{
		if(cursor_pos->FL_position == SETTINGS)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d107      	bne.n	8001b5c <ENC_Button_PressedTask+0x28>
		{
			cursor_pos->current_layer = SECOND_LAYER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b52:	4b80      	ldr	r3, [pc, #512]	; (8001d54 <ENC_Button_PressedTask+0x220>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	625a      	str	r2, [r3, #36]	; 0x24


	}


}
 8001b5a:	e0f7      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->FL_position == START)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d10a      	bne.n	8001b7a <ENC_Button_PressedTask+0x46>
			FC_struct.mode = EXTRUDE;
 8001b64:	4b7c      	ldr	r3, [pc, #496]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001b66:	2201      	movs	r2, #1
 8001b68:	701a      	strb	r2, [r3, #0]
			cursor_pos->FL_position = ACTIVE_START;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001b70:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <ENC_Button_PressedTask+0x220>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2200      	movs	r2, #0
 8001b76:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b78:	e0e8      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->FL_position == STOP)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	f040 80e4 	bne.w	8001d4c <ENC_Button_PressedTask+0x218>
			stepper_stop(&extruder);
 8001b84:	4875      	ldr	r0, [pc, #468]	; (8001d5c <ENC_Button_PressedTask+0x228>)
 8001b86:	f001 f9e7 	bl	8002f58 <stepper_stop>
			DC_stop(&DC_motor);
 8001b8a:	4875      	ldr	r0, [pc, #468]	; (8001d60 <ENC_Button_PressedTask+0x22c>)
 8001b8c:	f7ff fa93 	bl	80010b6 <DC_stop>
			EXTRUDE_PROCESS_FLAG = 0;
 8001b90:	4b74      	ldr	r3, [pc, #464]	; (8001d64 <ENC_Button_PressedTask+0x230>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
			CUTTING_PROCESS_FLAG = 0;
 8001b96:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <ENC_Button_PressedTask+0x234>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = STANDBY;
 8001b9c:	4b6e      	ldr	r3, [pc, #440]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	; (8001d54 <ENC_Button_PressedTask+0x220>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
}
 8001bb0:	e0cc      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
	else if(cursor_pos->current_layer == SECOND_LAYER)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	799b      	ldrb	r3, [r3, #6]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d137      	bne.n	8001c2a <ENC_Button_PressedTask+0xf6>
		if(cursor_pos->SL_position == BACK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	789b      	ldrb	r3, [r3, #2]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d106      	bne.n	8001bd0 <ENC_Button_PressedTask+0x9c>
			cursor_pos->current_layer = FIRST_LAYER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	719a      	strb	r2, [r3, #6]
			cursor_pos->FL_position = DEFAULT;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
}
 8001bce:	e0bd      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->SL_position == FIL_DIA)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	789b      	ldrb	r3, [r3, #2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <ENC_Button_PressedTask+0xb2>
			cursor_pos->current_layer = THIRD_LAYER;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	711a      	strb	r2, [r3, #4]
}
 8001be4:	e0b2      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->SL_position == FIL_DEN)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	789b      	ldrb	r3, [r3, #2]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d106      	bne.n	8001bfc <ENC_Button_PressedTask+0xc8>
			cursor_pos->current_layer = THIRD_LAYER;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	711a      	strb	r2, [r3, #4]
}
 8001bfa:	e0a7      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->SL_position == SAMPLE_WEIGHT)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	789b      	ldrb	r3, [r3, #2]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d106      	bne.n	8001c12 <ENC_Button_PressedTask+0xde>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2202      	movs	r2, #2
 8001c08:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = WEIGHT_5g;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	711a      	strb	r2, [r3, #4]
}
 8001c10:	e09c      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->SL_position == QUANTITY)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	789b      	ldrb	r3, [r3, #2]
 8001c16:	2b04      	cmp	r3, #4
 8001c18:	f040 8098 	bne.w	8001d4c <ENC_Button_PressedTask+0x218>
			cursor_pos->current_layer = THIRD_LAYER;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QTY;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2209      	movs	r2, #9
 8001c26:	711a      	strb	r2, [r3, #4]
}
 8001c28:	e090      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
	else if(cursor_pos->current_layer == THIRD_LAYER)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	799b      	ldrb	r3, [r3, #6]
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	f040 808c 	bne.w	8001d4c <ENC_Button_PressedTask+0x218>
		if(cursor_pos->TL_position == DIAMETER_175)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d109      	bne.n	8001c50 <ENC_Button_PressedTask+0x11c>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_175;
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001c4a:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <ENC_Button_PressedTask+0x238>)
 8001c4c:	609a      	str	r2, [r3, #8]
}
 8001c4e:	e07d      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == DIAMETER_285)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	791b      	ldrb	r3, [r3, #4]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d109      	bne.n	8001c6c <ENC_Button_PressedTask+0x138>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DIA;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2201      	movs	r2, #1
 8001c62:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_diameter = Filament_diameter_285;
 8001c64:	4b3c      	ldr	r3, [pc, #240]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <ENC_Button_PressedTask+0x23c>)
 8001c68:	609a      	str	r2, [r3, #8]
}
 8001c6a:	e06f      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == DENSITY_PLA)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d109      	bne.n	8001c88 <ENC_Button_PressedTask+0x154>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_PLA;
 8001c80:	4b35      	ldr	r3, [pc, #212]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001c82:	4a3c      	ldr	r2, [pc, #240]	; (8001d74 <ENC_Button_PressedTask+0x240>)
 8001c84:	605a      	str	r2, [r3, #4]
}
 8001c86:	e061      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == DENSITY_ABS)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	2b03      	cmp	r3, #3
 8001c8e:	d109      	bne.n	8001ca4 <ENC_Button_PressedTask+0x170>
			cursor_pos->current_layer = SECOND_LAYER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	719a      	strb	r2, [r3, #6]
			cursor_pos->SL_position = FIL_DEN;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2202      	movs	r2, #2
 8001c9a:	709a      	strb	r2, [r3, #2]
			FC_struct.parameters.filament_density = Filament_density_ABS;
 8001c9c:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001c9e:	4a36      	ldr	r2, [pc, #216]	; (8001d78 <ENC_Button_PressedTask+0x244>)
 8001ca0:	605a      	str	r2, [r3, #4]
}
 8001ca2:	e053      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == DENSITY_PETG)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	2b04      	cmp	r3, #4
 8001caa:	d109      	bne.n	8001cc0 <ENC_Button_PressedTask+0x18c>
			cursor_pos->current_layer = SECOND_LAYER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = FIL_DEN;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.filament_density = Filament_density_PETG;
 8001cb8:	4b27      	ldr	r3, [pc, #156]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001cba:	4a30      	ldr	r2, [pc, #192]	; (8001d7c <ENC_Button_PressedTask+0x248>)
 8001cbc:	605a      	str	r2, [r3, #4]
}
 8001cbe:	e045      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == WEIGHT_5g)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	791b      	ldrb	r3, [r3, #4]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d109      	bne.n	8001cdc <ENC_Button_PressedTask+0x1a8>
			cursor_pos->current_layer = SECOND_LAYER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_5g;
 8001cd4:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	819a      	strh	r2, [r3, #12]
}
 8001cda:	e037      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == WEIGHT_25g)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	791b      	ldrb	r3, [r3, #4]
 8001ce0:	2b06      	cmp	r3, #6
 8001ce2:	d109      	bne.n	8001cf8 <ENC_Button_PressedTask+0x1c4>
			cursor_pos->current_layer = SECOND_LAYER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_25g;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001cf2:	2219      	movs	r2, #25
 8001cf4:	819a      	strh	r2, [r3, #12]
}
 8001cf6:	e029      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == WEIGHT_50g)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	791b      	ldrb	r3, [r3, #4]
 8001cfc:	2b07      	cmp	r3, #7
 8001cfe:	d109      	bne.n	8001d14 <ENC_Button_PressedTask+0x1e0>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_50g;
 8001d0c:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001d0e:	2232      	movs	r2, #50	; 0x32
 8001d10:	819a      	strh	r2, [r3, #12]
}
 8001d12:	e01b      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == WEIGHT_100g)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	791b      	ldrb	r3, [r3, #4]
 8001d18:	2b08      	cmp	r3, #8
 8001d1a:	d109      	bne.n	8001d30 <ENC_Button_PressedTask+0x1fc>
			cursor_pos->current_layer = SECOND_LAYER;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = SAMPLE_WEIGHT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2203      	movs	r2, #3
 8001d26:	711a      	strb	r2, [r3, #4]
			FC_struct.parameters.target_weight = Sample_weight_100g;
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001d2a:	2264      	movs	r2, #100	; 0x64
 8001d2c:	819a      	strh	r2, [r3, #12]
}
 8001d2e:	e00d      	b.n	8001d4c <ENC_Button_PressedTask+0x218>
		else if(cursor_pos->TL_position == QTY)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b09      	cmp	r3, #9
 8001d36:	d109      	bne.n	8001d4c <ENC_Button_PressedTask+0x218>
			FC_struct.parameters.target_qty = FC_struct.parameters.temp_qty;
 8001d38:	4b07      	ldr	r3, [pc, #28]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001d3a:	7d1a      	ldrb	r2, [r3, #20]
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <ENC_Button_PressedTask+0x224>)
 8001d3e:	74da      	strb	r2, [r3, #19]
			cursor_pos->current_layer = SECOND_LAYER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = QUANTITY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	711a      	strb	r2, [r3, #4]
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	200005c4 	.word	0x200005c4
 8001d58:	20000520 	.word	0x20000520
 8001d5c:	200000ac 	.word	0x200000ac
 8001d60:	200000d0 	.word	0x200000d0
 8001d64:	20000508 	.word	0x20000508
 8001d68:	200000fe 	.word	0x200000fe
 8001d6c:	3fe00000 	.word	0x3fe00000
 8001d70:	40366666 	.word	0x40366666
 8001d74:	3f9eb852 	.word	0x3f9eb852
 8001d78:	3f851eb8 	.word	0x3f851eb8
 8001d7c:	3f9d70a4 	.word	0x3f9d70a4

08001d80 <Filament_Cutter_Init>:
extern filament_cutter_mode prev_mode;
extern stepper_motor extruder;
extern dc_motor DC_motor;

void Filament_Cutter_Init(stepper_motor *motor, dc_motor* dc_motor)
{
 8001d80:	b4b0      	push	{r4, r5, r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	FC_params.filament_density = Filament_density_PLA;
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001d8c:	4a15      	ldr	r2, [pc, #84]	; (8001de4 <Filament_Cutter_Init+0x64>)
 8001d8e:	601a      	str	r2, [r3, #0]
	FC_params.filament_diameter = Filament_diameter_175;
 8001d90:	4b13      	ldr	r3, [pc, #76]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001d92:	4a15      	ldr	r2, [pc, #84]	; (8001de8 <Filament_Cutter_Init+0x68>)
 8001d94:	605a      	str	r2, [r3, #4]
	FC_params.sample_quantities = 1;
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	729a      	strb	r2, [r3, #10]
	FC_params.target_weight = Sample_weight_5g;
 8001d9c:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001d9e:	2205      	movs	r2, #5
 8001da0:	811a      	strh	r2, [r3, #8]
	FC_params.current_length_cm = 0;
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	819a      	strh	r2, [r3, #12]
	FC_params.target_qty = 1;
 8001da8:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001daa:	2201      	movs	r2, #1
 8001dac:	73da      	strb	r2, [r3, #15]
	FC_params.current_qty = 0;
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	739a      	strb	r2, [r3, #14]


	FC_struct.motor = motor;
 8001db4:	4a0d      	ldr	r2, [pc, #52]	; (8001dec <Filament_Cutter_Init+0x6c>)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	61d3      	str	r3, [r2, #28]
	FC_struct.dc_motor = dc_motor;
 8001dba:	4a0c      	ldr	r2, [pc, #48]	; (8001dec <Filament_Cutter_Init+0x6c>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	6193      	str	r3, [r2, #24]
	FC_struct.mode = STANDBY;
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <Filament_Cutter_Init+0x6c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	701a      	strb	r2, [r3, #0]
	FC_struct.parameters = FC_params;
 8001dc6:	4b09      	ldr	r3, [pc, #36]	; (8001dec <Filament_Cutter_Init+0x6c>)
 8001dc8:	4a05      	ldr	r2, [pc, #20]	; (8001de0 <Filament_Cutter_Init+0x60>)
 8001dca:	1d1c      	adds	r4, r3, #4
 8001dcc:	4615      	mov	r5, r2
 8001dce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dd2:	682b      	ldr	r3, [r5, #0]
 8001dd4:	6023      	str	r3, [r4, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bcb0      	pop	{r4, r5, r7}
 8001dde:	4770      	bx	lr
 8001de0:	2000050c 	.word	0x2000050c
 8001de4:	3f9eb852 	.word	0x3f9eb852
 8001de8:	3fe00000 	.word	0x3fe00000
 8001dec:	20000520 	.word	0x20000520

08001df0 <motors_update>:



void motors_update(stepper_motor *motor, dc_motor* dc_motor)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
//	{
//		prev_mode = FC_struct.mode;
//		printf("Mode: %d\n", prev_mode);
//	}

	switch(FC_struct.mode)
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <motors_update+0x5c>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d013      	beq.n	8001e2c <motors_update+0x3c>
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	dc1c      	bgt.n	8001e42 <motors_update+0x52>
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <motors_update+0x22>
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d004      	beq.n	8001e1a <motors_update+0x2a>
		stepper_stop(&extruder);
		DC_set_angle(dc_motor, 360, 50, RIGHT);

		break;
	}
}
 8001e10:	e017      	b.n	8001e42 <motors_update+0x52>
		DC_stop(&DC_motor);
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <motors_update+0x60>)
 8001e14:	f7ff f94f 	bl	80010b6 <DC_stop>
		break;
 8001e18:	e013      	b.n	8001e42 <motors_update+0x52>
		HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_SET);
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2104      	movs	r1, #4
 8001e1e:	480d      	ldr	r0, [pc, #52]	; (8001e54 <motors_update+0x64>)
 8001e20:	f002 fab6 	bl	8004390 <HAL_GPIO_WritePin>
		stepper_extrude_weight(motor);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f001 fa7b 	bl	8003320 <stepper_extrude_weight>
		break;
 8001e2a:	e00a      	b.n	8001e42 <motors_update+0x52>
		stepper_stop(&extruder);
 8001e2c:	480a      	ldr	r0, [pc, #40]	; (8001e58 <motors_update+0x68>)
 8001e2e:	f001 f893 	bl	8002f58 <stepper_stop>
		DC_set_angle(dc_motor, 360, 50, RIGHT);
 8001e32:	2300      	movs	r3, #0
 8001e34:	2232      	movs	r2, #50	; 0x32
 8001e36:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001e3a:	6838      	ldr	r0, [r7, #0]
 8001e3c:	f7ff f98a 	bl	8001154 <DC_set_angle>
		break;
 8001e40:	bf00      	nop
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000520 	.word	0x20000520
 8001e50:	200000d0 	.word	0x200000d0
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	200000ac 	.word	0x200000ac

08001e5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e62:	f107 0314 	add.w	r3, r7, #20
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]
 8001e6e:	60da      	str	r2, [r3, #12]
 8001e70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e72:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e76:	4a4a      	ldr	r2, [pc, #296]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e78:	f043 0304 	orr.w	r3, r3, #4
 8001e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7e:	4b48      	ldr	r3, [pc, #288]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	f003 0304 	and.w	r3, r3, #4
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	4b45      	ldr	r3, [pc, #276]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	4a44      	ldr	r2, [pc, #272]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e96:	4b42      	ldr	r3, [pc, #264]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	4b3f      	ldr	r3, [pc, #252]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4a3e      	ldr	r2, [pc, #248]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eae:	4b3c      	ldr	r3, [pc, #240]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	60bb      	str	r3, [r7, #8]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eba:	4b39      	ldr	r3, [pc, #228]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ebe:	4a38      	ldr	r2, [pc, #224]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ec0:	f043 0308 	orr.w	r3, r3, #8
 8001ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eca:	f003 0308 	and.w	r3, r3, #8
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed2:	4b33      	ldr	r3, [pc, #204]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ed6:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ed8:	f043 0302 	orr.w	r3, r3, #2
 8001edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ede:	4b30      	ldr	r3, [pc, #192]	; (8001fa0 <MX_GPIO_Init+0x144>)
 8001ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	603b      	str	r3, [r7, #0]
 8001ee8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001eea:	2200      	movs	r2, #0
 8001eec:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001ef0:	482c      	ldr	r0, [pc, #176]	; (8001fa4 <MX_GPIO_Init+0x148>)
 8001ef2:	f002 fa4d 	bl	8004390 <HAL_GPIO_WritePin>
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2120      	movs	r1, #32
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f002 fa47 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2104      	movs	r1, #4
 8001f06:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <MX_GPIO_Init+0x14c>)
 8001f08:	f002 fa42 	bl	8004390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <MX_GPIO_Init+0x150>)
 8001f14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <MX_GPIO_Init+0x148>)
 8001f22:	f002 f8a3 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001f26:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001f2a:	617b      	str	r3, [r7, #20]
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f34:	2300      	movs	r3, #0
 8001f36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	4819      	ldr	r0, [pc, #100]	; (8001fa4 <MX_GPIO_Init+0x148>)
 8001f40:	f002 f894 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001f44:	2320      	movs	r3, #32
 8001f46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 0314 	add.w	r3, r7, #20
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f5e:	f002 f885 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTRD_SLEEP_Pin;
 8001f62:	2304      	movs	r3, #4
 8001f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EXTRD_SLEEP_GPIO_Port, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	480b      	ldr	r0, [pc, #44]	; (8001fa8 <MX_GPIO_Init+0x14c>)
 8001f7a:	f002 f877 	bl	800406c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001f7e:	2340      	movs	r3, #64	; 0x40
 8001f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4807      	ldr	r0, [pc, #28]	; (8001fb0 <MX_GPIO_Init+0x154>)
 8001f92:	f002 f86b 	bl	800406c <HAL_GPIO_Init>

}
 8001f96:	bf00      	nop
 8001f98:	3728      	adds	r7, #40	; 0x28
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00
 8001fac:	10210000 	.word	0x10210000
 8001fb0:	48000400 	.word	0x48000400

08001fb4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <MX_LPTIM1_Init+0x64>)
 8001fbc:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001fc4:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fdc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001fde:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001fea:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001fec:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_LPTIM1_Init+0x60>)
 8002000:	f002 f9de 	bl	80043c0 <HAL_LPTIM_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 800200a:	f000 f975 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000540 	.word	0x20000540
 8002018:	40007c00 	.word	0x40007c00

0800201c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b0a4      	sub	sp, #144	; 0x90
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
 8002032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	2268      	movs	r2, #104	; 0x68
 800203a:	2100      	movs	r1, #0
 800203c:	4618      	mov	r0, r3
 800203e:	f005 ffd7 	bl	8007ff0 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a25      	ldr	r2, [pc, #148]	; (80020dc <HAL_LPTIM_MspInit+0xc0>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d142      	bne.n	80020d2 <HAL_LPTIM_MspInit+0xb6>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002050:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002052:	2300      	movs	r3, #0
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002056:	f107 0314 	add.w	r3, r7, #20
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fb54 	bl	8005708 <HAL_RCCEx_PeriphCLKConfig>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8002066:	f000 f947 	bl	80022f8 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800206a:	4b1d      	ldr	r3, [pc, #116]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	4a1c      	ldr	r2, [pc, #112]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 8002070:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002074:	6593      	str	r3, [r2, #88]	; 0x58
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 8002088:	f043 0302 	orr.w	r3, r3, #2
 800208c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800208e:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <HAL_LPTIM_MspInit+0xc4>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = DC_ENC_B_Pin|DC_ENC_A_Pin;
 800209a:	23a0      	movs	r3, #160	; 0xa0
 800209c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020ba:	4619      	mov	r1, r3
 80020bc:	4809      	ldr	r0, [pc, #36]	; (80020e4 <HAL_LPTIM_MspInit+0xc8>)
 80020be:	f001 ffd5 	bl	800406c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2041      	movs	r0, #65	; 0x41
 80020c8:	f001 ff99 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80020cc:	2041      	movs	r0, #65	; 0x41
 80020ce:	f001 ffb2 	bl	8004036 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 80020d2:	bf00      	nop
 80020d4:	3790      	adds	r7, #144	; 0x90
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40007c00 	.word	0x40007c00
 80020e0:	40021000 	.word	0x40021000
 80020e4:	48000400 	.word	0x48000400

080020e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020ee:	f001 fe0b 	bl	8003d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020f2:	f000 f859 	bl	80021a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020f6:	f7ff feb1 	bl	8001e5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020fa:	f001 fd4f 	bl	8003b9c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80020fe:	f001 fa2b 	bl	8003558 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002102:	f001 fad7 	bl	80036b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002106:	f001 fb25 	bl	8003754 <MX_TIM3_Init>
  MX_TIM6_Init();
 800210a:	f001 fb79 	bl	8003800 <MX_TIM6_Init>
  MX_TIM16_Init();
 800210e:	f001 fbad 	bl	800386c <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8002112:	f7ff ff4f 	bl	8001fb4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  encoder_init(ENC_BTN_GPIO_Port, ENC_BTN_Pin, 20);
 8002116:	2214      	movs	r2, #20
 8002118:	2140      	movs	r1, #64	; 0x40
 800211a:	481a      	ldr	r0, [pc, #104]	; (8002184 <main+0x9c>)
 800211c:	f7ff fc4a 	bl	80019b4 <encoder_init>
  delay_init();
 8002120:	f7ff fc24 	bl	800196c <delay_init>
  ST7920_Init();
 8002124:	f7ff fa20 	bl	8001568 <ST7920_Init>
  stepper_init(&extruder, &htim1, TIM_CHANNEL_1, &htim2, EXT_DIR_GPIO_Port,
 8002128:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	4b16      	ldr	r3, [pc, #88]	; (8002188 <main+0xa0>)
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <main+0xa4>)
 8002134:	2200      	movs	r2, #0
 8002136:	4916      	ldr	r1, [pc, #88]	; (8002190 <main+0xa8>)
 8002138:	4816      	ldr	r0, [pc, #88]	; (8002194 <main+0xac>)
 800213a:	f000 fef1 	bl	8002f20 <stepper_init>
  EXT_DIR_Pin);
  DC_motor_Init(&DC_motor, &htim16, TIM_CHANNEL_1, CUT_DIR_IN1_GPIO_Port,
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <main+0xb0>)
 8002140:	9303      	str	r3, [sp, #12]
 8002142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002146:	9302      	str	r3, [sp, #8]
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <main+0xa0>)
 800214a:	9301      	str	r3, [sp, #4]
 800214c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <main+0xa0>)
 8002154:	2200      	movs	r2, #0
 8002156:	4911      	ldr	r1, [pc, #68]	; (800219c <main+0xb4>)
 8002158:	4811      	ldr	r0, [pc, #68]	; (80021a0 <main+0xb8>)
 800215a:	f7fe feec 	bl	8000f36 <DC_motor_Init>
  CUT_DIR_IN1_Pin, CUT_DIR_IN2_GPIO_Port, CUT_DIR_IN2_Pin, &hlptim1);
  Init_menu(&cursor_pos);
 800215e:	4811      	ldr	r0, [pc, #68]	; (80021a4 <main+0xbc>)
 8002160:	f000 fb54 	bl	800280c <Init_menu>
  Filament_Cutter_Init(&extruder, &DC_motor);
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <main+0xb8>)
 8002166:	480b      	ldr	r0, [pc, #44]	; (8002194 <main+0xac>)
 8002168:	f7ff fe0a 	bl	8001d80 <Filament_Cutter_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
	{
		motors_update(&extruder, &DC_motor);
 800216c:	490c      	ldr	r1, [pc, #48]	; (80021a0 <main+0xb8>)
 800216e:	4809      	ldr	r0, [pc, #36]	; (8002194 <main+0xac>)
 8002170:	f7ff fe3e 	bl	8001df0 <motors_update>
		ENC_Button_Action(&cursor_pos);
 8002174:	480b      	ldr	r0, [pc, #44]	; (80021a4 <main+0xbc>)
 8002176:	f7ff fcbd 	bl	8001af4 <ENC_Button_Action>
		menu_update(&cursor_pos);
 800217a:	480a      	ldr	r0, [pc, #40]	; (80021a4 <main+0xbc>)
 800217c:	f000 fb1e 	bl	80027bc <menu_update>
		motors_update(&extruder, &DC_motor);
 8002180:	e7f4      	b.n	800216c <main+0x84>
 8002182:	bf00      	nop
 8002184:	48000400 	.word	0x48000400
 8002188:	48000800 	.word	0x48000800
 800218c:	200006a8 	.word	0x200006a8
 8002190:	2000065c 	.word	0x2000065c
 8002194:	200000ac 	.word	0x200000ac
 8002198:	20000540 	.word	0x20000540
 800219c:	200006f4 	.word	0x200006f4
 80021a0:	200000d0 	.word	0x200000d0
 80021a4:	200005bc 	.word	0x200005bc

080021a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b096      	sub	sp, #88	; 0x58
 80021ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ae:	f107 0314 	add.w	r3, r7, #20
 80021b2:	2244      	movs	r2, #68	; 0x44
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f005 ff1a 	bl	8007ff0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80021ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021ce:	f002 fc1f 	bl	8004a10 <HAL_PWREx_ControlVoltageScaling>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80021d8:	f000 f88e 	bl	80022f8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021dc:	2302      	movs	r3, #2
 80021de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e6:	2340      	movs	r3, #64	; 0x40
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ea:	2302      	movs	r3, #2
 80021ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ee:	2302      	movs	r3, #2
 80021f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80021f2:	2301      	movs	r3, #1
 80021f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80021f6:	230a      	movs	r3, #10
 80021f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80021fa:	2307      	movs	r3, #7
 80021fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80021fe:	2302      	movs	r3, #2
 8002200:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002202:	2302      	movs	r3, #2
 8002204:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	4618      	mov	r0, r3
 800220c:	f002 fc56 	bl	8004abc <HAL_RCC_OscConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002216:	f000 f86f 	bl	80022f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221a:	230f      	movs	r3, #15
 800221c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221e:	2303      	movs	r3, #3
 8002220:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800222e:	463b      	mov	r3, r7
 8002230:	2104      	movs	r1, #4
 8002232:	4618      	mov	r0, r3
 8002234:	f003 f862 	bl	80052fc <HAL_RCC_ClockConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800223e:	f000 f85b 	bl	80022f8 <Error_Handler>
  }
}
 8002242:	bf00      	nop
 8002244:	3758      	adds	r7, #88	; 0x58
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	if(FC_struct.parameters.current_qty != FC_struct.parameters.target_qty)
 8002254:	4b13      	ldr	r3, [pc, #76]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 8002256:	7c9b      	ldrb	r3, [r3, #18]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b12      	ldr	r3, [pc, #72]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 800225c:	7cdb      	ldrb	r3, [r3, #19]
 800225e:	429a      	cmp	r2, r3
 8002260:	d00d      	beq.n	800227e <HAL_LPTIM_AutoReloadMatchCallback+0x32>
	{
		CUTTING_PROCESS_FLAG = 0;
 8002262:	4b11      	ldr	r3, [pc, #68]	; (80022a8 <HAL_LPTIM_AutoReloadMatchCallback+0x5c>)
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
		FC_struct.mode = EXTRUDE;
 8002268:	4b0e      	ldr	r3, [pc, #56]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		FC_struct.parameters.current_qty++;
 800226e:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 8002270:	7c9b      	ldrb	r3, [r3, #18]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 800227a:	749a      	strb	r2, [r3, #18]
		FC_struct.parameters.current_qty = 0;
	}

	//printf("DC_INT\n");

}
 800227c:	e00b      	b.n	8002296 <HAL_LPTIM_AutoReloadMatchCallback+0x4a>
		CUTTING_PROCESS_FLAG = 0;
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_LPTIM_AutoReloadMatchCallback+0x5c>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		cursor_pos.FL_position = DEFAULT;
 8002284:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_LPTIM_AutoReloadMatchCallback+0x60>)
 8002286:	2200      	movs	r2, #0
 8002288:	701a      	strb	r2, [r3, #0]
		FC_struct.mode = STANDBY;
 800228a:	4b06      	ldr	r3, [pc, #24]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
		FC_struct.parameters.current_qty = 0;
 8002290:	4b04      	ldr	r3, [pc, #16]	; (80022a4 <HAL_LPTIM_AutoReloadMatchCallback+0x58>)
 8002292:	2200      	movs	r2, #0
 8002294:	749a      	strb	r2, [r3, #18]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	20000520 	.word	0x20000520
 80022a8:	200000fe 	.word	0x200000fe
 80022ac:	200005bc 	.word	0x200005bc

080022b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
	if(FIRST_MISS_FLAG == 1)
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d10c      	bne.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (htim->Instance == extruder.slave_timer.htim->Instance)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d105      	bne.n	80022dc <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			EXTRUDE_PROCESS_FLAG = 0;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	701a      	strb	r2, [r3, #0]
			FC_struct.mode = CUTTING;
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
			//printf("EXTR_INT\n");
		}
	}
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000507 	.word	0x20000507
 80022ec:	200000ac 	.word	0x200000ac
 80022f0:	20000508 	.word	0x20000508
 80022f4:	20000520 	.word	0x20000520

080022f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002300:	e7fe      	b.n	8002300 <Error_Handler+0x8>
	...

08002304 <update_first_layer>:
extern filament_cutter FC_struct;
extern dc_motor DC_motor;


void update_first_layer(cursor_position* curr_position)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if(curr_position->FL_position != curr_position->FL_prev_position)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	785b      	ldrb	r3, [r3, #1]
 8002314:	429a      	cmp	r2, r3
 8002316:	d066      	beq.n	80023e6 <update_first_layer+0xe2>
	{
		switch(curr_position->FL_position)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d85d      	bhi.n	80023dc <update_first_layer+0xd8>
 8002320:	a201      	add	r2, pc, #4	; (adr r2, 8002328 <update_first_layer+0x24>)
 8002322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002326:	bf00      	nop
 8002328:	0800233d 	.word	0x0800233d
 800232c:	0800235d 	.word	0x0800235d
 8002330:	0800237f 	.word	0x0800237f
 8002334:	08002399 	.word	0x08002399
 8002338:	080023bb 	.word	0x080023bb
		{
			case DEFAULT:
			DC_stop(&DC_motor);
 800233c:	482c      	ldr	r0, [pc, #176]	; (80023f0 <update_first_layer+0xec>)
 800233e:	f7fe feba 	bl	80010b6 <DC_stop>
			ST7920_GraphicMode(1);
 8002342:	2001      	movs	r0, #1
 8002344:	f7ff f80c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002348:	f7ff f8be 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff f807 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002352:	f7ff f8b9 	bl	80014c8 <ST7920_Clear>

			default_screen();
 8002356:	f000 fbe5 	bl	8002b24 <default_screen>
			break;
 800235a:	e040      	b.n	80023de <update_first_layer+0xda>

			case START:
			default_screen();
 800235c:	f000 fbe2 	bl	8002b24 <default_screen>

			// highlighting "START"
			ST7920_GraphicMode(1);
 8002360:	2001      	movs	r0, #1
 8002362:	f7fe fffd 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(88, 48, 80, 16);
 8002366:	2310      	movs	r3, #16
 8002368:	2250      	movs	r2, #80	; 0x50
 800236a:	2130      	movs	r1, #48	; 0x30
 800236c:	2058      	movs	r0, #88	; 0x58
 800236e:	f7ff fa9f 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002372:	f7ff f89f 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002376:	2000      	movs	r0, #0
 8002378:	f7fe fff2 	bl	8001360 <ST7920_GraphicMode>
			break;
 800237c:	e02f      	b.n	80023de <update_first_layer+0xda>

			case ACTIVE_START:
			ST7920_GraphicMode(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f7fe ffee 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002384:	f7ff f8a0 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002388:	2000      	movs	r0, #0
 800238a:	f7fe ffe9 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800238e:	f7ff f89b 	bl	80014c8 <ST7920_Clear>
			active_start_screen();
 8002392:	f000 fd79 	bl	8002e88 <active_start_screen>


			break;
 8002396:	e022      	b.n	80023de <update_first_layer+0xda>


			case STOP:
			active_start_screen();
 8002398:	f000 fd76 	bl	8002e88 <active_start_screen>

			// highlighting
			ST7920_GraphicMode(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f7fe ffdf 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(48, 50, 35, 16);
 80023a2:	2310      	movs	r3, #16
 80023a4:	2223      	movs	r2, #35	; 0x23
 80023a6:	2132      	movs	r1, #50	; 0x32
 80023a8:	2030      	movs	r0, #48	; 0x30
 80023aa:	f7ff fa81 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80023ae:	f7ff f881 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80023b2:	2000      	movs	r0, #0
 80023b4:	f7fe ffd4 	bl	8001360 <ST7920_GraphicMode>
			break;
 80023b8:	e011      	b.n	80023de <update_first_layer+0xda>

			case SETTINGS:
			default_screen();
 80023ba:	f000 fbb3 	bl	8002b24 <default_screen>
			// highlighting "SETTINGS"
			ST7920_GraphicMode(1);
 80023be:	2001      	movs	r0, #1
 80023c0:	f7fe ffce 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 16, 80, 16);
 80023c4:	2310      	movs	r3, #16
 80023c6:	2250      	movs	r2, #80	; 0x50
 80023c8:	2110      	movs	r1, #16
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7ff fa70 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80023d0:	f7ff f870 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe ffc3 	bl	8001360 <ST7920_GraphicMode>
			break;
 80023da:	e000      	b.n	80023de <update_first_layer+0xda>

			default:

			break;
 80023dc:	bf00      	nop

		}

		curr_position->FL_prev_position = curr_position->FL_position;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	781a      	ldrb	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	705a      	strb	r2, [r3, #1]
	}
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200000d0 	.word	0x200000d0

080023f4 <update_second_layer>:


void update_second_layer(cursor_position* curr_position)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	if(curr_position->SL_position != curr_position->SL_prev_position)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	789a      	ldrb	r2, [r3, #2]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	78db      	ldrb	r3, [r3, #3]
 8002404:	429a      	cmp	r2, r3
 8002406:	f000 809e 	beq.w	8002546 <update_second_layer+0x152>
	{

		switch(curr_position->SL_position)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	789b      	ldrb	r3, [r3, #2]
 800240e:	2b04      	cmp	r3, #4
 8002410:	f200 8094 	bhi.w	800253c <update_second_layer+0x148>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <update_second_layer+0x28>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	08002509 	.word	0x08002509
 8002420:	08002431 	.word	0x08002431
 8002424:	08002467 	.word	0x08002467
 8002428:	0800249d 	.word	0x0800249d
 800242c:	080024d3 	.word	0x080024d3
		{
		case FIL_DIA:
			ST7920_GraphicMode(1);
 8002430:	2001      	movs	r0, #1
 8002432:	f7fe ff95 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002436:	f7ff f847 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe ff90 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002440:	f7ff f842 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 8002444:	f000 fb98 	bl	8002b78 <settings_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f7fe ff89 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800244e:	230e      	movs	r3, #14
 8002450:	224f      	movs	r2, #79	; 0x4f
 8002452:	2100      	movs	r1, #0
 8002454:	2000      	movs	r0, #0
 8002456:	f7ff fa2b 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800245a:	f7ff f82b 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800245e:	2000      	movs	r0, #0
 8002460:	f7fe ff7e 	bl	8001360 <ST7920_GraphicMode>

			break;
 8002464:	e06b      	b.n	800253e <update_second_layer+0x14a>

		case FIL_DEN:
			ST7920_GraphicMode(1);
 8002466:	2001      	movs	r0, #1
 8002468:	f7fe ff7a 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800246c:	f7ff f82c 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe ff75 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002476:	f7ff f827 	bl	80014c8 <ST7920_Clear>

			// highlighting
			settings_screen();
 800247a:	f000 fb7d 	bl	8002b78 <settings_screen>
			ST7920_GraphicMode(1);
 800247e:	2001      	movs	r0, #1
 8002480:	f7fe ff6e 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 8002484:	230f      	movs	r3, #15
 8002486:	224f      	movs	r2, #79	; 0x4f
 8002488:	210f      	movs	r1, #15
 800248a:	2000      	movs	r0, #0
 800248c:	f7ff fa10 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002490:	f7ff f810 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe ff63 	bl	8001360 <ST7920_GraphicMode>

			break;
 800249a:	e050      	b.n	800253e <update_second_layer+0x14a>

		case SAMPLE_WEIGHT:
			ST7920_GraphicMode(1);
 800249c:	2001      	movs	r0, #1
 800249e:	f7fe ff5f 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024a2:	f7ff f811 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe ff5a 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024ac:	f7ff f80c 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 80024b0:	f000 fb62 	bl	8002b78 <settings_screen>

			ST7920_GraphicMode(1);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7fe ff53 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 15);
 80024ba:	230f      	movs	r3, #15
 80024bc:	224f      	movs	r2, #79	; 0x4f
 80024be:	211e      	movs	r1, #30
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff f9f5 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80024c6:	f7fe fff5 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80024ca:	2000      	movs	r0, #0
 80024cc:	f7fe ff48 	bl	8001360 <ST7920_GraphicMode>
			break;
 80024d0:	e035      	b.n	800253e <update_second_layer+0x14a>

		case QUANTITY:
			ST7920_GraphicMode(1);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7fe ff44 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024d8:	f7fe fff6 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe ff3f 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80024e2:	f7fe fff1 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 80024e6:	f000 fb47 	bl	8002b78 <settings_screen>

			ST7920_GraphicMode(1);
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7fe ff38 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 15);
 80024f0:	230f      	movs	r3, #15
 80024f2:	224f      	movs	r2, #79	; 0x4f
 80024f4:	2130      	movs	r1, #48	; 0x30
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff f9da 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80024fc:	f7fe ffda 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe ff2d 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002506:	e01a      	b.n	800253e <update_second_layer+0x14a>

		case BACK:
			ST7920_GraphicMode(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f7fe ff29 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800250e:	f7fe ffdb 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002512:	2000      	movs	r0, #0
 8002514:	f7fe ff24 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002518:	f7fe ffd6 	bl	80014c8 <ST7920_Clear>


			settings_screen();
 800251c:	f000 fb2c 	bl	8002b78 <settings_screen>

			ST7920_GraphicMode(1);
 8002520:	2001      	movs	r0, #1
 8002522:	f7fe ff1d 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(80, 48, 79, 15);
 8002526:	230f      	movs	r3, #15
 8002528:	224f      	movs	r2, #79	; 0x4f
 800252a:	2130      	movs	r1, #48	; 0x30
 800252c:	2050      	movs	r0, #80	; 0x50
 800252e:	f7ff f9bf 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002532:	f7fe ffbf 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe ff12 	bl	8001360 <ST7920_GraphicMode>


		default:

			break;
 800253c:	bf00      	nop
		}

		curr_position->SL_prev_position = curr_position->SL_position;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	789a      	ldrb	r2, [r3, #2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	70da      	strb	r2, [r3, #3]
	}

}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop

08002550 <update_third_layer>:


void update_third_layer(cursor_position* curr_position)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	if(curr_position->TL_position != curr_position->TL_prev_position)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	791a      	ldrb	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	795b      	ldrb	r3, [r3, #5]
 8002560:	429a      	cmp	r2, r3
 8002562:	f000 8125 	beq.w	80027b0 <update_third_layer+0x260>
	{
		switch(curr_position->TL_position)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	791b      	ldrb	r3, [r3, #4]
 800256a:	2b09      	cmp	r3, #9
 800256c:	f200 811b 	bhi.w	80027a6 <update_third_layer+0x256>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <update_third_layer+0x28>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	080025a1 	.word	0x080025a1
 800257c:	080025d7 	.word	0x080025d7
 8002580:	0800260d 	.word	0x0800260d
 8002584:	08002643 	.word	0x08002643
 8002588:	08002679 	.word	0x08002679
 800258c:	080026af 	.word	0x080026af
 8002590:	080026e5 	.word	0x080026e5
 8002594:	0800271b 	.word	0x0800271b
 8002598:	08002751 	.word	0x08002751
 800259c:	08002787 	.word	0x08002787
		{
		case DIAMETER_175:
			ST7920_GraphicMode(1);
 80025a0:	2001      	movs	r0, #1
 80025a2:	f7fe fedd 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025a6:	f7fe ff8f 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80025aa:	2000      	movs	r0, #0
 80025ac:	f7fe fed8 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025b0:	f7fe ff8a 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 80025b4:	f000 fb08 	bl	8002bc8 <diameter_screen>

			ST7920_GraphicMode(1);
 80025b8:	2001      	movs	r0, #1
 80025ba:	f7fe fed1 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 80025be:	230e      	movs	r3, #14
 80025c0:	224f      	movs	r2, #79	; 0x4f
 80025c2:	2100      	movs	r1, #0
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff f973 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80025ca:	f7fe ff73 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe fec6 	bl	8001360 <ST7920_GraphicMode>
			break;
 80025d4:	e0e8      	b.n	80027a8 <update_third_layer+0x258>

		case DIAMETER_285:
			ST7920_GraphicMode(1);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f7fe fec2 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025dc:	f7fe ff74 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7fe febd 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80025e6:	f7fe ff6f 	bl	80014c8 <ST7920_Clear>
			diameter_screen();
 80025ea:	f000 faed 	bl	8002bc8 <diameter_screen>

			ST7920_GraphicMode(1);
 80025ee:	2001      	movs	r0, #1
 80025f0:	f7fe feb6 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 80025f4:	230f      	movs	r3, #15
 80025f6:	224f      	movs	r2, #79	; 0x4f
 80025f8:	210f      	movs	r1, #15
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff f958 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002600:	f7fe ff58 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002604:	2000      	movs	r0, #0
 8002606:	f7fe feab 	bl	8001360 <ST7920_GraphicMode>
			break;
 800260a:	e0cd      	b.n	80027a8 <update_third_layer+0x258>

		case DENSITY_PLA:
			ST7920_GraphicMode(1);
 800260c:	2001      	movs	r0, #1
 800260e:	f7fe fea7 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002612:	f7fe ff59 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002616:	2000      	movs	r0, #0
 8002618:	f7fe fea2 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800261c:	f7fe ff54 	bl	80014c8 <ST7920_Clear>
			density_screen();
 8002620:	f000 fb12 	bl	8002c48 <density_screen>

			ST7920_GraphicMode(1);
 8002624:	2001      	movs	r0, #1
 8002626:	f7fe fe9b 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800262a:	230e      	movs	r3, #14
 800262c:	224f      	movs	r2, #79	; 0x4f
 800262e:	2100      	movs	r1, #0
 8002630:	2000      	movs	r0, #0
 8002632:	f7ff f93d 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002636:	f7fe ff3d 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800263a:	2000      	movs	r0, #0
 800263c:	f7fe fe90 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002640:	e0b2      	b.n	80027a8 <update_third_layer+0x258>

		case DENSITY_ABS:
			ST7920_GraphicMode(1);
 8002642:	2001      	movs	r0, #1
 8002644:	f7fe fe8c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002648:	f7fe ff3e 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800264c:	2000      	movs	r0, #0
 800264e:	f7fe fe87 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002652:	f7fe ff39 	bl	80014c8 <ST7920_Clear>
			density_screen();
 8002656:	f000 faf7 	bl	8002c48 <density_screen>

			ST7920_GraphicMode(1);
 800265a:	2001      	movs	r0, #1
 800265c:	f7fe fe80 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 8002660:	230e      	movs	r3, #14
 8002662:	224f      	movs	r2, #79	; 0x4f
 8002664:	210f      	movs	r1, #15
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff f922 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800266c:	f7fe ff22 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002670:	2000      	movs	r0, #0
 8002672:	f7fe fe75 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002676:	e097      	b.n	80027a8 <update_third_layer+0x258>

		case DENSITY_PETG:
			ST7920_GraphicMode(1);
 8002678:	2001      	movs	r0, #1
 800267a:	f7fe fe71 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800267e:	f7fe ff23 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002682:	2000      	movs	r0, #0
 8002684:	f7fe fe6c 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002688:	f7fe ff1e 	bl	80014c8 <ST7920_Clear>
			density_screen();
 800268c:	f000 fadc 	bl	8002c48 <density_screen>

			ST7920_GraphicMode(1);
 8002690:	2001      	movs	r0, #1
 8002692:	f7fe fe65 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 14);
 8002696:	230e      	movs	r3, #14
 8002698:	224f      	movs	r2, #79	; 0x4f
 800269a:	211e      	movs	r1, #30
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff f907 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80026a2:	f7fe ff07 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80026a6:	2000      	movs	r0, #0
 80026a8:	f7fe fe5a 	bl	8001360 <ST7920_GraphicMode>
			break;
 80026ac:	e07c      	b.n	80027a8 <update_third_layer+0x258>

		case WEIGHT_5g:
			ST7920_GraphicMode(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f7fe fe56 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026b4:	f7fe ff08 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe fe51 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026be:	f7fe ff03 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 80026c2:	f000 fb6b 	bl	8002d9c <weight_screen>

			ST7920_GraphicMode(1);
 80026c6:	2001      	movs	r0, #1
 80026c8:	f7fe fe4a 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 80026cc:	230e      	movs	r3, #14
 80026ce:	224f      	movs	r2, #79	; 0x4f
 80026d0:	2100      	movs	r1, #0
 80026d2:	2000      	movs	r0, #0
 80026d4:	f7ff f8ec 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 80026d8:	f7fe feec 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 80026dc:	2000      	movs	r0, #0
 80026de:	f7fe fe3f 	bl	8001360 <ST7920_GraphicMode>
			break;
 80026e2:	e061      	b.n	80027a8 <update_third_layer+0x258>

		case WEIGHT_25g:
			ST7920_GraphicMode(1);
 80026e4:	2001      	movs	r0, #1
 80026e6:	f7fe fe3b 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026ea:	f7fe feed 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 80026ee:	2000      	movs	r0, #0
 80026f0:	f7fe fe36 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 80026f4:	f7fe fee8 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 80026f8:	f000 fb50 	bl	8002d9c <weight_screen>

			ST7920_GraphicMode(1);
 80026fc:	2001      	movs	r0, #1
 80026fe:	f7fe fe2f 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 14);
 8002702:	230e      	movs	r3, #14
 8002704:	224f      	movs	r2, #79	; 0x4f
 8002706:	210f      	movs	r1, #15
 8002708:	2000      	movs	r0, #0
 800270a:	f7ff f8d1 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800270e:	f7fe fed1 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe fe24 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002718:	e046      	b.n	80027a8 <update_third_layer+0x258>

		case WEIGHT_50g:
			ST7920_GraphicMode(1);
 800271a:	2001      	movs	r0, #1
 800271c:	f7fe fe20 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002720:	f7fe fed2 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe fe1b 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800272a:	f7fe fecd 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 800272e:	f000 fb35 	bl	8002d9c <weight_screen>

			ST7920_GraphicMode(1);
 8002732:	2001      	movs	r0, #1
 8002734:	f7fe fe14 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 16);
 8002738:	2310      	movs	r3, #16
 800273a:	224f      	movs	r2, #79	; 0x4f
 800273c:	211e      	movs	r1, #30
 800273e:	2000      	movs	r0, #0
 8002740:	f7ff f8b6 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 8002744:	f7fe feb6 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002748:	2000      	movs	r0, #0
 800274a:	f7fe fe09 	bl	8001360 <ST7920_GraphicMode>
			break;
 800274e:	e02b      	b.n	80027a8 <update_third_layer+0x258>

		case WEIGHT_100g:
			ST7920_GraphicMode(1);
 8002750:	2001      	movs	r0, #1
 8002752:	f7fe fe05 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002756:	f7fe feb7 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800275a:	2000      	movs	r0, #0
 800275c:	f7fe fe00 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002760:	f7fe feb2 	bl	80014c8 <ST7920_Clear>
			weight_screen();
 8002764:	f000 fb1a 	bl	8002d9c <weight_screen>

			ST7920_GraphicMode(1);
 8002768:	2001      	movs	r0, #1
 800276a:	f7fe fdf9 	bl	8001360 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 14);
 800276e:	230e      	movs	r3, #14
 8002770:	224f      	movs	r2, #79	; 0x4f
 8002772:	2130      	movs	r1, #48	; 0x30
 8002774:	2000      	movs	r0, #0
 8002776:	f7ff f89b 	bl	80018b0 <DrawFilledRectangle>
			ST7920_Update();
 800277a:	f7fe fe9b 	bl	80014b4 <ST7920_Update>
			ST7920_GraphicMode(0);
 800277e:	2000      	movs	r0, #0
 8002780:	f7fe fdee 	bl	8001360 <ST7920_GraphicMode>
			break;
 8002784:	e010      	b.n	80027a8 <update_third_layer+0x258>

		case QTY:
			ST7920_GraphicMode(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f7fe fdea 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 800278c:	f7fe fe9c 	bl	80014c8 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002790:	2000      	movs	r0, #0
 8002792:	f7fe fde5 	bl	8001360 <ST7920_GraphicMode>
			ST7920_Clear();
 8002796:	f7fe fe97 	bl	80014c8 <ST7920_Clear>

			quantity_screen(FC_struct.parameters.target_qty);
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <update_third_layer+0x268>)
 800279c:	7cdb      	ldrb	r3, [r3, #19]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fb8c 	bl	8002ebc <quantity_screen>

			break;
 80027a4:	e000      	b.n	80027a8 <update_third_layer+0x258>

		default:
			break;
 80027a6:	bf00      	nop

		}

		curr_position->TL_prev_position = curr_position->TL_position;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	791a      	ldrb	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	715a      	strb	r2, [r3, #5]

	}

}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000520 	.word	0x20000520

080027bc <menu_update>:



void menu_update(cursor_position* curr_position)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]

	update_enc(curr_position);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f841 	bl	800284c <update_enc>

	if(curr_position->current_layer == FIRST_LAYER)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	799b      	ldrb	r3, [r3, #6]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d103      	bne.n	80027da <menu_update+0x1e>
	{

		update_first_layer(curr_position);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fd96 	bl	8002304 <update_first_layer>
		{
			quantity_screen_update();
		}
	}

}
 80027d8:	e014      	b.n	8002804 <menu_update+0x48>
	else if(curr_position->current_layer == SECOND_LAYER)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	799b      	ldrb	r3, [r3, #6]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d103      	bne.n	80027ea <menu_update+0x2e>
		update_second_layer(curr_position);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff fe06 	bl	80023f4 <update_second_layer>
}
 80027e8:	e00c      	b.n	8002804 <menu_update+0x48>
	else if(curr_position->current_layer == THIRD_LAYER)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	799b      	ldrb	r3, [r3, #6]
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d108      	bne.n	8002804 <menu_update+0x48>
		update_third_layer(curr_position);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff feac 	bl	8002550 <update_third_layer>
		if(curr_position->TL_position == QTY)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	791b      	ldrb	r3, [r3, #4]
 80027fc:	2b09      	cmp	r3, #9
 80027fe:	d101      	bne.n	8002804 <menu_update+0x48>
			quantity_screen_update();
 8002800:	f000 fb68 	bl	8002ed4 <quantity_screen_update>
}
 8002804:	bf00      	nop
 8002806:	3708      	adds	r7, #8
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <Init_menu>:


void Init_menu(cursor_position* curr_position)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	curr_position->FL_position = DEFAULT;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	curr_position->SL_position = FIL_DIA;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	709a      	strb	r2, [r3, #2]
	curr_position->TL_position = DIAMETER_175;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	711a      	strb	r2, [r3, #4]
	curr_position->FL_prev_position = START;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	705a      	strb	r2, [r3, #1]
	curr_position->SL_prev_position = NONE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2205      	movs	r2, #5
 8002830:	70da      	strb	r2, [r3, #3]
	curr_position->TL_prev_position = NONE;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2205      	movs	r2, #5
 8002836:	715a      	strb	r2, [r3, #5]
	curr_position->current_layer = FIRST_LAYER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	719a      	strb	r2, [r3, #6]
	menu_update(curr_position);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f7ff ffbc 	bl	80027bc <menu_update>
}
 8002844:	bf00      	nop
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <update_enc>:



void update_enc(cursor_position* curr_position)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

	uint8_t enc_value;
	enc_value = enc_get_counter();
 8002854:	f7ff f8dc 	bl	8001a10 <enc_get_counter>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]

	if(curr_position->current_layer == FIRST_LAYER)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	799b      	ldrb	r3, [r3, #6]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d148      	bne.n	80028f6 <update_enc+0xaa>
	{

		if(!(FC_struct.mode != STANDBY))
 8002864:	4b97      	ldr	r3, [pc, #604]	; (8002ac4 <update_enc+0x278>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d12f      	bne.n	80028cc <update_enc+0x80>
		{

			if((enc_value >=0) & (enc_value < 4))
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d803      	bhi.n	800287a <update_enc+0x2e>
			{
				curr_position->FL_position = DEFAULT;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	701a      	strb	r2, [r3, #0]


	}


}
 8002878:	e14b      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 4) & (enc_value < 8))
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b03      	cmp	r3, #3
 800287e:	bf8c      	ite	hi
 8002880:	2301      	movhi	r3, #1
 8002882:	2300      	movls	r3, #0
 8002884:	b2da      	uxtb	r2, r3
 8002886:	7bfb      	ldrb	r3, [r7, #15]
 8002888:	2b07      	cmp	r3, #7
 800288a:	bf94      	ite	ls
 800288c:	2301      	movls	r3, #1
 800288e:	2300      	movhi	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	4013      	ands	r3, r2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <update_enc+0x56>
				curr_position->FL_position = SETTINGS;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2204      	movs	r2, #4
 800289e:	701a      	strb	r2, [r3, #0]
}
 80028a0:	e137      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 8) & (enc_value < 12))
 80028a2:	7bfb      	ldrb	r3, [r7, #15]
 80028a4:	2b07      	cmp	r3, #7
 80028a6:	bf8c      	ite	hi
 80028a8:	2301      	movhi	r3, #1
 80028aa:	2300      	movls	r3, #0
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b0b      	cmp	r3, #11
 80028b2:	bf94      	ite	ls
 80028b4:	2301      	movls	r3, #1
 80028b6:	2300      	movhi	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	4013      	ands	r3, r2
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8127 	beq.w	8002b12 <update_enc+0x2c6>
				curr_position->FL_position = START;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	701a      	strb	r2, [r3, #0]
}
 80028ca:	e122      	b.n	8002b12 <update_enc+0x2c6>
		else if((enc_value >= 8) & (enc_value < 20))
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	2b07      	cmp	r3, #7
 80028d0:	bf8c      	ite	hi
 80028d2:	2301      	movhi	r3, #1
 80028d4:	2300      	movls	r3, #0
 80028d6:	b2da      	uxtb	r2, r3
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b13      	cmp	r3, #19
 80028dc:	bf94      	ite	ls
 80028de:	2301      	movls	r3, #1
 80028e0:	2300      	movhi	r3, #0
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4013      	ands	r3, r2
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 8112 	beq.w	8002b12 <update_enc+0x2c6>
			curr_position->FL_position = STOP;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2203      	movs	r2, #3
 80028f2:	701a      	strb	r2, [r3, #0]
}
 80028f4:	e10d      	b.n	8002b12 <update_enc+0x2c6>
	else if(curr_position->current_layer == SECOND_LAYER)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	799b      	ldrb	r3, [r3, #6]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d157      	bne.n	80029ae <update_enc+0x162>
		if((enc_value >=0) & (enc_value < 4))
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b03      	cmp	r3, #3
 8002902:	d803      	bhi.n	800290c <update_enc+0xc0>
			curr_position->SL_position = FIL_DIA;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	709a      	strb	r2, [r3, #2]
}
 800290a:	e102      	b.n	8002b12 <update_enc+0x2c6>
		else if((enc_value >= 4) & (enc_value < 8))
 800290c:	7bfb      	ldrb	r3, [r7, #15]
 800290e:	2b03      	cmp	r3, #3
 8002910:	bf8c      	ite	hi
 8002912:	2301      	movhi	r3, #1
 8002914:	2300      	movls	r3, #0
 8002916:	b2da      	uxtb	r2, r3
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	2b07      	cmp	r3, #7
 800291c:	bf94      	ite	ls
 800291e:	2301      	movls	r3, #1
 8002920:	2300      	movhi	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	4013      	ands	r3, r2
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <update_enc+0xe8>
			curr_position->SL_position = FIL_DEN;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	709a      	strb	r2, [r3, #2]
}
 8002932:	e0ee      	b.n	8002b12 <update_enc+0x2c6>
		else if((enc_value >= 8) & (enc_value < 12))
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b07      	cmp	r3, #7
 8002938:	bf8c      	ite	hi
 800293a:	2301      	movhi	r3, #1
 800293c:	2300      	movls	r3, #0
 800293e:	b2da      	uxtb	r2, r3
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b0b      	cmp	r3, #11
 8002944:	bf94      	ite	ls
 8002946:	2301      	movls	r3, #1
 8002948:	2300      	movhi	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4013      	ands	r3, r2
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <update_enc+0x110>
			curr_position->SL_position = SAMPLE_WEIGHT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	709a      	strb	r2, [r3, #2]
}
 800295a:	e0da      	b.n	8002b12 <update_enc+0x2c6>
		else if((enc_value >= 12) & (enc_value < 16))
 800295c:	7bfb      	ldrb	r3, [r7, #15]
 800295e:	2b0b      	cmp	r3, #11
 8002960:	bf8c      	ite	hi
 8002962:	2301      	movhi	r3, #1
 8002964:	2300      	movls	r3, #0
 8002966:	b2da      	uxtb	r2, r3
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	bf94      	ite	ls
 800296e:	2301      	movls	r3, #1
 8002970:	2300      	movhi	r3, #0
 8002972:	b2db      	uxtb	r3, r3
 8002974:	4013      	ands	r3, r2
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <update_enc+0x138>
			curr_position->SL_position = QUANTITY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2204      	movs	r2, #4
 8002980:	709a      	strb	r2, [r3, #2]
}
 8002982:	e0c6      	b.n	8002b12 <update_enc+0x2c6>
		else if((enc_value >= 16) & (enc_value < 21))
 8002984:	7bfb      	ldrb	r3, [r7, #15]
 8002986:	2b0f      	cmp	r3, #15
 8002988:	bf8c      	ite	hi
 800298a:	2301      	movhi	r3, #1
 800298c:	2300      	movls	r3, #0
 800298e:	b2da      	uxtb	r2, r3
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	2b14      	cmp	r3, #20
 8002994:	bf94      	ite	ls
 8002996:	2301      	movls	r3, #1
 8002998:	2300      	movhi	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4013      	ands	r3, r2
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 80b6 	beq.w	8002b12 <update_enc+0x2c6>
			curr_position->SL_position = BACK;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	709a      	strb	r2, [r3, #2]
}
 80029ac:	e0b1      	b.n	8002b12 <update_enc+0x2c6>
	else if(curr_position->current_layer == THIRD_LAYER)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	799b      	ldrb	r3, [r3, #6]
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	f040 80ad 	bne.w	8002b12 <update_enc+0x2c6>
		if(curr_position->SL_position == FIL_DIA)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	789b      	ldrb	r3, [r3, #2]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d11b      	bne.n	80029f8 <update_enc+0x1ac>
			if((enc_value >= 0) & (enc_value < 4))
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	2b03      	cmp	r3, #3
 80029c4:	d803      	bhi.n	80029ce <update_enc+0x182>
				curr_position->TL_position = DIAMETER_175;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	711a      	strb	r2, [r3, #4]
}
 80029cc:	e0a1      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 4) & (enc_value <= 8))
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	bf8c      	ite	hi
 80029d4:	2301      	movhi	r3, #1
 80029d6:	2300      	movls	r3, #0
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b08      	cmp	r3, #8
 80029de:	bf94      	ite	ls
 80029e0:	2301      	movls	r3, #1
 80029e2:	2300      	movhi	r3, #0
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	4013      	ands	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	f000 8091 	beq.w	8002b12 <update_enc+0x2c6>
				curr_position->TL_position = DIAMETER_285;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	711a      	strb	r2, [r3, #4]
}
 80029f6:	e08c      	b.n	8002b12 <update_enc+0x2c6>
		else if(curr_position->SL_position == FIL_DEN)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	789b      	ldrb	r3, [r3, #2]
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d12e      	bne.n	8002a5e <update_enc+0x212>
			if((enc_value >= 0) & (enc_value < 4))
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b03      	cmp	r3, #3
 8002a04:	d803      	bhi.n	8002a0e <update_enc+0x1c2>
				curr_position->TL_position = DENSITY_PLA;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2202      	movs	r2, #2
 8002a0a:	711a      	strb	r2, [r3, #4]
}
 8002a0c:	e081      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 4) & (enc_value < 8))
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	bf8c      	ite	hi
 8002a14:	2301      	movhi	r3, #1
 8002a16:	2300      	movls	r3, #0
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	7bfb      	ldrb	r3, [r7, #15]
 8002a1c:	2b07      	cmp	r3, #7
 8002a1e:	bf94      	ite	ls
 8002a20:	2301      	movls	r3, #1
 8002a22:	2300      	movhi	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	4013      	ands	r3, r2
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <update_enc+0x1ea>
				curr_position->TL_position = DENSITY_ABS;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2203      	movs	r2, #3
 8002a32:	711a      	strb	r2, [r3, #4]
}
 8002a34:	e06d      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 8) & (enc_value <= 20))
 8002a36:	7bfb      	ldrb	r3, [r7, #15]
 8002a38:	2b07      	cmp	r3, #7
 8002a3a:	bf8c      	ite	hi
 8002a3c:	2301      	movhi	r3, #1
 8002a3e:	2300      	movls	r3, #0
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	7bfb      	ldrb	r3, [r7, #15]
 8002a44:	2b14      	cmp	r3, #20
 8002a46:	bf94      	ite	ls
 8002a48:	2301      	movls	r3, #1
 8002a4a:	2300      	movhi	r3, #0
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	4013      	ands	r3, r2
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d05d      	beq.n	8002b12 <update_enc+0x2c6>
				curr_position->TL_position = DENSITY_PETG;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2204      	movs	r2, #4
 8002a5a:	711a      	strb	r2, [r3, #4]
}
 8002a5c:	e059      	b.n	8002b12 <update_enc+0x2c6>
		else if(curr_position->SL_position == SAMPLE_WEIGHT)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	789b      	ldrb	r3, [r3, #2]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d144      	bne.n	8002af0 <update_enc+0x2a4>
			if((enc_value >= 0) & (enc_value < 4))
 8002a66:	7bfb      	ldrb	r3, [r7, #15]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d803      	bhi.n	8002a74 <update_enc+0x228>
				curr_position->TL_position = WEIGHT_5g;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2205      	movs	r2, #5
 8002a70:	711a      	strb	r2, [r3, #4]
}
 8002a72:	e04e      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 4) & (enc_value < 8))
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	bf8c      	ite	hi
 8002a7a:	2301      	movhi	r3, #1
 8002a7c:	2300      	movls	r3, #0
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b07      	cmp	r3, #7
 8002a84:	bf94      	ite	ls
 8002a86:	2301      	movls	r3, #1
 8002a88:	2300      	movhi	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <update_enc+0x250>
				curr_position->TL_position = WEIGHT_25g;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2206      	movs	r2, #6
 8002a98:	711a      	strb	r2, [r3, #4]
}
 8002a9a:	e03a      	b.n	8002b12 <update_enc+0x2c6>
			else if((enc_value >= 8) & (enc_value < 12))
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b07      	cmp	r3, #7
 8002aa0:	bf8c      	ite	hi
 8002aa2:	2301      	movhi	r3, #1
 8002aa4:	2300      	movls	r3, #0
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	2b0b      	cmp	r3, #11
 8002aac:	bf94      	ite	ls
 8002aae:	2301      	movls	r3, #1
 8002ab0:	2300      	movhi	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <update_enc+0x27c>
				curr_position->TL_position = WEIGHT_50g;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2207      	movs	r2, #7
 8002ac0:	711a      	strb	r2, [r3, #4]
}
 8002ac2:	e026      	b.n	8002b12 <update_enc+0x2c6>
 8002ac4:	20000520 	.word	0x20000520
			else if((enc_value >= 12) & (enc_value < 20))
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	2b0b      	cmp	r3, #11
 8002acc:	bf8c      	ite	hi
 8002ace:	2301      	movhi	r3, #1
 8002ad0:	2300      	movls	r3, #0
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
 8002ad6:	2b13      	cmp	r3, #19
 8002ad8:	bf94      	ite	ls
 8002ada:	2301      	movls	r3, #1
 8002adc:	2300      	movhi	r3, #0
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d014      	beq.n	8002b12 <update_enc+0x2c6>
				curr_position->TL_position = WEIGHT_100g;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2208      	movs	r2, #8
 8002aec:	711a      	strb	r2, [r3, #4]
}
 8002aee:	e010      	b.n	8002b12 <update_enc+0x2c6>
		else if(curr_position->SL_position == QUANTITY)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	789b      	ldrb	r3, [r3, #2]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d10c      	bne.n	8002b12 <update_enc+0x2c6>
			FC_struct.parameters.temp_qty = enc_value % 10;
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <update_enc+0x2d0>)
 8002afc:	fba3 1302 	umull	r1, r3, r3, r2
 8002b00:	08d9      	lsrs	r1, r3, #3
 8002b02:	460b      	mov	r3, r1
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	b2da      	uxtb	r2, r3
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <update_enc+0x2d4>)
 8002b10:	751a      	strb	r2, [r3, #20]
}
 8002b12:	bf00      	nop
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	cccccccd 	.word	0xcccccccd
 8002b20:	20000520 	.word	0x20000520

08002b24 <default_screen>:




void default_screen()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"FILAMENT CUTTER");
 8002b28:	4a10      	ldr	r2, [pc, #64]	; (8002b6c <default_screen+0x48>)
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7fe fbd3 	bl	80012d8 <ST7920_SendString>
	ST7920_GraphicMode(1);
 8002b32:	2001      	movs	r0, #1
 8002b34:	f7fe fc14 	bl	8001360 <ST7920_GraphicMode>
	ST7920_Clear();
 8002b38:	f7fe fcc6 	bl	80014c8 <ST7920_Clear>
	DrawRectangle(0, 0, 127, 14);
 8002b3c:	230e      	movs	r3, #14
 8002b3e:	227f      	movs	r2, #127	; 0x7f
 8002b40:	2100      	movs	r1, #0
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe fe2a 	bl	800179c <DrawRectangle>
	ST7920_Update();
 8002b48:	f7fe fcb4 	bl	80014b4 <ST7920_Update>
	ST7920_GraphicMode(0);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fe fc07 	bl	8001360 <ST7920_GraphicMode>
	ST7920_SendString(1,0,"1.Settings");
 8002b52:	4a07      	ldr	r2, [pc, #28]	; (8002b70 <default_screen+0x4c>)
 8002b54:	2100      	movs	r1, #0
 8002b56:	2001      	movs	r0, #1
 8002b58:	f7fe fbbe 	bl	80012d8 <ST7920_SendString>
	//ST7920_SendString(3,0,"STOP");
	ST7920_SendString(3,5," START");
 8002b5c:	4a05      	ldr	r2, [pc, #20]	; (8002b74 <default_screen+0x50>)
 8002b5e:	2105      	movs	r1, #5
 8002b60:	2003      	movs	r0, #3
 8002b62:	f7fe fbb9 	bl	80012d8 <ST7920_SendString>

}
 8002b66:	bf00      	nop
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	080088a0 	.word	0x080088a0
 8002b70:	080088b0 	.word	0x080088b0
 8002b74:	080088bc 	.word	0x080088bc

08002b78 <settings_screen>:



void settings_screen()
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"1.Diameter");
 8002b7c:	4a0d      	ldr	r2, [pc, #52]	; (8002bb4 <settings_screen+0x3c>)
 8002b7e:	2100      	movs	r1, #0
 8002b80:	2000      	movs	r0, #0
 8002b82:	f7fe fba9 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1,0,"2.Density");
 8002b86:	4a0c      	ldr	r2, [pc, #48]	; (8002bb8 <settings_screen+0x40>)
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2001      	movs	r0, #1
 8002b8c:	f7fe fba4 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(2,0,"3.Weight");
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <settings_screen+0x44>)
 8002b92:	2100      	movs	r1, #0
 8002b94:	2002      	movs	r0, #2
 8002b96:	f7fe fb9f 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,0,"4.QTY");
 8002b9a:	4a09      	ldr	r2, [pc, #36]	; (8002bc0 <settings_screen+0x48>)
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2003      	movs	r0, #3
 8002ba0:	f7fe fb9a 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3,5,"5.BACK");
 8002ba4:	4a07      	ldr	r2, [pc, #28]	; (8002bc4 <settings_screen+0x4c>)
 8002ba6:	2105      	movs	r1, #5
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f7fe fb95 	bl	80012d8 <ST7920_SendString>

}
 8002bae:	bf00      	nop
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	080088c4 	.word	0x080088c4
 8002bb8:	080088d0 	.word	0x080088d0
 8002bbc:	080088dc 	.word	0x080088dc
 8002bc0:	080088e8 	.word	0x080088e8
 8002bc4:	080088f0 	.word	0x080088f0

08002bc8 <diameter_screen>:


void diameter_screen()
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_diameter == Filament_diameter_175)
 8002bcc:	4b18      	ldr	r3, [pc, #96]	; (8002c30 <diameter_screen+0x68>)
 8002bce:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bd2:	eeb7 7a0c 	vmov.f32	s14, #124	; 0x3fe00000  1.750
 8002bd6:	eef4 7a47 	vcmp.f32	s15, s14
 8002bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bde:	d109      	bne.n	8002bf4 <diameter_screen+0x2c>
	{
		ST7920_SendString(0, 0, "1.75 mm <<");
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <diameter_screen+0x6c>)
 8002be2:	2100      	movs	r1, #0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fb77 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm");
 8002bea:	4a13      	ldr	r2, [pc, #76]	; (8002c38 <diameter_screen+0x70>)
 8002bec:	2100      	movs	r1, #0
 8002bee:	2001      	movs	r0, #1
 8002bf0:	f7fe fb72 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density == Filament_diameter_285)
 8002bf4:	4b0e      	ldr	r3, [pc, #56]	; (8002c30 <diameter_screen+0x68>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fca5 	bl	8000548 <__aeabi_f2d>
 8002bfe:	a30a      	add	r3, pc, #40	; (adr r3, 8002c28 <diameter_screen+0x60>)
 8002c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c04:	f7fd ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d100      	bne.n	8002c10 <diameter_screen+0x48>
	{
		ST7920_SendString(0, 0, "1.75 mm");
		ST7920_SendString(1, 0, "2.85 mm <<");
	}
}
 8002c0e:	e009      	b.n	8002c24 <diameter_screen+0x5c>
		ST7920_SendString(0, 0, "1.75 mm");
 8002c10:	4a0a      	ldr	r2, [pc, #40]	; (8002c3c <diameter_screen+0x74>)
 8002c12:	2100      	movs	r1, #0
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fb5f 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2.85 mm <<");
 8002c1a:	4a09      	ldr	r2, [pc, #36]	; (8002c40 <diameter_screen+0x78>)
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7fe fb5a 	bl	80012d8 <ST7920_SendString>
}
 8002c24:	bf00      	nop
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	cccccccd 	.word	0xcccccccd
 8002c2c:	4006cccc 	.word	0x4006cccc
 8002c30:	20000520 	.word	0x20000520
 8002c34:	080088f8 	.word	0x080088f8
 8002c38:	08008904 	.word	0x08008904
 8002c3c:	0800890c 	.word	0x0800890c
 8002c40:	08008914 	.word	0x08008914
 8002c44:	00000000 	.word	0x00000000

08002c48 <density_screen>:


void density_screen()
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.filament_density >= (Filament_density_PLA-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PLA+0.001))
 8002c4c:	4b4c      	ldr	r3, [pc, #304]	; (8002d80 <density_screen+0x138>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fd fc79 	bl	8000548 <__aeabi_f2d>
 8002c56:	a33e      	add	r3, pc, #248	; (adr r3, 8002d50 <density_screen+0x108>)
 8002c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5c:	f7fd ff52 	bl	8000b04 <__aeabi_dcmpge>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d01b      	beq.n	8002c9e <density_screen+0x56>
 8002c66:	4b46      	ldr	r3, [pc, #280]	; (8002d80 <density_screen+0x138>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fd fc6c 	bl	8000548 <__aeabi_f2d>
 8002c70:	a339      	add	r3, pc, #228	; (adr r3, 8002d58 <density_screen+0x110>)
 8002c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c76:	f7fd ff3b 	bl	8000af0 <__aeabi_dcmple>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <density_screen+0x56>
	{
		ST7920_SendString(0, 0, "1. PLA <<");
 8002c80:	4a40      	ldr	r2, [pc, #256]	; (8002d84 <density_screen+0x13c>)
 8002c82:	2100      	movs	r1, #0
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7fe fb27 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002c8a:	4a3f      	ldr	r2, [pc, #252]	; (8002d88 <density_screen+0x140>)
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	2001      	movs	r0, #1
 8002c90:	f7fe fb22 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002c94:	4a3d      	ldr	r2, [pc, #244]	; (8002d8c <density_screen+0x144>)
 8002c96:	2100      	movs	r1, #0
 8002c98:	2002      	movs	r0, #2
 8002c9a:	f7fe fb1d 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_ABS-0.001) && (FC_struct.parameters.filament_density <= Filament_density_ABS+0.001))
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <density_screen+0x138>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fc50 	bl	8000548 <__aeabi_f2d>
 8002ca8:	a32d      	add	r3, pc, #180	; (adr r3, 8002d60 <density_screen+0x118>)
 8002caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cae:	f7fd ff29 	bl	8000b04 <__aeabi_dcmpge>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d01b      	beq.n	8002cf0 <density_screen+0xa8>
 8002cb8:	4b31      	ldr	r3, [pc, #196]	; (8002d80 <density_screen+0x138>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	a329      	add	r3, pc, #164	; (adr r3, 8002d68 <density_screen+0x120>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd ff12 	bl	8000af0 <__aeabi_dcmple>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00e      	beq.n	8002cf0 <density_screen+0xa8>
	{
		ST7920_SendString(0, 0, "1. PLA");
 8002cd2:	4a2f      	ldr	r2, [pc, #188]	; (8002d90 <density_screen+0x148>)
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f7fe fafe 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS <<");
 8002cdc:	4a2d      	ldr	r2, [pc, #180]	; (8002d94 <density_screen+0x14c>)
 8002cde:	2100      	movs	r1, #0
 8002ce0:	2001      	movs	r0, #1
 8002ce2:	f7fe faf9 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG");
 8002ce6:	4a29      	ldr	r2, [pc, #164]	; (8002d8c <density_screen+0x144>)
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2002      	movs	r0, #2
 8002cec:	f7fe faf4 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <density_screen+0x138>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd fc27 	bl	8000548 <__aeabi_f2d>
 8002cfa:	a31d      	add	r3, pc, #116	; (adr r3, 8002d70 <density_screen+0x128>)
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f7fd ff00 	bl	8000b04 <__aeabi_dcmpge>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d100      	bne.n	8002d0c <density_screen+0xc4>
	{
		ST7920_SendString(0, 0, "1. PLA");
		ST7920_SendString(1, 0, "2. ABS");
		ST7920_SendString(2, 0, "3. PETG <<");
	}
}
 8002d0a:	e01c      	b.n	8002d46 <density_screen+0xfe>
	if(FC_struct.parameters.filament_density >= (Filament_density_PETG-0.001) && (FC_struct.parameters.filament_density <= Filament_density_PETG+0.001))
 8002d0c:	4b1c      	ldr	r3, [pc, #112]	; (8002d80 <density_screen+0x138>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	a318      	add	r3, pc, #96	; (adr r3, 8002d78 <density_screen+0x130>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fee8 	bl	8000af0 <__aeabi_dcmple>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d100      	bne.n	8002d28 <density_screen+0xe0>
}
 8002d26:	e00e      	b.n	8002d46 <density_screen+0xfe>
		ST7920_SendString(0, 0, "1. PLA");
 8002d28:	4a19      	ldr	r2, [pc, #100]	; (8002d90 <density_screen+0x148>)
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f7fe fad3 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "2. ABS");
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <density_screen+0x140>)
 8002d34:	2100      	movs	r1, #0
 8002d36:	2001      	movs	r0, #1
 8002d38:	f7fe face 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "3. PETG <<");
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <density_screen+0x150>)
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2002      	movs	r0, #2
 8002d42:	f7fe fac9 	bl	80012d8 <ST7920_SendString>
}
 8002d46:	bf00      	nop
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	f3af 8000 	nop.w
 8002d50:	a9fbe76d 	.word	0xa9fbe76d
 8002d54:	3ff3d2f1 	.word	0x3ff3d2f1
 8002d58:	d0e56041 	.word	0xd0e56041
 8002d5c:	3ff3db22 	.word	0x3ff3db22
 8002d60:	76c8b43a 	.word	0x76c8b43a
 8002d64:	3ff09fbe 	.word	0x3ff09fbe
 8002d68:	9db22d0e 	.word	0x9db22d0e
 8002d6c:	3ff0a7ef 	.word	0x3ff0a7ef
 8002d70:	e76c8b44 	.word	0xe76c8b44
 8002d74:	3ff3a9fb 	.word	0x3ff3a9fb
 8002d78:	0e560418 	.word	0x0e560418
 8002d7c:	3ff3b22d 	.word	0x3ff3b22d
 8002d80:	20000520 	.word	0x20000520
 8002d84:	08008920 	.word	0x08008920
 8002d88:	0800892c 	.word	0x0800892c
 8002d8c:	08008934 	.word	0x08008934
 8002d90:	0800893c 	.word	0x0800893c
 8002d94:	08008944 	.word	0x08008944
 8002d98:	08008950 	.word	0x08008950

08002d9c <weight_screen>:


void weight_screen()
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	if(FC_struct.parameters.target_weight == Sample_weight_5g)
 8002da0:	4b30      	ldr	r3, [pc, #192]	; (8002e64 <weight_screen+0xc8>)
 8002da2:	899b      	ldrh	r3, [r3, #12]
 8002da4:	2b05      	cmp	r3, #5
 8002da6:	d113      	bne.n	8002dd0 <weight_screen+0x34>
	{
		ST7920_SendString(0, 0, "5g <<");
 8002da8:	4a2f      	ldr	r2, [pc, #188]	; (8002e68 <weight_screen+0xcc>)
 8002daa:	2100      	movs	r1, #0
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fa93 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002db2:	4a2e      	ldr	r2, [pc, #184]	; (8002e6c <weight_screen+0xd0>)
 8002db4:	2100      	movs	r1, #0
 8002db6:	2001      	movs	r0, #1
 8002db8:	f7fe fa8e 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002dbc:	4a2c      	ldr	r2, [pc, #176]	; (8002e70 <weight_screen+0xd4>)
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fe fa89 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002dc6:	4a2b      	ldr	r2, [pc, #172]	; (8002e74 <weight_screen+0xd8>)
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f7fe fa84 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_25g)
 8002dd0:	4b24      	ldr	r3, [pc, #144]	; (8002e64 <weight_screen+0xc8>)
 8002dd2:	899b      	ldrh	r3, [r3, #12]
 8002dd4:	2b19      	cmp	r3, #25
 8002dd6:	d113      	bne.n	8002e00 <weight_screen+0x64>
	{
		ST7920_SendString(0, 0, "5g");
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <weight_screen+0xdc>)
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fa7b 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g <<");
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <weight_screen+0xe0>)
 8002de4:	2100      	movs	r1, #0
 8002de6:	2001      	movs	r0, #1
 8002de8:	f7fe fa76 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002dec:	4a20      	ldr	r2, [pc, #128]	; (8002e70 <weight_screen+0xd4>)
 8002dee:	2100      	movs	r1, #0
 8002df0:	2002      	movs	r0, #2
 8002df2:	f7fe fa71 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002df6:	4a1f      	ldr	r2, [pc, #124]	; (8002e74 <weight_screen+0xd8>)
 8002df8:	2100      	movs	r1, #0
 8002dfa:	2003      	movs	r0, #3
 8002dfc:	f7fe fa6c 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_50g)
 8002e00:	4b18      	ldr	r3, [pc, #96]	; (8002e64 <weight_screen+0xc8>)
 8002e02:	899b      	ldrh	r3, [r3, #12]
 8002e04:	2b32      	cmp	r3, #50	; 0x32
 8002e06:	d113      	bne.n	8002e30 <weight_screen+0x94>
	{
		ST7920_SendString(0, 0, "5g");
 8002e08:	4a1b      	ldr	r2, [pc, #108]	; (8002e78 <weight_screen+0xdc>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fe fa63 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002e12:	4a16      	ldr	r2, [pc, #88]	; (8002e6c <weight_screen+0xd0>)
 8002e14:	2100      	movs	r1, #0
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fe fa5e 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g <<");
 8002e1c:	4a18      	ldr	r2, [pc, #96]	; (8002e80 <weight_screen+0xe4>)
 8002e1e:	2100      	movs	r1, #0
 8002e20:	2002      	movs	r0, #2
 8002e22:	f7fe fa59 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g");
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <weight_screen+0xd8>)
 8002e28:	2100      	movs	r1, #0
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f7fe fa54 	bl	80012d8 <ST7920_SendString>
	}

	if(FC_struct.parameters.target_weight == Sample_weight_100g)
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <weight_screen+0xc8>)
 8002e32:	899b      	ldrh	r3, [r3, #12]
 8002e34:	2b64      	cmp	r3, #100	; 0x64
 8002e36:	d113      	bne.n	8002e60 <weight_screen+0xc4>
	{
		ST7920_SendString(0, 0, "5g");
 8002e38:	4a0f      	ldr	r2, [pc, #60]	; (8002e78 <weight_screen+0xdc>)
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fa4b 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(1, 0, "25g");
 8002e42:	4a0a      	ldr	r2, [pc, #40]	; (8002e6c <weight_screen+0xd0>)
 8002e44:	2100      	movs	r1, #0
 8002e46:	2001      	movs	r0, #1
 8002e48:	f7fe fa46 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(2, 0, "50g");
 8002e4c:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <weight_screen+0xd4>)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2002      	movs	r0, #2
 8002e52:	f7fe fa41 	bl	80012d8 <ST7920_SendString>
		ST7920_SendString(3, 0, "100g <<");
 8002e56:	4a0b      	ldr	r2, [pc, #44]	; (8002e84 <weight_screen+0xe8>)
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2003      	movs	r0, #3
 8002e5c:	f7fe fa3c 	bl	80012d8 <ST7920_SendString>
	}
}
 8002e60:	bf00      	nop
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000520 	.word	0x20000520
 8002e68:	0800895c 	.word	0x0800895c
 8002e6c:	08008964 	.word	0x08008964
 8002e70:	08008968 	.word	0x08008968
 8002e74:	0800896c 	.word	0x0800896c
 8002e78:	08008974 	.word	0x08008974
 8002e7c:	08008978 	.word	0x08008978
 8002e80:	08008980 	.word	0x08008980
 8002e84:	08008988 	.word	0x08008988

08002e88 <active_start_screen>:

void active_start_screen()
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "Working...");
 8002e8c:	4a08      	ldr	r2, [pc, #32]	; (8002eb0 <active_start_screen+0x28>)
 8002e8e:	2100      	movs	r1, #0
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fe fa21 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(1, 0, "0/500 [cm]");
 8002e96:	4a07      	ldr	r2, [pc, #28]	; (8002eb4 <active_start_screen+0x2c>)
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7fe fa1c 	bl	80012d8 <ST7920_SendString>
	ST7920_SendString(3, 3, "STOP");
 8002ea0:	4a05      	ldr	r2, [pc, #20]	; (8002eb8 <active_start_screen+0x30>)
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	2003      	movs	r0, #3
 8002ea6:	f7fe fa17 	bl	80012d8 <ST7920_SendString>

}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	08008990 	.word	0x08008990
 8002eb4:	0800899c 	.word	0x0800899c
 8002eb8:	080089a8 	.word	0x080089a8

08002ebc <quantity_screen>:


void quantity_screen()
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "QTY: ");
 8002ec0:	4a03      	ldr	r2, [pc, #12]	; (8002ed0 <quantity_screen+0x14>)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	2000      	movs	r0, #0
 8002ec6:	f7fe fa07 	bl	80012d8 <ST7920_SendString>

}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	080089b0 	.word	0x080089b0

08002ed4 <quantity_screen_update>:

void quantity_screen_update()
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
	static uint8_t qty_prev_value;
	char qty_value[4];

	if(qty_prev_value != FC_struct.parameters.temp_qty)
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <quantity_screen_update+0x40>)
 8002edc:	7d1a      	ldrb	r2, [r3, #20]
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <quantity_screen_update+0x44>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d011      	beq.n	8002f0a <quantity_screen_update+0x36>
	{
		qty_prev_value = FC_struct.parameters.temp_qty;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <quantity_screen_update+0x40>)
 8002ee8:	7d1a      	ldrb	r2, [r3, #20]
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <quantity_screen_update+0x44>)
 8002eec:	701a      	strb	r2, [r3, #0]
		sprintf(qty_value, "%d", FC_struct.parameters.temp_qty);
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <quantity_screen_update+0x40>)
 8002ef0:	7d1b      	ldrb	r3, [r3, #20]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	4909      	ldr	r1, [pc, #36]	; (8002f1c <quantity_screen_update+0x48>)
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f005 f881 	bl	8008000 <siprintf>
		ST7920_SendString(0, 1, qty_value);
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	461a      	mov	r2, r3
 8002f02:	2101      	movs	r1, #1
 8002f04:	2000      	movs	r0, #0
 8002f06:	f7fe f9e7 	bl	80012d8 <ST7920_SendString>

	}

}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	20000520 	.word	0x20000520
 8002f18:	200000ec 	.word	0x200000ec
 8002f1c:	080089b8 	.word	0x080089b8

08002f20 <stepper_init>:

extern filament_cutter FC_struct;

void stepper_init(stepper_motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		TIM_HandleTypeDef *slave_timer, GPIO_TypeDef* Dir_port, uint16_t Dir_pin)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
 8002f2c:	603b      	str	r3, [r7, #0]
	motor->timer.htim = htim;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	601a      	str	r2, [r3, #0]
	motor->timer.channel = channel;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]
	motor->slave_timer.htim = slave_timer;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	609a      	str	r2, [r3, #8]
	motor->DIR_port = Dir_port;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	615a      	str	r2, [r3, #20]
	motor->DIR_pin = Dir_pin;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8bba      	ldrh	r2, [r7, #28]
 8002f4a:	831a      	strh	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <stepper_stop>:

// Basic stepper motor control functions

void stepper_stop(stepper_motor *motor)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
	motor->mode = IDLE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	745a      	strb	r2, [r3, #17]
	HAL_GPIO_WritePin(EXTRD_SLEEP_GPIO_Port, EXTRD_SLEEP_Pin, GPIO_PIN_RESET);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2104      	movs	r1, #4
 8002f6a:	4825      	ldr	r0, [pc, #148]	; (8003000 <stepper_stop+0xa8>)
 8002f6c:	f001 fa10 	bl	8004390 <HAL_GPIO_WritePin>
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, 0);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d105      	bne.n	8002f84 <stepper_stop+0x2c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34
 8002f82:	e02c      	b.n	8002fde <stepper_stop+0x86>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b04      	cmp	r3, #4
 8002f8a:	d105      	bne.n	8002f98 <stepper_stop+0x40>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	6393      	str	r3, [r2, #56]	; 0x38
 8002f96:	e022      	b.n	8002fde <stepper_stop+0x86>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b08      	cmp	r3, #8
 8002f9e:	d105      	bne.n	8002fac <stepper_stop+0x54>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002faa:	e018      	b.n	8002fde <stepper_stop+0x86>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	d105      	bne.n	8002fc0 <stepper_stop+0x68>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	2300      	movs	r3, #0
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	e00e      	b.n	8002fde <stepper_stop+0x86>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d105      	bne.n	8002fd4 <stepper_stop+0x7c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	6593      	str	r3, [r2, #88]	; 0x58
 8002fd2:	e004      	b.n	8002fde <stepper_stop+0x86>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(motor->timer.htim, motor->timer.channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4619      	mov	r1, r3
 8002fe8:	4610      	mov	r0, r2
 8002fea:	f003 f969 	bl	80062c0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(motor->slave_timer.htim);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 ffee 	bl	8005fd4 <HAL_TIM_Base_Stop_IT>

}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	48000c00 	.word	0x48000c00

08003004 <stepper_set_dir>:

void stepper_set_dir(stepper_motor *motor, stepper_dir direction)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	460b      	mov	r3, r1
 800300e:	70fb      	strb	r3, [r7, #3]
	motor->dir = direction;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	78fa      	ldrb	r2, [r7, #3]
 8003014:	741a      	strb	r2, [r3, #16]
	if(motor->dir == CW)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	7c1b      	ldrb	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d108      	bne.n	8003030 <stepper_set_dir+0x2c>
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_RESET);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6958      	ldr	r0, [r3, #20]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	8b1b      	ldrh	r3, [r3, #24]
 8003026:	2200      	movs	r2, #0
 8003028:	4619      	mov	r1, r3
 800302a:	f001 f9b1 	bl	8004390 <HAL_GPIO_WritePin>

	else
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
	}
}
 800302e:	e007      	b.n	8003040 <stepper_set_dir+0x3c>
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6958      	ldr	r0, [r3, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	8b1b      	ldrh	r3, [r3, #24]
 8003038:	2201      	movs	r2, #1
 800303a:	4619      	mov	r1, r3
 800303c:	f001 f9a8 	bl	8004390 <HAL_GPIO_WritePin>
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <stepper_set_speed>:

void stepper_set_speed(stepper_motor *motor, uint32_t speed)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
	uint32_t freq, counter;

	if(speed > 100)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b64      	cmp	r3, #100	; 0x64
 8003056:	d902      	bls.n	800305e <stepper_set_speed+0x16>
	{
		speed = 100;
 8003058:	2364      	movs	r3, #100	; 0x64
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	e006      	b.n	800306c <stepper_set_speed+0x24>
	}

	else if(speed == 0)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <stepper_set_speed+0x24>
	{
		stepper_stop(motor);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff77 	bl	8002f58 <stepper_stop>
		return;
 800306a:	e068      	b.n	800313e <stepper_set_speed+0xf6>
	}

	freq = (speed * (STEPEER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ)) / STEPPER_MOTOR_MAX_SPEED;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	4a33      	ldr	r2, [pc, #204]	; (8003144 <stepper_set_speed+0xfc>)
 8003078:	fba2 2303 	umull	r2, r3, r2, r3
 800307c:	095b      	lsrs	r3, r3, #5
 800307e:	60fb      	str	r3, [r7, #12]

	counter = HAL_RCC_GetPCLK1Freq() / (motor->timer.htim->Init.Prescaler * freq);
 8003080:	f002 fab6 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8003084:	4601      	mov	r1, r0
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	fb02 f303 	mul.w	r3, r2, r3
 8003092:	fbb1 f3f3 	udiv	r3, r1, r3
 8003096:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(motor->timer.htim, 0);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->timer.htim, counter - 1);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	3a01      	subs	r2, #1
 80030ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	3a01      	subs	r2, #1
 80030b6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, (counter/2)-1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <stepper_set_speed+0x88>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	085a      	lsrs	r2, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	3a01      	subs	r2, #1
 80030cc:	635a      	str	r2, [r3, #52]	; 0x34
 80030ce:	e036      	b.n	800313e <stepper_set_speed+0xf6>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d107      	bne.n	80030e8 <stepper_set_speed+0xa0>
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	085b      	lsrs	r3, r3, #1
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6812      	ldr	r2, [r2, #0]
 80030e0:	6812      	ldr	r2, [r2, #0]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	6393      	str	r3, [r2, #56]	; 0x38
 80030e6:	e02a      	b.n	800313e <stepper_set_speed+0xf6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d107      	bne.n	8003100 <stepper_set_speed+0xb8>
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	085b      	lsrs	r3, r3, #1
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	6812      	ldr	r2, [r2, #0]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80030fe:	e01e      	b.n	800313e <stepper_set_speed+0xf6>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d107      	bne.n	8003118 <stepper_set_speed+0xd0>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	6812      	ldr	r2, [r2, #0]
 8003112:	3b01      	subs	r3, #1
 8003114:	6413      	str	r3, [r2, #64]	; 0x40
 8003116:	e012      	b.n	800313e <stepper_set_speed+0xf6>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b10      	cmp	r3, #16
 800311e:	d107      	bne.n	8003130 <stepper_set_speed+0xe8>
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	085b      	lsrs	r3, r3, #1
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6812      	ldr	r2, [r2, #0]
 8003128:	6812      	ldr	r2, [r2, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
 800312e:	e006      	b.n	800313e <stepper_set_speed+0xf6>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	085b      	lsrs	r3, r3, #1
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6812      	ldr	r2, [r2, #0]
 8003138:	6812      	ldr	r2, [r2, #0]
 800313a:	3b01      	subs	r3, #1
 800313c:	65d3      	str	r3, [r2, #92]	; 0x5c

}
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <stepper_set_angle>:


void stepper_set_angle(stepper_motor *motor, uint32_t angle, uint32_t speed, stepper_dir dir)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	70fb      	strb	r3, [r7, #3]
	motor->mode = ANGLE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	745a      	strb	r2, [r3, #17]
	stepper_set_dir(motor, dir);
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f7ff ff4f 	bl	8003004 <stepper_set_dir>
	stepper_set_speed(motor, speed);
 8003166:	6879      	ldr	r1, [r7, #4]
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff ff6d 	bl	8003048 <stepper_set_speed>


	// set angle
	motor->step_counter = 0;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	61da      	str	r2, [r3, #28]
	motor->steps_to_count = angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	22c8      	movs	r2, #200	; 0xc8
 8003178:	fb02 f303 	mul.w	r3, r2, r3
 800317c:	08db      	lsrs	r3, r3, #3
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <stepper_set_angle+0x9c>)
 8003180:	fba2 2303 	umull	r2, r3, r2, r3
 8003184:	089a      	lsrs	r2, r3, #2
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	621a      	str	r2, [r3, #32]


	if(0 == motor->steps_to_count)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <stepper_set_angle+0x50>
	{
		stepper_stop(motor);
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f7ff fee0 	bl	8002f58 <stepper_stop>
	}
	__HAL_TIM_SET_COUNTER(motor->slave_timer.htim, 0);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2200      	movs	r2, #0
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->slave_timer.htim, motor->steps_to_count - 1);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1a      	ldr	r2, [r3, #32]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3a01      	subs	r2, #1
 80031ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a1a      	ldr	r2, [r3, #32]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	3a01      	subs	r2, #1
 80031ba:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(motor->slave_timer.htim);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f002 feab 	bl	8005f1c <HAL_TIM_Base_Start_IT>
	FIRST_MISS_FLAG = 1;
 80031c6:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <stepper_set_angle+0xa0>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(motor->timer.htim, motor->timer.channel);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4619      	mov	r1, r3
 80031d6:	4610      	mov	r0, r2
 80031d8:	f002 ff8c 	bl	80060f4 <HAL_TIM_PWM_Start>

}
 80031dc:	bf00      	nop
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	16c16c17 	.word	0x16c16c17
 80031e8:	20000507 	.word	0x20000507
 80031ec:	00000000 	.word	0x00000000

080031f0 <stepper_centimeters_to_rotations>:


void stepper_centimeters_to_rotations(stepper_motor *motor, uint32_t centimeters, uint32_t speed, stepper_dir dir)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	70fb      	strb	r3, [r7, #3]
	uint32_t target_angle;
	target_angle = (uint32_t)centimeters / (FULL_ROTATION_LENGTH_CM);
 80031fe:	68b8      	ldr	r0, [r7, #8]
 8003200:	f7fd f980 	bl	8000504 <__aeabi_ui2d>
 8003204:	a30e      	add	r3, pc, #56	; (adr r3, 8003240 <stepper_centimeters_to_rotations+0x50>)
 8003206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800320a:	f7fd fb1f 	bl	800084c <__aeabi_ddiv>
 800320e:	4602      	mov	r2, r0
 8003210:	460b      	mov	r3, r1
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	f7fd fc89 	bl	8000b2c <__aeabi_d2uiz>
 800321a:	4603      	mov	r3, r0
 800321c:	617b      	str	r3, [r7, #20]
	target_angle *= 360;
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8003224:	fb02 f303 	mul.w	r3, r2, r3
 8003228:	617b      	str	r3, [r7, #20]
	stepper_set_angle(motor, target_angle, speed, dir);
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6979      	ldr	r1, [r7, #20]
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f7ff ff89 	bl	8003148 <stepper_set_angle>
}
 8003236:	bf00      	nop
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	c083126f 	.word	0xc083126f
 8003244:	400ba1ca 	.word	0x400ba1ca

08003248 <stepper_grams_to_centimeters>:


uint32_t stepper_grams_to_centimeters(stepper_motor *motor, uint16_t grams, float filament_diameter, float filament_density)
{
 8003248:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800324c:	b086      	sub	sp, #24
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	460b      	mov	r3, r1
 8003254:	ed87 0a01 	vstr	s0, [r7, #4]
 8003258:	edc7 0a00 	vstr	s1, [r7]
 800325c:	817b      	strh	r3, [r7, #10]
	// dlugosc[m] = 4*waga[g]/ (density[g/cm3] * PI * srednica_fil[mm] * srednica fil[mm])
	float length;
	length = (4*grams)/ (filament_density * 3.14 * filament_diameter * filament_diameter);
 800325e:	897b      	ldrh	r3, [r7, #10]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fd f95e 	bl	8000524 <__aeabi_i2d>
 8003268:	4604      	mov	r4, r0
 800326a:	460d      	mov	r5, r1
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	f7fd f96b 	bl	8000548 <__aeabi_f2d>
 8003272:	a329      	add	r3, pc, #164	; (adr r3, 8003318 <stepper_grams_to_centimeters+0xd0>)
 8003274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003278:	f7fd f9be 	bl	80005f8 <__aeabi_dmul>
 800327c:	4602      	mov	r2, r0
 800327e:	460b      	mov	r3, r1
 8003280:	4690      	mov	r8, r2
 8003282:	4699      	mov	r9, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7fd f95f 	bl	8000548 <__aeabi_f2d>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4640      	mov	r0, r8
 8003290:	4649      	mov	r1, r9
 8003292:	f7fd f9b1 	bl	80005f8 <__aeabi_dmul>
 8003296:	4602      	mov	r2, r0
 8003298:	460b      	mov	r3, r1
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fd f952 	bl	8000548 <__aeabi_f2d>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4640      	mov	r0, r8
 80032aa:	4649      	mov	r1, r9
 80032ac:	f7fd f9a4 	bl	80005f8 <__aeabi_dmul>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	4620      	mov	r0, r4
 80032b6:	4629      	mov	r1, r5
 80032b8:	f7fd fac8 	bl	800084c <__aeabi_ddiv>
 80032bc:	4602      	mov	r2, r0
 80032be:	460b      	mov	r3, r1
 80032c0:	4610      	mov	r0, r2
 80032c2:	4619      	mov	r1, r3
 80032c4:	f7fd fc52 	bl	8000b6c <__aeabi_d2f>
 80032c8:	4603      	mov	r3, r0
 80032ca:	617b      	str	r3, [r7, #20]
	FC_struct.parameters.current_length_cm = length * 100;
 80032cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80032d0:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003310 <stepper_grams_to_centimeters+0xc8>
 80032d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032dc:	ee17 3a90 	vmov	r3, s15
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <stepper_grams_to_centimeters+0xcc>)
 80032e4:	821a      	strh	r2, [r3, #16]
	return truncf(length * 100);
 80032e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80032ea:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003310 <stepper_grams_to_centimeters+0xc8>
 80032ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f2:	eeb0 0a67 	vmov.f32	s0, s15
 80032f6:	f005 fab1 	bl	800885c <truncf>
 80032fa:	eef0 7a40 	vmov.f32	s15, s0
 80032fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003302:	ee17 3a90 	vmov	r3, s15
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003310:	42c80000 	.word	0x42c80000
 8003314:	20000520 	.word	0x20000520
 8003318:	51eb851f 	.word	0x51eb851f
 800331c:	40091eb8 	.word	0x40091eb8

08003320 <stepper_extrude_weight>:

void stepper_extrude_weight(stepper_motor *motor)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
	if(EXTRUDE_PROCESS_FLAG == 0)
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <stepper_extrude_weight+0x54>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11c      	bne.n	800336c <stepper_extrude_weight+0x4c>
	{
		//printf("Start Extrude\n");
		CUTTING_PROCESS_FLAG = 0;
 8003332:	4b11      	ldr	r3, [pc, #68]	; (8003378 <stepper_extrude_weight+0x58>)
 8003334:	2200      	movs	r2, #0
 8003336:	701a      	strb	r2, [r3, #0]
		EXTRUDE_PROCESS_FLAG = 1;
 8003338:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <stepper_extrude_weight+0x54>)
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
		uint32_t centimeters;
		centimeters = stepper_grams_to_centimeters(motor, FC_struct.parameters.target_weight, FC_struct.parameters.filament_diameter, FC_struct.parameters.filament_density);
 800333e:	4b0f      	ldr	r3, [pc, #60]	; (800337c <stepper_extrude_weight+0x5c>)
 8003340:	899b      	ldrh	r3, [r3, #12]
 8003342:	4a0e      	ldr	r2, [pc, #56]	; (800337c <stepper_extrude_weight+0x5c>)
 8003344:	edd2 7a02 	vldr	s15, [r2, #8]
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <stepper_extrude_weight+0x5c>)
 800334a:	ed92 7a01 	vldr	s14, [r2, #4]
 800334e:	eef0 0a47 	vmov.f32	s1, s14
 8003352:	eeb0 0a67 	vmov.f32	s0, s15
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff75 	bl	8003248 <stepper_grams_to_centimeters>
 800335e:	60f8      	str	r0, [r7, #12]
		stepper_centimeters_to_rotations(motor, centimeters, 80, CW);
 8003360:	2300      	movs	r3, #0
 8003362:	2250      	movs	r2, #80	; 0x50
 8003364:	68f9      	ldr	r1, [r7, #12]
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7ff ff42 	bl	80031f0 <stepper_centimeters_to_rotations>
	}

}
 800336c:	bf00      	nop
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20000508 	.word	0x20000508
 8003378:	200000fe 	.word	0x200000fe
 800337c:	20000520 	.word	0x20000520

08003380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003386:	4b0f      	ldr	r3, [pc, #60]	; (80033c4 <HAL_MspInit+0x44>)
 8003388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800338a:	4a0e      	ldr	r2, [pc, #56]	; (80033c4 <HAL_MspInit+0x44>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	6613      	str	r3, [r2, #96]	; 0x60
 8003392:	4b0c      	ldr	r3, [pc, #48]	; (80033c4 <HAL_MspInit+0x44>)
 8003394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	607b      	str	r3, [r7, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_MspInit+0x44>)
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_MspInit+0x44>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6593      	str	r3, [r2, #88]	; 0x58
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_MspInit+0x44>)
 80033ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40021000 	.word	0x40021000

080033c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <NMI_Handler+0x4>

080033ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <HardFault_Handler+0x4>

080033d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <MemManage_Handler+0x4>

080033da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <BusFault_Handler+0x4>

080033e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <UsageFault_Handler+0x4>

080033e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003414:	f000 fcd4 	bl	8003dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8003422:	f003 f909 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	2000065c 	.word	0x2000065c

08003430 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003434:	4803      	ldr	r0, [pc, #12]	; (8003444 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003436:	f003 f8ff 	bl	8006638 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800343a:	4803      	ldr	r0, [pc, #12]	; (8003448 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800343c:	f003 f8fc 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003440:	bf00      	nop
 8003442:	bd80      	pop	{r7, pc}
 8003444:	2000065c 	.word	0x2000065c
 8003448:	200006f4 	.word	0x200006f4

0800344c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <TIM1_CC_IRQHandler+0x10>)
 8003452:	f003 f8f1 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	2000065c 	.word	0x2000065c

08003460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <TIM2_IRQHandler+0x10>)
 8003466:	f003 f8e7 	bl	8006638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	200006a8 	.word	0x200006a8

08003474 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <LPTIM1_IRQHandler+0x10>)
 800347a:	f001 f8b2 	bl	80045e2 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000540 	.word	0x20000540

08003488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b086      	sub	sp, #24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003490:	4a14      	ldr	r2, [pc, #80]	; (80034e4 <_sbrk+0x5c>)
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <_sbrk+0x60>)
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800349c:	4b13      	ldr	r3, [pc, #76]	; (80034ec <_sbrk+0x64>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d102      	bne.n	80034aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034a4:	4b11      	ldr	r3, [pc, #68]	; (80034ec <_sbrk+0x64>)
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <_sbrk+0x68>)
 80034a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034aa:	4b10      	ldr	r3, [pc, #64]	; (80034ec <_sbrk+0x64>)
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d207      	bcs.n	80034c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034b8:	f004 fd70 	bl	8007f9c <__errno>
 80034bc:	4603      	mov	r3, r0
 80034be:	220c      	movs	r2, #12
 80034c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	e009      	b.n	80034dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034c8:	4b08      	ldr	r3, [pc, #32]	; (80034ec <_sbrk+0x64>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80034ce:	4b07      	ldr	r3, [pc, #28]	; (80034ec <_sbrk+0x64>)
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	4a05      	ldr	r2, [pc, #20]	; (80034ec <_sbrk+0x64>)
 80034d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20028000 	.word	0x20028000
 80034e8:	00000400 	.word	0x00000400
 80034ec:	200000f0 	.word	0x200000f0
 80034f0:	200007d8 	.word	0x200007d8

080034f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80034f8:	4b15      	ldr	r3, [pc, #84]	; (8003550 <SystemInit+0x5c>)
 80034fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <SystemInit+0x5c>)
 8003500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <SystemInit+0x60>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a11      	ldr	r2, [pc, #68]	; (8003554 <SystemInit+0x60>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003514:	4b0f      	ldr	r3, [pc, #60]	; (8003554 <SystemInit+0x60>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <SystemInit+0x60>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <SystemInit+0x60>)
 8003520:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003524:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003528:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800352a:	4b0a      	ldr	r3, [pc, #40]	; (8003554 <SystemInit+0x60>)
 800352c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003530:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <SystemInit+0x60>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <SystemInit+0x60>)
 8003538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800353c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800353e:	4b05      	ldr	r3, [pc, #20]	; (8003554 <SystemInit+0x60>)
 8003540:	2200      	movs	r2, #0
 8003542:	619a      	str	r2, [r3, #24]
}
 8003544:	bf00      	nop
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	e000ed00 	.word	0xe000ed00
 8003554:	40021000 	.word	0x40021000

08003558 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b09a      	sub	sp, #104	; 0x68
 800355c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800355e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	605a      	str	r2, [r3, #4]
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003578:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	605a      	str	r2, [r3, #4]
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	60da      	str	r2, [r3, #12]
 8003586:	611a      	str	r2, [r3, #16]
 8003588:	615a      	str	r2, [r3, #20]
 800358a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800358c:	1d3b      	adds	r3, r7, #4
 800358e:	222c      	movs	r2, #44	; 0x2c
 8003590:	2100      	movs	r1, #0
 8003592:	4618      	mov	r0, r3
 8003594:	f004 fd2c 	bl	8007ff0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003598:	4b44      	ldr	r3, [pc, #272]	; (80036ac <MX_TIM1_Init+0x154>)
 800359a:	4a45      	ldr	r2, [pc, #276]	; (80036b0 <MX_TIM1_Init+0x158>)
 800359c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <MX_TIM1_Init+0x154>)
 80035a0:	2250      	movs	r2, #80	; 0x50
 80035a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a4:	4b41      	ldr	r3, [pc, #260]	; (80036ac <MX_TIM1_Init+0x154>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80035aa:	4b40      	ldr	r3, [pc, #256]	; (80036ac <MX_TIM1_Init+0x154>)
 80035ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b2:	4b3e      	ldr	r3, [pc, #248]	; (80036ac <MX_TIM1_Init+0x154>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80035b8:	4b3c      	ldr	r3, [pc, #240]	; (80036ac <MX_TIM1_Init+0x154>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035be:	4b3b      	ldr	r3, [pc, #236]	; (80036ac <MX_TIM1_Init+0x154>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80035c4:	4839      	ldr	r0, [pc, #228]	; (80036ac <MX_TIM1_Init+0x154>)
 80035c6:	f002 fbfd 	bl	8005dc4 <HAL_TIM_Base_Init>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80035d0:	f7fe fe92 	bl	80022f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80035da:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80035de:	4619      	mov	r1, r3
 80035e0:	4832      	ldr	r0, [pc, #200]	; (80036ac <MX_TIM1_Init+0x154>)
 80035e2:	f003 fa59 	bl	8006a98 <HAL_TIM_ConfigClockSource>
 80035e6:	4603      	mov	r3, r0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80035ec:	f7fe fe84 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80035f0:	482e      	ldr	r0, [pc, #184]	; (80036ac <MX_TIM1_Init+0x154>)
 80035f2:	f002 fd1e 	bl	8006032 <HAL_TIM_PWM_Init>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80035fc:	f7fe fe7c 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8003600:	2340      	movs	r3, #64	; 0x40
 8003602:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 8003604:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003608:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800360e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003612:	4619      	mov	r1, r3
 8003614:	4825      	ldr	r0, [pc, #148]	; (80036ac <MX_TIM1_Init+0x154>)
 8003616:	f003 ffab 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8003620:	f7fe fe6a 	bl	80022f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003624:	2360      	movs	r3, #96	; 0x60
 8003626:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 8003628:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800362e:	2300      	movs	r3, #0
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003632:	2300      	movs	r3, #0
 8003634:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003636:	2300      	movs	r3, #0
 8003638:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800363a:	2300      	movs	r3, #0
 800363c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800363e:	2300      	movs	r3, #0
 8003640:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003646:	2200      	movs	r2, #0
 8003648:	4619      	mov	r1, r3
 800364a:	4818      	ldr	r0, [pc, #96]	; (80036ac <MX_TIM1_Init+0x154>)
 800364c:	f003 f914 	bl	8006878 <HAL_TIM_PWM_ConfigChannel>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8003656:	f7fe fe4f 	bl	80022f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003662:	2300      	movs	r3, #0
 8003664:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800366a:	2300      	movs	r3, #0
 800366c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800366e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003672:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003674:	2300      	movs	r3, #0
 8003676:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003678:	2300      	movs	r3, #0
 800367a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800367c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003680:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800368a:	1d3b      	adds	r3, r7, #4
 800368c:	4619      	mov	r1, r3
 800368e:	4807      	ldr	r0, [pc, #28]	; (80036ac <MX_TIM1_Init+0x154>)
 8003690:	f003 ffdc 	bl	800764c <HAL_TIMEx_ConfigBreakDeadTime>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 800369a:	f7fe fe2d 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800369e:	4803      	ldr	r0, [pc, #12]	; (80036ac <MX_TIM1_Init+0x154>)
 80036a0:	f000 fa1e 	bl	8003ae0 <HAL_TIM_MspPostInit>

}
 80036a4:	bf00      	nop
 80036a6:	3768      	adds	r7, #104	; 0x68
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	2000065c 	.word	0x2000065c
 80036b0:	40012c00 	.word	0x40012c00

080036b4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80036ba:	f107 030c 	add.w	r3, r7, #12
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	60da      	str	r2, [r3, #12]
 80036c8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036ca:	463b      	mov	r3, r7
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80036d4:	4b1e      	ldr	r3, [pc, #120]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80036da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80036dc:	4b1c      	ldr	r3, [pc, #112]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036e2:	4b1b      	ldr	r3, [pc, #108]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036ea:	f04f 32ff 	mov.w	r2, #4294967295
 80036ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036f0:	4b17      	ldr	r3, [pc, #92]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80036fc:	4814      	ldr	r0, [pc, #80]	; (8003750 <MX_TIM2_Init+0x9c>)
 80036fe:	f002 fb61 	bl	8005dc4 <HAL_TIM_Base_Init>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8003708:	f7fe fdf6 	bl	80022f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800370c:	2307      	movs	r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003710:	2300      	movs	r3, #0
 8003712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003714:	f107 030c 	add.w	r3, r7, #12
 8003718:	4619      	mov	r1, r3
 800371a:	480d      	ldr	r0, [pc, #52]	; (8003750 <MX_TIM2_Init+0x9c>)
 800371c:	f003 fa82 	bl	8006c24 <HAL_TIM_SlaveConfigSynchro>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8003726:	f7fe fde7 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800372a:	2300      	movs	r3, #0
 800372c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003732:	463b      	mov	r3, r7
 8003734:	4619      	mov	r1, r3
 8003736:	4806      	ldr	r0, [pc, #24]	; (8003750 <MX_TIM2_Init+0x9c>)
 8003738:	f003 ff1a 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8003742:	f7fe fdd9 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003746:	bf00      	nop
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	200006a8 	.word	0x200006a8

08003754 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	; 0x30
 8003758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800375a:	f107 030c 	add.w	r3, r7, #12
 800375e:	2224      	movs	r2, #36	; 0x24
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f004 fc44 	bl	8007ff0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003768:	463b      	mov	r3, r7
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
 800376e:	605a      	str	r2, [r3, #4]
 8003770:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003772:	4b21      	ldr	r3, [pc, #132]	; (80037f8 <MX_TIM3_Init+0xa4>)
 8003774:	4a21      	ldr	r2, [pc, #132]	; (80037fc <MX_TIM3_Init+0xa8>)
 8003776:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003778:	4b1f      	ldr	r3, [pc, #124]	; (80037f8 <MX_TIM3_Init+0xa4>)
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377e:	4b1e      	ldr	r3, [pc, #120]	; (80037f8 <MX_TIM3_Init+0xa4>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003784:	4b1c      	ldr	r3, [pc, #112]	; (80037f8 <MX_TIM3_Init+0xa4>)
 8003786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800378a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800378c:	4b1a      	ldr	r3, [pc, #104]	; (80037f8 <MX_TIM3_Init+0xa4>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003792:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <MX_TIM3_Init+0xa4>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003798:	2303      	movs	r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80037a8:	230f      	movs	r3, #15
 80037aa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80037ac:	2302      	movs	r3, #2
 80037ae:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80037b0:	2301      	movs	r3, #1
 80037b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80037b4:	2300      	movs	r3, #0
 80037b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80037b8:	230f      	movs	r3, #15
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	4619      	mov	r1, r3
 80037c2:	480d      	ldr	r0, [pc, #52]	; (80037f8 <MX_TIM3_Init+0xa4>)
 80037c4:	f002 fe04 	bl	80063d0 <HAL_TIM_Encoder_Init>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80037ce:	f7fe fd93 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80037da:	463b      	mov	r3, r7
 80037dc:	4619      	mov	r1, r3
 80037de:	4806      	ldr	r0, [pc, #24]	; (80037f8 <MX_TIM3_Init+0xa4>)
 80037e0:	f003 fec6 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80037ea:	f7fe fd85 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80037ee:	bf00      	nop
 80037f0:	3730      	adds	r7, #48	; 0x30
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	200005c4 	.word	0x200005c4
 80037fc:	40000400 	.word	0x40000400

08003800 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003806:	1d3b      	adds	r3, r7, #4
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003810:	4b14      	ldr	r3, [pc, #80]	; (8003864 <MX_TIM6_Init+0x64>)
 8003812:	4a15      	ldr	r2, [pc, #84]	; (8003868 <MX_TIM6_Init+0x68>)
 8003814:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8003816:	4b13      	ldr	r3, [pc, #76]	; (8003864 <MX_TIM6_Init+0x64>)
 8003818:	2250      	movs	r2, #80	; 0x50
 800381a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <MX_TIM6_Init+0x64>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <MX_TIM6_Init+0x64>)
 8003824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003828:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800382a:	4b0e      	ldr	r3, [pc, #56]	; (8003864 <MX_TIM6_Init+0x64>)
 800382c:	2200      	movs	r2, #0
 800382e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003830:	480c      	ldr	r0, [pc, #48]	; (8003864 <MX_TIM6_Init+0x64>)
 8003832:	f002 fac7 	bl	8005dc4 <HAL_TIM_Base_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800383c:	f7fe fd5c 	bl	80022f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003848:	1d3b      	adds	r3, r7, #4
 800384a:	4619      	mov	r1, r3
 800384c:	4805      	ldr	r0, [pc, #20]	; (8003864 <MX_TIM6_Init+0x64>)
 800384e:	f003 fe8f 	bl	8007570 <HAL_TIMEx_MasterConfigSynchronization>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003858:	f7fe fd4e 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800385c:	bf00      	nop
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	20000610 	.word	0x20000610
 8003868:	40001000 	.word	0x40001000

0800386c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b092      	sub	sp, #72	; 0x48
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	611a      	str	r2, [r3, #16]
 8003882:	615a      	str	r2, [r3, #20]
 8003884:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003886:	463b      	mov	r3, r7
 8003888:	222c      	movs	r2, #44	; 0x2c
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f004 fbaf 	bl	8007ff0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003892:	4b30      	ldr	r3, [pc, #192]	; (8003954 <MX_TIM16_Init+0xe8>)
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <MX_TIM16_Init+0xec>)
 8003896:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8003898:	4b2e      	ldr	r3, [pc, #184]	; (8003954 <MX_TIM16_Init+0xe8>)
 800389a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800389e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a0:	4b2c      	ldr	r3, [pc, #176]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 80038a6:	4b2b      	ldr	r3, [pc, #172]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038a8:	2263      	movs	r2, #99	; 0x63
 80038aa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80038b2:	4b28      	ldr	r3, [pc, #160]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038b8:	4b26      	ldr	r3, [pc, #152]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80038be:	4825      	ldr	r0, [pc, #148]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038c0:	f002 fa80 	bl	8005dc4 <HAL_TIM_Base_Init>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80038ca:	f7fe fd15 	bl	80022f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80038ce:	4821      	ldr	r0, [pc, #132]	; (8003954 <MX_TIM16_Init+0xe8>)
 80038d0:	f002 fbaf 	bl	8006032 <HAL_TIM_PWM_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80038da:	f7fe fd0d 	bl	80022f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038de:	2360      	movs	r3, #96	; 0x60
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 80038e2:	2363      	movs	r3, #99	; 0x63
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80038ea:	2300      	movs	r3, #0
 80038ec:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fe:	2200      	movs	r2, #0
 8003900:	4619      	mov	r1, r3
 8003902:	4814      	ldr	r0, [pc, #80]	; (8003954 <MX_TIM16_Init+0xe8>)
 8003904:	f002 ffb8 	bl	8006878 <HAL_TIM_PWM_ConfigChannel>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800390e:	f7fe fcf3 	bl	80022f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003912:	2300      	movs	r3, #0
 8003914:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003916:	2300      	movs	r3, #0
 8003918:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800391e:	2300      	movs	r3, #0
 8003920:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003922:	2300      	movs	r3, #0
 8003924:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800392a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003930:	463b      	mov	r3, r7
 8003932:	4619      	mov	r1, r3
 8003934:	4807      	ldr	r0, [pc, #28]	; (8003954 <MX_TIM16_Init+0xe8>)
 8003936:	f003 fe89 	bl	800764c <HAL_TIMEx_ConfigBreakDeadTime>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8003940:	f7fe fcda 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003944:	4803      	ldr	r0, [pc, #12]	; (8003954 <MX_TIM16_Init+0xe8>)
 8003946:	f000 f8cb 	bl	8003ae0 <HAL_TIM_MspPostInit>

}
 800394a:	bf00      	nop
 800394c:	3748      	adds	r7, #72	; 0x48
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200006f4 	.word	0x200006f4
 8003958:	40014400 	.word	0x40014400

0800395c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a38      	ldr	r2, [pc, #224]	; (8003a4c <HAL_TIM_Base_MspInit+0xf0>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d124      	bne.n	80039b8 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800396e:	4b38      	ldr	r3, [pc, #224]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003972:	4a37      	ldr	r2, [pc, #220]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003974:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003978:	6613      	str	r3, [r2, #96]	; 0x60
 800397a:	4b35      	ldr	r3, [pc, #212]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003986:	2200      	movs	r2, #0
 8003988:	2100      	movs	r1, #0
 800398a:	2018      	movs	r0, #24
 800398c:	f000 fb37 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003990:	2018      	movs	r0, #24
 8003992:	f000 fb50 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003996:	2200      	movs	r2, #0
 8003998:	2100      	movs	r1, #0
 800399a:	2019      	movs	r0, #25
 800399c:	f000 fb2f 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80039a0:	2019      	movs	r0, #25
 80039a2:	f000 fb48 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80039a6:	2200      	movs	r2, #0
 80039a8:	2100      	movs	r1, #0
 80039aa:	201b      	movs	r0, #27
 80039ac:	f000 fb27 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80039b0:	201b      	movs	r0, #27
 80039b2:	f000 fb40 	bl	8004036 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80039b6:	e044      	b.n	8003a42 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d114      	bne.n	80039ec <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 80039c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039c6:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6593      	str	r3, [r2, #88]	; 0x58
 80039ce:	4b20      	ldr	r3, [pc, #128]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	613b      	str	r3, [r7, #16]
 80039d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80039da:	2200      	movs	r2, #0
 80039dc:	2100      	movs	r1, #0
 80039de:	201c      	movs	r0, #28
 80039e0:	f000 fb0d 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80039e4:	201c      	movs	r0, #28
 80039e6:	f000 fb26 	bl	8004036 <HAL_NVIC_EnableIRQ>
}
 80039ea:	e02a      	b.n	8003a42 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a18      	ldr	r2, [pc, #96]	; (8003a54 <HAL_TIM_Base_MspInit+0xf8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d10c      	bne.n	8003a10 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039f6:	4b16      	ldr	r3, [pc, #88]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	4a15      	ldr	r2, [pc, #84]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 80039fc:	f043 0310 	orr.w	r3, r3, #16
 8003a00:	6593      	str	r3, [r2, #88]	; 0x58
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a06:	f003 0310 	and.w	r3, r3, #16
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	e018      	b.n	8003a42 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a10      	ldr	r2, [pc, #64]	; (8003a58 <HAL_TIM_Base_MspInit+0xfc>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d113      	bne.n	8003a42 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003a1a:	4b0d      	ldr	r3, [pc, #52]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003a1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a1e:	4a0c      	ldr	r2, [pc, #48]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003a20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a24:	6613      	str	r3, [r2, #96]	; 0x60
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_TIM_Base_MspInit+0xf4>)
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a32:	2200      	movs	r2, #0
 8003a34:	2100      	movs	r1, #0
 8003a36:	2019      	movs	r0, #25
 8003a38:	f000 fae1 	bl	8003ffe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a3c:	2019      	movs	r0, #25
 8003a3e:	f000 fafa 	bl	8004036 <HAL_NVIC_EnableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40001000 	.word	0x40001000
 8003a58:	40014400 	.word	0x40014400

08003a5c <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	f107 0314 	add.w	r3, r7, #20
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a17      	ldr	r2, [pc, #92]	; (8003ad8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d128      	bne.n	8003ad0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a82:	4a16      	ldr	r2, [pc, #88]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003a84:	f043 0302 	orr.w	r3, r3, #2
 8003a88:	6593      	str	r3, [r2, #88]	; 0x58
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8e:	f003 0302 	and.w	r3, r3, #2
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9a:	4a10      	ldr	r2, [pc, #64]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_TIM_Encoder_MspInit+0x80>)
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8003aae:	23c0      	movs	r3, #192	; 0xc0
 8003ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	2300      	movs	r3, #0
 8003abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003abe:	2302      	movs	r3, #2
 8003ac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac2:	f107 0314 	add.w	r3, r7, #20
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003acc:	f000 face 	bl	800406c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	3728      	adds	r7, #40	; 0x28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40021000 	.word	0x40021000

08003ae0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae8:	f107 0314 	add.w	r3, r7, #20
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	609a      	str	r2, [r3, #8]
 8003af4:	60da      	str	r2, [r3, #12]
 8003af6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a23      	ldr	r2, [pc, #140]	; (8003b8c <HAL_TIM_MspPostInit+0xac>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d11e      	bne.n	8003b40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b06:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b08:	f043 0301 	orr.w	r3, r3, #1
 8003b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b0e:	4b20      	ldr	r3, [pc, #128]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	613b      	str	r3, [r7, #16]
 8003b18:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EXT_STEP_Pin;
 8003b1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b20:	2302      	movs	r3, #2
 8003b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_STEP_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 0314 	add.w	r3, r7, #20
 8003b34:	4619      	mov	r1, r3
 8003b36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b3a:	f000 fa97 	bl	800406c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8003b3e:	e021      	b.n	8003b84 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <HAL_TIM_MspPostInit+0xb4>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d11c      	bne.n	8003b84 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4a:	4b11      	ldr	r3, [pc, #68]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b4e:	4a10      	ldr	r2, [pc, #64]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b50:	f043 0302 	orr.w	r3, r3, #2
 8003b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b56:	4b0e      	ldr	r3, [pc, #56]	; (8003b90 <HAL_TIM_MspPostInit+0xb0>)
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CUTT_PWM_Pin;
 8003b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b68:	2302      	movs	r3, #2
 8003b6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b70:	2300      	movs	r3, #0
 8003b72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8003b74:	230e      	movs	r3, #14
 8003b76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CUTT_PWM_GPIO_Port, &GPIO_InitStruct);
 8003b78:	f107 0314 	add.w	r3, r7, #20
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4806      	ldr	r0, [pc, #24]	; (8003b98 <HAL_TIM_MspPostInit+0xb8>)
 8003b80:	f000 fa74 	bl	800406c <HAL_GPIO_Init>
}
 8003b84:	bf00      	nop
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40012c00 	.word	0x40012c00
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	48000400 	.word	0x48000400

08003b9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ba0:	4b14      	ldr	r3, [pc, #80]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003ba2:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <MX_USART2_UART_Init+0x5c>)
 8003ba4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ba6:	4b13      	ldr	r3, [pc, #76]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003ba8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bae:	4b11      	ldr	r3, [pc, #68]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bb4:	4b0f      	ldr	r3, [pc, #60]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bba:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bc2:	220c      	movs	r2, #12
 8003bc4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bcc:	4b09      	ldr	r3, [pc, #36]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bce:	2200      	movs	r2, #0
 8003bd0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bd8:	4b06      	ldr	r3, [pc, #24]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003bde:	4805      	ldr	r0, [pc, #20]	; (8003bf4 <MX_USART2_UART_Init+0x58>)
 8003be0:	f003 fdca 	bl	8007778 <HAL_UART_Init>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003bea:	f7fe fb85 	bl	80022f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003bee:	bf00      	nop
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000740 	.word	0x20000740
 8003bf8:	40004400 	.word	0x40004400

08003bfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b0a4      	sub	sp, #144	; 0x90
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c14:	f107 0314 	add.w	r3, r7, #20
 8003c18:	2268      	movs	r2, #104	; 0x68
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f004 f9e7 	bl	8007ff0 <memset>
  if(uartHandle->Instance==USART2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a21      	ldr	r2, [pc, #132]	; (8003cac <HAL_UART_MspInit+0xb0>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d13a      	bne.n	8003ca2 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c30:	2300      	movs	r3, #0
 8003c32:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f001 fd65 	bl	8005708 <HAL_RCCEx_PeriphCLKConfig>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c44:	f7fe fb58 	bl	80022f8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c48:	4b19      	ldr	r3, [pc, #100]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4c:	4a18      	ldr	r2, [pc, #96]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c52:	6593      	str	r3, [r2, #88]	; 0x58
 8003c54:	4b16      	ldr	r3, [pc, #88]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c64:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c66:	f043 0301 	orr.w	r3, r3, #1
 8003c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c6c:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_UART_MspInit+0xb4>)
 8003c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003c78:	230c      	movs	r3, #12
 8003c7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c8e:	2307      	movs	r3, #7
 8003c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c94:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c9e:	f000 f9e5 	bl	800406c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003ca2:	bf00      	nop
 8003ca4:	3790      	adds	r7, #144	; 0x90
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	40004400 	.word	0x40004400
 8003cb0:	40021000 	.word	0x40021000

08003cb4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003cec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cb8:	f7ff fc1c 	bl	80034f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003cbc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003cbe:	e003      	b.n	8003cc8 <LoopCopyDataInit>

08003cc0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003cc2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003cc4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003cc6:	3104      	adds	r1, #4

08003cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003cc8:	480a      	ldr	r0, [pc, #40]	; (8003cf4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003cca:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003ccc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003cce:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003cd0:	d3f6      	bcc.n	8003cc0 <CopyDataInit>
	ldr	r2, =_sbss
 8003cd2:	4a0a      	ldr	r2, [pc, #40]	; (8003cfc <LoopForever+0x12>)
	b	LoopFillZerobss
 8003cd4:	e002      	b.n	8003cdc <LoopFillZerobss>

08003cd6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003cd6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003cd8:	f842 3b04 	str.w	r3, [r2], #4

08003cdc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <LoopForever+0x16>)
	cmp	r2, r3
 8003cde:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ce0:	d3f9      	bcc.n	8003cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ce2:	f004 f961 	bl	8007fa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ce6:	f7fe f9ff 	bl	80020e8 <main>

08003cea <LoopForever>:

LoopForever:
    b LoopForever
 8003cea:	e7fe      	b.n	8003cea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003cec:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003cf0:	08008a48 	.word	0x08008a48
	ldr	r0, =_sdata
 8003cf4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003cf8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003cfc:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003d00:	200007d8 	.word	0x200007d8

08003d04 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d04:	e7fe      	b.n	8003d04 <ADC1_IRQHandler>
	...

08003d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_Init+0x3c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <HAL_Init+0x3c>)
 8003d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d1c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f000 f962 	bl	8003fe8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d24:	2000      	movs	r0, #0
 8003d26:	f000 f80f 	bl	8003d48 <HAL_InitTick>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	71fb      	strb	r3, [r7, #7]
 8003d34:	e001      	b.n	8003d3a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d36:	f7ff fb23 	bl	8003380 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	40022000 	.word	0x40022000

08003d48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <HAL_InitTick+0x6c>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d023      	beq.n	8003da4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d5c:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_InitTick+0x70>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <HAL_InitTick+0x6c>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f96d 	bl	8004052 <HAL_SYSTICK_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10f      	bne.n	8003d9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b0f      	cmp	r3, #15
 8003d82:	d809      	bhi.n	8003d98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d84:	2200      	movs	r2, #0
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	f04f 30ff 	mov.w	r0, #4294967295
 8003d8c:	f000 f937 	bl	8003ffe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d90:	4a0a      	ldr	r2, [pc, #40]	; (8003dbc <HAL_InitTick+0x74>)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6013      	str	r3, [r2, #0]
 8003d96:	e007      	b.n	8003da8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e004      	b.n	8003da8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
 8003da2:	e001      	b.n	8003da8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	2000000c 	.word	0x2000000c
 8003db8:	20000004 	.word	0x20000004
 8003dbc:	20000008 	.word	0x20000008

08003dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <HAL_IncTick+0x20>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <HAL_IncTick+0x24>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4413      	add	r3, r2
 8003dd0:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <HAL_IncTick+0x24>)
 8003dd2:	6013      	str	r3, [r2, #0]
}
 8003dd4:	bf00      	nop
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	2000000c 	.word	0x2000000c
 8003de4:	200007c4 	.word	0x200007c4

08003de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return uwTick;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_GetTick+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	200007c4 	.word	0x200007c4

08003e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e08:	f7ff ffee 	bl	8003de8 <HAL_GetTick>
 8003e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e18:	d005      	beq.n	8003e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_Delay+0x44>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4413      	add	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e26:	bf00      	nop
 8003e28:	f7ff ffde 	bl	8003de8 <HAL_GetTick>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d8f7      	bhi.n	8003e28 <HAL_Delay+0x28>
  {
  }
}
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000000c 	.word	0x2000000c

08003e48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f003 0307 	and.w	r3, r3, #7
 8003e56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e58:	4b0c      	ldr	r3, [pc, #48]	; (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5e:	68ba      	ldr	r2, [r7, #8]
 8003e60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e64:	4013      	ands	r3, r2
 8003e66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e7a:	4a04      	ldr	r2, [pc, #16]	; (8003e8c <__NVIC_SetPriorityGrouping+0x44>)
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	60d3      	str	r3, [r2, #12]
}
 8003e80:	bf00      	nop
 8003e82:	3714      	adds	r7, #20
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000ed00 	.word	0xe000ed00

08003e90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	0a1b      	lsrs	r3, r3, #8
 8003e9a:	f003 0307 	and.w	r3, r3, #7
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	e000ed00 	.word	0xe000ed00

08003eac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	db0b      	blt.n	8003ed6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ebe:	79fb      	ldrb	r3, [r7, #7]
 8003ec0:	f003 021f 	and.w	r2, r3, #31
 8003ec4:	4907      	ldr	r1, [pc, #28]	; (8003ee4 <__NVIC_EnableIRQ+0x38>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2001      	movs	r0, #1
 8003ece:	fa00 f202 	lsl.w	r2, r0, r2
 8003ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	e000e100 	.word	0xe000e100

08003ee8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4603      	mov	r3, r0
 8003ef0:	6039      	str	r1, [r7, #0]
 8003ef2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db0a      	blt.n	8003f12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	490c      	ldr	r1, [pc, #48]	; (8003f34 <__NVIC_SetPriority+0x4c>)
 8003f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f06:	0112      	lsls	r2, r2, #4
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f10:	e00a      	b.n	8003f28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	b2da      	uxtb	r2, r3
 8003f16:	4908      	ldr	r1, [pc, #32]	; (8003f38 <__NVIC_SetPriority+0x50>)
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	f003 030f 	and.w	r3, r3, #15
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	0112      	lsls	r2, r2, #4
 8003f22:	b2d2      	uxtb	r2, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	761a      	strb	r2, [r3, #24]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr
 8003f34:	e000e100 	.word	0xe000e100
 8003f38:	e000ed00 	.word	0xe000ed00

08003f3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b089      	sub	sp, #36	; 0x24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f1c3 0307 	rsb	r3, r3, #7
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	bf28      	it	cs
 8003f5a:	2304      	movcs	r3, #4
 8003f5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	3304      	adds	r3, #4
 8003f62:	2b06      	cmp	r3, #6
 8003f64:	d902      	bls.n	8003f6c <NVIC_EncodePriority+0x30>
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3b03      	subs	r3, #3
 8003f6a:	e000      	b.n	8003f6e <NVIC_EncodePriority+0x32>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f70:	f04f 32ff 	mov.w	r2, #4294967295
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7a:	43da      	mvns	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	401a      	ands	r2, r3
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f84:	f04f 31ff 	mov.w	r1, #4294967295
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8e:	43d9      	mvns	r1, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f94:	4313      	orrs	r3, r2
         );
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3724      	adds	r7, #36	; 0x24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb4:	d301      	bcc.n	8003fba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e00f      	b.n	8003fda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fba:	4a0a      	ldr	r2, [pc, #40]	; (8003fe4 <SysTick_Config+0x40>)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc8:	f7ff ff8e 	bl	8003ee8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <SysTick_Config+0x40>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fd2:	4b04      	ldr	r3, [pc, #16]	; (8003fe4 <SysTick_Config+0x40>)
 8003fd4:	2207      	movs	r2, #7
 8003fd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	e000e010 	.word	0xe000e010

08003fe8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff29 	bl	8003e48 <__NVIC_SetPriorityGrouping>
}
 8003ff6:	bf00      	nop
 8003ff8:	3708      	adds	r7, #8
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b086      	sub	sp, #24
 8004002:	af00      	add	r7, sp, #0
 8004004:	4603      	mov	r3, r0
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004010:	f7ff ff3e 	bl	8003e90 <__NVIC_GetPriorityGrouping>
 8004014:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	6978      	ldr	r0, [r7, #20]
 800401c:	f7ff ff8e 	bl	8003f3c <NVIC_EncodePriority>
 8004020:	4602      	mov	r2, r0
 8004022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff ff5d 	bl	8003ee8 <__NVIC_SetPriority>
}
 800402e:	bf00      	nop
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b082      	sub	sp, #8
 800403a:	af00      	add	r7, sp, #0
 800403c:	4603      	mov	r3, r0
 800403e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff ff31 	bl	8003eac <__NVIC_EnableIRQ>
}
 800404a:	bf00      	nop
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff ffa2 	bl	8003fa4 <SysTick_Config>
 8004060:	4603      	mov	r3, r0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3708      	adds	r7, #8
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800406c:	b480      	push	{r7}
 800406e:	b087      	sub	sp, #28
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004076:	2300      	movs	r3, #0
 8004078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407a:	e154      	b.n	8004326 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa01 f303 	lsl.w	r3, r1, r3
 8004088:	4013      	ands	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8146 	beq.w	8004320 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d00b      	beq.n	80040b4 <HAL_GPIO_Init+0x48>
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d007      	beq.n	80040b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80040a8:	2b11      	cmp	r3, #17
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b12      	cmp	r3, #18
 80040b2:	d130      	bne.n	8004116 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	005b      	lsls	r3, r3, #1
 80040be:	2203      	movs	r2, #3
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	43db      	mvns	r3, r3
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	4013      	ands	r3, r2
 80040ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	68da      	ldr	r2, [r3, #12]
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	fa02 f303 	lsl.w	r3, r2, r3
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040ea:	2201      	movs	r2, #1
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	4013      	ands	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	091b      	lsrs	r3, r3, #4
 8004100:	f003 0201 	and.w	r2, r3, #1
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	693a      	ldr	r2, [r7, #16]
 8004114:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	005b      	lsls	r3, r3, #1
 8004120:	2203      	movs	r2, #3
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43db      	mvns	r3, r3
 8004128:	693a      	ldr	r2, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689a      	ldr	r2, [r3, #8]
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d003      	beq.n	8004156 <HAL_GPIO_Init+0xea>
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b12      	cmp	r3, #18
 8004154:	d123      	bne.n	800419e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	08da      	lsrs	r2, r3, #3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3208      	adds	r2, #8
 800415e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004162:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	220f      	movs	r2, #15
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43db      	mvns	r3, r3
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4013      	ands	r3, r2
 8004178:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	691a      	ldr	r2, [r3, #16]
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	4313      	orrs	r3, r2
 800418e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	08da      	lsrs	r2, r3, #3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3208      	adds	r2, #8
 8004198:	6939      	ldr	r1, [r7, #16]
 800419a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	2203      	movs	r2, #3
 80041aa:	fa02 f303 	lsl.w	r3, r2, r3
 80041ae:	43db      	mvns	r3, r3
 80041b0:	693a      	ldr	r2, [r7, #16]
 80041b2:	4013      	ands	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	f003 0203 	and.w	r2, r3, #3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f000 80a0 	beq.w	8004320 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041e0:	4b58      	ldr	r3, [pc, #352]	; (8004344 <HAL_GPIO_Init+0x2d8>)
 80041e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e4:	4a57      	ldr	r2, [pc, #348]	; (8004344 <HAL_GPIO_Init+0x2d8>)
 80041e6:	f043 0301 	orr.w	r3, r3, #1
 80041ea:	6613      	str	r3, [r2, #96]	; 0x60
 80041ec:	4b55      	ldr	r3, [pc, #340]	; (8004344 <HAL_GPIO_Init+0x2d8>)
 80041ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041f0:	f003 0301 	and.w	r3, r3, #1
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80041f8:	4a53      	ldr	r2, [pc, #332]	; (8004348 <HAL_GPIO_Init+0x2dc>)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	089b      	lsrs	r3, r3, #2
 80041fe:	3302      	adds	r3, #2
 8004200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	220f      	movs	r2, #15
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	43db      	mvns	r3, r3
 8004216:	693a      	ldr	r2, [r7, #16]
 8004218:	4013      	ands	r3, r2
 800421a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004222:	d019      	beq.n	8004258 <HAL_GPIO_Init+0x1ec>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a49      	ldr	r2, [pc, #292]	; (800434c <HAL_GPIO_Init+0x2e0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d013      	beq.n	8004254 <HAL_GPIO_Init+0x1e8>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a48      	ldr	r2, [pc, #288]	; (8004350 <HAL_GPIO_Init+0x2e4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d00d      	beq.n	8004250 <HAL_GPIO_Init+0x1e4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4a47      	ldr	r2, [pc, #284]	; (8004354 <HAL_GPIO_Init+0x2e8>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d007      	beq.n	800424c <HAL_GPIO_Init+0x1e0>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a46      	ldr	r2, [pc, #280]	; (8004358 <HAL_GPIO_Init+0x2ec>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d101      	bne.n	8004248 <HAL_GPIO_Init+0x1dc>
 8004244:	2304      	movs	r3, #4
 8004246:	e008      	b.n	800425a <HAL_GPIO_Init+0x1ee>
 8004248:	2307      	movs	r3, #7
 800424a:	e006      	b.n	800425a <HAL_GPIO_Init+0x1ee>
 800424c:	2303      	movs	r3, #3
 800424e:	e004      	b.n	800425a <HAL_GPIO_Init+0x1ee>
 8004250:	2302      	movs	r3, #2
 8004252:	e002      	b.n	800425a <HAL_GPIO_Init+0x1ee>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <HAL_GPIO_Init+0x1ee>
 8004258:	2300      	movs	r3, #0
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	f002 0203 	and.w	r2, r2, #3
 8004260:	0092      	lsls	r2, r2, #2
 8004262:	4093      	lsls	r3, r2
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800426a:	4937      	ldr	r1, [pc, #220]	; (8004348 <HAL_GPIO_Init+0x2dc>)
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	089b      	lsrs	r3, r3, #2
 8004270:	3302      	adds	r3, #2
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004278:	4b38      	ldr	r3, [pc, #224]	; (800435c <HAL_GPIO_Init+0x2f0>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	43db      	mvns	r3, r3
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800429c:	4a2f      	ldr	r2, [pc, #188]	; (800435c <HAL_GPIO_Init+0x2f0>)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80042a2:	4b2e      	ldr	r3, [pc, #184]	; (800435c <HAL_GPIO_Init+0x2f0>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	43db      	mvns	r3, r3
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4013      	ands	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d003      	beq.n	80042c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80042c6:	4a25      	ldr	r2, [pc, #148]	; (800435c <HAL_GPIO_Init+0x2f0>)
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80042cc:	4b23      	ldr	r3, [pc, #140]	; (800435c <HAL_GPIO_Init+0x2f0>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	43db      	mvns	r3, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	4013      	ands	r3, r2
 80042da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80042e8:	693a      	ldr	r2, [r7, #16]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <HAL_GPIO_Init+0x2f0>)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042f6:	4b19      	ldr	r3, [pc, #100]	; (800435c <HAL_GPIO_Init+0x2f0>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	43db      	mvns	r3, r3
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4013      	ands	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800431a:	4a10      	ldr	r2, [pc, #64]	; (800435c <HAL_GPIO_Init+0x2f0>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3301      	adds	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f aea3 	bne.w	800407c <HAL_GPIO_Init+0x10>
  }
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40021000 	.word	0x40021000
 8004348:	40010000 	.word	0x40010000
 800434c:	48000400 	.word	0x48000400
 8004350:	48000800 	.word	0x48000800
 8004354:	48000c00 	.word	0x48000c00
 8004358:	48001000 	.word	0x48001000
 800435c:	40010400 	.word	0x40010400

08004360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	887b      	ldrh	r3, [r7, #2]
 8004372:	4013      	ands	r3, r2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004378:	2301      	movs	r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
 800437c:	e001      	b.n	8004382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800437e:	2300      	movs	r3, #0
 8004380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004382:	7bfb      	ldrb	r3, [r7, #15]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3714      	adds	r7, #20
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr

08004390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	460b      	mov	r3, r1
 800439a:	807b      	strh	r3, [r7, #2]
 800439c:	4613      	mov	r3, r2
 800439e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043a0:	787b      	ldrb	r3, [r7, #1]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043a6:	887a      	ldrh	r2, [r7, #2]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043ac:	e002      	b.n	80043b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043ae:	887a      	ldrh	r2, [r7, #2]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043b4:	bf00      	nop
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e08f      	b.n	80044f2 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fd fe15 	bl	800201c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d004      	beq.n	8004414 <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004412:	d103      	bne.n	800441c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 031e 	bic.w	r3, r3, #30
 800441a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004424:	4293      	cmp	r3, r2
 8004426:	d005      	beq.n	8004434 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800442e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004432:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4b31      	ldr	r3, [pc, #196]	; (80044fc <HAL_LPTIM_Init+0x13c>)
 8004438:	4013      	ands	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004444:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800444a:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8004450:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8004456:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d107      	bne.n	8004476 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800446e:	4313      	orrs	r3, r2
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b01      	cmp	r3, #1
 800447c:	d004      	beq.n	8004488 <HAL_LPTIM_Init+0xc8>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004486:	d107      	bne.n	8004498 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8004490:	4313      	orrs	r3, r2
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4313      	orrs	r3, r2
 8004496:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00a      	beq.n	80044ba <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044ac:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80044b2:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <HAL_LPTIM_Init+0x140>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d108      	bne.n	80044de <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	621a      	str	r2, [r3, #32]
 80044dc:	e004      	b.n	80044e8 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044e6:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	ff19f1fe 	.word	0xff19f1fe
 8004500:	40007c00 	.word	0x40007c00

08004504 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2202      	movs	r2, #2
 8004512:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f023 0306 	bic.w	r3, r3, #6
 8004524:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	4313      	orrs	r3, r2
 800452e:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68fa      	ldr	r2, [r7, #12]
 8004536:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004546:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691a      	ldr	r2, [r3, #16]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2210      	movs	r2, #16
 800455e:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004568:	2110      	movs	r1, #16
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 f91e 	bl	80047ac <LPTIM_WaitForFlag>
 8004570:	4603      	mov	r3, r0
 8004572:	2b03      	cmp	r3, #3
 8004574:	d101      	bne.n	800457a <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e02f      	b.n	80045da <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 f946 	bl	800480c <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f905 	bl	8004790 <HAL_LPTIM_GetState>
 8004586:	4603      	mov	r3, r0
 8004588:	2b03      	cmp	r3, #3
 800458a:	d101      	bne.n	8004590 <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e024      	b.n	80045da <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800459e:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0220 	orr.w	r2, r2, #32
 80045ae:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691a      	ldr	r2, [r3, #16]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	691a      	ldr	r2, [r3, #16]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0204 	orr.w	r2, r2, #4
 80045ce:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3710      	adds	r7, #16
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}

080045e2 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d10d      	bne.n	8004614 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b01      	cmp	r3, #1
 8004604:	d106      	bne.n	8004614 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2201      	movs	r2, #1
 800460c:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f882 	bl	8004718 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d10d      	bne.n	800463e <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	d106      	bne.n	800463e <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2202      	movs	r2, #2
 8004636:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fd fe07 	bl	800224c <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d10d      	bne.n	8004668 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d106      	bne.n	8004668 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2204      	movs	r2, #4
 8004660:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f862 	bl	800472c <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b08      	cmp	r3, #8
 8004674:	d10d      	bne.n	8004692 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f003 0308 	and.w	r3, r3, #8
 8004680:	2b08      	cmp	r3, #8
 8004682:	d106      	bne.n	8004692 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2208      	movs	r2, #8
 800468a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f857 	bl	8004740 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d10d      	bne.n	80046bc <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b10      	cmp	r3, #16
 80046ac:	d106      	bne.n	80046bc <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2210      	movs	r2, #16
 80046b4:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f84c 	bl	8004754 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b20      	cmp	r3, #32
 80046c8:	d10d      	bne.n	80046e6 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b20      	cmp	r3, #32
 80046d6:	d106      	bne.n	80046e6 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2220      	movs	r2, #32
 80046de:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f841 	bl	8004768 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b40      	cmp	r3, #64	; 0x40
 80046f2:	d10d      	bne.n	8004710 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fe:	2b40      	cmp	r3, #64	; 0x40
 8004700:	d106      	bne.n	8004710 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f836 	bl	800477c <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8004720:	bf00      	nop
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8004770:	bf00      	nop
 8004772:	370c      	adds	r7, #12
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800479e:	b2db      	uxtb	r3, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80047ba:	4b12      	ldr	r3, [pc, #72]	; (8004804 <LPTIM_WaitForFlag+0x58>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a12      	ldr	r2, [pc, #72]	; (8004808 <LPTIM_WaitForFlag+0x5c>)
 80047c0:	fba2 2303 	umull	r2, r3, r2, r3
 80047c4:	0b9b      	lsrs	r3, r3, #14
 80047c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047ca:	fb02 f303 	mul.w	r3, r2, r3
 80047ce:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	4013      	ands	r3, r2
 80047ea:	683a      	ldr	r2, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d002      	beq.n	80047f6 <LPTIM_WaitForFlag+0x4a>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1ec      	bne.n	80047d0 <LPTIM_WaitForFlag+0x24>

  return result;
 80047f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	20000004 	.word	0x20000004
 8004808:	d1b71759 	.word	0xd1b71759

0800480c <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8004814:	2300      	movs	r3, #0
 8004816:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8004818:	b672      	cpsid	i
}
 800481a:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a71      	ldr	r2, [pc, #452]	; (80049e8 <LPTIM_Disable+0x1dc>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d003      	beq.n	800482e <LPTIM_Disable+0x22>
 8004826:	4a71      	ldr	r2, [pc, #452]	; (80049ec <LPTIM_Disable+0x1e0>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d007      	beq.n	800483c <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 800482c:	e00d      	b.n	800484a <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 800482e:	4b70      	ldr	r3, [pc, #448]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004838:	61fb      	str	r3, [r7, #28]
      break;
 800483a:	e006      	b.n	800484a <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800483c:	4b6c      	ldr	r3, [pc, #432]	; (80049f0 <LPTIM_Disable+0x1e4>)
 800483e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004842:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004846:	61fb      	str	r3, [r7, #28]
      break;
 8004848:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	60fb      	str	r3, [r7, #12]
  tmpOR = hlptim->Instance->OR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	60bb      	str	r3, [r7, #8]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <LPTIM_Disable+0x1dc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <LPTIM_Disable+0x78>
 800487c:	4a5b      	ldr	r2, [pc, #364]	; (80049ec <LPTIM_Disable+0x1e0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00d      	beq.n	800489e <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8004882:	e019      	b.n	80048b8 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8004884:	4b5a      	ldr	r3, [pc, #360]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	4a59      	ldr	r2, [pc, #356]	; (80049f0 <LPTIM_Disable+0x1e4>)
 800488a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800488e:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8004890:	4b57      	ldr	r3, [pc, #348]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4a56      	ldr	r2, [pc, #344]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800489a:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 800489c:	e00c      	b.n	80048b8 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 800489e:	4b54      	ldr	r3, [pc, #336]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048a2:	4a53      	ldr	r2, [pc, #332]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048a4:	f043 0320 	orr.w	r3, r3, #32
 80048a8:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80048aa:	4b51      	ldr	r3, [pc, #324]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ae:	4a50      	ldr	r2, [pc, #320]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048b0:	f023 0320 	bic.w	r3, r3, #32
 80048b4:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 80048b6:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <LPTIM_Disable+0xb8>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d075      	beq.n	80049b0 <LPTIM_Disable+0x1a4>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a47      	ldr	r2, [pc, #284]	; (80049e8 <LPTIM_Disable+0x1dc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <LPTIM_Disable+0xca>
 80048ce:	4a47      	ldr	r2, [pc, #284]	; (80049ec <LPTIM_Disable+0x1e0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d009      	beq.n	80048e8 <LPTIM_Disable+0xdc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 80048d4:	e011      	b.n	80048fa <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 80048d6:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	4a44      	ldr	r2, [pc, #272]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048de:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80048e2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 80048e6:	e008      	b.n	80048fa <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 80048e8:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ee:	4a40      	ldr	r2, [pc, #256]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80048f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80048f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 80048f8:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d01a      	beq.n	8004936 <LPTIM_Disable+0x12a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8004918:	2108      	movs	r1, #8
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7ff ff46 	bl	80047ac <LPTIM_WaitForFlag>
 8004920:	4603      	mov	r3, r0
 8004922:	2b03      	cmp	r3, #3
 8004924:	d103      	bne.n	800492e <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2203      	movs	r2, #3
 800492a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2208      	movs	r2, #8
 8004934:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <LPTIM_Disable+0x166>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691a      	ldr	r2, [r3, #16]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68fa      	ldr	r2, [r7, #12]
 8004952:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8004954:	2110      	movs	r1, #16
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f7ff ff28 	bl	80047ac <LPTIM_WaitForFlag>
 800495c:	4603      	mov	r3, r0
 800495e:	2b03      	cmp	r3, #3
 8004960:	d103      	bne.n	800496a <LPTIM_Disable+0x15e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2203      	movs	r2, #3
 8004966:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2210      	movs	r2, #16
 8004970:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a1c      	ldr	r2, [pc, #112]	; (80049e8 <LPTIM_Disable+0x1dc>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <LPTIM_Disable+0x178>
 800497c:	4a1b      	ldr	r2, [pc, #108]	; (80049ec <LPTIM_Disable+0x1e0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d00b      	beq.n	800499a <LPTIM_Disable+0x18e>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8004982:	e016      	b.n	80049b2 <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8004984:	4b1a      	ldr	r3, [pc, #104]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800498e:	4918      	ldr	r1, [pc, #96]	; (80049f0 <LPTIM_Disable+0x1e4>)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8004998:	e00b      	b.n	80049b2 <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 800499a:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <LPTIM_Disable+0x1e4>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049a4:	4912      	ldr	r1, [pc, #72]	; (80049f0 <LPTIM_Disable+0x1e4>)
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 80049ae:	e000      	b.n	80049b2 <LPTIM_Disable+0x1a6>
    }
  }
 80049b0:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0201 	bic.w	r2, r2, #1
 80049c0:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	69ba      	ldr	r2, [r7, #24]
 80049c8:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 80049da:	b662      	cpsie	i
}
 80049dc:	bf00      	nop

  __enable_irq();
}
 80049de:	bf00      	nop
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40007c00 	.word	0x40007c00
 80049ec:	40009400 	.word	0x40009400
 80049f0:	40021000 	.word	0x40021000

080049f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80049f4:	b480      	push	{r7}
 80049f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40007000 	.word	0x40007000

08004a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a1e:	d130      	bne.n	8004a82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a20:	4b23      	ldr	r3, [pc, #140]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a2c:	d038      	beq.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a2e:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a36:	4a1e      	ldr	r2, [pc, #120]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2232      	movs	r2, #50	; 0x32
 8004a44:	fb02 f303 	mul.w	r3, r2, r3
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a4e:	0c9b      	lsrs	r3, r3, #18
 8004a50:	3301      	adds	r3, #1
 8004a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a54:	e002      	b.n	8004a5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a68:	d102      	bne.n	8004a70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d1f2      	bne.n	8004a56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a70:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7c:	d110      	bne.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e00f      	b.n	8004aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a8e:	d007      	beq.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a90:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40007000 	.word	0x40007000
 8004ab4:	20000004 	.word	0x20000004
 8004ab8:	431bde83 	.word	0x431bde83

08004abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d102      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	f000 bc11 	b.w	80052f2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ad0:	4ba0      	ldr	r3, [pc, #640]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ada:	4b9e      	ldr	r3, [pc, #632]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f000 80e4 	beq.w	8004cba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_RCC_OscConfig+0x4c>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	f040 808b 	bne.w	8004c16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	f040 8087 	bne.w	8004c16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b08:	4b92      	ldr	r3, [pc, #584]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_OscConfig+0x64>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e3e8      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a1a      	ldr	r2, [r3, #32]
 8004b24:	4b8b      	ldr	r3, [pc, #556]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0308 	and.w	r3, r3, #8
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d004      	beq.n	8004b3a <HAL_RCC_OscConfig+0x7e>
 8004b30:	4b88      	ldr	r3, [pc, #544]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b38:	e005      	b.n	8004b46 <HAL_RCC_OscConfig+0x8a>
 8004b3a:	4b86      	ldr	r3, [pc, #536]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d223      	bcs.n	8004b92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6a1b      	ldr	r3, [r3, #32]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd7a 	bl	8005648 <RCC_SetFlashLatencyFromMSIRange>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e3c9      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b5e:	4b7d      	ldr	r3, [pc, #500]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a7c      	ldr	r2, [pc, #496]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4977      	ldr	r1, [pc, #476]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b7c:	4b75      	ldr	r3, [pc, #468]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	4972      	ldr	r1, [pc, #456]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	604b      	str	r3, [r1, #4]
 8004b90:	e025      	b.n	8004bde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b92:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a6f      	ldr	r2, [pc, #444]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004b98:	f043 0308 	orr.w	r3, r3, #8
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b6d      	ldr	r3, [pc, #436]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	496a      	ldr	r1, [pc, #424]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bb0:	4b68      	ldr	r3, [pc, #416]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	4965      	ldr	r1, [pc, #404]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d109      	bne.n	8004bde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 fd3a 	bl	8005648 <RCC_SetFlashLatencyFromMSIRange>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e389      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bde:	f000 fc6f 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8004be2:	4602      	mov	r2, r0
 8004be4:	4b5b      	ldr	r3, [pc, #364]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	091b      	lsrs	r3, r3, #4
 8004bea:	f003 030f 	and.w	r3, r3, #15
 8004bee:	495a      	ldr	r1, [pc, #360]	; (8004d58 <HAL_RCC_OscConfig+0x29c>)
 8004bf0:	5ccb      	ldrb	r3, [r1, r3]
 8004bf2:	f003 031f 	and.w	r3, r3, #31
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_OscConfig+0x2a0>)
 8004bfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004bfe:	4b58      	ldr	r3, [pc, #352]	; (8004d60 <HAL_RCC_OscConfig+0x2a4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7ff f8a0 	bl	8003d48 <HAL_InitTick>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d052      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	e36d      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d032      	beq.n	8004c84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c1e:	4b4d      	ldr	r3, [pc, #308]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4c      	ldr	r2, [pc, #304]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c2a:	f7ff f8dd 	bl	8003de8 <HAL_GetTick>
 8004c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c30:	e008      	b.n	8004c44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c32:	f7ff f8d9 	bl	8003de8 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e356      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c50:	4b40      	ldr	r3, [pc, #256]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a3f      	ldr	r2, [pc, #252]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c56:	f043 0308 	orr.w	r3, r3, #8
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	4b3d      	ldr	r3, [pc, #244]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	493a      	ldr	r1, [pc, #232]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c6e:	4b39      	ldr	r3, [pc, #228]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	021b      	lsls	r3, r3, #8
 8004c7c:	4935      	ldr	r1, [pc, #212]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	604b      	str	r3, [r1, #4]
 8004c82:	e01a      	b.n	8004cba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004c84:	4b33      	ldr	r3, [pc, #204]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a32      	ldr	r2, [pc, #200]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004c8a:	f023 0301 	bic.w	r3, r3, #1
 8004c8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c90:	f7ff f8aa 	bl	8003de8 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c98:	f7ff f8a6 	bl	8003de8 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e323      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x1dc>
 8004cb6:	e000      	b.n	8004cba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d073      	beq.n	8004dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d005      	beq.n	8004cd8 <HAL_RCC_OscConfig+0x21c>
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b0c      	cmp	r3, #12
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b03      	cmp	r3, #3
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d063      	beq.n	8004dac <HAL_RCC_OscConfig+0x2f0>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d15f      	bne.n	8004dac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e300      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cf8:	d106      	bne.n	8004d08 <HAL_RCC_OscConfig+0x24c>
 8004cfa:	4b16      	ldr	r3, [pc, #88]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a15      	ldr	r2, [pc, #84]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	e01d      	b.n	8004d44 <HAL_RCC_OscConfig+0x288>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d10:	d10c      	bne.n	8004d2c <HAL_RCC_OscConfig+0x270>
 8004d12:	4b10      	ldr	r3, [pc, #64]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a0f      	ldr	r2, [pc, #60]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a0c      	ldr	r2, [pc, #48]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	e00b      	b.n	8004d44 <HAL_RCC_OscConfig+0x288>
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <HAL_RCC_OscConfig+0x298>)
 8004d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01b      	beq.n	8004d84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d4c:	f7ff f84c 	bl	8003de8 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d52:	e010      	b.n	8004d76 <HAL_RCC_OscConfig+0x2ba>
 8004d54:	40021000 	.word	0x40021000
 8004d58:	080089bc 	.word	0x080089bc
 8004d5c:	20000004 	.word	0x20000004
 8004d60:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d64:	f7ff f840 	bl	8003de8 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e2bd      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d76:	4baf      	ldr	r3, [pc, #700]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCC_OscConfig+0x2a8>
 8004d82:	e014      	b.n	8004dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7ff f830 	bl	8003de8 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7ff f82c 	bl	8003de8 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e2a9      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9e:	4ba5      	ldr	r3, [pc, #660]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f0      	bne.n	8004d8c <HAL_RCC_OscConfig+0x2d0>
 8004daa:	e000      	b.n	8004dae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d060      	beq.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d005      	beq.n	8004dcc <HAL_RCC_OscConfig+0x310>
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	2b0c      	cmp	r3, #12
 8004dc4:	d119      	bne.n	8004dfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d116      	bne.n	8004dfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dcc:	4b99      	ldr	r3, [pc, #612]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_OscConfig+0x328>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e286      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004de4:	4b93      	ldr	r3, [pc, #588]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	061b      	lsls	r3, r3, #24
 8004df2:	4990      	ldr	r1, [pc, #576]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df8:	e040      	b.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d023      	beq.n	8004e4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e02:	4b8c      	ldr	r3, [pc, #560]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a8b      	ldr	r2, [pc, #556]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7fe ffeb 	bl	8003de8 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e16:	f7fe ffe7 	bl	8003de8 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e264      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e28:	4b82      	ldr	r3, [pc, #520]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d0f0      	beq.n	8004e16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e34:	4b7f      	ldr	r3, [pc, #508]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	061b      	lsls	r3, r3, #24
 8004e42:	497c      	ldr	r1, [pc, #496]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	604b      	str	r3, [r1, #4]
 8004e48:	e018      	b.n	8004e7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e4a:	4b7a      	ldr	r3, [pc, #488]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a79      	ldr	r2, [pc, #484]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e56:	f7fe ffc7 	bl	8003de8 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e5c:	e008      	b.n	8004e70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e5e:	f7fe ffc3 	bl	8003de8 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d901      	bls.n	8004e70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e6c:	2303      	movs	r3, #3
 8004e6e:	e240      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e70:	4b70      	ldr	r3, [pc, #448]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f0      	bne.n	8004e5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0308 	and.w	r3, r3, #8
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d03c      	beq.n	8004f02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01c      	beq.n	8004eca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e90:	4b68      	ldr	r3, [pc, #416]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e96:	4a67      	ldr	r2, [pc, #412]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fe ffa2 	bl	8003de8 <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ea8:	f7fe ff9e 	bl	8003de8 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e21b      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004eba:	4b5e      	ldr	r3, [pc, #376]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ef      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x3ec>
 8004ec8:	e01b      	b.n	8004f02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eca:	4b5a      	ldr	r3, [pc, #360]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ed0:	4a58      	ldr	r2, [pc, #352]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fe ff85 	bl	8003de8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ee2:	f7fe ff81 	bl	8003de8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e1fe      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ef4:	4b4f      	ldr	r3, [pc, #316]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1ef      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0304 	and.w	r3, r3, #4
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f000 80a6 	beq.w	800505c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f10:	2300      	movs	r3, #0
 8004f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f14:	4b47      	ldr	r3, [pc, #284]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d10d      	bne.n	8004f3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f20:	4b44      	ldr	r3, [pc, #272]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	4a43      	ldr	r2, [pc, #268]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8004f2c:	4b41      	ldr	r3, [pc, #260]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	; (8005038 <HAL_RCC_OscConfig+0x57c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d118      	bne.n	8004f7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f48:	4b3b      	ldr	r3, [pc, #236]	; (8005038 <HAL_RCC_OscConfig+0x57c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a3a      	ldr	r2, [pc, #232]	; (8005038 <HAL_RCC_OscConfig+0x57c>)
 8004f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f54:	f7fe ff48 	bl	8003de8 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f5c:	f7fe ff44 	bl	8003de8 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e1c1      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f6e:	4b32      	ldr	r3, [pc, #200]	; (8005038 <HAL_RCC_OscConfig+0x57c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d0f0      	beq.n	8004f5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d108      	bne.n	8004f94 <HAL_RCC_OscConfig+0x4d8>
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f88:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f92:	e024      	b.n	8004fde <HAL_RCC_OscConfig+0x522>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d110      	bne.n	8004fbe <HAL_RCC_OscConfig+0x502>
 8004f9c:	4b25      	ldr	r3, [pc, #148]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fa4:	f043 0304 	orr.w	r3, r3, #4
 8004fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fac:	4b21      	ldr	r3, [pc, #132]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb2:	4a20      	ldr	r2, [pc, #128]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fb4:	f043 0301 	orr.w	r3, r3, #1
 8004fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fbc:	e00f      	b.n	8004fde <HAL_RCC_OscConfig+0x522>
 8004fbe:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc4:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fc6:	f023 0301 	bic.w	r3, r3, #1
 8004fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fce:	4b19      	ldr	r3, [pc, #100]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	4a17      	ldr	r2, [pc, #92]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8004fd6:	f023 0304 	bic.w	r3, r3, #4
 8004fda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d016      	beq.n	8005014 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fe6:	f7fe feff 	bl	8003de8 <HAL_GetTick>
 8004fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fec:	e00a      	b.n	8005004 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fee:	f7fe fefb 	bl	8003de8 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e176      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005004:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_RCC_OscConfig+0x578>)
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ed      	beq.n	8004fee <HAL_RCC_OscConfig+0x532>
 8005012:	e01a      	b.n	800504a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005014:	f7fe fee8 	bl	8003de8 <HAL_GetTick>
 8005018:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800501a:	e00f      	b.n	800503c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800501c:	f7fe fee4 	bl	8003de8 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	f241 3288 	movw	r2, #5000	; 0x1388
 800502a:	4293      	cmp	r3, r2
 800502c:	d906      	bls.n	800503c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800502e:	2303      	movs	r3, #3
 8005030:	e15f      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800503c:	4baa      	ldr	r3, [pc, #680]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800503e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1e8      	bne.n	800501c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800504a:	7ffb      	ldrb	r3, [r7, #31]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d105      	bne.n	800505c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005050:	4ba5      	ldr	r3, [pc, #660]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005054:	4aa4      	ldr	r2, [pc, #656]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800505a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d03c      	beq.n	80050e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b00      	cmp	r3, #0
 800506e:	d01c      	beq.n	80050aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005070:	4b9d      	ldr	r3, [pc, #628]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005076:	4a9c      	ldr	r2, [pc, #624]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005078:	f043 0301 	orr.w	r3, r3, #1
 800507c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005080:	f7fe feb2 	bl	8003de8 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005088:	f7fe feae 	bl	8003de8 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e12b      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800509a:	4b93      	ldr	r3, [pc, #588]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800509c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d0ef      	beq.n	8005088 <HAL_RCC_OscConfig+0x5cc>
 80050a8:	e01b      	b.n	80050e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80050aa:	4b8f      	ldr	r3, [pc, #572]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80050ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050b0:	4a8d      	ldr	r2, [pc, #564]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ba:	f7fe fe95 	bl	8003de8 <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050c2:	f7fe fe91 	bl	8003de8 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b02      	cmp	r3, #2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e10e      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80050d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ef      	bne.n	80050c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	f000 8102 	beq.w	80052f0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f040 80c5 	bne.w	8005280 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80050f6:	4b7c      	ldr	r3, [pc, #496]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f003 0203 	and.w	r2, r3, #3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005106:	429a      	cmp	r2, r3
 8005108:	d12c      	bne.n	8005164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	3b01      	subs	r3, #1
 8005116:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005118:	429a      	cmp	r2, r3
 800511a:	d123      	bne.n	8005164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005126:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d11b      	bne.n	8005164 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005136:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d113      	bne.n	8005164 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	085b      	lsrs	r3, r3, #1
 8005148:	3b01      	subs	r3, #1
 800514a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800514c:	429a      	cmp	r2, r3
 800514e:	d109      	bne.n	8005164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	3b01      	subs	r3, #1
 800515e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005160:	429a      	cmp	r2, r3
 8005162:	d067      	beq.n	8005234 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005164:	69bb      	ldr	r3, [r7, #24]
 8005166:	2b0c      	cmp	r3, #12
 8005168:	d062      	beq.n	8005230 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800516a:	4b5f      	ldr	r3, [pc, #380]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e0bb      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800517a:	4b5b      	ldr	r3, [pc, #364]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5a      	ldr	r2, [pc, #360]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005184:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005186:	f7fe fe2f 	bl	8003de8 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800518e:	f7fe fe2b 	bl	8003de8 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e0a8      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051a0:	4b51      	ldr	r3, [pc, #324]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80051ac:	4b4e      	ldr	r3, [pc, #312]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	4b4e      	ldr	r3, [pc, #312]	; (80052ec <HAL_RCC_OscConfig+0x830>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051bc:	3a01      	subs	r2, #1
 80051be:	0112      	lsls	r2, r2, #4
 80051c0:	4311      	orrs	r1, r2
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c6:	0212      	lsls	r2, r2, #8
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80051ce:	0852      	lsrs	r2, r2, #1
 80051d0:	3a01      	subs	r2, #1
 80051d2:	0552      	lsls	r2, r2, #21
 80051d4:	4311      	orrs	r1, r2
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80051da:	0852      	lsrs	r2, r2, #1
 80051dc:	3a01      	subs	r2, #1
 80051de:	0652      	lsls	r2, r2, #25
 80051e0:	4311      	orrs	r1, r2
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80051e6:	06d2      	lsls	r2, r2, #27
 80051e8:	430a      	orrs	r2, r1
 80051ea:	493f      	ldr	r1, [pc, #252]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051f0:	4b3d      	ldr	r3, [pc, #244]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a3c      	ldr	r2, [pc, #240]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	4a39      	ldr	r2, [pc, #228]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005208:	f7fe fdee 	bl	8003de8 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005210:	f7fe fdea 	bl	8003de8 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e067      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005222:	4b31      	ldr	r3, [pc, #196]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0f0      	beq.n	8005210 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800522e:	e05f      	b.n	80052f0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e05e      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d157      	bne.n	80052f0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005240:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a28      	ldr	r2, [pc, #160]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005246:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800524c:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005252:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005256:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005258:	f7fe fdc6 	bl	8003de8 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800525e:	e008      	b.n	8005272 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005260:	f7fe fdc2 	bl	8003de8 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	2b02      	cmp	r3, #2
 800526c:	d901      	bls.n	8005272 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e03f      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005272:	4b1d      	ldr	r3, [pc, #116]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d0f0      	beq.n	8005260 <HAL_RCC_OscConfig+0x7a4>
 800527e:	e037      	b.n	80052f0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d02d      	beq.n	80052e2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a17      	ldr	r2, [pc, #92]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 800528c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005290:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d105      	bne.n	80052aa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800529e:	4b12      	ldr	r3, [pc, #72]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4a11      	ldr	r2, [pc, #68]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80052a4:	f023 0303 	bic.w	r3, r3, #3
 80052a8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4a0e      	ldr	r2, [pc, #56]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80052b0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80052b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ba:	f7fe fd95 	bl	8003de8 <HAL_GetTick>
 80052be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052c0:	e008      	b.n	80052d4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c2:	f7fe fd91 	bl	8003de8 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	2b02      	cmp	r3, #2
 80052ce:	d901      	bls.n	80052d4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e00e      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d4:	4b04      	ldr	r3, [pc, #16]	; (80052e8 <HAL_RCC_OscConfig+0x82c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1f0      	bne.n	80052c2 <HAL_RCC_OscConfig+0x806>
 80052e0:	e006      	b.n	80052f0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e005      	b.n	80052f2 <HAL_RCC_OscConfig+0x836>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
 80052ec:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3720      	adds	r7, #32
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop

080052fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e0c8      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b66      	ldr	r3, [pc, #408]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d910      	bls.n	8005340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b63      	ldr	r3, [pc, #396]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 0207 	bic.w	r2, r3, #7
 8005326:	4961      	ldr	r1, [pc, #388]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b5f      	ldr	r3, [pc, #380]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0b0      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d04c      	beq.n	80053e6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d107      	bne.n	8005364 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005354:	4b56      	ldr	r3, [pc, #344]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d121      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e09e      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b02      	cmp	r3, #2
 800536a:	d107      	bne.n	800537c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800536c:	4b50      	ldr	r3, [pc, #320]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d115      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	e092      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d107      	bne.n	8005394 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005384:	4b4a      	ldr	r3, [pc, #296]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e086      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005394:	4b46      	ldr	r3, [pc, #280]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e07e      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053a4:	4b42      	ldr	r3, [pc, #264]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 0203 	bic.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	493f      	ldr	r1, [pc, #252]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053b6:	f7fe fd17 	bl	8003de8 <HAL_GetTick>
 80053ba:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053bc:	e00a      	b.n	80053d4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053be:	f7fe fd13 	bl	8003de8 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e066      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f003 020c 	and.w	r2, r3, #12
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d1eb      	bne.n	80053be <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d008      	beq.n	8005404 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	492c      	ldr	r1, [pc, #176]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005404:	4b29      	ldr	r3, [pc, #164]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d210      	bcs.n	8005434 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005412:	4b26      	ldr	r3, [pc, #152]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f023 0207 	bic.w	r2, r3, #7
 800541a:	4924      	ldr	r1, [pc, #144]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	4313      	orrs	r3, r2
 8005420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005422:	4b22      	ldr	r3, [pc, #136]	; (80054ac <HAL_RCC_ClockConfig+0x1b0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d001      	beq.n	8005434 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e036      	b.n	80054a2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b00      	cmp	r3, #0
 800543e:	d008      	beq.n	8005452 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	4918      	ldr	r1, [pc, #96]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d009      	beq.n	8005472 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	00db      	lsls	r3, r3, #3
 800546c:	4910      	ldr	r1, [pc, #64]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005472:	f000 f825 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8005476:	4602      	mov	r2, r0
 8005478:	4b0d      	ldr	r3, [pc, #52]	; (80054b0 <HAL_RCC_ClockConfig+0x1b4>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	490c      	ldr	r1, [pc, #48]	; (80054b4 <HAL_RCC_ClockConfig+0x1b8>)
 8005484:	5ccb      	ldrb	r3, [r1, r3]
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_RCC_ClockConfig+0x1bc>)
 8005490:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005492:	4b0a      	ldr	r3, [pc, #40]	; (80054bc <HAL_RCC_ClockConfig+0x1c0>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fe fc56 	bl	8003d48 <HAL_InitTick>
 800549c:	4603      	mov	r3, r0
 800549e:	72fb      	strb	r3, [r7, #11]

  return status;
 80054a0:	7afb      	ldrb	r3, [r7, #11]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40022000 	.word	0x40022000
 80054b0:	40021000 	.word	0x40021000
 80054b4:	080089bc 	.word	0x080089bc
 80054b8:	20000004 	.word	0x20000004
 80054bc:	20000008 	.word	0x20000008

080054c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b089      	sub	sp, #36	; 0x24
 80054c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ce:	4b3e      	ldr	r3, [pc, #248]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d8:	4b3b      	ldr	r3, [pc, #236]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	f003 0303 	and.w	r3, r3, #3
 80054e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_GetSysClockFreq+0x34>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0c      	cmp	r3, #12
 80054ec:	d121      	bne.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d11e      	bne.n	8005532 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054f4:	4b34      	ldr	r3, [pc, #208]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d107      	bne.n	8005510 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005500:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005506:	0a1b      	lsrs	r3, r3, #8
 8005508:	f003 030f 	and.w	r3, r3, #15
 800550c:	61fb      	str	r3, [r7, #28]
 800550e:	e005      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005510:	4b2d      	ldr	r3, [pc, #180]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800551c:	4a2b      	ldr	r2, [pc, #172]	; (80055cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005524:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d10d      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005530:	e00a      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	2b04      	cmp	r3, #4
 8005536:	d102      	bne.n	800553e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005538:	4b25      	ldr	r3, [pc, #148]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800553a:	61bb      	str	r3, [r7, #24]
 800553c:	e004      	b.n	8005548 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b08      	cmp	r3, #8
 8005542:	d101      	bne.n	8005548 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005544:	4b23      	ldr	r3, [pc, #140]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005546:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	2b0c      	cmp	r3, #12
 800554c:	d134      	bne.n	80055b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800554e:	4b1e      	ldr	r3, [pc, #120]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	2b02      	cmp	r3, #2
 800555c:	d003      	beq.n	8005566 <HAL_RCC_GetSysClockFreq+0xa6>
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	2b03      	cmp	r3, #3
 8005562:	d003      	beq.n	800556c <HAL_RCC_GetSysClockFreq+0xac>
 8005564:	e005      	b.n	8005572 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005566:	4b1a      	ldr	r3, [pc, #104]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005568:	617b      	str	r3, [r7, #20]
      break;
 800556a:	e005      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800556c:	4b19      	ldr	r3, [pc, #100]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800556e:	617b      	str	r3, [r7, #20]
      break;
 8005570:	e002      	b.n	8005578 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	617b      	str	r3, [r7, #20]
      break;
 8005576:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005578:	4b13      	ldr	r3, [pc, #76]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	091b      	lsrs	r3, r3, #4
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	3301      	adds	r3, #1
 8005584:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005586:	4b10      	ldr	r3, [pc, #64]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	fb02 f203 	mul.w	r2, r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	fbb2 f3f3 	udiv	r3, r2, r3
 800559c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800559e:	4b0a      	ldr	r3, [pc, #40]	; (80055c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80055a0:	68db      	ldr	r3, [r3, #12]
 80055a2:	0e5b      	lsrs	r3, r3, #25
 80055a4:	f003 0303 	and.w	r3, r3, #3
 80055a8:	3301      	adds	r3, #1
 80055aa:	005b      	lsls	r3, r3, #1
 80055ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80055b8:	69bb      	ldr	r3, [r7, #24]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000
 80055cc:	080089d4 	.word	0x080089d4
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	007a1200 	.word	0x007a1200

080055d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_GetHCLKFreq+0x14>)
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000004 	.word	0x20000004

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055f4:	f7ff fff0 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4904      	ldr	r1, [pc, #16]	; (8005618 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	080089cc 	.word	0x080089cc

0800561c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005620:	f7ff ffda 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 8005624:	4602      	mov	r2, r0
 8005626:	4b06      	ldr	r3, [pc, #24]	; (8005640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	0adb      	lsrs	r3, r3, #11
 800562c:	f003 0307 	and.w	r3, r3, #7
 8005630:	4904      	ldr	r1, [pc, #16]	; (8005644 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005632:	5ccb      	ldrb	r3, [r1, r3]
 8005634:	f003 031f 	and.w	r3, r3, #31
 8005638:	fa22 f303 	lsr.w	r3, r2, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40021000 	.word	0x40021000
 8005644:	080089cc 	.word	0x080089cc

08005648 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005654:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005660:	f7ff f9c8 	bl	80049f4 <HAL_PWREx_GetVoltageRange>
 8005664:	6178      	str	r0, [r7, #20]
 8005666:	e014      	b.n	8005692 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566c:	4a24      	ldr	r2, [pc, #144]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800566e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005672:	6593      	str	r3, [r2, #88]	; 0x58
 8005674:	4b22      	ldr	r3, [pc, #136]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005680:	f7ff f9b8 	bl	80049f4 <HAL_PWREx_GetVoltageRange>
 8005684:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005686:	4b1e      	ldr	r3, [pc, #120]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800568c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005690:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005698:	d10b      	bne.n	80056b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b80      	cmp	r3, #128	; 0x80
 800569e:	d919      	bls.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2ba0      	cmp	r3, #160	; 0xa0
 80056a4:	d902      	bls.n	80056ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056a6:	2302      	movs	r3, #2
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e013      	b.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056ac:	2301      	movs	r3, #1
 80056ae:	613b      	str	r3, [r7, #16]
 80056b0:	e010      	b.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b80      	cmp	r3, #128	; 0x80
 80056b6:	d902      	bls.n	80056be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056b8:	2303      	movs	r3, #3
 80056ba:	613b      	str	r3, [r7, #16]
 80056bc:	e00a      	b.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b80      	cmp	r3, #128	; 0x80
 80056c2:	d102      	bne.n	80056ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056c4:	2302      	movs	r3, #2
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e004      	b.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d101      	bne.n	80056d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056d0:	2301      	movs	r3, #1
 80056d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80056d4:	4b0b      	ldr	r3, [pc, #44]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 0207 	bic.w	r2, r3, #7
 80056dc:	4909      	ldr	r1, [pc, #36]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80056e4:	4b07      	ldr	r3, [pc, #28]	; (8005704 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d001      	beq.n	80056f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e000      	b.n	80056f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	40021000 	.word	0x40021000
 8005704:	40022000 	.word	0x40022000

08005708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005710:	2300      	movs	r3, #0
 8005712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005714:	2300      	movs	r3, #0
 8005716:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005720:	2b00      	cmp	r3, #0
 8005722:	d031      	beq.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005728:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800572c:	d01a      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800572e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005732:	d814      	bhi.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005738:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800573c:	d10f      	bne.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800573e:	4b5d      	ldr	r3, [pc, #372]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	4a5c      	ldr	r2, [pc, #368]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005748:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800574a:	e00c      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3304      	adds	r3, #4
 8005750:	2100      	movs	r1, #0
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fa44 	bl	8005be0 <RCCEx_PLLSAI1_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800575c:	e003      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	74fb      	strb	r3, [r7, #19]
      break;
 8005762:	e000      	b.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005764:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005766:	7cfb      	ldrb	r3, [r7, #19]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10b      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800576c:	4b51      	ldr	r3, [pc, #324]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800577a:	494e      	ldr	r1, [pc, #312]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800577c:	4313      	orrs	r3, r2
 800577e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005782:	e001      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005784:	7cfb      	ldrb	r3, [r7, #19]
 8005786:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 809e 	beq.w	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005796:	2300      	movs	r3, #0
 8005798:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800579a:	4b46      	ldr	r3, [pc, #280]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80057a6:	2301      	movs	r3, #1
 80057a8:	e000      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80057aa:	2300      	movs	r3, #0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00d      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057b0:	4b40      	ldr	r3, [pc, #256]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057b4:	4a3f      	ldr	r2, [pc, #252]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6593      	str	r3, [r2, #88]	; 0x58
 80057bc:	4b3d      	ldr	r3, [pc, #244]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057c4:	60bb      	str	r3, [r7, #8]
 80057c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057c8:	2301      	movs	r3, #1
 80057ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057cc:	4b3a      	ldr	r3, [pc, #232]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a39      	ldr	r2, [pc, #228]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057d8:	f7fe fb06 	bl	8003de8 <HAL_GetTick>
 80057dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057de:	e009      	b.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057e0:	f7fe fb02 	bl	8003de8 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d902      	bls.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	74fb      	strb	r3, [r7, #19]
        break;
 80057f2:	e005      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ef      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005800:	7cfb      	ldrb	r3, [r7, #19]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d15a      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005806:	4b2b      	ldr	r3, [pc, #172]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800580c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005810:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01e      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	429a      	cmp	r2, r3
 8005820:	d019      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005822:	4b24      	ldr	r3, [pc, #144]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800582c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800582e:	4b21      	ldr	r3, [pc, #132]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005834:	4a1f      	ldr	r2, [pc, #124]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005836:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800583e:	4b1d      	ldr	r3, [pc, #116]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005844:	4a1b      	ldr	r2, [pc, #108]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800584a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800584e:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d016      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005860:	f7fe fac2 	bl	8003de8 <HAL_GetTick>
 8005864:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005866:	e00b      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005868:	f7fe fabe 	bl	8003de8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	f241 3288 	movw	r2, #5000	; 0x1388
 8005876:	4293      	cmp	r3, r2
 8005878:	d902      	bls.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	74fb      	strb	r3, [r7, #19]
            break;
 800587e:	e006      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005880:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0ec      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800588e:	7cfb      	ldrb	r3, [r7, #19]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058a2:	4904      	ldr	r1, [pc, #16]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058aa:	e009      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058ac:	7cfb      	ldrb	r3, [r7, #19]
 80058ae:	74bb      	strb	r3, [r7, #18]
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
 80058b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c0:	7c7b      	ldrb	r3, [r7, #17]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b9e      	ldr	r3, [pc, #632]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	4a9d      	ldr	r2, [pc, #628]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00a      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058de:	4b98      	ldr	r3, [pc, #608]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e4:	f023 0203 	bic.w	r2, r3, #3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a1b      	ldr	r3, [r3, #32]
 80058ec:	4994      	ldr	r1, [pc, #592]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00a      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005900:	4b8f      	ldr	r3, [pc, #572]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005906:	f023 020c 	bic.w	r2, r3, #12
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	498c      	ldr	r1, [pc, #560]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 0304 	and.w	r3, r3, #4
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005922:	4b87      	ldr	r3, [pc, #540]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005928:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005930:	4983      	ldr	r1, [pc, #524]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0308 	and.w	r3, r3, #8
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005944:	4b7e      	ldr	r3, [pc, #504]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005952:	497b      	ldr	r1, [pc, #492]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005954:	4313      	orrs	r3, r2
 8005956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005966:	4b76      	ldr	r3, [pc, #472]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005974:	4972      	ldr	r1, [pc, #456]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005976:	4313      	orrs	r3, r2
 8005978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00a      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005988:	4b6d      	ldr	r3, [pc, #436]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800598a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005996:	496a      	ldr	r1, [pc, #424]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d00a      	beq.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059aa:	4b65      	ldr	r3, [pc, #404]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059b8:	4961      	ldr	r1, [pc, #388]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ba:	4313      	orrs	r3, r2
 80059bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00a      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059cc:	4b5c      	ldr	r3, [pc, #368]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059da:	4959      	ldr	r1, [pc, #356]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00a      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059ee:	4b54      	ldr	r3, [pc, #336]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fc:	4950      	ldr	r1, [pc, #320]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a10:	4b4b      	ldr	r3, [pc, #300]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a16:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	4948      	ldr	r1, [pc, #288]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a32:	4b43      	ldr	r3, [pc, #268]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a38:	f023 0203 	bic.w	r2, r3, #3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a40:	493f      	ldr	r1, [pc, #252]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d028      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a54:	4b3a      	ldr	r3, [pc, #232]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a62:	4937      	ldr	r1, [pc, #220]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a72:	d106      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a74:	4b32      	ldr	r3, [pc, #200]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4a31      	ldr	r2, [pc, #196]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a7e:	60d3      	str	r3, [r2, #12]
 8005a80:	e011      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a8a:	d10c      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f000 f8a4 	bl	8005be0 <RCCEx_PLLSAI1_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d028      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ab2:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac0:	491f      	ldr	r1, [pc, #124]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ad0:	d106      	bne.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ad2:	4b1b      	ldr	r3, [pc, #108]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005adc:	60d3      	str	r3, [r2, #12]
 8005ade:	e011      	b.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3304      	adds	r3, #4
 8005aee:	2101      	movs	r1, #1
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 f875 	bl	8005be0 <RCCEx_PLLSAI1_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005afa:	7cfb      	ldrb	r3, [r7, #19]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8005b00:	7cfb      	ldrb	r3, [r7, #19]
 8005b02:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d02b      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b1e:	4908      	ldr	r1, [pc, #32]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2e:	d109      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	4a02      	ldr	r2, [pc, #8]	; (8005b40 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005b36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b3a:	60d3      	str	r3, [r2, #12]
 8005b3c:	e014      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8005b3e:	bf00      	nop
 8005b40:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b4c:	d10c      	bne.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2101      	movs	r1, #1
 8005b54:	4618      	mov	r0, r3
 8005b56:	f000 f843 	bl	8005be0 <RCCEx_PLLSAI1_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b5e:	7cfb      	ldrb	r3, [r7, #19]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01c      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b74:	4b19      	ldr	r3, [pc, #100]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b82:	4916      	ldr	r1, [pc, #88]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b92:	d10c      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	2102      	movs	r1, #2
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f000 f820 	bl	8005be0 <RCCEx_PLLSAI1_Config>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ba4:	7cfb      	ldrb	r3, [r7, #19]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d001      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bba:	4b08      	ldr	r3, [pc, #32]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bd0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3718      	adds	r7, #24
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000

08005be0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bee:	4b74      	ldr	r3, [pc, #464]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	f003 0303 	and.w	r3, r3, #3
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d018      	beq.n	8005c2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bfa:	4b71      	ldr	r3, [pc, #452]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0203 	and.w	r2, r3, #3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d10d      	bne.n	8005c26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
       ||
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c12:	4b6b      	ldr	r3, [pc, #428]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	091b      	lsrs	r3, r3, #4
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
       ||
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d047      	beq.n	8005cb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
 8005c2a:	e044      	b.n	8005cb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b03      	cmp	r3, #3
 8005c32:	d018      	beq.n	8005c66 <RCCEx_PLLSAI1_Config+0x86>
 8005c34:	2b03      	cmp	r3, #3
 8005c36:	d825      	bhi.n	8005c84 <RCCEx_PLLSAI1_Config+0xa4>
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d002      	beq.n	8005c42 <RCCEx_PLLSAI1_Config+0x62>
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d009      	beq.n	8005c54 <RCCEx_PLLSAI1_Config+0x74>
 8005c40:	e020      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c42:	4b5f      	ldr	r3, [pc, #380]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11d      	bne.n	8005c8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c52:	e01a      	b.n	8005c8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c54:	4b5a      	ldr	r3, [pc, #360]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d116      	bne.n	8005c8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c64:	e013      	b.n	8005c8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c66:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d10f      	bne.n	8005c92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c72:	4b53      	ldr	r3, [pc, #332]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c82:	e006      	b.n	8005c92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	73fb      	strb	r3, [r7, #15]
      break;
 8005c88:	e004      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c92:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c94:	7bfb      	ldrb	r3, [r7, #15]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10d      	bne.n	8005cb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c9a:	4b49      	ldr	r3, [pc, #292]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6819      	ldr	r1, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	011b      	lsls	r3, r3, #4
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	4943      	ldr	r1, [pc, #268]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cb6:	7bfb      	ldrb	r3, [r7, #15]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d17c      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cbc:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a3f      	ldr	r2, [pc, #252]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc8:	f7fe f88e 	bl	8003de8 <HAL_GetTick>
 8005ccc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cce:	e009      	b.n	8005ce4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cd0:	f7fe f88a 	bl	8003de8 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	d902      	bls.n	8005ce4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ce2:	e005      	b.n	8005cf0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ce4:	4b36      	ldr	r3, [pc, #216]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1ef      	bne.n	8005cd0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d15f      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d110      	bne.n	8005d1e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cfc:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cfe:	691b      	ldr	r3, [r3, #16]
 8005d00:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	6892      	ldr	r2, [r2, #8]
 8005d0c:	0211      	lsls	r1, r2, #8
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	06d2      	lsls	r2, r2, #27
 8005d14:	430a      	orrs	r2, r1
 8005d16:	492a      	ldr	r1, [pc, #168]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
 8005d1c:	e027      	b.n	8005d6e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d112      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6892      	ldr	r2, [r2, #8]
 8005d34:	0211      	lsls	r1, r2, #8
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	6912      	ldr	r2, [r2, #16]
 8005d3a:	0852      	lsrs	r2, r2, #1
 8005d3c:	3a01      	subs	r2, #1
 8005d3e:	0552      	lsls	r2, r2, #21
 8005d40:	430a      	orrs	r2, r1
 8005d42:	491f      	ldr	r1, [pc, #124]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	610b      	str	r3, [r1, #16]
 8005d48:	e011      	b.n	8005d6e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	0211      	lsls	r1, r2, #8
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6952      	ldr	r2, [r2, #20]
 8005d60:	0852      	lsrs	r2, r2, #1
 8005d62:	3a01      	subs	r2, #1
 8005d64:	0652      	lsls	r2, r2, #25
 8005d66:	430a      	orrs	r2, r1
 8005d68:	4915      	ldr	r1, [pc, #84]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d6e:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a13      	ldr	r2, [pc, #76]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d74:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d78:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d7a:	f7fe f835 	bl	8003de8 <HAL_GetTick>
 8005d7e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d80:	e009      	b.n	8005d96 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d82:	f7fe f831 	bl	8003de8 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d902      	bls.n	8005d96 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	73fb      	strb	r3, [r7, #15]
          break;
 8005d94:	e005      	b.n	8005da2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d96:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0ef      	beq.n	8005d82 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005da2:	7bfb      	ldrb	r3, [r7, #15]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d106      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005da8:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005daa:	691a      	ldr	r2, [r3, #16]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	4903      	ldr	r1, [pc, #12]	; (8005dc0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005db2:	4313      	orrs	r3, r2
 8005db4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40021000 	.word	0x40021000

08005dc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e049      	b.n	8005e6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fd fdb6 	bl	800395c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	3304      	adds	r3, #4
 8005e00:	4619      	mov	r1, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	f000 ff78 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
	...

08005e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d001      	beq.n	8005e8c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e038      	b.n	8005efe <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a1c      	ldr	r2, [pc, #112]	; (8005f0c <HAL_TIM_Base_Start+0x98>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d00e      	beq.n	8005ebc <HAL_TIM_Base_Start+0x48>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d009      	beq.n	8005ebc <HAL_TIM_Base_Start+0x48>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a18      	ldr	r2, [pc, #96]	; (8005f10 <HAL_TIM_Base_Start+0x9c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d004      	beq.n	8005ebc <HAL_TIM_Base_Start+0x48>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a17      	ldr	r2, [pc, #92]	; (8005f14 <HAL_TIM_Base_Start+0xa0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d115      	bne.n	8005ee8 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	689a      	ldr	r2, [r3, #8]
 8005ec2:	4b15      	ldr	r3, [pc, #84]	; (8005f18 <HAL_TIM_Base_Start+0xa4>)
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b06      	cmp	r3, #6
 8005ecc:	d015      	beq.n	8005efa <HAL_TIM_Base_Start+0x86>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ed4:	d011      	beq.n	8005efa <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f042 0201 	orr.w	r2, r2, #1
 8005ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ee6:	e008      	b.n	8005efa <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005efa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	40012c00 	.word	0x40012c00
 8005f10:	40000400 	.word	0x40000400
 8005f14:	40014000 	.word	0x40014000
 8005f18:	00010007 	.word	0x00010007

08005f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d001      	beq.n	8005f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e040      	b.n	8005fb6 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2202      	movs	r2, #2
 8005f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68da      	ldr	r2, [r3, #12]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0201 	orr.w	r2, r2, #1
 8005f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00e      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x58>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f5e:	d009      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x58>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a18      	ldr	r2, [pc, #96]	; (8005fc8 <HAL_TIM_Base_Start_IT+0xac>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d004      	beq.n	8005f74 <HAL_TIM_Base_Start_IT+0x58>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a17      	ldr	r2, [pc, #92]	; (8005fcc <HAL_TIM_Base_Start_IT+0xb0>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d115      	bne.n	8005fa0 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	689a      	ldr	r2, [r3, #8]
 8005f7a:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b06      	cmp	r3, #6
 8005f84:	d015      	beq.n	8005fb2 <HAL_TIM_Base_Start_IT+0x96>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8c:	d011      	beq.n	8005fb2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f042 0201 	orr.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f9e:	e008      	b.n	8005fb2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f042 0201 	orr.w	r2, r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
 8005fb0:	e000      	b.n	8005fb4 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fb2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	40012c00 	.word	0x40012c00
 8005fc8:	40000400 	.word	0x40000400
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	00010007 	.word	0x00010007

08005fd4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68da      	ldr	r2, [r3, #12]
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 0201 	bic.w	r2, r2, #1
 8005fea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	6a1a      	ldr	r2, [r3, #32]
 8005ff2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d10f      	bne.n	800601c <HAL_TIM_Base_Stop_IT+0x48>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a1a      	ldr	r2, [r3, #32]
 8006002:	f240 4344 	movw	r3, #1092	; 0x444
 8006006:	4013      	ands	r3, r2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d107      	bne.n	800601c <HAL_TIM_Base_Stop_IT+0x48>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0201 	bic.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr

08006032 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e049      	b.n	80060d8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f841 	bl	80060e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	3304      	adds	r3, #4
 800606e:	4619      	mov	r1, r3
 8006070:	4610      	mov	r0, r2
 8006072:	f000 fe41 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2201      	movs	r2, #1
 80060aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2201      	movs	r2, #1
 80060ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start+0x24>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf14      	ite	ne
 8006110:	2301      	movne	r3, #1
 8006112:	2300      	moveq	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e03c      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b04      	cmp	r3, #4
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start+0x3e>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf14      	ite	ne
 800612a:	2301      	movne	r3, #1
 800612c:	2300      	moveq	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e02f      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b08      	cmp	r3, #8
 8006136:	d109      	bne.n	800614c <HAL_TIM_PWM_Start+0x58>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	bf14      	ite	ne
 8006144:	2301      	movne	r3, #1
 8006146:	2300      	moveq	r3, #0
 8006148:	b2db      	uxtb	r3, r3
 800614a:	e022      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b0c      	cmp	r3, #12
 8006150:	d109      	bne.n	8006166 <HAL_TIM_PWM_Start+0x72>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	bf14      	ite	ne
 800615e:	2301      	movne	r3, #1
 8006160:	2300      	moveq	r3, #0
 8006162:	b2db      	uxtb	r3, r3
 8006164:	e015      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b10      	cmp	r3, #16
 800616a:	d109      	bne.n	8006180 <HAL_TIM_PWM_Start+0x8c>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b01      	cmp	r3, #1
 8006176:	bf14      	ite	ne
 8006178:	2301      	movne	r3, #1
 800617a:	2300      	moveq	r3, #0
 800617c:	b2db      	uxtb	r3, r3
 800617e:	e008      	b.n	8006192 <HAL_TIM_PWM_Start+0x9e>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e083      	b.n	80062a2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <HAL_TIM_PWM_Start+0xb6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a8:	e023      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_PWM_Start+0xc6>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b8:	e01b      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start+0xd6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c8:	e013      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	2b0c      	cmp	r3, #12
 80061ce:	d104      	bne.n	80061da <HAL_TIM_PWM_Start+0xe6>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061d8:	e00b      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b10      	cmp	r3, #16
 80061de:	d104      	bne.n	80061ea <HAL_TIM_PWM_Start+0xf6>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e8:	e003      	b.n	80061f2 <HAL_TIM_PWM_Start+0xfe>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2202      	movs	r2, #2
 80061ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2201      	movs	r2, #1
 80061f8:	6839      	ldr	r1, [r7, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f992 	bl	8007524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a29      	ldr	r2, [pc, #164]	; (80062ac <HAL_TIM_PWM_Start+0x1b8>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d009      	beq.n	800621e <HAL_TIM_PWM_Start+0x12a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a28      	ldr	r2, [pc, #160]	; (80062b0 <HAL_TIM_PWM_Start+0x1bc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d004      	beq.n	800621e <HAL_TIM_PWM_Start+0x12a>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a26      	ldr	r2, [pc, #152]	; (80062b4 <HAL_TIM_PWM_Start+0x1c0>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d101      	bne.n	8006222 <HAL_TIM_PWM_Start+0x12e>
 800621e:	2301      	movs	r3, #1
 8006220:	e000      	b.n	8006224 <HAL_TIM_PWM_Start+0x130>
 8006222:	2300      	movs	r3, #0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d007      	beq.n	8006238 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006236:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_TIM_PWM_Start+0x1b8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_TIM_PWM_Start+0x16c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800624a:	d009      	beq.n	8006260 <HAL_TIM_PWM_Start+0x16c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a19      	ldr	r2, [pc, #100]	; (80062b8 <HAL_TIM_PWM_Start+0x1c4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_PWM_Start+0x16c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a15      	ldr	r2, [pc, #84]	; (80062b0 <HAL_TIM_PWM_Start+0x1bc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d115      	bne.n	800628c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689a      	ldr	r2, [r3, #8]
 8006266:	4b15      	ldr	r3, [pc, #84]	; (80062bc <HAL_TIM_PWM_Start+0x1c8>)
 8006268:	4013      	ands	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d015      	beq.n	800629e <HAL_TIM_PWM_Start+0x1aa>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006278:	d011      	beq.n	800629e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628a:	e008      	b.n	800629e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f042 0201 	orr.w	r2, r2, #1
 800629a:	601a      	str	r2, [r3, #0]
 800629c:	e000      	b.n	80062a0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800629e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	40012c00 	.word	0x40012c00
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40000400 	.word	0x40000400
 80062bc:	00010007 	.word	0x00010007

080062c0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2200      	movs	r2, #0
 80062d0:	6839      	ldr	r1, [r7, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 f926 	bl	8007524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a39      	ldr	r2, [pc, #228]	; (80063c4 <HAL_TIM_PWM_Stop+0x104>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIM_PWM_Stop+0x36>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a38      	ldr	r2, [pc, #224]	; (80063c8 <HAL_TIM_PWM_Stop+0x108>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIM_PWM_Stop+0x36>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a36      	ldr	r2, [pc, #216]	; (80063cc <HAL_TIM_PWM_Stop+0x10c>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_PWM_Stop+0x3a>
 80062f6:	2301      	movs	r3, #1
 80062f8:	e000      	b.n	80062fc <HAL_TIM_PWM_Stop+0x3c>
 80062fa:	2300      	movs	r3, #0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d017      	beq.n	8006330 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	f241 1311 	movw	r3, #4369	; 0x1111
 800630a:	4013      	ands	r3, r2
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10f      	bne.n	8006330 <HAL_TIM_PWM_Stop+0x70>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	6a1a      	ldr	r2, [r3, #32]
 8006316:	f240 4344 	movw	r3, #1092	; 0x444
 800631a:	4013      	ands	r3, r2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d107      	bne.n	8006330 <HAL_TIM_PWM_Stop+0x70>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800632e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6a1a      	ldr	r2, [r3, #32]
 8006336:	f241 1311 	movw	r3, #4369	; 0x1111
 800633a:	4013      	ands	r3, r2
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10f      	bne.n	8006360 <HAL_TIM_PWM_Stop+0xa0>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6a1a      	ldr	r2, [r3, #32]
 8006346:	f240 4344 	movw	r3, #1092	; 0x444
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d107      	bne.n	8006360 <HAL_TIM_PWM_Stop+0xa0>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d104      	bne.n	8006370 <HAL_TIM_PWM_Stop+0xb0>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800636e:	e023      	b.n	80063b8 <HAL_TIM_PWM_Stop+0xf8>
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d104      	bne.n	8006380 <HAL_TIM_PWM_Stop+0xc0>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800637e:	e01b      	b.n	80063b8 <HAL_TIM_PWM_Stop+0xf8>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b08      	cmp	r3, #8
 8006384:	d104      	bne.n	8006390 <HAL_TIM_PWM_Stop+0xd0>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800638e:	e013      	b.n	80063b8 <HAL_TIM_PWM_Stop+0xf8>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	2b0c      	cmp	r3, #12
 8006394:	d104      	bne.n	80063a0 <HAL_TIM_PWM_Stop+0xe0>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800639e:	e00b      	b.n	80063b8 <HAL_TIM_PWM_Stop+0xf8>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b10      	cmp	r3, #16
 80063a4:	d104      	bne.n	80063b0 <HAL_TIM_PWM_Stop+0xf0>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063ae:	e003      	b.n	80063b8 <HAL_TIM_PWM_Stop+0xf8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40012c00 	.word	0x40012c00
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40014400 	.word	0x40014400

080063d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d101      	bne.n	80063e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	e097      	b.n	8006514 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fd fb2f 	bl	8003a5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006414:	f023 0307 	bic.w	r3, r3, #7
 8006418:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3304      	adds	r3, #4
 8006422:	4619      	mov	r1, r3
 8006424:	4610      	mov	r0, r2
 8006426:	f000 fc67 	bl	8006cf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006452:	f023 0303 	bic.w	r3, r3, #3
 8006456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	699b      	ldr	r3, [r3, #24]
 8006460:	021b      	lsls	r3, r3, #8
 8006462:	4313      	orrs	r3, r2
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006470:	f023 030c 	bic.w	r3, r3, #12
 8006474:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800647c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	68da      	ldr	r2, [r3, #12]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	4313      	orrs	r3, r2
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	011a      	lsls	r2, r3, #4
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	031b      	lsls	r3, r3, #12
 80064a0:	4313      	orrs	r3, r2
 80064a2:	693a      	ldr	r2, [r7, #16]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80064b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	4313      	orrs	r3, r2
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3718      	adds	r7, #24
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800652c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800653c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d110      	bne.n	800656e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800654c:	7bfb      	ldrb	r3, [r7, #15]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d102      	bne.n	8006558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006552:	7b7b      	ldrb	r3, [r7, #13]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d001      	beq.n	800655c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e069      	b.n	8006630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2202      	movs	r2, #2
 8006560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800656c:	e031      	b.n	80065d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d110      	bne.n	8006596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d102      	bne.n	8006580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800657a:	7b3b      	ldrb	r3, [r7, #12]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d001      	beq.n	8006584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e055      	b.n	8006630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006594:	e01d      	b.n	80065d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	2b01      	cmp	r3, #1
 800659a:	d108      	bne.n	80065ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800659c:	7bbb      	ldrb	r3, [r7, #14]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d105      	bne.n	80065ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80065a2:	7b7b      	ldrb	r3, [r7, #13]
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d102      	bne.n	80065ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80065a8:	7b3b      	ldrb	r3, [r7, #12]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d001      	beq.n	80065b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e03e      	b.n	8006630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2202      	movs	r2, #2
 80065c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2202      	movs	r2, #2
 80065ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_TIM_Encoder_Start+0xc4>
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d008      	beq.n	80065f0 <HAL_TIM_Encoder_Start+0xd4>
 80065de:	e00f      	b.n	8006600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2201      	movs	r2, #1
 80065e6:	2100      	movs	r1, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 ff9b 	bl	8007524 <TIM_CCxChannelCmd>
      break;
 80065ee:	e016      	b.n	800661e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	2104      	movs	r1, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 ff93 	bl	8007524 <TIM_CCxChannelCmd>
      break;
 80065fe:	e00e      	b.n	800661e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2201      	movs	r2, #1
 8006606:	2100      	movs	r1, #0
 8006608:	4618      	mov	r0, r3
 800660a:	f000 ff8b 	bl	8007524 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2201      	movs	r2, #1
 8006614:	2104      	movs	r1, #4
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ff84 	bl	8007524 <TIM_CCxChannelCmd>
      break;
 800661c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d122      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f003 0302 	and.w	r3, r3, #2
 8006658:	2b02      	cmp	r3, #2
 800665a:	d11b      	bne.n	8006694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f06f 0202 	mvn.w	r2, #2
 8006664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d003      	beq.n	8006682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb1e 	bl	8006cbc <HAL_TIM_IC_CaptureCallback>
 8006680:	e005      	b.n	800668e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fb10 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f000 fb21 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	f003 0304 	and.w	r3, r3, #4
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d122      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b04      	cmp	r3, #4
 80066ae:	d11b      	bne.n	80066e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0204 	mvn.w	r2, #4
 80066b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2202      	movs	r2, #2
 80066be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d003      	beq.n	80066d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 faf4 	bl	8006cbc <HAL_TIM_IC_CaptureCallback>
 80066d4:	e005      	b.n	80066e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fae6 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 faf7 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	f003 0308 	and.w	r3, r3, #8
 80066f2:	2b08      	cmp	r3, #8
 80066f4:	d122      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f003 0308 	and.w	r3, r3, #8
 8006700:	2b08      	cmp	r3, #8
 8006702:	d11b      	bne.n	800673c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f06f 0208 	mvn.w	r2, #8
 800670c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2204      	movs	r2, #4
 8006712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	69db      	ldr	r3, [r3, #28]
 800671a:	f003 0303 	and.w	r3, r3, #3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 faca 	bl	8006cbc <HAL_TIM_IC_CaptureCallback>
 8006728:	e005      	b.n	8006736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f000 fabc 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 facd 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	f003 0310 	and.w	r3, r3, #16
 8006746:	2b10      	cmp	r3, #16
 8006748:	d122      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d11b      	bne.n	8006790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f06f 0210 	mvn.w	r2, #16
 8006760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2208      	movs	r2, #8
 8006766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	69db      	ldr	r3, [r3, #28]
 800676e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 faa0 	bl	8006cbc <HAL_TIM_IC_CaptureCallback>
 800677c:	e005      	b.n	800678a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fa92 	bl	8006ca8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 faa3 	bl	8006cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2200      	movs	r2, #0
 800678e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	f003 0301 	and.w	r3, r3, #1
 800679a:	2b01      	cmp	r3, #1
 800679c:	d10e      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f003 0301 	and.w	r3, r3, #1
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d107      	bne.n	80067bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f06f 0201 	mvn.w	r2, #1
 80067b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fb fd7a 	bl	80022b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d10e      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067d4:	2b80      	cmp	r3, #128	; 0x80
 80067d6:	d107      	bne.n	80067e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 ffb4 	bl	8007750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f6:	d10e      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006802:	2b80      	cmp	r3, #128	; 0x80
 8006804:	d107      	bne.n	8006816 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800680e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 ffa7 	bl	8007764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006820:	2b40      	cmp	r3, #64	; 0x40
 8006822:	d10e      	bne.n	8006842 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800682e:	2b40      	cmp	r3, #64	; 0x40
 8006830:	d107      	bne.n	8006842 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800683a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fa51 	bl	8006ce4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b20      	cmp	r3, #32
 800684e:	d10e      	bne.n	800686e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f003 0320 	and.w	r3, r3, #32
 800685a:	2b20      	cmp	r3, #32
 800685c:	d107      	bne.n	800686e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f06f 0220 	mvn.w	r2, #32
 8006866:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 ff67 	bl	800773c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800686e:	bf00      	nop
 8006870:	3708      	adds	r7, #8
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
	...

08006878 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800688e:	2302      	movs	r3, #2
 8006890:	e0fd      	b.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x216>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2b14      	cmp	r3, #20
 800689e:	f200 80f0 	bhi.w	8006a82 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80068a2:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80068a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a8:	080068fd 	.word	0x080068fd
 80068ac:	08006a83 	.word	0x08006a83
 80068b0:	08006a83 	.word	0x08006a83
 80068b4:	08006a83 	.word	0x08006a83
 80068b8:	0800693d 	.word	0x0800693d
 80068bc:	08006a83 	.word	0x08006a83
 80068c0:	08006a83 	.word	0x08006a83
 80068c4:	08006a83 	.word	0x08006a83
 80068c8:	0800697f 	.word	0x0800697f
 80068cc:	08006a83 	.word	0x08006a83
 80068d0:	08006a83 	.word	0x08006a83
 80068d4:	08006a83 	.word	0x08006a83
 80068d8:	080069bf 	.word	0x080069bf
 80068dc:	08006a83 	.word	0x08006a83
 80068e0:	08006a83 	.word	0x08006a83
 80068e4:	08006a83 	.word	0x08006a83
 80068e8:	08006a01 	.word	0x08006a01
 80068ec:	08006a83 	.word	0x08006a83
 80068f0:	08006a83 	.word	0x08006a83
 80068f4:	08006a83 	.word	0x08006a83
 80068f8:	08006a41 	.word	0x08006a41
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	4618      	mov	r0, r3
 8006904:	f000 fa66 	bl	8006dd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	699a      	ldr	r2, [r3, #24]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f022 0204 	bic.w	r2, r2, #4
 8006926:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6999      	ldr	r1, [r3, #24]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	691a      	ldr	r2, [r3, #16]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	619a      	str	r2, [r3, #24]
      break;
 800693a:	e0a3      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fac2 	bl	8006ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699a      	ldr	r2, [r3, #24]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6999      	ldr	r1, [r3, #24]
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	021a      	lsls	r2, r3, #8
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	430a      	orrs	r2, r1
 800697a:	619a      	str	r2, [r3, #24]
      break;
 800697c:	e082      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fb1b 	bl	8006fc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f042 0208 	orr.w	r2, r2, #8
 8006998:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0204 	bic.w	r2, r2, #4
 80069a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	69d9      	ldr	r1, [r3, #28]
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	691a      	ldr	r2, [r3, #16]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	430a      	orrs	r2, r1
 80069ba:	61da      	str	r2, [r3, #28]
      break;
 80069bc:	e062      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68b9      	ldr	r1, [r7, #8]
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 fb73 	bl	80070b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	69da      	ldr	r2, [r3, #28]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69d9      	ldr	r1, [r3, #28]
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	021a      	lsls	r2, r3, #8
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	430a      	orrs	r2, r1
 80069fc:	61da      	str	r2, [r3, #28]
      break;
 80069fe:	e041      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fbb0 	bl	800716c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0208 	orr.w	r2, r2, #8
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0204 	bic.w	r2, r2, #4
 8006a2a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	691a      	ldr	r2, [r3, #16]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a3e:	e021      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68b9      	ldr	r1, [r7, #8]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f000 fbe8 	bl	800721c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a5a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a6a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	021a      	lsls	r2, r3, #8
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	430a      	orrs	r2, r1
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a80:	e000      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8006a82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop

08006a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_TIM_ConfigClockSource+0x18>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e0b5      	b.n	8006c1c <HAL_TIM_ConfigClockSource+0x184>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ace:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ad2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ada:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aec:	d03e      	beq.n	8006b6c <HAL_TIM_ConfigClockSource+0xd4>
 8006aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af2:	f200 8087 	bhi.w	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afa:	f000 8085 	beq.w	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b02:	d87f      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b04:	2b70      	cmp	r3, #112	; 0x70
 8006b06:	d01a      	beq.n	8006b3e <HAL_TIM_ConfigClockSource+0xa6>
 8006b08:	2b70      	cmp	r3, #112	; 0x70
 8006b0a:	d87b      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b0c:	2b60      	cmp	r3, #96	; 0x60
 8006b0e:	d050      	beq.n	8006bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8006b10:	2b60      	cmp	r3, #96	; 0x60
 8006b12:	d877      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b14:	2b50      	cmp	r3, #80	; 0x50
 8006b16:	d03c      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0xfa>
 8006b18:	2b50      	cmp	r3, #80	; 0x50
 8006b1a:	d873      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b1c:	2b40      	cmp	r3, #64	; 0x40
 8006b1e:	d058      	beq.n	8006bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d86f      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b24:	2b30      	cmp	r3, #48	; 0x30
 8006b26:	d064      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d86b      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d060      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d867      	bhi.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05c      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d05a      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006b3c:	e062      	b.n	8006c04 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	6899      	ldr	r1, [r3, #8]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f000 fcc9 	bl	80074e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b60:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	609a      	str	r2, [r3, #8]
      break;
 8006b6a:	e04e      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6899      	ldr	r1, [r3, #8]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	f000 fcb2 	bl	80074e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	689a      	ldr	r2, [r3, #8]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b8e:	609a      	str	r2, [r3, #8]
      break;
 8006b90:	e03b      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6818      	ldr	r0, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6859      	ldr	r1, [r3, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	f000 fc26 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2150      	movs	r1, #80	; 0x50
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 fc7f 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006bb0:	e02b      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6818      	ldr	r0, [r3, #0]
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	6859      	ldr	r1, [r3, #4]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f000 fc45 	bl	800744e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2160      	movs	r1, #96	; 0x60
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fc6f 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006bd0:	e01b      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6859      	ldr	r1, [r3, #4]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	461a      	mov	r2, r3
 8006be0:	f000 fc06 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2140      	movs	r1, #64	; 0x40
 8006bea:	4618      	mov	r0, r3
 8006bec:	f000 fc5f 	bl	80074ae <TIM_ITRx_SetConfig>
      break;
 8006bf0:	e00b      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	f000 fc56 	bl	80074ae <TIM_ITRx_SetConfig>
        break;
 8006c02:	e002      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c04:	bf00      	nop
 8006c06:	e000      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x172>
      break;
 8006c08:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d101      	bne.n	8006c3c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006c38:	2302      	movs	r3, #2
 8006c3a:	e031      	b.n	8006ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fb3e 	bl	80072d0 <TIM_SlaveTimer_SetConfig>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d009      	beq.n	8006c6e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e018      	b.n	8006ca0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c7c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c8c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3708      	adds	r7, #8
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b083      	sub	sp, #12
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cc4:	bf00      	nop
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b083      	sub	sp, #12
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a2e      	ldr	r2, [pc, #184]	; (8006dc4 <TIM_Base_SetConfig+0xcc>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d007      	beq.n	8006d20 <TIM_Base_SetConfig+0x28>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0x28>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <TIM_Base_SetConfig+0xd0>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a23      	ldr	r2, [pc, #140]	; (8006dc4 <TIM_Base_SetConfig+0xcc>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00f      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d40:	d00b      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <TIM_Base_SetConfig+0xd0>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d007      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1f      	ldr	r2, [pc, #124]	; (8006dcc <TIM_Base_SetConfig+0xd4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d003      	beq.n	8006d5a <TIM_Base_SetConfig+0x62>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a1e      	ldr	r2, [pc, #120]	; (8006dd0 <TIM_Base_SetConfig+0xd8>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d108      	bne.n	8006d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a0c      	ldr	r2, [pc, #48]	; (8006dc4 <TIM_Base_SetConfig+0xcc>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d007      	beq.n	8006da8 <TIM_Base_SetConfig+0xb0>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	4a0c      	ldr	r2, [pc, #48]	; (8006dcc <TIM_Base_SetConfig+0xd4>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d003      	beq.n	8006da8 <TIM_Base_SetConfig+0xb0>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a0b      	ldr	r2, [pc, #44]	; (8006dd0 <TIM_Base_SetConfig+0xd8>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d103      	bne.n	8006db0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	615a      	str	r2, [r3, #20]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr
 8006dc2:	bf00      	nop
 8006dc4:	40012c00 	.word	0x40012c00
 8006dc8:	40000400 	.word	0x40000400
 8006dcc:	40014000 	.word	0x40014000
 8006dd0:	40014400 	.word	0x40014400

08006dd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0201 	bic.w	r2, r3, #1
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f023 0302 	bic.w	r3, r3, #2
 8006e20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a24      	ldr	r2, [pc, #144]	; (8006ec0 <TIM_OC1_SetConfig+0xec>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d007      	beq.n	8006e44 <TIM_OC1_SetConfig+0x70>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a23      	ldr	r2, [pc, #140]	; (8006ec4 <TIM_OC1_SetConfig+0xf0>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_OC1_SetConfig+0x70>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a22      	ldr	r2, [pc, #136]	; (8006ec8 <TIM_OC1_SetConfig+0xf4>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d10c      	bne.n	8006e5e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	f023 0308 	bic.w	r3, r3, #8
 8006e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	697a      	ldr	r2, [r7, #20]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f023 0304 	bic.w	r3, r3, #4
 8006e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <TIM_OC1_SetConfig+0xec>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d007      	beq.n	8006e76 <TIM_OC1_SetConfig+0xa2>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <TIM_OC1_SetConfig+0xf0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d003      	beq.n	8006e76 <TIM_OC1_SetConfig+0xa2>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <TIM_OC1_SetConfig+0xf4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d111      	bne.n	8006e9a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	693a      	ldr	r2, [r7, #16]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	621a      	str	r2, [r3, #32]
}
 8006eb4:	bf00      	nop
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400

08006ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	f023 0210 	bic.w	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	699b      	ldr	r3, [r3, #24]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f023 0320 	bic.w	r3, r3, #32
 8006f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	4a22      	ldr	r2, [pc, #136]	; (8006fb4 <TIM_OC2_SetConfig+0xe8>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d10d      	bne.n	8006f4c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	011b      	lsls	r3, r3, #4
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	4a19      	ldr	r2, [pc, #100]	; (8006fb4 <TIM_OC2_SetConfig+0xe8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d007      	beq.n	8006f64 <TIM_OC2_SetConfig+0x98>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	4a18      	ldr	r2, [pc, #96]	; (8006fb8 <TIM_OC2_SetConfig+0xec>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d003      	beq.n	8006f64 <TIM_OC2_SetConfig+0x98>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	; (8006fbc <TIM_OC2_SetConfig+0xf0>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d113      	bne.n	8006f8c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	695b      	ldr	r3, [r3, #20]
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	693a      	ldr	r2, [r7, #16]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	693a      	ldr	r2, [r7, #16]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	693a      	ldr	r2, [r7, #16]
 8006f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685a      	ldr	r2, [r3, #4]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	697a      	ldr	r2, [r7, #20]
 8006fa4:	621a      	str	r2, [r3, #32]
}
 8006fa6:	bf00      	nop
 8006fa8:	371c      	adds	r7, #28
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40012c00 	.word	0x40012c00
 8006fb8:	40014000 	.word	0x40014000
 8006fbc:	40014400 	.word	0x40014400

08006fc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b087      	sub	sp, #28
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a1b      	ldr	r3, [r3, #32]
 8006fce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	685b      	ldr	r3, [r3, #4]
 8006fe0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69db      	ldr	r3, [r3, #28]
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ff2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 0303 	bic.w	r3, r3, #3
 8006ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68fa      	ldr	r2, [r7, #12]
 8007002:	4313      	orrs	r3, r2
 8007004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800700c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	021b      	lsls	r3, r3, #8
 8007014:	697a      	ldr	r2, [r7, #20]
 8007016:	4313      	orrs	r3, r2
 8007018:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a21      	ldr	r2, [pc, #132]	; (80070a4 <TIM_OC3_SetConfig+0xe4>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d10d      	bne.n	800703e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	021b      	lsls	r3, r3, #8
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	4313      	orrs	r3, r2
 8007034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800703c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <TIM_OC3_SetConfig+0xe4>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d007      	beq.n	8007056 <TIM_OC3_SetConfig+0x96>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <TIM_OC3_SetConfig+0xe8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0x96>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC3_SetConfig+0xec>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d113      	bne.n	800707e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800705c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	4313      	orrs	r3, r2
 8007070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	4313      	orrs	r3, r2
 800707c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	693a      	ldr	r2, [r7, #16]
 8007082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	697a      	ldr	r2, [r7, #20]
 8007096:	621a      	str	r2, [r3, #32]
}
 8007098:	bf00      	nop
 800709a:	371c      	adds	r7, #28
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400

080070b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	021b      	lsls	r3, r3, #8
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	689b      	ldr	r3, [r3, #8]
 8007104:	031b      	lsls	r3, r3, #12
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	4313      	orrs	r3, r2
 800710a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a14      	ldr	r2, [pc, #80]	; (8007160 <TIM_OC4_SetConfig+0xb0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_OC4_SetConfig+0x74>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a13      	ldr	r2, [pc, #76]	; (8007164 <TIM_OC4_SetConfig+0xb4>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_OC4_SetConfig+0x74>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a12      	ldr	r2, [pc, #72]	; (8007168 <TIM_OC4_SetConfig+0xb8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d109      	bne.n	8007138 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800712a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	019b      	lsls	r3, r3, #6
 8007132:	697a      	ldr	r2, [r7, #20]
 8007134:	4313      	orrs	r3, r2
 8007136:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	697a      	ldr	r2, [r7, #20]
 800713c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	621a      	str	r2, [r3, #32]
}
 8007152:	bf00      	nop
 8007154:	371c      	adds	r7, #28
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr
 800715e:	bf00      	nop
 8007160:	40012c00 	.word	0x40012c00
 8007164:	40014000 	.word	0x40014000
 8007168:	40014400 	.word	0x40014400

0800716c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <TIM_OC5_SetConfig+0xa4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d007      	beq.n	80071d6 <TIM_OC5_SetConfig+0x6a>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	4a12      	ldr	r2, [pc, #72]	; (8007214 <TIM_OC5_SetConfig+0xa8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d003      	beq.n	80071d6 <TIM_OC5_SetConfig+0x6a>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <TIM_OC5_SetConfig+0xac>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d109      	bne.n	80071ea <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	695b      	ldr	r3, [r3, #20]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	697a      	ldr	r2, [r7, #20]
 80071ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	685a      	ldr	r2, [r3, #4]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	693a      	ldr	r2, [r7, #16]
 8007202:	621a      	str	r2, [r3, #32]
}
 8007204:	bf00      	nop
 8007206:	371c      	adds	r7, #28
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr
 8007210:	40012c00 	.word	0x40012c00
 8007214:	40014000 	.word	0x40014000
 8007218:	40014400 	.word	0x40014400

0800721c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800721c:	b480      	push	{r7}
 800721e:	b087      	sub	sp, #28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a1b      	ldr	r3, [r3, #32]
 8007236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800724a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800724e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	021b      	lsls	r3, r3, #8
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4313      	orrs	r3, r2
 800725a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007262:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	051b      	lsls	r3, r3, #20
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a14      	ldr	r2, [pc, #80]	; (80072c4 <TIM_OC6_SetConfig+0xa8>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d007      	beq.n	8007288 <TIM_OC6_SetConfig+0x6c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a13      	ldr	r2, [pc, #76]	; (80072c8 <TIM_OC6_SetConfig+0xac>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d003      	beq.n	8007288 <TIM_OC6_SetConfig+0x6c>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a12      	ldr	r2, [pc, #72]	; (80072cc <TIM_OC6_SetConfig+0xb0>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d109      	bne.n	800729c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800728e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	029b      	lsls	r3, r3, #10
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685a      	ldr	r2, [r3, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	40012c00 	.word	0x40012c00
 80072c8:	40014000 	.word	0x40014000
 80072cc:	40014400 	.word	0x40014400

080072d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072fa:	f023 0307 	bic.w	r3, r3, #7
 80072fe:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	697a      	ldr	r2, [r7, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b70      	cmp	r3, #112	; 0x70
 8007318:	d01a      	beq.n	8007350 <TIM_SlaveTimer_SetConfig+0x80>
 800731a:	2b70      	cmp	r3, #112	; 0x70
 800731c:	d860      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 800731e:	2b60      	cmp	r3, #96	; 0x60
 8007320:	d054      	beq.n	80073cc <TIM_SlaveTimer_SetConfig+0xfc>
 8007322:	2b60      	cmp	r3, #96	; 0x60
 8007324:	d85c      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 8007326:	2b50      	cmp	r3, #80	; 0x50
 8007328:	d046      	beq.n	80073b8 <TIM_SlaveTimer_SetConfig+0xe8>
 800732a:	2b50      	cmp	r3, #80	; 0x50
 800732c:	d858      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 800732e:	2b40      	cmp	r3, #64	; 0x40
 8007330:	d019      	beq.n	8007366 <TIM_SlaveTimer_SetConfig+0x96>
 8007332:	2b40      	cmp	r3, #64	; 0x40
 8007334:	d854      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 8007336:	2b30      	cmp	r3, #48	; 0x30
 8007338:	d054      	beq.n	80073e4 <TIM_SlaveTimer_SetConfig+0x114>
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d850      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 800733e:	2b20      	cmp	r3, #32
 8007340:	d050      	beq.n	80073e4 <TIM_SlaveTimer_SetConfig+0x114>
 8007342:	2b20      	cmp	r3, #32
 8007344:	d84c      	bhi.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
 8007346:	2b00      	cmp	r3, #0
 8007348:	d04c      	beq.n	80073e4 <TIM_SlaveTimer_SetConfig+0x114>
 800734a:	2b10      	cmp	r3, #16
 800734c:	d04a      	beq.n	80073e4 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 800734e:	e047      	b.n	80073e0 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68d9      	ldr	r1, [r3, #12]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	f000 f8c0 	bl	80074e4 <TIM_ETR_SetConfig>
      break;
 8007364:	e03f      	b.n	80073e6 <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b05      	cmp	r3, #5
 800736c:	d101      	bne.n	8007372 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	e03a      	b.n	80073e8 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	6a1a      	ldr	r2, [r3, #32]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007398:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	621a      	str	r2, [r3, #32]
      break;
 80073b6:	e016      	b.n	80073e6 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6899      	ldr	r1, [r3, #8]
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	691b      	ldr	r3, [r3, #16]
 80073c4:	461a      	mov	r2, r3
 80073c6:	f000 f813 	bl	80073f0 <TIM_TI1_ConfigInputStage>
      break;
 80073ca:	e00c      	b.n	80073e6 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	6899      	ldr	r1, [r3, #8]
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	461a      	mov	r2, r3
 80073da:	f000 f838 	bl	800744e <TIM_TI2_ConfigInputStage>
      break;
 80073de:	e002      	b.n	80073e6 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <TIM_SlaveTimer_SetConfig+0x116>
        break;
 80073e4:	bf00      	nop
  }
  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b087      	sub	sp, #28
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	f023 0201 	bic.w	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800741a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f023 030a 	bic.w	r3, r3, #10
 800742c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4313      	orrs	r3, r2
 8007434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	621a      	str	r2, [r3, #32]
}
 8007442:	bf00      	nop
 8007444:	371c      	adds	r7, #28
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f023 0210 	bic.w	r2, r3, #16
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	031b      	lsls	r3, r3, #12
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800748a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	693a      	ldr	r2, [r7, #16]
 80074a0:	621a      	str	r2, [r3, #32]
}
 80074a2:	bf00      	nop
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b085      	sub	sp, #20
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	f043 0307 	orr.w	r3, r3, #7
 80074d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	609a      	str	r2, [r3, #8]
}
 80074d8:	bf00      	nop
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	021a      	lsls	r2, r3, #8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	431a      	orrs	r2, r3
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4313      	orrs	r3, r2
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	609a      	str	r2, [r3, #8]
}
 8007518:	bf00      	nop
 800751a:	371c      	adds	r7, #28
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr

08007524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007524:	b480      	push	{r7}
 8007526:	b087      	sub	sp, #28
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	f003 031f 	and.w	r3, r3, #31
 8007536:	2201      	movs	r2, #1
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6a1a      	ldr	r2, [r3, #32]
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	43db      	mvns	r3, r3
 8007546:	401a      	ands	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a1a      	ldr	r2, [r3, #32]
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	f003 031f 	and.w	r3, r3, #31
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	431a      	orrs	r2, r3
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	621a      	str	r2, [r3, #32]
}
 8007562:	bf00      	nop
 8007564:	371c      	adds	r7, #28
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007580:	2b01      	cmp	r3, #1
 8007582:	d101      	bne.n	8007588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007584:	2302      	movs	r3, #2
 8007586:	e054      	b.n	8007632 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a24      	ldr	r2, [pc, #144]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d108      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a17      	ldr	r2, [pc, #92]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d00e      	beq.n	8007606 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f0:	d009      	beq.n	8007606 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a13      	ldr	r2, [pc, #76]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d004      	beq.n	8007606 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a11      	ldr	r2, [pc, #68]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d10c      	bne.n	8007620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800760c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	4313      	orrs	r3, r2
 8007616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	68ba      	ldr	r2, [r7, #8]
 800761e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007630:	2300      	movs	r3, #0
}
 8007632:	4618      	mov	r0, r3
 8007634:	3714      	adds	r7, #20
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40000400 	.word	0x40000400
 8007648:	40014000 	.word	0x40014000

0800764c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007660:	2b01      	cmp	r3, #1
 8007662:	d101      	bne.n	8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007664:	2302      	movs	r3, #2
 8007666:	e060      	b.n	800772a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2201      	movs	r2, #1
 800766c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ce:	4313      	orrs	r3, r2
 80076d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	041b      	lsls	r3, r3, #16
 80076de:	4313      	orrs	r3, r2
 80076e0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a14      	ldr	r2, [pc, #80]	; (8007738 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d115      	bne.n	8007718 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	051b      	lsls	r3, r3, #20
 80076f8:	4313      	orrs	r3, r2
 80076fa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	4313      	orrs	r3, r2
 8007716:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007728:	2300      	movs	r3, #0
}
 800772a:	4618      	mov	r0, r3
 800772c:	3714      	adds	r7, #20
 800772e:	46bd      	mov	sp, r7
 8007730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007734:	4770      	bx	lr
 8007736:	bf00      	nop
 8007738:	40012c00 	.word	0x40012c00

0800773c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e040      	b.n	800780c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800778e:	2b00      	cmp	r3, #0
 8007790:	d106      	bne.n	80077a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fc fa2e 	bl	8003bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2224      	movs	r2, #36	; 0x24
 80077a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f022 0201 	bic.w	r2, r2, #1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 f82c 	bl	8007814 <UART_SetConfig>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e022      	b.n	800780c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fa7c 	bl	8007ccc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	685a      	ldr	r2, [r3, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689a      	ldr	r2, [r3, #8]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f042 0201 	orr.w	r2, r2, #1
 8007802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fb03 	bl	8007e10 <UART_CheckIdleState>
 800780a:	4603      	mov	r3, r0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007814:	b5b0      	push	{r4, r5, r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	689a      	ldr	r2, [r3, #8]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	695b      	ldr	r3, [r3, #20]
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	69db      	ldr	r3, [r3, #28]
 8007834:	4313      	orrs	r3, r2
 8007836:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	4ba4      	ldr	r3, [pc, #656]	; (8007ad0 <UART_SetConfig+0x2bc>)
 8007840:	4013      	ands	r3, r2
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	6812      	ldr	r2, [r2, #0]
 8007846:	69f9      	ldr	r1, [r7, #28]
 8007848:	430b      	orrs	r3, r1
 800784a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a99      	ldr	r2, [pc, #612]	; (8007ad4 <UART_SetConfig+0x2c0>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d004      	beq.n	800787c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	69fa      	ldr	r2, [r7, #28]
 8007878:	4313      	orrs	r3, r2
 800787a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	430a      	orrs	r2, r1
 800788e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a90      	ldr	r2, [pc, #576]	; (8007ad8 <UART_SetConfig+0x2c4>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d121      	bne.n	80078de <UART_SetConfig+0xca>
 800789a:	4b90      	ldr	r3, [pc, #576]	; (8007adc <UART_SetConfig+0x2c8>)
 800789c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a0:	f003 0303 	and.w	r3, r3, #3
 80078a4:	2b03      	cmp	r3, #3
 80078a6:	d817      	bhi.n	80078d8 <UART_SetConfig+0xc4>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <UART_SetConfig+0x9c>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c1 	.word	0x080078c1
 80078b4:	080078cd 	.word	0x080078cd
 80078b8:	080078c7 	.word	0x080078c7
 80078bc:	080078d3 	.word	0x080078d3
 80078c0:	2301      	movs	r3, #1
 80078c2:	76fb      	strb	r3, [r7, #27]
 80078c4:	e0bc      	b.n	8007a40 <UART_SetConfig+0x22c>
 80078c6:	2302      	movs	r3, #2
 80078c8:	76fb      	strb	r3, [r7, #27]
 80078ca:	e0b9      	b.n	8007a40 <UART_SetConfig+0x22c>
 80078cc:	2304      	movs	r3, #4
 80078ce:	76fb      	strb	r3, [r7, #27]
 80078d0:	e0b6      	b.n	8007a40 <UART_SetConfig+0x22c>
 80078d2:	2308      	movs	r3, #8
 80078d4:	76fb      	strb	r3, [r7, #27]
 80078d6:	e0b3      	b.n	8007a40 <UART_SetConfig+0x22c>
 80078d8:	2310      	movs	r3, #16
 80078da:	76fb      	strb	r3, [r7, #27]
 80078dc:	e0b0      	b.n	8007a40 <UART_SetConfig+0x22c>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a7f      	ldr	r2, [pc, #508]	; (8007ae0 <UART_SetConfig+0x2cc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d132      	bne.n	800794e <UART_SetConfig+0x13a>
 80078e8:	4b7c      	ldr	r3, [pc, #496]	; (8007adc <UART_SetConfig+0x2c8>)
 80078ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ee:	f003 030c 	and.w	r3, r3, #12
 80078f2:	2b0c      	cmp	r3, #12
 80078f4:	d828      	bhi.n	8007948 <UART_SetConfig+0x134>
 80078f6:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0xe8>)
 80078f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fc:	08007931 	.word	0x08007931
 8007900:	08007949 	.word	0x08007949
 8007904:	08007949 	.word	0x08007949
 8007908:	08007949 	.word	0x08007949
 800790c:	0800793d 	.word	0x0800793d
 8007910:	08007949 	.word	0x08007949
 8007914:	08007949 	.word	0x08007949
 8007918:	08007949 	.word	0x08007949
 800791c:	08007937 	.word	0x08007937
 8007920:	08007949 	.word	0x08007949
 8007924:	08007949 	.word	0x08007949
 8007928:	08007949 	.word	0x08007949
 800792c:	08007943 	.word	0x08007943
 8007930:	2300      	movs	r3, #0
 8007932:	76fb      	strb	r3, [r7, #27]
 8007934:	e084      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007936:	2302      	movs	r3, #2
 8007938:	76fb      	strb	r3, [r7, #27]
 800793a:	e081      	b.n	8007a40 <UART_SetConfig+0x22c>
 800793c:	2304      	movs	r3, #4
 800793e:	76fb      	strb	r3, [r7, #27]
 8007940:	e07e      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007942:	2308      	movs	r3, #8
 8007944:	76fb      	strb	r3, [r7, #27]
 8007946:	e07b      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007948:	2310      	movs	r3, #16
 800794a:	76fb      	strb	r3, [r7, #27]
 800794c:	e078      	b.n	8007a40 <UART_SetConfig+0x22c>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a64      	ldr	r2, [pc, #400]	; (8007ae4 <UART_SetConfig+0x2d0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d120      	bne.n	800799a <UART_SetConfig+0x186>
 8007958:	4b60      	ldr	r3, [pc, #384]	; (8007adc <UART_SetConfig+0x2c8>)
 800795a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800795e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007962:	2b30      	cmp	r3, #48	; 0x30
 8007964:	d013      	beq.n	800798e <UART_SetConfig+0x17a>
 8007966:	2b30      	cmp	r3, #48	; 0x30
 8007968:	d814      	bhi.n	8007994 <UART_SetConfig+0x180>
 800796a:	2b20      	cmp	r3, #32
 800796c:	d009      	beq.n	8007982 <UART_SetConfig+0x16e>
 800796e:	2b20      	cmp	r3, #32
 8007970:	d810      	bhi.n	8007994 <UART_SetConfig+0x180>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <UART_SetConfig+0x168>
 8007976:	2b10      	cmp	r3, #16
 8007978:	d006      	beq.n	8007988 <UART_SetConfig+0x174>
 800797a:	e00b      	b.n	8007994 <UART_SetConfig+0x180>
 800797c:	2300      	movs	r3, #0
 800797e:	76fb      	strb	r3, [r7, #27]
 8007980:	e05e      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007982:	2302      	movs	r3, #2
 8007984:	76fb      	strb	r3, [r7, #27]
 8007986:	e05b      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007988:	2304      	movs	r3, #4
 800798a:	76fb      	strb	r3, [r7, #27]
 800798c:	e058      	b.n	8007a40 <UART_SetConfig+0x22c>
 800798e:	2308      	movs	r3, #8
 8007990:	76fb      	strb	r3, [r7, #27]
 8007992:	e055      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007994:	2310      	movs	r3, #16
 8007996:	76fb      	strb	r3, [r7, #27]
 8007998:	e052      	b.n	8007a40 <UART_SetConfig+0x22c>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a52      	ldr	r2, [pc, #328]	; (8007ae8 <UART_SetConfig+0x2d4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d120      	bne.n	80079e6 <UART_SetConfig+0x1d2>
 80079a4:	4b4d      	ldr	r3, [pc, #308]	; (8007adc <UART_SetConfig+0x2c8>)
 80079a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80079ae:	2bc0      	cmp	r3, #192	; 0xc0
 80079b0:	d013      	beq.n	80079da <UART_SetConfig+0x1c6>
 80079b2:	2bc0      	cmp	r3, #192	; 0xc0
 80079b4:	d814      	bhi.n	80079e0 <UART_SetConfig+0x1cc>
 80079b6:	2b80      	cmp	r3, #128	; 0x80
 80079b8:	d009      	beq.n	80079ce <UART_SetConfig+0x1ba>
 80079ba:	2b80      	cmp	r3, #128	; 0x80
 80079bc:	d810      	bhi.n	80079e0 <UART_SetConfig+0x1cc>
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <UART_SetConfig+0x1b4>
 80079c2:	2b40      	cmp	r3, #64	; 0x40
 80079c4:	d006      	beq.n	80079d4 <UART_SetConfig+0x1c0>
 80079c6:	e00b      	b.n	80079e0 <UART_SetConfig+0x1cc>
 80079c8:	2300      	movs	r3, #0
 80079ca:	76fb      	strb	r3, [r7, #27]
 80079cc:	e038      	b.n	8007a40 <UART_SetConfig+0x22c>
 80079ce:	2302      	movs	r3, #2
 80079d0:	76fb      	strb	r3, [r7, #27]
 80079d2:	e035      	b.n	8007a40 <UART_SetConfig+0x22c>
 80079d4:	2304      	movs	r3, #4
 80079d6:	76fb      	strb	r3, [r7, #27]
 80079d8:	e032      	b.n	8007a40 <UART_SetConfig+0x22c>
 80079da:	2308      	movs	r3, #8
 80079dc:	76fb      	strb	r3, [r7, #27]
 80079de:	e02f      	b.n	8007a40 <UART_SetConfig+0x22c>
 80079e0:	2310      	movs	r3, #16
 80079e2:	76fb      	strb	r3, [r7, #27]
 80079e4:	e02c      	b.n	8007a40 <UART_SetConfig+0x22c>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a3a      	ldr	r2, [pc, #232]	; (8007ad4 <UART_SetConfig+0x2c0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d125      	bne.n	8007a3c <UART_SetConfig+0x228>
 80079f0:	4b3a      	ldr	r3, [pc, #232]	; (8007adc <UART_SetConfig+0x2c8>)
 80079f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079fe:	d017      	beq.n	8007a30 <UART_SetConfig+0x21c>
 8007a00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a04:	d817      	bhi.n	8007a36 <UART_SetConfig+0x222>
 8007a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a0a:	d00b      	beq.n	8007a24 <UART_SetConfig+0x210>
 8007a0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a10:	d811      	bhi.n	8007a36 <UART_SetConfig+0x222>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <UART_SetConfig+0x20a>
 8007a16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1a:	d006      	beq.n	8007a2a <UART_SetConfig+0x216>
 8007a1c:	e00b      	b.n	8007a36 <UART_SetConfig+0x222>
 8007a1e:	2300      	movs	r3, #0
 8007a20:	76fb      	strb	r3, [r7, #27]
 8007a22:	e00d      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007a24:	2302      	movs	r3, #2
 8007a26:	76fb      	strb	r3, [r7, #27]
 8007a28:	e00a      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007a2a:	2304      	movs	r3, #4
 8007a2c:	76fb      	strb	r3, [r7, #27]
 8007a2e:	e007      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007a30:	2308      	movs	r3, #8
 8007a32:	76fb      	strb	r3, [r7, #27]
 8007a34:	e004      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007a36:	2310      	movs	r3, #16
 8007a38:	76fb      	strb	r3, [r7, #27]
 8007a3a:	e001      	b.n	8007a40 <UART_SetConfig+0x22c>
 8007a3c:	2310      	movs	r3, #16
 8007a3e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a23      	ldr	r2, [pc, #140]	; (8007ad4 <UART_SetConfig+0x2c0>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	f040 8084 	bne.w	8007b54 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007a4c:	7efb      	ldrb	r3, [r7, #27]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d823      	bhi.n	8007a9a <UART_SetConfig+0x286>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x244>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a9b 	.word	0x08007a9b
 8007a60:	08007a85 	.word	0x08007a85
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007a8b 	.word	0x08007a8b
 8007a6c:	08007a9b 	.word	0x08007a9b
 8007a70:	08007a9b 	.word	0x08007a9b
 8007a74:	08007a9b 	.word	0x08007a9b
 8007a78:	08007a93 	.word	0x08007a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd fdb8 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8007a80:	6178      	str	r0, [r7, #20]
        break;
 8007a82:	e00f      	b.n	8007aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a84:	4b19      	ldr	r3, [pc, #100]	; (8007aec <UART_SetConfig+0x2d8>)
 8007a86:	617b      	str	r3, [r7, #20]
        break;
 8007a88:	e00c      	b.n	8007aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a8a:	f7fd fd19 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8007a8e:	6178      	str	r0, [r7, #20]
        break;
 8007a90:	e008      	b.n	8007aa4 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a96:	617b      	str	r3, [r7, #20]
        break;
 8007a98:	e004      	b.n	8007aa4 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	76bb      	strb	r3, [r7, #26]
        break;
 8007aa2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	f000 8102 	beq.w	8007cb0 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685a      	ldr	r2, [r3, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	005b      	lsls	r3, r3, #1
 8007ab4:	4413      	add	r3, r2
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	429a      	cmp	r2, r3
 8007aba:	d305      	bcc.n	8007ac8 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	429a      	cmp	r2, r3
 8007ac6:	d913      	bls.n	8007af0 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	76bb      	strb	r3, [r7, #26]
 8007acc:	e0f0      	b.n	8007cb0 <UART_SetConfig+0x49c>
 8007ace:	bf00      	nop
 8007ad0:	efff69f3 	.word	0xefff69f3
 8007ad4:	40008000 	.word	0x40008000
 8007ad8:	40013800 	.word	0x40013800
 8007adc:	40021000 	.word	0x40021000
 8007ae0:	40004400 	.word	0x40004400
 8007ae4:	40004800 	.word	0x40004800
 8007ae8:	40004c00 	.word	0x40004c00
 8007aec:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	020b      	lsls	r3, r1, #8
 8007b02:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007b06:	0202      	lsls	r2, r0, #8
 8007b08:	6879      	ldr	r1, [r7, #4]
 8007b0a:	6849      	ldr	r1, [r1, #4]
 8007b0c:	0849      	lsrs	r1, r1, #1
 8007b0e:	4608      	mov	r0, r1
 8007b10:	f04f 0100 	mov.w	r1, #0
 8007b14:	1814      	adds	r4, r2, r0
 8007b16:	eb43 0501 	adc.w	r5, r3, r1
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	4620      	mov	r0, r4
 8007b26:	4629      	mov	r1, r5
 8007b28:	f7f9 f870 	bl	8000c0c <__aeabi_uldivmod>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4613      	mov	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b3a:	d308      	bcc.n	8007b4e <UART_SetConfig+0x33a>
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b42:	d204      	bcs.n	8007b4e <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	60da      	str	r2, [r3, #12]
 8007b4c:	e0b0      	b.n	8007cb0 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	76bb      	strb	r3, [r7, #26]
 8007b52:	e0ad      	b.n	8007cb0 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	69db      	ldr	r3, [r3, #28]
 8007b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b5c:	d15c      	bne.n	8007c18 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8007b5e:	7efb      	ldrb	r3, [r7, #27]
 8007b60:	2b08      	cmp	r3, #8
 8007b62:	d828      	bhi.n	8007bb6 <UART_SetConfig+0x3a2>
 8007b64:	a201      	add	r2, pc, #4	; (adr r2, 8007b6c <UART_SetConfig+0x358>)
 8007b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6a:	bf00      	nop
 8007b6c:	08007b91 	.word	0x08007b91
 8007b70:	08007b99 	.word	0x08007b99
 8007b74:	08007ba1 	.word	0x08007ba1
 8007b78:	08007bb7 	.word	0x08007bb7
 8007b7c:	08007ba7 	.word	0x08007ba7
 8007b80:	08007bb7 	.word	0x08007bb7
 8007b84:	08007bb7 	.word	0x08007bb7
 8007b88:	08007bb7 	.word	0x08007bb7
 8007b8c:	08007baf 	.word	0x08007baf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b90:	f7fd fd2e 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8007b94:	6178      	str	r0, [r7, #20]
        break;
 8007b96:	e013      	b.n	8007bc0 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b98:	f7fd fd40 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 8007b9c:	6178      	str	r0, [r7, #20]
        break;
 8007b9e:	e00f      	b.n	8007bc0 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba0:	4b49      	ldr	r3, [pc, #292]	; (8007cc8 <UART_SetConfig+0x4b4>)
 8007ba2:	617b      	str	r3, [r7, #20]
        break;
 8007ba4:	e00c      	b.n	8007bc0 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ba6:	f7fd fc8b 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8007baa:	6178      	str	r0, [r7, #20]
        break;
 8007bac:	e008      	b.n	8007bc0 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bb2:	617b      	str	r3, [r7, #20]
        break;
 8007bb4:	e004      	b.n	8007bc0 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	76bb      	strb	r3, [r7, #26]
        break;
 8007bbe:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d074      	beq.n	8007cb0 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	005a      	lsls	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	085b      	lsrs	r3, r3, #1
 8007bd0:	441a      	add	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b0f      	cmp	r3, #15
 8007be2:	d916      	bls.n	8007c12 <UART_SetConfig+0x3fe>
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bea:	d212      	bcs.n	8007c12 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	b29b      	uxth	r3, r3
 8007bf0:	f023 030f 	bic.w	r3, r3, #15
 8007bf4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	085b      	lsrs	r3, r3, #1
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	b29a      	uxth	r2, r3
 8007c02:	89fb      	ldrh	r3, [r7, #14]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	89fa      	ldrh	r2, [r7, #14]
 8007c0e:	60da      	str	r2, [r3, #12]
 8007c10:	e04e      	b.n	8007cb0 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	76bb      	strb	r3, [r7, #26]
 8007c16:	e04b      	b.n	8007cb0 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c18:	7efb      	ldrb	r3, [r7, #27]
 8007c1a:	2b08      	cmp	r3, #8
 8007c1c:	d827      	bhi.n	8007c6e <UART_SetConfig+0x45a>
 8007c1e:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <UART_SetConfig+0x410>)
 8007c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c24:	08007c49 	.word	0x08007c49
 8007c28:	08007c51 	.word	0x08007c51
 8007c2c:	08007c59 	.word	0x08007c59
 8007c30:	08007c6f 	.word	0x08007c6f
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c6f 	.word	0x08007c6f
 8007c3c:	08007c6f 	.word	0x08007c6f
 8007c40:	08007c6f 	.word	0x08007c6f
 8007c44:	08007c67 	.word	0x08007c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c48:	f7fd fcd2 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 8007c4c:	6178      	str	r0, [r7, #20]
        break;
 8007c4e:	e013      	b.n	8007c78 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c50:	f7fd fce4 	bl	800561c <HAL_RCC_GetPCLK2Freq>
 8007c54:	6178      	str	r0, [r7, #20]
        break;
 8007c56:	e00f      	b.n	8007c78 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c58:	4b1b      	ldr	r3, [pc, #108]	; (8007cc8 <UART_SetConfig+0x4b4>)
 8007c5a:	617b      	str	r3, [r7, #20]
        break;
 8007c5c:	e00c      	b.n	8007c78 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c5e:	f7fd fc2f 	bl	80054c0 <HAL_RCC_GetSysClockFreq>
 8007c62:	6178      	str	r0, [r7, #20]
        break;
 8007c64:	e008      	b.n	8007c78 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6a:	617b      	str	r3, [r7, #20]
        break;
 8007c6c:	e004      	b.n	8007c78 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	76bb      	strb	r3, [r7, #26]
        break;
 8007c76:	bf00      	nop
    }

    if (pclk != 0U)
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d018      	beq.n	8007cb0 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	085a      	lsrs	r2, r3, #1
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c90:	b29b      	uxth	r3, r3
 8007c92:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d908      	bls.n	8007cac <UART_SetConfig+0x498>
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca0:	d204      	bcs.n	8007cac <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	693a      	ldr	r2, [r7, #16]
 8007ca8:	60da      	str	r2, [r3, #12]
 8007caa:	e001      	b.n	8007cb0 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007cbc:	7ebb      	ldrb	r3, [r7, #26]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3720      	adds	r7, #32
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	00f42400 	.word	0x00f42400

08007ccc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d00a      	beq.n	8007cf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	430a      	orrs	r2, r1
 8007cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00a      	beq.n	8007d18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1c:	f003 0304 	and.w	r3, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00a      	beq.n	8007d3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	f003 0308 	and.w	r3, r3, #8
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d00a      	beq.n	8007d7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	f003 0320 	and.w	r3, r3, #32
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d00a      	beq.n	8007da0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	430a      	orrs	r2, r1
 8007d9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d01a      	beq.n	8007de2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	685b      	ldr	r3, [r3, #4]
 8007db2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dca:	d10a      	bne.n	8007de2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	430a      	orrs	r2, r1
 8007de0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d00a      	beq.n	8007e04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	430a      	orrs	r2, r1
 8007e02:	605a      	str	r2, [r3, #4]
  }
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e20:	f7fb ffe2 	bl	8003de8 <HAL_GetTick>
 8007e24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d10e      	bne.n	8007e52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e38:	9300      	str	r3, [sp, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f82d 	bl	8007ea2 <UART_WaitOnFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e023      	b.n	8007e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b04      	cmp	r3, #4
 8007e5e:	d10e      	bne.n	8007e7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f817 	bl	8007ea2 <UART_WaitOnFlagUntilTimeout>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e7a:	2303      	movs	r3, #3
 8007e7c:	e00d      	b.n	8007e9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2220      	movs	r2, #32
 8007e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2220      	movs	r2, #32
 8007e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b084      	sub	sp, #16
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	60f8      	str	r0, [r7, #12]
 8007eaa:	60b9      	str	r1, [r7, #8]
 8007eac:	603b      	str	r3, [r7, #0]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eb2:	e05e      	b.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eba:	d05a      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ebc:	f7fb ff94 	bl	8003de8 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d302      	bcc.n	8007ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d11b      	bne.n	8007f0a <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007ee0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2220      	movs	r2, #32
 8007efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f06:	2303      	movs	r3, #3
 8007f08:	e043      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0304 	and.w	r3, r3, #4
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d02c      	beq.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f26:	d124      	bne.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f30:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f40:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f022 0201 	bic.w	r2, r2, #1
 8007f50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2220      	movs	r2, #32
 8007f56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	e00f      	b.n	8007f92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	69da      	ldr	r2, [r3, #28]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	bf0c      	ite	eq
 8007f82:	2301      	moveq	r3, #1
 8007f84:	2300      	movne	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d091      	beq.n	8007eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
	...

08007f9c <__errno>:
 8007f9c:	4b01      	ldr	r3, [pc, #4]	; (8007fa4 <__errno+0x8>)
 8007f9e:	6818      	ldr	r0, [r3, #0]
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000010 	.word	0x20000010

08007fa8 <__libc_init_array>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4d0d      	ldr	r5, [pc, #52]	; (8007fe0 <__libc_init_array+0x38>)
 8007fac:	4c0d      	ldr	r4, [pc, #52]	; (8007fe4 <__libc_init_array+0x3c>)
 8007fae:	1b64      	subs	r4, r4, r5
 8007fb0:	10a4      	asrs	r4, r4, #2
 8007fb2:	2600      	movs	r6, #0
 8007fb4:	42a6      	cmp	r6, r4
 8007fb6:	d109      	bne.n	8007fcc <__libc_init_array+0x24>
 8007fb8:	4d0b      	ldr	r5, [pc, #44]	; (8007fe8 <__libc_init_array+0x40>)
 8007fba:	4c0c      	ldr	r4, [pc, #48]	; (8007fec <__libc_init_array+0x44>)
 8007fbc:	f000 fc64 	bl	8008888 <_init>
 8007fc0:	1b64      	subs	r4, r4, r5
 8007fc2:	10a4      	asrs	r4, r4, #2
 8007fc4:	2600      	movs	r6, #0
 8007fc6:	42a6      	cmp	r6, r4
 8007fc8:	d105      	bne.n	8007fd6 <__libc_init_array+0x2e>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd0:	4798      	blx	r3
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7ee      	b.n	8007fb4 <__libc_init_array+0xc>
 8007fd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fda:	4798      	blx	r3
 8007fdc:	3601      	adds	r6, #1
 8007fde:	e7f2      	b.n	8007fc6 <__libc_init_array+0x1e>
 8007fe0:	08008a40 	.word	0x08008a40
 8007fe4:	08008a40 	.word	0x08008a40
 8007fe8:	08008a40 	.word	0x08008a40
 8007fec:	08008a44 	.word	0x08008a44

08007ff0 <memset>:
 8007ff0:	4402      	add	r2, r0
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d100      	bne.n	8007ffa <memset+0xa>
 8007ff8:	4770      	bx	lr
 8007ffa:	f803 1b01 	strb.w	r1, [r3], #1
 8007ffe:	e7f9      	b.n	8007ff4 <memset+0x4>

08008000 <siprintf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	b500      	push	{lr}
 8008004:	b09c      	sub	sp, #112	; 0x70
 8008006:	ab1d      	add	r3, sp, #116	; 0x74
 8008008:	9002      	str	r0, [sp, #8]
 800800a:	9006      	str	r0, [sp, #24]
 800800c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008010:	4809      	ldr	r0, [pc, #36]	; (8008038 <siprintf+0x38>)
 8008012:	9107      	str	r1, [sp, #28]
 8008014:	9104      	str	r1, [sp, #16]
 8008016:	4909      	ldr	r1, [pc, #36]	; (800803c <siprintf+0x3c>)
 8008018:	f853 2b04 	ldr.w	r2, [r3], #4
 800801c:	9105      	str	r1, [sp, #20]
 800801e:	6800      	ldr	r0, [r0, #0]
 8008020:	9301      	str	r3, [sp, #4]
 8008022:	a902      	add	r1, sp, #8
 8008024:	f000 f868 	bl	80080f8 <_svfiprintf_r>
 8008028:	9b02      	ldr	r3, [sp, #8]
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
 800802e:	b01c      	add	sp, #112	; 0x70
 8008030:	f85d eb04 	ldr.w	lr, [sp], #4
 8008034:	b003      	add	sp, #12
 8008036:	4770      	bx	lr
 8008038:	20000010 	.word	0x20000010
 800803c:	ffff0208 	.word	0xffff0208

08008040 <__ssputs_r>:
 8008040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008044:	688e      	ldr	r6, [r1, #8]
 8008046:	429e      	cmp	r6, r3
 8008048:	4682      	mov	sl, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4690      	mov	r8, r2
 800804e:	461f      	mov	r7, r3
 8008050:	d838      	bhi.n	80080c4 <__ssputs_r+0x84>
 8008052:	898a      	ldrh	r2, [r1, #12]
 8008054:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008058:	d032      	beq.n	80080c0 <__ssputs_r+0x80>
 800805a:	6825      	ldr	r5, [r4, #0]
 800805c:	6909      	ldr	r1, [r1, #16]
 800805e:	eba5 0901 	sub.w	r9, r5, r1
 8008062:	6965      	ldr	r5, [r4, #20]
 8008064:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800806c:	3301      	adds	r3, #1
 800806e:	444b      	add	r3, r9
 8008070:	106d      	asrs	r5, r5, #1
 8008072:	429d      	cmp	r5, r3
 8008074:	bf38      	it	cc
 8008076:	461d      	movcc	r5, r3
 8008078:	0553      	lsls	r3, r2, #21
 800807a:	d531      	bpl.n	80080e0 <__ssputs_r+0xa0>
 800807c:	4629      	mov	r1, r5
 800807e:	f000 fb47 	bl	8008710 <_malloc_r>
 8008082:	4606      	mov	r6, r0
 8008084:	b950      	cbnz	r0, 800809c <__ssputs_r+0x5c>
 8008086:	230c      	movs	r3, #12
 8008088:	f8ca 3000 	str.w	r3, [sl]
 800808c:	89a3      	ldrh	r3, [r4, #12]
 800808e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008092:	81a3      	strh	r3, [r4, #12]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800809c:	6921      	ldr	r1, [r4, #16]
 800809e:	464a      	mov	r2, r9
 80080a0:	f000 fabe 	bl	8008620 <memcpy>
 80080a4:	89a3      	ldrh	r3, [r4, #12]
 80080a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ae:	81a3      	strh	r3, [r4, #12]
 80080b0:	6126      	str	r6, [r4, #16]
 80080b2:	6165      	str	r5, [r4, #20]
 80080b4:	444e      	add	r6, r9
 80080b6:	eba5 0509 	sub.w	r5, r5, r9
 80080ba:	6026      	str	r6, [r4, #0]
 80080bc:	60a5      	str	r5, [r4, #8]
 80080be:	463e      	mov	r6, r7
 80080c0:	42be      	cmp	r6, r7
 80080c2:	d900      	bls.n	80080c6 <__ssputs_r+0x86>
 80080c4:	463e      	mov	r6, r7
 80080c6:	4632      	mov	r2, r6
 80080c8:	6820      	ldr	r0, [r4, #0]
 80080ca:	4641      	mov	r1, r8
 80080cc:	f000 fab6 	bl	800863c <memmove>
 80080d0:	68a3      	ldr	r3, [r4, #8]
 80080d2:	6822      	ldr	r2, [r4, #0]
 80080d4:	1b9b      	subs	r3, r3, r6
 80080d6:	4432      	add	r2, r6
 80080d8:	60a3      	str	r3, [r4, #8]
 80080da:	6022      	str	r2, [r4, #0]
 80080dc:	2000      	movs	r0, #0
 80080de:	e7db      	b.n	8008098 <__ssputs_r+0x58>
 80080e0:	462a      	mov	r2, r5
 80080e2:	f000 fb6f 	bl	80087c4 <_realloc_r>
 80080e6:	4606      	mov	r6, r0
 80080e8:	2800      	cmp	r0, #0
 80080ea:	d1e1      	bne.n	80080b0 <__ssputs_r+0x70>
 80080ec:	6921      	ldr	r1, [r4, #16]
 80080ee:	4650      	mov	r0, sl
 80080f0:	f000 fabe 	bl	8008670 <_free_r>
 80080f4:	e7c7      	b.n	8008086 <__ssputs_r+0x46>
	...

080080f8 <_svfiprintf_r>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	4698      	mov	r8, r3
 80080fe:	898b      	ldrh	r3, [r1, #12]
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	b09d      	sub	sp, #116	; 0x74
 8008104:	4607      	mov	r7, r0
 8008106:	460d      	mov	r5, r1
 8008108:	4614      	mov	r4, r2
 800810a:	d50e      	bpl.n	800812a <_svfiprintf_r+0x32>
 800810c:	690b      	ldr	r3, [r1, #16]
 800810e:	b963      	cbnz	r3, 800812a <_svfiprintf_r+0x32>
 8008110:	2140      	movs	r1, #64	; 0x40
 8008112:	f000 fafd 	bl	8008710 <_malloc_r>
 8008116:	6028      	str	r0, [r5, #0]
 8008118:	6128      	str	r0, [r5, #16]
 800811a:	b920      	cbnz	r0, 8008126 <_svfiprintf_r+0x2e>
 800811c:	230c      	movs	r3, #12
 800811e:	603b      	str	r3, [r7, #0]
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e0d1      	b.n	80082ca <_svfiprintf_r+0x1d2>
 8008126:	2340      	movs	r3, #64	; 0x40
 8008128:	616b      	str	r3, [r5, #20]
 800812a:	2300      	movs	r3, #0
 800812c:	9309      	str	r3, [sp, #36]	; 0x24
 800812e:	2320      	movs	r3, #32
 8008130:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008134:	f8cd 800c 	str.w	r8, [sp, #12]
 8008138:	2330      	movs	r3, #48	; 0x30
 800813a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80082e4 <_svfiprintf_r+0x1ec>
 800813e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008142:	f04f 0901 	mov.w	r9, #1
 8008146:	4623      	mov	r3, r4
 8008148:	469a      	mov	sl, r3
 800814a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814e:	b10a      	cbz	r2, 8008154 <_svfiprintf_r+0x5c>
 8008150:	2a25      	cmp	r2, #37	; 0x25
 8008152:	d1f9      	bne.n	8008148 <_svfiprintf_r+0x50>
 8008154:	ebba 0b04 	subs.w	fp, sl, r4
 8008158:	d00b      	beq.n	8008172 <_svfiprintf_r+0x7a>
 800815a:	465b      	mov	r3, fp
 800815c:	4622      	mov	r2, r4
 800815e:	4629      	mov	r1, r5
 8008160:	4638      	mov	r0, r7
 8008162:	f7ff ff6d 	bl	8008040 <__ssputs_r>
 8008166:	3001      	adds	r0, #1
 8008168:	f000 80aa 	beq.w	80082c0 <_svfiprintf_r+0x1c8>
 800816c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800816e:	445a      	add	r2, fp
 8008170:	9209      	str	r2, [sp, #36]	; 0x24
 8008172:	f89a 3000 	ldrb.w	r3, [sl]
 8008176:	2b00      	cmp	r3, #0
 8008178:	f000 80a2 	beq.w	80082c0 <_svfiprintf_r+0x1c8>
 800817c:	2300      	movs	r3, #0
 800817e:	f04f 32ff 	mov.w	r2, #4294967295
 8008182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008186:	f10a 0a01 	add.w	sl, sl, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	9307      	str	r3, [sp, #28]
 800818e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008192:	931a      	str	r3, [sp, #104]	; 0x68
 8008194:	4654      	mov	r4, sl
 8008196:	2205      	movs	r2, #5
 8008198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819c:	4851      	ldr	r0, [pc, #324]	; (80082e4 <_svfiprintf_r+0x1ec>)
 800819e:	f7f8 f81f 	bl	80001e0 <memchr>
 80081a2:	9a04      	ldr	r2, [sp, #16]
 80081a4:	b9d8      	cbnz	r0, 80081de <_svfiprintf_r+0xe6>
 80081a6:	06d0      	lsls	r0, r2, #27
 80081a8:	bf44      	itt	mi
 80081aa:	2320      	movmi	r3, #32
 80081ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081b0:	0711      	lsls	r1, r2, #28
 80081b2:	bf44      	itt	mi
 80081b4:	232b      	movmi	r3, #43	; 0x2b
 80081b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081ba:	f89a 3000 	ldrb.w	r3, [sl]
 80081be:	2b2a      	cmp	r3, #42	; 0x2a
 80081c0:	d015      	beq.n	80081ee <_svfiprintf_r+0xf6>
 80081c2:	9a07      	ldr	r2, [sp, #28]
 80081c4:	4654      	mov	r4, sl
 80081c6:	2000      	movs	r0, #0
 80081c8:	f04f 0c0a 	mov.w	ip, #10
 80081cc:	4621      	mov	r1, r4
 80081ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d2:	3b30      	subs	r3, #48	; 0x30
 80081d4:	2b09      	cmp	r3, #9
 80081d6:	d94e      	bls.n	8008276 <_svfiprintf_r+0x17e>
 80081d8:	b1b0      	cbz	r0, 8008208 <_svfiprintf_r+0x110>
 80081da:	9207      	str	r2, [sp, #28]
 80081dc:	e014      	b.n	8008208 <_svfiprintf_r+0x110>
 80081de:	eba0 0308 	sub.w	r3, r0, r8
 80081e2:	fa09 f303 	lsl.w	r3, r9, r3
 80081e6:	4313      	orrs	r3, r2
 80081e8:	9304      	str	r3, [sp, #16]
 80081ea:	46a2      	mov	sl, r4
 80081ec:	e7d2      	b.n	8008194 <_svfiprintf_r+0x9c>
 80081ee:	9b03      	ldr	r3, [sp, #12]
 80081f0:	1d19      	adds	r1, r3, #4
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	9103      	str	r1, [sp, #12]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	bfbb      	ittet	lt
 80081fa:	425b      	neglt	r3, r3
 80081fc:	f042 0202 	orrlt.w	r2, r2, #2
 8008200:	9307      	strge	r3, [sp, #28]
 8008202:	9307      	strlt	r3, [sp, #28]
 8008204:	bfb8      	it	lt
 8008206:	9204      	strlt	r2, [sp, #16]
 8008208:	7823      	ldrb	r3, [r4, #0]
 800820a:	2b2e      	cmp	r3, #46	; 0x2e
 800820c:	d10c      	bne.n	8008228 <_svfiprintf_r+0x130>
 800820e:	7863      	ldrb	r3, [r4, #1]
 8008210:	2b2a      	cmp	r3, #42	; 0x2a
 8008212:	d135      	bne.n	8008280 <_svfiprintf_r+0x188>
 8008214:	9b03      	ldr	r3, [sp, #12]
 8008216:	1d1a      	adds	r2, r3, #4
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	9203      	str	r2, [sp, #12]
 800821c:	2b00      	cmp	r3, #0
 800821e:	bfb8      	it	lt
 8008220:	f04f 33ff 	movlt.w	r3, #4294967295
 8008224:	3402      	adds	r4, #2
 8008226:	9305      	str	r3, [sp, #20]
 8008228:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80082f4 <_svfiprintf_r+0x1fc>
 800822c:	7821      	ldrb	r1, [r4, #0]
 800822e:	2203      	movs	r2, #3
 8008230:	4650      	mov	r0, sl
 8008232:	f7f7 ffd5 	bl	80001e0 <memchr>
 8008236:	b140      	cbz	r0, 800824a <_svfiprintf_r+0x152>
 8008238:	2340      	movs	r3, #64	; 0x40
 800823a:	eba0 000a 	sub.w	r0, r0, sl
 800823e:	fa03 f000 	lsl.w	r0, r3, r0
 8008242:	9b04      	ldr	r3, [sp, #16]
 8008244:	4303      	orrs	r3, r0
 8008246:	3401      	adds	r4, #1
 8008248:	9304      	str	r3, [sp, #16]
 800824a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824e:	4826      	ldr	r0, [pc, #152]	; (80082e8 <_svfiprintf_r+0x1f0>)
 8008250:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008254:	2206      	movs	r2, #6
 8008256:	f7f7 ffc3 	bl	80001e0 <memchr>
 800825a:	2800      	cmp	r0, #0
 800825c:	d038      	beq.n	80082d0 <_svfiprintf_r+0x1d8>
 800825e:	4b23      	ldr	r3, [pc, #140]	; (80082ec <_svfiprintf_r+0x1f4>)
 8008260:	bb1b      	cbnz	r3, 80082aa <_svfiprintf_r+0x1b2>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	3307      	adds	r3, #7
 8008266:	f023 0307 	bic.w	r3, r3, #7
 800826a:	3308      	adds	r3, #8
 800826c:	9303      	str	r3, [sp, #12]
 800826e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008270:	4433      	add	r3, r6
 8008272:	9309      	str	r3, [sp, #36]	; 0x24
 8008274:	e767      	b.n	8008146 <_svfiprintf_r+0x4e>
 8008276:	fb0c 3202 	mla	r2, ip, r2, r3
 800827a:	460c      	mov	r4, r1
 800827c:	2001      	movs	r0, #1
 800827e:	e7a5      	b.n	80081cc <_svfiprintf_r+0xd4>
 8008280:	2300      	movs	r3, #0
 8008282:	3401      	adds	r4, #1
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	4619      	mov	r1, r3
 8008288:	f04f 0c0a 	mov.w	ip, #10
 800828c:	4620      	mov	r0, r4
 800828e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008292:	3a30      	subs	r2, #48	; 0x30
 8008294:	2a09      	cmp	r2, #9
 8008296:	d903      	bls.n	80082a0 <_svfiprintf_r+0x1a8>
 8008298:	2b00      	cmp	r3, #0
 800829a:	d0c5      	beq.n	8008228 <_svfiprintf_r+0x130>
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	e7c3      	b.n	8008228 <_svfiprintf_r+0x130>
 80082a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80082a4:	4604      	mov	r4, r0
 80082a6:	2301      	movs	r3, #1
 80082a8:	e7f0      	b.n	800828c <_svfiprintf_r+0x194>
 80082aa:	ab03      	add	r3, sp, #12
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	462a      	mov	r2, r5
 80082b0:	4b0f      	ldr	r3, [pc, #60]	; (80082f0 <_svfiprintf_r+0x1f8>)
 80082b2:	a904      	add	r1, sp, #16
 80082b4:	4638      	mov	r0, r7
 80082b6:	f3af 8000 	nop.w
 80082ba:	1c42      	adds	r2, r0, #1
 80082bc:	4606      	mov	r6, r0
 80082be:	d1d6      	bne.n	800826e <_svfiprintf_r+0x176>
 80082c0:	89ab      	ldrh	r3, [r5, #12]
 80082c2:	065b      	lsls	r3, r3, #25
 80082c4:	f53f af2c 	bmi.w	8008120 <_svfiprintf_r+0x28>
 80082c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082ca:	b01d      	add	sp, #116	; 0x74
 80082cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082d0:	ab03      	add	r3, sp, #12
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	462a      	mov	r2, r5
 80082d6:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <_svfiprintf_r+0x1f8>)
 80082d8:	a904      	add	r1, sp, #16
 80082da:	4638      	mov	r0, r7
 80082dc:	f000 f87a 	bl	80083d4 <_printf_i>
 80082e0:	e7eb      	b.n	80082ba <_svfiprintf_r+0x1c2>
 80082e2:	bf00      	nop
 80082e4:	08008a04 	.word	0x08008a04
 80082e8:	08008a0e 	.word	0x08008a0e
 80082ec:	00000000 	.word	0x00000000
 80082f0:	08008041 	.word	0x08008041
 80082f4:	08008a0a 	.word	0x08008a0a

080082f8 <_printf_common>:
 80082f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082fc:	4616      	mov	r6, r2
 80082fe:	4699      	mov	r9, r3
 8008300:	688a      	ldr	r2, [r1, #8]
 8008302:	690b      	ldr	r3, [r1, #16]
 8008304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008308:	4293      	cmp	r3, r2
 800830a:	bfb8      	it	lt
 800830c:	4613      	movlt	r3, r2
 800830e:	6033      	str	r3, [r6, #0]
 8008310:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008314:	4607      	mov	r7, r0
 8008316:	460c      	mov	r4, r1
 8008318:	b10a      	cbz	r2, 800831e <_printf_common+0x26>
 800831a:	3301      	adds	r3, #1
 800831c:	6033      	str	r3, [r6, #0]
 800831e:	6823      	ldr	r3, [r4, #0]
 8008320:	0699      	lsls	r1, r3, #26
 8008322:	bf42      	ittt	mi
 8008324:	6833      	ldrmi	r3, [r6, #0]
 8008326:	3302      	addmi	r3, #2
 8008328:	6033      	strmi	r3, [r6, #0]
 800832a:	6825      	ldr	r5, [r4, #0]
 800832c:	f015 0506 	ands.w	r5, r5, #6
 8008330:	d106      	bne.n	8008340 <_printf_common+0x48>
 8008332:	f104 0a19 	add.w	sl, r4, #25
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	6832      	ldr	r2, [r6, #0]
 800833a:	1a9b      	subs	r3, r3, r2
 800833c:	42ab      	cmp	r3, r5
 800833e:	dc26      	bgt.n	800838e <_printf_common+0x96>
 8008340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008344:	1e13      	subs	r3, r2, #0
 8008346:	6822      	ldr	r2, [r4, #0]
 8008348:	bf18      	it	ne
 800834a:	2301      	movne	r3, #1
 800834c:	0692      	lsls	r2, r2, #26
 800834e:	d42b      	bmi.n	80083a8 <_printf_common+0xb0>
 8008350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008354:	4649      	mov	r1, r9
 8008356:	4638      	mov	r0, r7
 8008358:	47c0      	blx	r8
 800835a:	3001      	adds	r0, #1
 800835c:	d01e      	beq.n	800839c <_printf_common+0xa4>
 800835e:	6823      	ldr	r3, [r4, #0]
 8008360:	68e5      	ldr	r5, [r4, #12]
 8008362:	6832      	ldr	r2, [r6, #0]
 8008364:	f003 0306 	and.w	r3, r3, #6
 8008368:	2b04      	cmp	r3, #4
 800836a:	bf08      	it	eq
 800836c:	1aad      	subeq	r5, r5, r2
 800836e:	68a3      	ldr	r3, [r4, #8]
 8008370:	6922      	ldr	r2, [r4, #16]
 8008372:	bf0c      	ite	eq
 8008374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008378:	2500      	movne	r5, #0
 800837a:	4293      	cmp	r3, r2
 800837c:	bfc4      	itt	gt
 800837e:	1a9b      	subgt	r3, r3, r2
 8008380:	18ed      	addgt	r5, r5, r3
 8008382:	2600      	movs	r6, #0
 8008384:	341a      	adds	r4, #26
 8008386:	42b5      	cmp	r5, r6
 8008388:	d11a      	bne.n	80083c0 <_printf_common+0xc8>
 800838a:	2000      	movs	r0, #0
 800838c:	e008      	b.n	80083a0 <_printf_common+0xa8>
 800838e:	2301      	movs	r3, #1
 8008390:	4652      	mov	r2, sl
 8008392:	4649      	mov	r1, r9
 8008394:	4638      	mov	r0, r7
 8008396:	47c0      	blx	r8
 8008398:	3001      	adds	r0, #1
 800839a:	d103      	bne.n	80083a4 <_printf_common+0xac>
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a4:	3501      	adds	r5, #1
 80083a6:	e7c6      	b.n	8008336 <_printf_common+0x3e>
 80083a8:	18e1      	adds	r1, r4, r3
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	2030      	movs	r0, #48	; 0x30
 80083ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80083b2:	4422      	add	r2, r4
 80083b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80083b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80083bc:	3302      	adds	r3, #2
 80083be:	e7c7      	b.n	8008350 <_printf_common+0x58>
 80083c0:	2301      	movs	r3, #1
 80083c2:	4622      	mov	r2, r4
 80083c4:	4649      	mov	r1, r9
 80083c6:	4638      	mov	r0, r7
 80083c8:	47c0      	blx	r8
 80083ca:	3001      	adds	r0, #1
 80083cc:	d0e6      	beq.n	800839c <_printf_common+0xa4>
 80083ce:	3601      	adds	r6, #1
 80083d0:	e7d9      	b.n	8008386 <_printf_common+0x8e>
	...

080083d4 <_printf_i>:
 80083d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083d8:	460c      	mov	r4, r1
 80083da:	4691      	mov	r9, r2
 80083dc:	7e27      	ldrb	r7, [r4, #24]
 80083de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80083e0:	2f78      	cmp	r7, #120	; 0x78
 80083e2:	4680      	mov	r8, r0
 80083e4:	469a      	mov	sl, r3
 80083e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083ea:	d807      	bhi.n	80083fc <_printf_i+0x28>
 80083ec:	2f62      	cmp	r7, #98	; 0x62
 80083ee:	d80a      	bhi.n	8008406 <_printf_i+0x32>
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	f000 80d8 	beq.w	80085a6 <_printf_i+0x1d2>
 80083f6:	2f58      	cmp	r7, #88	; 0x58
 80083f8:	f000 80a3 	beq.w	8008542 <_printf_i+0x16e>
 80083fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008400:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008404:	e03a      	b.n	800847c <_printf_i+0xa8>
 8008406:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800840a:	2b15      	cmp	r3, #21
 800840c:	d8f6      	bhi.n	80083fc <_printf_i+0x28>
 800840e:	a001      	add	r0, pc, #4	; (adr r0, 8008414 <_printf_i+0x40>)
 8008410:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008414:	0800846d 	.word	0x0800846d
 8008418:	08008481 	.word	0x08008481
 800841c:	080083fd 	.word	0x080083fd
 8008420:	080083fd 	.word	0x080083fd
 8008424:	080083fd 	.word	0x080083fd
 8008428:	080083fd 	.word	0x080083fd
 800842c:	08008481 	.word	0x08008481
 8008430:	080083fd 	.word	0x080083fd
 8008434:	080083fd 	.word	0x080083fd
 8008438:	080083fd 	.word	0x080083fd
 800843c:	080083fd 	.word	0x080083fd
 8008440:	0800858d 	.word	0x0800858d
 8008444:	080084b1 	.word	0x080084b1
 8008448:	0800856f 	.word	0x0800856f
 800844c:	080083fd 	.word	0x080083fd
 8008450:	080083fd 	.word	0x080083fd
 8008454:	080085af 	.word	0x080085af
 8008458:	080083fd 	.word	0x080083fd
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080083fd 	.word	0x080083fd
 8008464:	080083fd 	.word	0x080083fd
 8008468:	08008577 	.word	0x08008577
 800846c:	680b      	ldr	r3, [r1, #0]
 800846e:	1d1a      	adds	r2, r3, #4
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	600a      	str	r2, [r1, #0]
 8008474:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008478:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800847c:	2301      	movs	r3, #1
 800847e:	e0a3      	b.n	80085c8 <_printf_i+0x1f4>
 8008480:	6825      	ldr	r5, [r4, #0]
 8008482:	6808      	ldr	r0, [r1, #0]
 8008484:	062e      	lsls	r6, r5, #24
 8008486:	f100 0304 	add.w	r3, r0, #4
 800848a:	d50a      	bpl.n	80084a2 <_printf_i+0xce>
 800848c:	6805      	ldr	r5, [r0, #0]
 800848e:	600b      	str	r3, [r1, #0]
 8008490:	2d00      	cmp	r5, #0
 8008492:	da03      	bge.n	800849c <_printf_i+0xc8>
 8008494:	232d      	movs	r3, #45	; 0x2d
 8008496:	426d      	negs	r5, r5
 8008498:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800849c:	485e      	ldr	r0, [pc, #376]	; (8008618 <_printf_i+0x244>)
 800849e:	230a      	movs	r3, #10
 80084a0:	e019      	b.n	80084d6 <_printf_i+0x102>
 80084a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80084a6:	6805      	ldr	r5, [r0, #0]
 80084a8:	600b      	str	r3, [r1, #0]
 80084aa:	bf18      	it	ne
 80084ac:	b22d      	sxthne	r5, r5
 80084ae:	e7ef      	b.n	8008490 <_printf_i+0xbc>
 80084b0:	680b      	ldr	r3, [r1, #0]
 80084b2:	6825      	ldr	r5, [r4, #0]
 80084b4:	1d18      	adds	r0, r3, #4
 80084b6:	6008      	str	r0, [r1, #0]
 80084b8:	0628      	lsls	r0, r5, #24
 80084ba:	d501      	bpl.n	80084c0 <_printf_i+0xec>
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	e002      	b.n	80084c6 <_printf_i+0xf2>
 80084c0:	0669      	lsls	r1, r5, #25
 80084c2:	d5fb      	bpl.n	80084bc <_printf_i+0xe8>
 80084c4:	881d      	ldrh	r5, [r3, #0]
 80084c6:	4854      	ldr	r0, [pc, #336]	; (8008618 <_printf_i+0x244>)
 80084c8:	2f6f      	cmp	r7, #111	; 0x6f
 80084ca:	bf0c      	ite	eq
 80084cc:	2308      	moveq	r3, #8
 80084ce:	230a      	movne	r3, #10
 80084d0:	2100      	movs	r1, #0
 80084d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80084d6:	6866      	ldr	r6, [r4, #4]
 80084d8:	60a6      	str	r6, [r4, #8]
 80084da:	2e00      	cmp	r6, #0
 80084dc:	bfa2      	ittt	ge
 80084de:	6821      	ldrge	r1, [r4, #0]
 80084e0:	f021 0104 	bicge.w	r1, r1, #4
 80084e4:	6021      	strge	r1, [r4, #0]
 80084e6:	b90d      	cbnz	r5, 80084ec <_printf_i+0x118>
 80084e8:	2e00      	cmp	r6, #0
 80084ea:	d04d      	beq.n	8008588 <_printf_i+0x1b4>
 80084ec:	4616      	mov	r6, r2
 80084ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80084f2:	fb03 5711 	mls	r7, r3, r1, r5
 80084f6:	5dc7      	ldrb	r7, [r0, r7]
 80084f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80084fc:	462f      	mov	r7, r5
 80084fe:	42bb      	cmp	r3, r7
 8008500:	460d      	mov	r5, r1
 8008502:	d9f4      	bls.n	80084ee <_printf_i+0x11a>
 8008504:	2b08      	cmp	r3, #8
 8008506:	d10b      	bne.n	8008520 <_printf_i+0x14c>
 8008508:	6823      	ldr	r3, [r4, #0]
 800850a:	07df      	lsls	r7, r3, #31
 800850c:	d508      	bpl.n	8008520 <_printf_i+0x14c>
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	6861      	ldr	r1, [r4, #4]
 8008512:	4299      	cmp	r1, r3
 8008514:	bfde      	ittt	le
 8008516:	2330      	movle	r3, #48	; 0x30
 8008518:	f806 3c01 	strble.w	r3, [r6, #-1]
 800851c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008520:	1b92      	subs	r2, r2, r6
 8008522:	6122      	str	r2, [r4, #16]
 8008524:	f8cd a000 	str.w	sl, [sp]
 8008528:	464b      	mov	r3, r9
 800852a:	aa03      	add	r2, sp, #12
 800852c:	4621      	mov	r1, r4
 800852e:	4640      	mov	r0, r8
 8008530:	f7ff fee2 	bl	80082f8 <_printf_common>
 8008534:	3001      	adds	r0, #1
 8008536:	d14c      	bne.n	80085d2 <_printf_i+0x1fe>
 8008538:	f04f 30ff 	mov.w	r0, #4294967295
 800853c:	b004      	add	sp, #16
 800853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008542:	4835      	ldr	r0, [pc, #212]	; (8008618 <_printf_i+0x244>)
 8008544:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	680e      	ldr	r6, [r1, #0]
 800854c:	061f      	lsls	r7, r3, #24
 800854e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008552:	600e      	str	r6, [r1, #0]
 8008554:	d514      	bpl.n	8008580 <_printf_i+0x1ac>
 8008556:	07d9      	lsls	r1, r3, #31
 8008558:	bf44      	itt	mi
 800855a:	f043 0320 	orrmi.w	r3, r3, #32
 800855e:	6023      	strmi	r3, [r4, #0]
 8008560:	b91d      	cbnz	r5, 800856a <_printf_i+0x196>
 8008562:	6823      	ldr	r3, [r4, #0]
 8008564:	f023 0320 	bic.w	r3, r3, #32
 8008568:	6023      	str	r3, [r4, #0]
 800856a:	2310      	movs	r3, #16
 800856c:	e7b0      	b.n	80084d0 <_printf_i+0xfc>
 800856e:	6823      	ldr	r3, [r4, #0]
 8008570:	f043 0320 	orr.w	r3, r3, #32
 8008574:	6023      	str	r3, [r4, #0]
 8008576:	2378      	movs	r3, #120	; 0x78
 8008578:	4828      	ldr	r0, [pc, #160]	; (800861c <_printf_i+0x248>)
 800857a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800857e:	e7e3      	b.n	8008548 <_printf_i+0x174>
 8008580:	065e      	lsls	r6, r3, #25
 8008582:	bf48      	it	mi
 8008584:	b2ad      	uxthmi	r5, r5
 8008586:	e7e6      	b.n	8008556 <_printf_i+0x182>
 8008588:	4616      	mov	r6, r2
 800858a:	e7bb      	b.n	8008504 <_printf_i+0x130>
 800858c:	680b      	ldr	r3, [r1, #0]
 800858e:	6826      	ldr	r6, [r4, #0]
 8008590:	6960      	ldr	r0, [r4, #20]
 8008592:	1d1d      	adds	r5, r3, #4
 8008594:	600d      	str	r5, [r1, #0]
 8008596:	0635      	lsls	r5, r6, #24
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	d501      	bpl.n	80085a0 <_printf_i+0x1cc>
 800859c:	6018      	str	r0, [r3, #0]
 800859e:	e002      	b.n	80085a6 <_printf_i+0x1d2>
 80085a0:	0671      	lsls	r1, r6, #25
 80085a2:	d5fb      	bpl.n	800859c <_printf_i+0x1c8>
 80085a4:	8018      	strh	r0, [r3, #0]
 80085a6:	2300      	movs	r3, #0
 80085a8:	6123      	str	r3, [r4, #16]
 80085aa:	4616      	mov	r6, r2
 80085ac:	e7ba      	b.n	8008524 <_printf_i+0x150>
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	1d1a      	adds	r2, r3, #4
 80085b2:	600a      	str	r2, [r1, #0]
 80085b4:	681e      	ldr	r6, [r3, #0]
 80085b6:	6862      	ldr	r2, [r4, #4]
 80085b8:	2100      	movs	r1, #0
 80085ba:	4630      	mov	r0, r6
 80085bc:	f7f7 fe10 	bl	80001e0 <memchr>
 80085c0:	b108      	cbz	r0, 80085c6 <_printf_i+0x1f2>
 80085c2:	1b80      	subs	r0, r0, r6
 80085c4:	6060      	str	r0, [r4, #4]
 80085c6:	6863      	ldr	r3, [r4, #4]
 80085c8:	6123      	str	r3, [r4, #16]
 80085ca:	2300      	movs	r3, #0
 80085cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085d0:	e7a8      	b.n	8008524 <_printf_i+0x150>
 80085d2:	6923      	ldr	r3, [r4, #16]
 80085d4:	4632      	mov	r2, r6
 80085d6:	4649      	mov	r1, r9
 80085d8:	4640      	mov	r0, r8
 80085da:	47d0      	blx	sl
 80085dc:	3001      	adds	r0, #1
 80085de:	d0ab      	beq.n	8008538 <_printf_i+0x164>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	079b      	lsls	r3, r3, #30
 80085e4:	d413      	bmi.n	800860e <_printf_i+0x23a>
 80085e6:	68e0      	ldr	r0, [r4, #12]
 80085e8:	9b03      	ldr	r3, [sp, #12]
 80085ea:	4298      	cmp	r0, r3
 80085ec:	bfb8      	it	lt
 80085ee:	4618      	movlt	r0, r3
 80085f0:	e7a4      	b.n	800853c <_printf_i+0x168>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4632      	mov	r2, r6
 80085f6:	4649      	mov	r1, r9
 80085f8:	4640      	mov	r0, r8
 80085fa:	47d0      	blx	sl
 80085fc:	3001      	adds	r0, #1
 80085fe:	d09b      	beq.n	8008538 <_printf_i+0x164>
 8008600:	3501      	adds	r5, #1
 8008602:	68e3      	ldr	r3, [r4, #12]
 8008604:	9903      	ldr	r1, [sp, #12]
 8008606:	1a5b      	subs	r3, r3, r1
 8008608:	42ab      	cmp	r3, r5
 800860a:	dcf2      	bgt.n	80085f2 <_printf_i+0x21e>
 800860c:	e7eb      	b.n	80085e6 <_printf_i+0x212>
 800860e:	2500      	movs	r5, #0
 8008610:	f104 0619 	add.w	r6, r4, #25
 8008614:	e7f5      	b.n	8008602 <_printf_i+0x22e>
 8008616:	bf00      	nop
 8008618:	08008a15 	.word	0x08008a15
 800861c:	08008a26 	.word	0x08008a26

08008620 <memcpy>:
 8008620:	440a      	add	r2, r1
 8008622:	4291      	cmp	r1, r2
 8008624:	f100 33ff 	add.w	r3, r0, #4294967295
 8008628:	d100      	bne.n	800862c <memcpy+0xc>
 800862a:	4770      	bx	lr
 800862c:	b510      	push	{r4, lr}
 800862e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008632:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008636:	4291      	cmp	r1, r2
 8008638:	d1f9      	bne.n	800862e <memcpy+0xe>
 800863a:	bd10      	pop	{r4, pc}

0800863c <memmove>:
 800863c:	4288      	cmp	r0, r1
 800863e:	b510      	push	{r4, lr}
 8008640:	eb01 0402 	add.w	r4, r1, r2
 8008644:	d902      	bls.n	800864c <memmove+0x10>
 8008646:	4284      	cmp	r4, r0
 8008648:	4623      	mov	r3, r4
 800864a:	d807      	bhi.n	800865c <memmove+0x20>
 800864c:	1e43      	subs	r3, r0, #1
 800864e:	42a1      	cmp	r1, r4
 8008650:	d008      	beq.n	8008664 <memmove+0x28>
 8008652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800865a:	e7f8      	b.n	800864e <memmove+0x12>
 800865c:	4402      	add	r2, r0
 800865e:	4601      	mov	r1, r0
 8008660:	428a      	cmp	r2, r1
 8008662:	d100      	bne.n	8008666 <memmove+0x2a>
 8008664:	bd10      	pop	{r4, pc}
 8008666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800866a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800866e:	e7f7      	b.n	8008660 <memmove+0x24>

08008670 <_free_r>:
 8008670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008672:	2900      	cmp	r1, #0
 8008674:	d048      	beq.n	8008708 <_free_r+0x98>
 8008676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800867a:	9001      	str	r0, [sp, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	f1a1 0404 	sub.w	r4, r1, #4
 8008682:	bfb8      	it	lt
 8008684:	18e4      	addlt	r4, r4, r3
 8008686:	f000 f8d3 	bl	8008830 <__malloc_lock>
 800868a:	4a20      	ldr	r2, [pc, #128]	; (800870c <_free_r+0x9c>)
 800868c:	9801      	ldr	r0, [sp, #4]
 800868e:	6813      	ldr	r3, [r2, #0]
 8008690:	4615      	mov	r5, r2
 8008692:	b933      	cbnz	r3, 80086a2 <_free_r+0x32>
 8008694:	6063      	str	r3, [r4, #4]
 8008696:	6014      	str	r4, [r2, #0]
 8008698:	b003      	add	sp, #12
 800869a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800869e:	f000 b8cd 	b.w	800883c <__malloc_unlock>
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	d90b      	bls.n	80086be <_free_r+0x4e>
 80086a6:	6821      	ldr	r1, [r4, #0]
 80086a8:	1862      	adds	r2, r4, r1
 80086aa:	4293      	cmp	r3, r2
 80086ac:	bf04      	itt	eq
 80086ae:	681a      	ldreq	r2, [r3, #0]
 80086b0:	685b      	ldreq	r3, [r3, #4]
 80086b2:	6063      	str	r3, [r4, #4]
 80086b4:	bf04      	itt	eq
 80086b6:	1852      	addeq	r2, r2, r1
 80086b8:	6022      	streq	r2, [r4, #0]
 80086ba:	602c      	str	r4, [r5, #0]
 80086bc:	e7ec      	b.n	8008698 <_free_r+0x28>
 80086be:	461a      	mov	r2, r3
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	b10b      	cbz	r3, 80086c8 <_free_r+0x58>
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	d9fa      	bls.n	80086be <_free_r+0x4e>
 80086c8:	6811      	ldr	r1, [r2, #0]
 80086ca:	1855      	adds	r5, r2, r1
 80086cc:	42a5      	cmp	r5, r4
 80086ce:	d10b      	bne.n	80086e8 <_free_r+0x78>
 80086d0:	6824      	ldr	r4, [r4, #0]
 80086d2:	4421      	add	r1, r4
 80086d4:	1854      	adds	r4, r2, r1
 80086d6:	42a3      	cmp	r3, r4
 80086d8:	6011      	str	r1, [r2, #0]
 80086da:	d1dd      	bne.n	8008698 <_free_r+0x28>
 80086dc:	681c      	ldr	r4, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	6053      	str	r3, [r2, #4]
 80086e2:	4421      	add	r1, r4
 80086e4:	6011      	str	r1, [r2, #0]
 80086e6:	e7d7      	b.n	8008698 <_free_r+0x28>
 80086e8:	d902      	bls.n	80086f0 <_free_r+0x80>
 80086ea:	230c      	movs	r3, #12
 80086ec:	6003      	str	r3, [r0, #0]
 80086ee:	e7d3      	b.n	8008698 <_free_r+0x28>
 80086f0:	6825      	ldr	r5, [r4, #0]
 80086f2:	1961      	adds	r1, r4, r5
 80086f4:	428b      	cmp	r3, r1
 80086f6:	bf04      	itt	eq
 80086f8:	6819      	ldreq	r1, [r3, #0]
 80086fa:	685b      	ldreq	r3, [r3, #4]
 80086fc:	6063      	str	r3, [r4, #4]
 80086fe:	bf04      	itt	eq
 8008700:	1949      	addeq	r1, r1, r5
 8008702:	6021      	streq	r1, [r4, #0]
 8008704:	6054      	str	r4, [r2, #4]
 8008706:	e7c7      	b.n	8008698 <_free_r+0x28>
 8008708:	b003      	add	sp, #12
 800870a:	bd30      	pop	{r4, r5, pc}
 800870c:	200000f4 	.word	0x200000f4

08008710 <_malloc_r>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	1ccd      	adds	r5, r1, #3
 8008714:	f025 0503 	bic.w	r5, r5, #3
 8008718:	3508      	adds	r5, #8
 800871a:	2d0c      	cmp	r5, #12
 800871c:	bf38      	it	cc
 800871e:	250c      	movcc	r5, #12
 8008720:	2d00      	cmp	r5, #0
 8008722:	4606      	mov	r6, r0
 8008724:	db01      	blt.n	800872a <_malloc_r+0x1a>
 8008726:	42a9      	cmp	r1, r5
 8008728:	d903      	bls.n	8008732 <_malloc_r+0x22>
 800872a:	230c      	movs	r3, #12
 800872c:	6033      	str	r3, [r6, #0]
 800872e:	2000      	movs	r0, #0
 8008730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008732:	f000 f87d 	bl	8008830 <__malloc_lock>
 8008736:	4921      	ldr	r1, [pc, #132]	; (80087bc <_malloc_r+0xac>)
 8008738:	680a      	ldr	r2, [r1, #0]
 800873a:	4614      	mov	r4, r2
 800873c:	b99c      	cbnz	r4, 8008766 <_malloc_r+0x56>
 800873e:	4f20      	ldr	r7, [pc, #128]	; (80087c0 <_malloc_r+0xb0>)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	b923      	cbnz	r3, 800874e <_malloc_r+0x3e>
 8008744:	4621      	mov	r1, r4
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f862 	bl	8008810 <_sbrk_r>
 800874c:	6038      	str	r0, [r7, #0]
 800874e:	4629      	mov	r1, r5
 8008750:	4630      	mov	r0, r6
 8008752:	f000 f85d 	bl	8008810 <_sbrk_r>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	d123      	bne.n	80087a2 <_malloc_r+0x92>
 800875a:	230c      	movs	r3, #12
 800875c:	6033      	str	r3, [r6, #0]
 800875e:	4630      	mov	r0, r6
 8008760:	f000 f86c 	bl	800883c <__malloc_unlock>
 8008764:	e7e3      	b.n	800872e <_malloc_r+0x1e>
 8008766:	6823      	ldr	r3, [r4, #0]
 8008768:	1b5b      	subs	r3, r3, r5
 800876a:	d417      	bmi.n	800879c <_malloc_r+0x8c>
 800876c:	2b0b      	cmp	r3, #11
 800876e:	d903      	bls.n	8008778 <_malloc_r+0x68>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	441c      	add	r4, r3
 8008774:	6025      	str	r5, [r4, #0]
 8008776:	e004      	b.n	8008782 <_malloc_r+0x72>
 8008778:	6863      	ldr	r3, [r4, #4]
 800877a:	42a2      	cmp	r2, r4
 800877c:	bf0c      	ite	eq
 800877e:	600b      	streq	r3, [r1, #0]
 8008780:	6053      	strne	r3, [r2, #4]
 8008782:	4630      	mov	r0, r6
 8008784:	f000 f85a 	bl	800883c <__malloc_unlock>
 8008788:	f104 000b 	add.w	r0, r4, #11
 800878c:	1d23      	adds	r3, r4, #4
 800878e:	f020 0007 	bic.w	r0, r0, #7
 8008792:	1ac2      	subs	r2, r0, r3
 8008794:	d0cc      	beq.n	8008730 <_malloc_r+0x20>
 8008796:	1a1b      	subs	r3, r3, r0
 8008798:	50a3      	str	r3, [r4, r2]
 800879a:	e7c9      	b.n	8008730 <_malloc_r+0x20>
 800879c:	4622      	mov	r2, r4
 800879e:	6864      	ldr	r4, [r4, #4]
 80087a0:	e7cc      	b.n	800873c <_malloc_r+0x2c>
 80087a2:	1cc4      	adds	r4, r0, #3
 80087a4:	f024 0403 	bic.w	r4, r4, #3
 80087a8:	42a0      	cmp	r0, r4
 80087aa:	d0e3      	beq.n	8008774 <_malloc_r+0x64>
 80087ac:	1a21      	subs	r1, r4, r0
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f82e 	bl	8008810 <_sbrk_r>
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1dd      	bne.n	8008774 <_malloc_r+0x64>
 80087b8:	e7cf      	b.n	800875a <_malloc_r+0x4a>
 80087ba:	bf00      	nop
 80087bc:	200000f4 	.word	0x200000f4
 80087c0:	200000f8 	.word	0x200000f8

080087c4 <_realloc_r>:
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c6:	4607      	mov	r7, r0
 80087c8:	4614      	mov	r4, r2
 80087ca:	460e      	mov	r6, r1
 80087cc:	b921      	cbnz	r1, 80087d8 <_realloc_r+0x14>
 80087ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087d2:	4611      	mov	r1, r2
 80087d4:	f7ff bf9c 	b.w	8008710 <_malloc_r>
 80087d8:	b922      	cbnz	r2, 80087e4 <_realloc_r+0x20>
 80087da:	f7ff ff49 	bl	8008670 <_free_r>
 80087de:	4625      	mov	r5, r4
 80087e0:	4628      	mov	r0, r5
 80087e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087e4:	f000 f830 	bl	8008848 <_malloc_usable_size_r>
 80087e8:	42a0      	cmp	r0, r4
 80087ea:	d20f      	bcs.n	800880c <_realloc_r+0x48>
 80087ec:	4621      	mov	r1, r4
 80087ee:	4638      	mov	r0, r7
 80087f0:	f7ff ff8e 	bl	8008710 <_malloc_r>
 80087f4:	4605      	mov	r5, r0
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d0f2      	beq.n	80087e0 <_realloc_r+0x1c>
 80087fa:	4631      	mov	r1, r6
 80087fc:	4622      	mov	r2, r4
 80087fe:	f7ff ff0f 	bl	8008620 <memcpy>
 8008802:	4631      	mov	r1, r6
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ff33 	bl	8008670 <_free_r>
 800880a:	e7e9      	b.n	80087e0 <_realloc_r+0x1c>
 800880c:	4635      	mov	r5, r6
 800880e:	e7e7      	b.n	80087e0 <_realloc_r+0x1c>

08008810 <_sbrk_r>:
 8008810:	b538      	push	{r3, r4, r5, lr}
 8008812:	4d06      	ldr	r5, [pc, #24]	; (800882c <_sbrk_r+0x1c>)
 8008814:	2300      	movs	r3, #0
 8008816:	4604      	mov	r4, r0
 8008818:	4608      	mov	r0, r1
 800881a:	602b      	str	r3, [r5, #0]
 800881c:	f7fa fe34 	bl	8003488 <_sbrk>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_sbrk_r+0x1a>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_sbrk_r+0x1a>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	200007c8 	.word	0x200007c8

08008830 <__malloc_lock>:
 8008830:	4801      	ldr	r0, [pc, #4]	; (8008838 <__malloc_lock+0x8>)
 8008832:	f000 b811 	b.w	8008858 <__retarget_lock_acquire_recursive>
 8008836:	bf00      	nop
 8008838:	200007d0 	.word	0x200007d0

0800883c <__malloc_unlock>:
 800883c:	4801      	ldr	r0, [pc, #4]	; (8008844 <__malloc_unlock+0x8>)
 800883e:	f000 b80c 	b.w	800885a <__retarget_lock_release_recursive>
 8008842:	bf00      	nop
 8008844:	200007d0 	.word	0x200007d0

08008848 <_malloc_usable_size_r>:
 8008848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800884c:	1f18      	subs	r0, r3, #4
 800884e:	2b00      	cmp	r3, #0
 8008850:	bfbc      	itt	lt
 8008852:	580b      	ldrlt	r3, [r1, r0]
 8008854:	18c0      	addlt	r0, r0, r3
 8008856:	4770      	bx	lr

08008858 <__retarget_lock_acquire_recursive>:
 8008858:	4770      	bx	lr

0800885a <__retarget_lock_release_recursive>:
 800885a:	4770      	bx	lr

0800885c <truncf>:
 800885c:	ee10 3a10 	vmov	r3, s0
 8008860:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008864:	3a7f      	subs	r2, #127	; 0x7f
 8008866:	2a16      	cmp	r2, #22
 8008868:	ee10 1a10 	vmov	r1, s0
 800886c:	dc07      	bgt.n	800887e <truncf+0x22>
 800886e:	2a00      	cmp	r2, #0
 8008870:	bfa5      	ittet	ge
 8008872:	4b04      	ldrge	r3, [pc, #16]	; (8008884 <truncf+0x28>)
 8008874:	4113      	asrge	r3, r2
 8008876:	f003 4300 	andlt.w	r3, r3, #2147483648	; 0x80000000
 800887a:	ea21 0303 	bicge.w	r3, r1, r3
 800887e:	ee00 3a10 	vmov	s0, r3
 8008882:	4770      	bx	lr
 8008884:	007fffff 	.word	0x007fffff

08008888 <_init>:
 8008888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800888a:	bf00      	nop
 800888c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800888e:	bc08      	pop	{r3}
 8008890:	469e      	mov	lr, r3
 8008892:	4770      	bx	lr

08008894 <_fini>:
 8008894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008896:	bf00      	nop
 8008898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800889a:	bc08      	pop	{r3}
 800889c:	469e      	mov	lr, r3
 800889e:	4770      	bx	lr
