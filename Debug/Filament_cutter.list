
Filament_cutter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007214  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080073ac  080073ac  000173ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800746c  0800746c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007474  08007474  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800747c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000070c  20000010  0800748c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000071c  0800748c  0002071c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e6a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031d3  00000000  00000000  00038eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  0003c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  0003d308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024762  00000000  00000000  0003e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001538c  00000000  00000000  00062bb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc701  00000000  00000000  00077f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015463f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cc8  00000000  00000000  00154694  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007394 	.word	0x08007394

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08007394 	.word	0x08007394

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b96e 	b.w	8000ca8 <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9d08      	ldr	r5, [sp, #32]
 80009ea:	4604      	mov	r4, r0
 80009ec:	468c      	mov	ip, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	f040 8083 	bne.w	8000afa <__udivmoddi4+0x116>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4617      	mov	r7, r2
 80009f8:	d947      	bls.n	8000a8a <__udivmoddi4+0xa6>
 80009fa:	fab2 f282 	clz	r2, r2
 80009fe:	b142      	cbz	r2, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	f1c2 0020 	rsb	r0, r2, #32
 8000a04:	fa24 f000 	lsr.w	r0, r4, r0
 8000a08:	4091      	lsls	r1, r2
 8000a0a:	4097      	lsls	r7, r2
 8000a0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a10:	4094      	lsls	r4, r2
 8000a12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a16:	0c23      	lsrs	r3, r4, #16
 8000a18:	fbbc f6f8 	udiv	r6, ip, r8
 8000a1c:	fa1f fe87 	uxth.w	lr, r7
 8000a20:	fb08 c116 	mls	r1, r8, r6, ip
 8000a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a28:	fb06 f10e 	mul.w	r1, r6, lr
 8000a2c:	4299      	cmp	r1, r3
 8000a2e:	d909      	bls.n	8000a44 <__udivmoddi4+0x60>
 8000a30:	18fb      	adds	r3, r7, r3
 8000a32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a36:	f080 8119 	bcs.w	8000c6c <__udivmoddi4+0x288>
 8000a3a:	4299      	cmp	r1, r3
 8000a3c:	f240 8116 	bls.w	8000c6c <__udivmoddi4+0x288>
 8000a40:	3e02      	subs	r6, #2
 8000a42:	443b      	add	r3, r7
 8000a44:	1a5b      	subs	r3, r3, r1
 8000a46:	b2a4      	uxth	r4, r4
 8000a48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a58:	45a6      	cmp	lr, r4
 8000a5a:	d909      	bls.n	8000a70 <__udivmoddi4+0x8c>
 8000a5c:	193c      	adds	r4, r7, r4
 8000a5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a62:	f080 8105 	bcs.w	8000c70 <__udivmoddi4+0x28c>
 8000a66:	45a6      	cmp	lr, r4
 8000a68:	f240 8102 	bls.w	8000c70 <__udivmoddi4+0x28c>
 8000a6c:	3802      	subs	r0, #2
 8000a6e:	443c      	add	r4, r7
 8000a70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a74:	eba4 040e 	sub.w	r4, r4, lr
 8000a78:	2600      	movs	r6, #0
 8000a7a:	b11d      	cbz	r5, 8000a84 <__udivmoddi4+0xa0>
 8000a7c:	40d4      	lsrs	r4, r2
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e9c5 4300 	strd	r4, r3, [r5]
 8000a84:	4631      	mov	r1, r6
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	b902      	cbnz	r2, 8000a8e <__udivmoddi4+0xaa>
 8000a8c:	deff      	udf	#255	; 0xff
 8000a8e:	fab2 f282 	clz	r2, r2
 8000a92:	2a00      	cmp	r2, #0
 8000a94:	d150      	bne.n	8000b38 <__udivmoddi4+0x154>
 8000a96:	1bcb      	subs	r3, r1, r7
 8000a98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a9c:	fa1f f887 	uxth.w	r8, r7
 8000aa0:	2601      	movs	r6, #1
 8000aa2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000aa6:	0c21      	lsrs	r1, r4, #16
 8000aa8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000aac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ab0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ab4:	428b      	cmp	r3, r1
 8000ab6:	d907      	bls.n	8000ac8 <__udivmoddi4+0xe4>
 8000ab8:	1879      	adds	r1, r7, r1
 8000aba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000abe:	d202      	bcs.n	8000ac6 <__udivmoddi4+0xe2>
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	f200 80e9 	bhi.w	8000c98 <__udivmoddi4+0x2b4>
 8000ac6:	4684      	mov	ip, r0
 8000ac8:	1ac9      	subs	r1, r1, r3
 8000aca:	b2a3      	uxth	r3, r4
 8000acc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ad0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ad4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ad8:	fb08 f800 	mul.w	r8, r8, r0
 8000adc:	45a0      	cmp	r8, r4
 8000ade:	d907      	bls.n	8000af0 <__udivmoddi4+0x10c>
 8000ae0:	193c      	adds	r4, r7, r4
 8000ae2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x10a>
 8000ae8:	45a0      	cmp	r8, r4
 8000aea:	f200 80d9 	bhi.w	8000ca0 <__udivmoddi4+0x2bc>
 8000aee:	4618      	mov	r0, r3
 8000af0:	eba4 0408 	sub.w	r4, r4, r8
 8000af4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000af8:	e7bf      	b.n	8000a7a <__udivmoddi4+0x96>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d909      	bls.n	8000b12 <__udivmoddi4+0x12e>
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	f000 80b1 	beq.w	8000c66 <__udivmoddi4+0x282>
 8000b04:	2600      	movs	r6, #0
 8000b06:	e9c5 0100 	strd	r0, r1, [r5]
 8000b0a:	4630      	mov	r0, r6
 8000b0c:	4631      	mov	r1, r6
 8000b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b12:	fab3 f683 	clz	r6, r3
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d14a      	bne.n	8000bb0 <__udivmoddi4+0x1cc>
 8000b1a:	428b      	cmp	r3, r1
 8000b1c:	d302      	bcc.n	8000b24 <__udivmoddi4+0x140>
 8000b1e:	4282      	cmp	r2, r0
 8000b20:	f200 80b8 	bhi.w	8000c94 <__udivmoddi4+0x2b0>
 8000b24:	1a84      	subs	r4, r0, r2
 8000b26:	eb61 0103 	sbc.w	r1, r1, r3
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	468c      	mov	ip, r1
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d0a8      	beq.n	8000a84 <__udivmoddi4+0xa0>
 8000b32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b36:	e7a5      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000b38:	f1c2 0320 	rsb	r3, r2, #32
 8000b3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b40:	4097      	lsls	r7, r2
 8000b42:	fa01 f002 	lsl.w	r0, r1, r2
 8000b46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b4a:	40d9      	lsrs	r1, r3
 8000b4c:	4330      	orrs	r0, r6
 8000b4e:	0c03      	lsrs	r3, r0, #16
 8000b50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b54:	fa1f f887 	uxth.w	r8, r7
 8000b58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b60:	fb06 f108 	mul.w	r1, r6, r8
 8000b64:	4299      	cmp	r1, r3
 8000b66:	fa04 f402 	lsl.w	r4, r4, r2
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x19c>
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b72:	f080 808d 	bcs.w	8000c90 <__udivmoddi4+0x2ac>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 808a 	bls.w	8000c90 <__udivmoddi4+0x2ac>
 8000b7c:	3e02      	subs	r6, #2
 8000b7e:	443b      	add	r3, r7
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b281      	uxth	r1, r0
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b90:	fb00 f308 	mul.w	r3, r0, r8
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x1c4>
 8000b98:	1879      	adds	r1, r7, r1
 8000b9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b9e:	d273      	bcs.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	d971      	bls.n	8000c88 <__udivmoddi4+0x2a4>
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	4439      	add	r1, r7
 8000ba8:	1acb      	subs	r3, r1, r3
 8000baa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bae:	e778      	b.n	8000aa2 <__udivmoddi4+0xbe>
 8000bb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000bb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000bb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bbc:	431c      	orrs	r4, r3
 8000bbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	0c3b      	lsrs	r3, r7, #16
 8000bd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bd6:	fa1f f884 	uxth.w	r8, r4
 8000bda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000be2:	fb09 fa08 	mul.w	sl, r9, r8
 8000be6:	458a      	cmp	sl, r1
 8000be8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bec:	fa00 f306 	lsl.w	r3, r0, r6
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x220>
 8000bf2:	1861      	adds	r1, r4, r1
 8000bf4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bf8:	d248      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfa:	458a      	cmp	sl, r1
 8000bfc:	d946      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000bfe:	f1a9 0902 	sub.w	r9, r9, #2
 8000c02:	4421      	add	r1, r4
 8000c04:	eba1 010a 	sub.w	r1, r1, sl
 8000c08:	b2bf      	uxth	r7, r7
 8000c0a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c0e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c12:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c16:	fb00 f808 	mul.w	r8, r0, r8
 8000c1a:	45b8      	cmp	r8, r7
 8000c1c:	d907      	bls.n	8000c2e <__udivmoddi4+0x24a>
 8000c1e:	19e7      	adds	r7, r4, r7
 8000c20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c24:	d22e      	bcs.n	8000c84 <__udivmoddi4+0x2a0>
 8000c26:	45b8      	cmp	r8, r7
 8000c28:	d92c      	bls.n	8000c84 <__udivmoddi4+0x2a0>
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	4427      	add	r7, r4
 8000c2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c32:	eba7 0708 	sub.w	r7, r7, r8
 8000c36:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3a:	454f      	cmp	r7, r9
 8000c3c:	46c6      	mov	lr, r8
 8000c3e:	4649      	mov	r1, r9
 8000c40:	d31a      	bcc.n	8000c78 <__udivmoddi4+0x294>
 8000c42:	d017      	beq.n	8000c74 <__udivmoddi4+0x290>
 8000c44:	b15d      	cbz	r5, 8000c5e <__udivmoddi4+0x27a>
 8000c46:	ebb3 020e 	subs.w	r2, r3, lr
 8000c4a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c4e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c52:	40f2      	lsrs	r2, r6
 8000c54:	ea4c 0202 	orr.w	r2, ip, r2
 8000c58:	40f7      	lsrs	r7, r6
 8000c5a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c5e:	2600      	movs	r6, #0
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e70b      	b.n	8000a84 <__udivmoddi4+0xa0>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e9      	b.n	8000a44 <__udivmoddi4+0x60>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6fd      	b.n	8000a70 <__udivmoddi4+0x8c>
 8000c74:	4543      	cmp	r3, r8
 8000c76:	d2e5      	bcs.n	8000c44 <__udivmoddi4+0x260>
 8000c78:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c7c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7df      	b.n	8000c44 <__udivmoddi4+0x260>
 8000c84:	4608      	mov	r0, r1
 8000c86:	e7d2      	b.n	8000c2e <__udivmoddi4+0x24a>
 8000c88:	4660      	mov	r0, ip
 8000c8a:	e78d      	b.n	8000ba8 <__udivmoddi4+0x1c4>
 8000c8c:	4681      	mov	r9, r0
 8000c8e:	e7b9      	b.n	8000c04 <__udivmoddi4+0x220>
 8000c90:	4666      	mov	r6, ip
 8000c92:	e775      	b.n	8000b80 <__udivmoddi4+0x19c>
 8000c94:	4630      	mov	r0, r6
 8000c96:	e74a      	b.n	8000b2e <__udivmoddi4+0x14a>
 8000c98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c9c:	4439      	add	r1, r7
 8000c9e:	e713      	b.n	8000ac8 <__udivmoddi4+0xe4>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	e724      	b.n	8000af0 <__udivmoddi4+0x10c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <DC_motor_encoder_Init>:
 *      Author: DELL
 */

#include "L298_dc.h"

void DC_motor_encoder_Init(dc_motor *motor) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	//__HAL_TIM_SET_AUTORELOAD(motor->encoder_timer, FULL_ROTATION_PULSE);
	//HAL_TIM_Encoder_Start(motor->encoder_timer, TIM_CHANNEL_ALL);
	HAL_LPTIM_Encoder_Start_IT(motor->encoder_timer, FULL_ROTATION_PULSE);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f241 1192 	movw	r1, #4498	; 0x1192
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f002 fdf1 	bl	80038a4 <HAL_LPTIM_Encoder_Start_IT>
	/* Enable Autoreload match interrupt */
	__HAL_LPTIM_ENABLE_IT(motor->encoder_timer, LPTIM_IT_ARRM);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	699b      	ldr	r3, [r3, #24]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	699b      	ldr	r3, [r3, #24]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	f042 0202 	orr.w	r2, r2, #2
 8000cd4:	609a      	str	r2, [r3, #8]
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <DC_motor_Init>:

void DC_motor_Init(dc_motor *motor, TIM_HandleTypeDef *Timer,
		uint32_t PWM_Channel, GPIO_TypeDef *Port_IN1, uint16_t IN1_Pin,
		GPIO_TypeDef *Port_IN2, uint16_t IN2_Pin,
		LPTIM_HandleTypeDef *Encoder_timer) {
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b084      	sub	sp, #16
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	60f8      	str	r0, [r7, #12]
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	603b      	str	r3, [r7, #0]
	motor->pwm_timer.htim = Timer;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	601a      	str	r2, [r3, #0]
	motor->pwm_timer.channel = PWM_Channel;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	605a      	str	r2, [r3, #4]

	motor->Port_IN1 = Port_IN1;
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	683a      	ldr	r2, [r7, #0]
 8000cfc:	609a      	str	r2, [r3, #8]
	motor->Port_IN2 = Port_IN2;
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	69fa      	ldr	r2, [r7, #28]
 8000d02:	60da      	str	r2, [r3, #12]
	motor->Pin_IN1 = IN1_Pin;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	8b3a      	ldrh	r2, [r7, #24]
 8000d08:	821a      	strh	r2, [r3, #16]
	motor->Pin_IN2 = IN2_Pin;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	8c3a      	ldrh	r2, [r7, #32]
 8000d0e:	825a      	strh	r2, [r3, #18]
	motor->encoder_timer = Encoder_timer;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d14:	619a      	str	r2, [r3, #24]

	DC_motor_encoder_Init(motor);
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff ffc8 	bl	8000cac <DC_motor_encoder_Init>
}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <DC_set_speed>:

void DC_set_speed(dc_motor *motor, uint8_t speed) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
	if (speed > 100) speed = 100;
 8000d30:	78fb      	ldrb	r3, [r7, #3]
 8000d32:	2b64      	cmp	r3, #100	; 0x64
 8000d34:	d901      	bls.n	8000d3a <DC_set_speed+0x16>
 8000d36:	2364      	movs	r3, #100	; 0x64
 8000d38:	70fb      	strb	r3, [r7, #3]

	__HAL_TIM_SET_COUNTER(motor->pwm_timer.htim, 0);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2200      	movs	r2, #0
 8000d42:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d105      	bne.n	8000d58 <DC_set_speed+0x34>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d56:	e02c      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b04      	cmp	r3, #4
 8000d5e:	d105      	bne.n	8000d6c <DC_set_speed+0x48>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000d6a:	e022      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d105      	bne.n	8000d80 <DC_set_speed+0x5c>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	78fb      	ldrb	r3, [r7, #3]
 8000d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000d7e:	e018      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b0c      	cmp	r3, #12
 8000d86:	d105      	bne.n	8000d94 <DC_set_speed+0x70>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	78fb      	ldrb	r3, [r7, #3]
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000d92:	e00e      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d105      	bne.n	8000da8 <DC_set_speed+0x84>
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000da6:	e004      	b.n	8000db2 <DC_set_speed+0x8e>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, speed);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr

08000dbe <DC_set_direction>:

void DC_set_direction(dc_motor *motor, DC_direction DIR) {
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	70fb      	strb	r3, [r7, #3]
	motor->DIR = DIR;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	78fa      	ldrb	r2, [r7, #3]
 8000dce:	751a      	strb	r2, [r3, #20]

	if (motor->DIR == LEFT) {
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	7d1b      	ldrb	r3, [r3, #20]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d110      	bne.n	8000dfa <DC_set_direction+0x3c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_RESET);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	8a1b      	ldrh	r3, [r3, #16]
 8000de0:	2200      	movs	r2, #0
 8000de2:	4619      	mov	r1, r3
 8000de4:	f002 fca4 	bl	8003730 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	68d8      	ldr	r0, [r3, #12]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	8a5b      	ldrh	r3, [r3, #18]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4619      	mov	r1, r3
 8000df4:	f002 fc9c 	bl	8003730 <HAL_GPIO_WritePin>

	else {
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
	}
}
 8000df8:	e00f      	b.n	8000e1a <DC_set_direction+0x5c>
		HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6898      	ldr	r0, [r3, #8]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	8a1b      	ldrh	r3, [r3, #16]
 8000e02:	2201      	movs	r2, #1
 8000e04:	4619      	mov	r1, r3
 8000e06:	f002 fc93 	bl	8003730 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_RESET);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	68d8      	ldr	r0, [r3, #12]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	8a5b      	ldrh	r3, [r3, #18]
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	f002 fc8b 	bl	8003730 <HAL_GPIO_WritePin>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <DC_rotate>:

void DC_rotate(dc_motor *motor, DC_direction DIR, uint8_t speed) {
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	70fb      	strb	r3, [r7, #3]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	70bb      	strb	r3, [r7, #2]
	DC_set_direction(motor, DIR);
 8000e32:	78fb      	ldrb	r3, [r7, #3]
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ffc1 	bl	8000dbe <DC_set_direction>
	DC_set_speed(motor, speed);
 8000e3c:	78bb      	ldrb	r3, [r7, #2]
 8000e3e:	4619      	mov	r1, r3
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff6f 	bl	8000d24 <DC_set_speed>

	HAL_TIM_PWM_Start(motor->pwm_timer.htim, motor->pwm_timer.channel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f004 fb1f 	bl	8005494 <HAL_TIM_PWM_Start>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <DC_stop>:

void DC_stop(dc_motor *motor) {
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(motor->Port_IN1, motor->Pin_IN1, GPIO_PIN_SET);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6898      	ldr	r0, [r3, #8]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	8a1b      	ldrh	r3, [r3, #16]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4619      	mov	r1, r3
 8000e72:	f002 fc5d 	bl	8003730 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(motor->Port_IN2, motor->Pin_IN2, GPIO_PIN_SET);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68d8      	ldr	r0, [r3, #12]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	8a5b      	ldrh	r3, [r3, #18]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4619      	mov	r1, r3
 8000e82:	f002 fc55 	bl	8003730 <HAL_GPIO_WritePin>

	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d105      	bne.n	8000e9a <DC_stop+0x3c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2264      	movs	r2, #100	; 0x64
 8000e96:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e98:	e02c      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d105      	bne.n	8000eae <DC_stop+0x50>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	2364      	movs	r3, #100	; 0x64
 8000eaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000eac:	e022      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d105      	bne.n	8000ec2 <DC_stop+0x64>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2364      	movs	r3, #100	; 0x64
 8000ebe:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000ec0:	e018      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b0c      	cmp	r3, #12
 8000ec8:	d105      	bne.n	8000ed6 <DC_stop+0x78>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000ed4:	e00e      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	2b10      	cmp	r3, #16
 8000edc:	d105      	bne.n	8000eea <DC_stop+0x8c>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	6593      	str	r3, [r2, #88]	; 0x58
}
 8000ee8:	e004      	b.n	8000ef4 <DC_stop+0x96>
	__HAL_TIM_SET_COMPARE(motor->pwm_timer.htim, motor->pwm_timer.channel, 100);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <DC_set_angle>:
{
	return __HAL_TIM_GET_COUNTER(motor->encoder_timer);
}

void DC_set_angle(dc_motor *motor, uint16_t angle, uint8_t speed, DC_direction DIR)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	4608      	mov	r0, r1
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	807b      	strh	r3, [r7, #2]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	707b      	strb	r3, [r7, #1]
 8000f12:	4613      	mov	r3, r2
 8000f14:	703b      	strb	r3, [r7, #0]
	uint16_t pulses_to_count;
	pulses_to_count = (angle * FULL_ROTATION_PULSE) / 360;
 8000f16:	887b      	ldrh	r3, [r7, #2]
 8000f18:	f241 1292 	movw	r2, #4498	; 0x1192
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <DC_set_angle+0x54>)
 8000f22:	fb82 1203 	smull	r1, r2, r2, r3
 8000f26:	441a      	add	r2, r3
 8000f28:	1212      	asrs	r2, r2, #8
 8000f2a:	17db      	asrs	r3, r3, #31
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	81fb      	strh	r3, [r7, #14]
	__HAL_LPTIM_AUTORELOAD_SET(motor->encoder_timer, pulses_to_count);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	89fa      	ldrh	r2, [r7, #14]
 8000f38:	619a      	str	r2, [r3, #24]
	DC_rotate(motor, DIR, speed);
 8000f3a:	787a      	ldrb	r2, [r7, #1]
 8000f3c:	783b      	ldrb	r3, [r7, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff6e 	bl	8000e22 <DC_rotate>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	b60b60b7 	.word	0xb60b60b7

08000f54 <SendByteSPI>:


// A replacement for SPI_TRANSMIT

void SendByteSPI(uint8_t byte)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	e01f      	b.n	8000fa4 <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 8000f64:	79fa      	ldrb	r2, [r7, #7]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 8000f74:	2201      	movs	r2, #1
 8000f76:	2102      	movs	r1, #2
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <SendByteSPI+0x60>)
 8000f7a:	f002 fbd9 	bl	8003730 <HAL_GPIO_WritePin>
 8000f7e:	e004      	b.n	8000f8a <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000f80:	2200      	movs	r2, #0
 8000f82:	2102      	movs	r1, #2
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <SendByteSPI+0x60>)
 8000f86:	f002 fbd3 	bl	8003730 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <SendByteSPI+0x60>)
 8000f90:	f002 fbce 	bl	8003730 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 8000f94:	2201      	movs	r2, #1
 8000f96:	2108      	movs	r1, #8
 8000f98:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <SendByteSPI+0x60>)
 8000f9a:	f002 fbc9 	bl	8003730 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	dddc      	ble.n	8000f64 <SendByteSPI+0x10>

	}
}
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	48000800 	.word	0x48000800

08000fb8 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2104      	movs	r1, #4
 8000fc6:	480f      	ldr	r0, [pc, #60]	; (8001004 <ST7920_SendCmd+0x4c>)
 8000fc8:	f002 fbb2 	bl	8003730 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000fcc:	20f8      	movs	r0, #248	; 0xf8
 8000fce:	f7ff ffc1 	bl	8000f54 <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffba 	bl	8000f54 <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ffb4 	bl	8000f54 <SendByteSPI>
	delay_us(50);
 8000fec:	2032      	movs	r0, #50	; 0x32
 8000fee:	f000 fb87 	bl	8001700 <delay_us>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2104      	movs	r1, #4
 8000ff6:	4803      	ldr	r0, [pc, #12]	; (8001004 <ST7920_SendCmd+0x4c>)
 8000ff8:	f002 fb9a 	bl	8003730 <HAL_GPIO_WritePin>

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	48000800 	.word	0x48000800

08001008 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 8001012:	2201      	movs	r2, #1
 8001014:	2104      	movs	r1, #4
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <ST7920_SendData+0x4c>)
 8001018:	f002 fb8a 	bl	8003730 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 800101c:	20fa      	movs	r0, #250	; 0xfa
 800101e:	f7ff ff99 	bl	8000f54 <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	f023 030f 	bic.w	r3, r3, #15
 8001028:	b2db      	uxtb	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ff92 	bl	8000f54 <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	011b      	lsls	r3, r3, #4
 8001034:	b2db      	uxtb	r3, r3
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff ff8c 	bl	8000f54 <SendByteSPI>
	delay_us(50);
 800103c:	2032      	movs	r0, #50	; 0x32
 800103e:	f000 fb5f 	bl	8001700 <delay_us>
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 8001042:	2200      	movs	r2, #0
 8001044:	2104      	movs	r1, #4
 8001046:	4803      	ldr	r0, [pc, #12]	; (8001054 <ST7920_SendData+0x4c>)
 8001048:	f002 fb72 	bl	8003730 <HAL_GPIO_WritePin>
}
 800104c:	bf00      	nop
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	48000800 	.word	0x48000800

08001058 <ST7920_SendString>:

void ST7920_SendString(int row, int col, char* string)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	60f8      	str	r0, [r7, #12]
 8001060:	60b9      	str	r1, [r7, #8]
 8001062:	607a      	str	r2, [r7, #4]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b03      	cmp	r3, #3
 8001068:	d81e      	bhi.n	80010a8 <ST7920_SendString+0x50>
 800106a:	a201      	add	r2, pc, #4	; (adr r2, 8001070 <ST7920_SendString+0x18>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	08001081 	.word	0x08001081
 8001074:	0800108b 	.word	0x0800108b
 8001078:	08001095 	.word	0x08001095
 800107c:	0800109f 	.word	0x0800109f
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001086:	60bb      	str	r3, [r7, #8]
            break;
 8001088:	e013      	b.n	80010b2 <ST7920_SendString+0x5a>
        case 1:
            col |= 0x90;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8001090:	60bb      	str	r3, [r7, #8]
            break;
 8001092:	e00e      	b.n	80010b2 <ST7920_SendString+0x5a>
        case 2:
            col |= 0x88;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800109a:	60bb      	str	r3, [r7, #8]
            break;
 800109c:	e009      	b.n	80010b2 <ST7920_SendString+0x5a>
        case 3:
            col |= 0x98;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f043 0398 	orr.w	r3, r3, #152	; 0x98
 80010a4:	60bb      	str	r3, [r7, #8]
            break;
 80010a6:	e004      	b.n	80010b2 <ST7920_SendString+0x5a>
        default:
            col |= 0x80;
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ae:	60bb      	str	r3, [r7, #8]
            break;
 80010b0:	bf00      	nop
    }

    ST7920_SendCmd(col);
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ff7e 	bl	8000fb8 <ST7920_SendCmd>

    while (*string)
 80010bc:	e006      	b.n	80010cc <ST7920_SendString+0x74>
    	{
    		ST7920_SendData(*string++);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff ff9e 	bl	8001008 <ST7920_SendData>
    while (*string)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d1f4      	bne.n	80010be <ST7920_SendString+0x66>
    	}
}
 80010d4:	bf00      	nop
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop

080010e0 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d115      	bne.n	800111a <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 80010ee:	2030      	movs	r0, #48	; 0x30
 80010f0:	f7ff ff62 	bl	8000fb8 <ST7920_SendCmd>
		HAL_Delay (1);
 80010f4:	2001      	movs	r0, #1
 80010f6:	f002 f853 	bl	80031a0 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 80010fa:	2034      	movs	r0, #52	; 0x34
 80010fc:	f7ff ff5c 	bl	8000fb8 <ST7920_SendCmd>
		HAL_Delay (1);
 8001100:	2001      	movs	r0, #1
 8001102:	f002 f84d 	bl	80031a0 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 8001106:	2036      	movs	r0, #54	; 0x36
 8001108:	f7ff ff56 	bl	8000fb8 <ST7920_SendCmd>
		HAL_Delay (1);
 800110c:	2001      	movs	r0, #1
 800110e:	f002 f847 	bl	80031a0 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <ST7920_GraphicMode+0x5c>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 8001118:	e00b      	b.n	8001132 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d108      	bne.n	8001132 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8001120:	2030      	movs	r0, #48	; 0x30
 8001122:	f7ff ff49 	bl	8000fb8 <ST7920_SendCmd>
		HAL_Delay (1);
 8001126:	2001      	movs	r0, #1
 8001128:	f002 f83a 	bl	80031a0 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <ST7920_GraphicMode+0x5c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000002c 	.word	0x2000002c

08001140 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 8001148:	2300      	movs	r3, #0
 800114a:	73bb      	strb	r3, [r7, #14]
 800114c:	e06a      	b.n	8001224 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 800114e:	7bbb      	ldrb	r3, [r7, #14]
 8001150:	2b1f      	cmp	r3, #31
 8001152:	d830      	bhi.n	80011b6 <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8001154:	2300      	movs	r3, #0
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e029      	b.n	80011ae <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001160:	b2db      	uxtb	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff28 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800116e:	b2db      	uxtb	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff21 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	7bbb      	ldrb	r3, [r7, #14]
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	461a      	mov	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff3d 	bl	8001008 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	1c5a      	adds	r2, r3, #1
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff30 	bl	8001008 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	3301      	adds	r3, #1
 80011ac:	73fb      	strb	r3, [r7, #15]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	2b07      	cmp	r3, #7
 80011b2:	d9d2      	bls.n	800115a <ST7920_DrawBitmap+0x1a>
 80011b4:	e033      	b.n	800121e <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e02d      	b.n	8001218 <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	3b20      	subs	r3, #32
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c8:	b25b      	sxtb	r3, r3
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fef3 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f063 0377 	orn	r3, r3, #119	; 0x77
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff feec 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80011e0:	7bfa      	ldrb	r2, [r7, #15]
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	4413      	add	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	461a      	mov	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4413      	add	r3, r2
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff ff08 	bl	8001008 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	7bbb      	ldrb	r3, [r7, #14]
 8001200:	011b      	lsls	r3, r3, #4
 8001202:	4413      	add	r3, r2
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fefb 	bl	8001008 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	3301      	adds	r3, #1
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b07      	cmp	r3, #7
 800121c:	d9ce      	bls.n	80011bc <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	3301      	adds	r3, #1
 8001222:	73bb      	strb	r3, [r7, #14]
 8001224:	7bbb      	ldrb	r3, [r7, #14]
 8001226:	2b3f      	cmp	r3, #63	; 0x3f
 8001228:	d991      	bls.n	800114e <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <ST7920_Update+0x10>)
 800123a:	f7ff ff81 	bl	8001140 <ST7920_DrawBitmap>
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000008c 	.word	0x2000008c

08001248 <ST7920_Clear>:



void ST7920_Clear()
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 800124e:	4b24      	ldr	r3, [pc, #144]	; (80012e0 <ST7920_Clear+0x98>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b01      	cmp	r3, #1
 8001254:	d13a      	bne.n	80012cc <ST7920_Clear+0x84>
	{
		uint8_t x, y;
		memset(image, 0, sizeof(image));
 8001256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800125a:	2100      	movs	r1, #0
 800125c:	4821      	ldr	r0, [pc, #132]	; (80012e4 <ST7920_Clear+0x9c>)
 800125e:	f006 f891 	bl	8007384 <memset>
		for(y = 0; y < 64; y++)
 8001262:	2300      	movs	r3, #0
 8001264:	71bb      	strb	r3, [r7, #6]
 8001266:	e02d      	b.n	80012c4 <ST7920_Clear+0x7c>
		{
			if(y < 32)
 8001268:	79bb      	ldrb	r3, [r7, #6]
 800126a:	2b1f      	cmp	r3, #31
 800126c:	d80a      	bhi.n	8001284 <ST7920_Clear+0x3c>
			{
				ST7920_SendCmd(0x80 | y);
 800126e:	79bb      	ldrb	r3, [r7, #6]
 8001270:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fe9e 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 800127c:	2080      	movs	r0, #128	; 0x80
 800127e:	f7ff fe9b 	bl	8000fb8 <ST7920_SendCmd>
 8001282:	e00d      	b.n	80012a0 <ST7920_Clear+0x58>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	3b20      	subs	r3, #32
 8001288:	b2db      	uxtb	r3, r3
 800128a:	b25b      	sxtb	r3, r3
 800128c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001290:	b25b      	sxtb	r3, r3
 8001292:	b2db      	uxtb	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe8f 	bl	8000fb8 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 800129a:	2088      	movs	r0, #136	; 0x88
 800129c:	f7ff fe8c 	bl	8000fb8 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	e008      	b.n	80012b8 <ST7920_Clear+0x70>
			{
				ST7920_SendData(0);
 80012a6:	2000      	movs	r0, #0
 80012a8:	f7ff feae 	bl	8001008 <ST7920_SendData>
				ST7920_SendData(0);
 80012ac:	2000      	movs	r0, #0
 80012ae:	f7ff feab 	bl	8001008 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	3301      	adds	r3, #1
 80012b6:	71fb      	strb	r3, [r7, #7]
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	d9f3      	bls.n	80012a6 <ST7920_Clear+0x5e>
		for(y = 0; y < 64; y++)
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	3301      	adds	r3, #1
 80012c2:	71bb      	strb	r3, [r7, #6]
 80012c4:	79bb      	ldrb	r3, [r7, #6]
 80012c6:	2b3f      	cmp	r3, #63	; 0x3f
 80012c8:	d9ce      	bls.n	8001268 <ST7920_Clear+0x20>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80012ca:	e005      	b.n	80012d8 <ST7920_Clear+0x90>
		ST7920_SendCmd(0x01);   // clear the display using command
 80012cc:	2001      	movs	r0, #1
 80012ce:	f7ff fe73 	bl	8000fb8 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80012d2:	2002      	movs	r0, #2
 80012d4:	f001 ff64 	bl	80031a0 <HAL_Delay>
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000002c 	.word	0x2000002c
 80012e4:	2000008c 	.word	0x2000008c

080012e8 <ST7920_Init>:


void ST7920_Init (void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80012ec:	2200      	movs	r2, #0
 80012ee:	2101      	movs	r1, #1
 80012f0:	481c      	ldr	r0, [pc, #112]	; (8001364 <ST7920_Init+0x7c>)
 80012f2:	f002 fa1d 	bl	8003730 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80012f6:	200a      	movs	r0, #10
 80012f8:	f001 ff52 	bl	80031a0 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 80012fc:	2201      	movs	r2, #1
 80012fe:	2101      	movs	r1, #1
 8001300:	4818      	ldr	r0, [pc, #96]	; (8001364 <ST7920_Init+0x7c>)
 8001302:	f002 fa15 	bl	8003730 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 8001306:	2032      	movs	r0, #50	; 0x32
 8001308:	f001 ff4a 	bl	80031a0 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 800130c:	2030      	movs	r0, #48	; 0x30
 800130e:	f7ff fe53 	bl	8000fb8 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8001312:	206e      	movs	r0, #110	; 0x6e
 8001314:	f000 f9f4 	bl	8001700 <delay_us>

	ST7920_SendCmd(0x30);  // 8bit mode
 8001318:	2030      	movs	r0, #48	; 0x30
 800131a:	f7ff fe4d 	bl	8000fb8 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 800131e:	2028      	movs	r0, #40	; 0x28
 8001320:	f000 f9ee 	bl	8001700 <delay_us>

	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8001324:	2008      	movs	r0, #8
 8001326:	f7ff fe47 	bl	8000fb8 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 800132a:	206e      	movs	r0, #110	; 0x6e
 800132c:	f000 f9e8 	bl	8001700 <delay_us>

	ST7920_SendCmd(0x01);  // clear screen
 8001330:	2001      	movs	r0, #1
 8001332:	f7ff fe41 	bl	8000fb8 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 8001336:	200c      	movs	r0, #12
 8001338:	f001 ff32 	bl	80031a0 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 800133c:	2006      	movs	r0, #6
 800133e:	f7ff fe3b 	bl	8000fb8 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8001342:	2001      	movs	r0, #1
 8001344:	f001 ff2c 	bl	80031a0 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 8001348:	200c      	movs	r0, #12
 800134a:	f7ff fe35 	bl	8000fb8 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 800134e:	2001      	movs	r0, #1
 8001350:	f001 ff26 	bl	80031a0 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8001354:	2002      	movs	r0, #2
 8001356:	f7ff fe2f 	bl	8000fb8 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800135a:	2001      	movs	r0, #1
 800135c:	f001 ff20 	bl	80031a0 <HAL_Delay>

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	48000800 	.word	0x48000800

08001368 <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	460a      	mov	r2, r1
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	4613      	mov	r3, r2
 8001376:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 8001378:	4b29      	ldr	r3, [pc, #164]	; (8001420 <SetPixel+0xb8>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	79ba      	ldrb	r2, [r7, #6]
 800137e:	429a      	cmp	r2, r3
 8001380:	d248      	bcs.n	8001414 <SetPixel+0xac>
 8001382:	4b28      	ldr	r3, [pc, #160]	; (8001424 <SetPixel+0xbc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	79fa      	ldrb	r2, [r7, #7]
 8001388:	429a      	cmp	r2, r3
 800138a:	d243      	bcs.n	8001414 <SetPixel+0xac>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 800138c:	79bb      	ldrb	r3, [r7, #6]
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <SetPixel+0xbc>)
 8001390:	7812      	ldrb	r2, [r2, #0]
 8001392:	08d2      	lsrs	r2, r2, #3
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	fb02 f303 	mul.w	r3, r2, r3
 800139a:	79fa      	ldrb	r2, [r7, #7]
 800139c:	08d2      	lsrs	r2, r2, #3
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	4413      	add	r3, r2
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b20      	ldr	r3, [pc, #128]	; (8001428 <SetPixel+0xc0>)
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	781a      	ldrb	r2, [r3, #0]
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	2180      	movs	r1, #128	; 0x80
 80013b6:	fa21 f303 	lsr.w	r3, r1, r3
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	701a      	strb	r2, [r3, #0]

    *image = *p;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <SetPixel+0xc0>)
 80013ca:	701a      	strb	r2, [r3, #0]

    // Change the dirty rectangle to account for a pixel being dirty (we assume it was changed)
    if (startRow > y) { startRow = y; }
 80013cc:	4b17      	ldr	r3, [pc, #92]	; (800142c <SetPixel+0xc4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	79ba      	ldrb	r2, [r7, #6]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	d202      	bcs.n	80013dc <SetPixel+0x74>
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <SetPixel+0xc4>)
 80013d8:	79bb      	ldrb	r3, [r7, #6]
 80013da:	7013      	strb	r3, [r2, #0]
    if (endRow <= y)  { endRow = y + 1; }
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <SetPixel+0xc8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	79ba      	ldrb	r2, [r7, #6]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d304      	bcc.n	80013f0 <SetPixel+0x88>
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <SetPixel+0xc8>)
 80013ee:	701a      	strb	r2, [r3, #0]
    if (startCol > x) { startCol = x; }
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <SetPixel+0xcc>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	79fa      	ldrb	r2, [r7, #7]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d202      	bcs.n	8001400 <SetPixel+0x98>
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <SetPixel+0xcc>)
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	7013      	strb	r3, [r2, #0]
    if (endCol <= x)  { endCol = x + 1; }
 8001400:	4b0d      	ldr	r3, [pc, #52]	; (8001438 <SetPixel+0xd0>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	79fa      	ldrb	r2, [r7, #7]
 8001406:	429a      	cmp	r2, r3
 8001408:	d304      	bcc.n	8001414 <SetPixel+0xac>
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	4b09      	ldr	r3, [pc, #36]	; (8001438 <SetPixel+0xd0>)
 8001412:	701a      	strb	r2, [r3, #0]


  }

}
 8001414:	bf00      	nop
 8001416:	3714      	adds	r7, #20
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	20000000 	.word	0x20000000
 8001424:	20000001 	.word	0x20000001
 8001428:	2000008c 	.word	0x2000008c
 800142c:	2000048c 	.word	0x2000048c
 8001430:	2000048e 	.word	0x2000048e
 8001434:	20000088 	.word	0x20000088
 8001438:	2000048d 	.word	0x2000048d

0800143c <DrawLine>:
/* draw a line
 * start point (X0, Y0)
 * end point (X1, Y1)
 */
void DrawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	71fb      	strb	r3, [r7, #7]
 800144e:	4603      	mov	r3, r0
 8001450:	71bb      	strb	r3, [r7, #6]
 8001452:	460b      	mov	r3, r1
 8001454:	717b      	strb	r3, [r7, #5]
 8001456:	4613      	mov	r3, r2
 8001458:	713b      	strb	r3, [r7, #4]
  int dx = (x1 >= x0) ? x1 - x0 : x0 - x1;
 800145a:	797a      	ldrb	r2, [r7, #5]
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	429a      	cmp	r2, r3
 8001460:	d303      	bcc.n	800146a <DrawLine+0x2e>
 8001462:	797a      	ldrb	r2, [r7, #5]
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	e002      	b.n	8001470 <DrawLine+0x34>
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	797b      	ldrb	r3, [r7, #5]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	61bb      	str	r3, [r7, #24]
  int dy = (y1 >= y0) ? y1 - y0 : y0 - y1;
 8001472:	793a      	ldrb	r2, [r7, #4]
 8001474:	79bb      	ldrb	r3, [r7, #6]
 8001476:	429a      	cmp	r2, r3
 8001478:	d303      	bcc.n	8001482 <DrawLine+0x46>
 800147a:	793a      	ldrb	r2, [r7, #4]
 800147c:	79bb      	ldrb	r3, [r7, #6]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	e002      	b.n	8001488 <DrawLine+0x4c>
 8001482:	79ba      	ldrb	r2, [r7, #6]
 8001484:	793b      	ldrb	r3, [r7, #4]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
  int sx = (x0 < x1) ? 1 : -1;
 800148a:	79fa      	ldrb	r2, [r7, #7]
 800148c:	797b      	ldrb	r3, [r7, #5]
 800148e:	429a      	cmp	r2, r3
 8001490:	d201      	bcs.n	8001496 <DrawLine+0x5a>
 8001492:	2301      	movs	r3, #1
 8001494:	e001      	b.n	800149a <DrawLine+0x5e>
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	613b      	str	r3, [r7, #16]
  int sy = (y0 < y1) ? 1 : -1;
 800149c:	79ba      	ldrb	r2, [r7, #6]
 800149e:	793b      	ldrb	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d201      	bcs.n	80014a8 <DrawLine+0x6c>
 80014a4:	2301      	movs	r3, #1
 80014a6:	e001      	b.n	80014ac <DrawLine+0x70>
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
 80014ac:	60fb      	str	r3, [r7, #12]
  int err = dx - dy;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

  for (;;)
  {
    SetPixel(x0, y0);
 80014b6:	79ba      	ldrb	r2, [r7, #6]
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff53 	bl	8001368 <SetPixel>
    if (x0 == x1 && y0 == y1) break;
 80014c2:	79fa      	ldrb	r2, [r7, #7]
 80014c4:	797b      	ldrb	r3, [r7, #5]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d103      	bne.n	80014d2 <DrawLine+0x96>
 80014ca:	79ba      	ldrb	r2, [r7, #6]
 80014cc:	793b      	ldrb	r3, [r7, #4]
 80014ce:	429a      	cmp	r2, r3
 80014d0:	d01e      	beq.n	8001510 <DrawLine+0xd4>
    int e2 = err + err;
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	60bb      	str	r3, [r7, #8]
    if (e2 > -dy)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	425b      	negs	r3, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dd08      	ble.n	80014f4 <DrawLine+0xb8>
    {
      err -= dy;
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	61fb      	str	r3, [r7, #28]
      x0 += sx;
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	4413      	add	r3, r2
 80014f2:	71fb      	strb	r3, [r7, #7]
    }
    if (e2 < dx)
 80014f4:	68ba      	ldr	r2, [r7, #8]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dadc      	bge.n	80014b6 <DrawLine+0x7a>
    {
      err += dx;
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	4413      	add	r3, r2
 8001502:	61fb      	str	r3, [r7, #28]
      y0 += sy;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	b2da      	uxtb	r2, r3
 8001508:	79bb      	ldrb	r3, [r7, #6]
 800150a:	4413      	add	r3, r2
 800150c:	71bb      	strb	r3, [r7, #6]
  {
 800150e:	e7d2      	b.n	80014b6 <DrawLine+0x7a>
    if (x0 == x1 && y0 == y1) break;
 8001510:	bf00      	nop
    }
  }
}
 8001512:	bf00      	nop
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	bd90      	pop	{r4, r7, pc}
	...

0800151c <DrawRectangle>:
 * start point (x,y)
 * w -> width
 * h -> height
 */
void DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 800151c:	b590      	push	{r4, r7, lr}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	4604      	mov	r4, r0
 8001524:	4608      	mov	r0, r1
 8001526:	4611      	mov	r1, r2
 8001528:	461a      	mov	r2, r3
 800152a:	4623      	mov	r3, r4
 800152c:	80fb      	strh	r3, [r7, #6]
 800152e:	4603      	mov	r3, r0
 8001530:	80bb      	strh	r3, [r7, #4]
 8001532:	460b      	mov	r3, r1
 8001534:	807b      	strh	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	803b      	strh	r3, [r7, #0]
	/* Check input parameters */
	if (
		x >= numCols ||
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <DrawRectangle+0x10c>)
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b29b      	uxth	r3, r3
	if (
 8001540:	88fa      	ldrh	r2, [r7, #6]
 8001542:	429a      	cmp	r2, r3
 8001544:	d26b      	bcs.n	800161e <DrawRectangle+0x102>
		y >= numRows
 8001546:	4b39      	ldr	r3, [pc, #228]	; (800162c <DrawRectangle+0x110>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
		x >= numCols ||
 800154c:	88ba      	ldrh	r2, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	d265      	bcs.n	800161e <DrawRectangle+0x102>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8001552:	88fa      	ldrh	r2, [r7, #6]
 8001554:	887b      	ldrh	r3, [r7, #2]
 8001556:	4413      	add	r3, r2
 8001558:	4a33      	ldr	r2, [pc, #204]	; (8001628 <DrawRectangle+0x10c>)
 800155a:	7812      	ldrb	r2, [r2, #0]
 800155c:	4293      	cmp	r3, r2
 800155e:	db05      	blt.n	800156c <DrawRectangle+0x50>
		w = numCols - x;
 8001560:	4b31      	ldr	r3, [pc, #196]	; (8001628 <DrawRectangle+0x10c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	b29a      	uxth	r2, r3
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 800156c:	88ba      	ldrh	r2, [r7, #4]
 800156e:	883b      	ldrh	r3, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	4a2e      	ldr	r2, [pc, #184]	; (800162c <DrawRectangle+0x110>)
 8001574:	7812      	ldrb	r2, [r2, #0]
 8001576:	4293      	cmp	r3, r2
 8001578:	db05      	blt.n	8001586 <DrawRectangle+0x6a>
		h = numRows - y;
 800157a:	4b2c      	ldr	r3, [pc, #176]	; (800162c <DrawRectangle+0x110>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b29a      	uxth	r2, r3
 8001580:	88bb      	ldrh	r3, [r7, #4]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	803b      	strh	r3, [r7, #0]
	}

	/* Draw 4 lines */
	DrawLine(x, y, x + w, y);         /* Top line */
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2d8      	uxtb	r0, r3
 800158a:	88bb      	ldrh	r3, [r7, #4]
 800158c:	b2d9      	uxtb	r1, r3
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	b2da      	uxtb	r2, r3
 8001592:	887b      	ldrh	r3, [r7, #2]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	4413      	add	r3, r2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	88bb      	ldrh	r3, [r7, #4]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f7ff ff4d 	bl	800143c <DrawLine>
	DrawLine(x, y + h, x + w, y + h); /* Bottom line */
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	b2d8      	uxtb	r0, r3
 80015a6:	88bb      	ldrh	r3, [r7, #4]
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	883b      	ldrh	r3, [r7, #0]
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4413      	add	r3, r2
 80015b0:	b2d9      	uxtb	r1, r3
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	887b      	ldrh	r3, [r7, #2]
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	b2dc      	uxtb	r4, r3
 80015be:	88bb      	ldrh	r3, [r7, #4]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	883b      	ldrh	r3, [r7, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	4413      	add	r3, r2
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	4622      	mov	r2, r4
 80015cc:	f7ff ff36 	bl	800143c <DrawLine>
	DrawLine(x, y, x, y + h);         /* Left line */
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2d8      	uxtb	r0, r3
 80015d4:	88bb      	ldrh	r3, [r7, #4]
 80015d6:	b2d9      	uxtb	r1, r3
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	b2dc      	uxtb	r4, r3
 80015dc:	88bb      	ldrh	r3, [r7, #4]
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	883b      	ldrh	r3, [r7, #0]
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	4413      	add	r3, r2
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	4622      	mov	r2, r4
 80015ea:	f7ff ff27 	bl	800143c <DrawLine>
	DrawLine(x + w, y, x + w, y + h); /* Right line */
 80015ee:	88fb      	ldrh	r3, [r7, #6]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	887b      	ldrh	r3, [r7, #2]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	b2d8      	uxtb	r0, r3
 80015fa:	88bb      	ldrh	r3, [r7, #4]
 80015fc:	b2d9      	uxtb	r1, r3
 80015fe:	88fb      	ldrh	r3, [r7, #6]
 8001600:	b2da      	uxtb	r2, r3
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	b2db      	uxtb	r3, r3
 8001606:	4413      	add	r3, r2
 8001608:	b2dc      	uxtb	r4, r3
 800160a:	88bb      	ldrh	r3, [r7, #4]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	883b      	ldrh	r3, [r7, #0]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	4413      	add	r3, r2
 8001614:	b2db      	uxtb	r3, r3
 8001616:	4622      	mov	r2, r4
 8001618:	f7ff ff10 	bl	800143c <DrawLine>
 800161c:	e000      	b.n	8001620 <DrawRectangle+0x104>
		return;
 800161e:	bf00      	nop
}
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bd90      	pop	{r4, r7, pc}
 8001626:	bf00      	nop
 8001628:	20000001 	.word	0x20000001
 800162c:	20000000 	.word	0x20000000

08001630 <DrawFilledRectangle>:
 * Start point (x,y)
 * w -> width
 * h -> height
 */
void DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	4611      	mov	r1, r2
 800163c:	461a      	mov	r2, r3
 800163e:	4623      	mov	r3, r4
 8001640:	80fb      	strh	r3, [r7, #6]
 8001642:	4603      	mov	r3, r0
 8001644:	80bb      	strh	r3, [r7, #4]
 8001646:	460b      	mov	r3, r1
 8001648:	807b      	strh	r3, [r7, #2]
 800164a:	4613      	mov	r3, r2
 800164c:	803b      	strh	r3, [r7, #0]
	uint8_t i;

	/* Check input parameters */
	if (
		x >= numCols ||
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <DrawFilledRectangle+0xb4>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
	if (
 8001654:	88fa      	ldrh	r2, [r7, #6]
 8001656:	429a      	cmp	r2, r3
 8001658:	d240      	bcs.n	80016dc <DrawFilledRectangle+0xac>
		y >= numRows
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <DrawFilledRectangle+0xb8>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	b29b      	uxth	r3, r3
		x >= numCols ||
 8001660:	88ba      	ldrh	r2, [r7, #4]
 8001662:	429a      	cmp	r2, r3
 8001664:	d23a      	bcs.n	80016dc <DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= numCols) {
 8001666:	88fa      	ldrh	r2, [r7, #6]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4413      	add	r3, r2
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <DrawFilledRectangle+0xb4>)
 800166e:	7812      	ldrb	r2, [r2, #0]
 8001670:	4293      	cmp	r3, r2
 8001672:	db05      	blt.n	8001680 <DrawFilledRectangle+0x50>
		w = numCols - x;
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <DrawFilledRectangle+0xb4>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b29a      	uxth	r2, r3
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= numRows) {
 8001680:	88ba      	ldrh	r2, [r7, #4]
 8001682:	883b      	ldrh	r3, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <DrawFilledRectangle+0xb8>)
 8001688:	7812      	ldrb	r2, [r2, #0]
 800168a:	4293      	cmp	r3, r2
 800168c:	db05      	blt.n	800169a <DrawFilledRectangle+0x6a>
		h = numRows - y;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <DrawFilledRectangle+0xb8>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	b29a      	uxth	r2, r3
 8001694:	88bb      	ldrh	r3, [r7, #4]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
 800169e:	e017      	b.n	80016d0 <DrawFilledRectangle+0xa0>
		/* Draw lines */
		DrawLine(x, y + i, x + w, y + i);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	b2d8      	uxtb	r0, r3
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	4413      	add	r3, r2
 80016ac:	b2d9      	uxtb	r1, r3
 80016ae:	88fb      	ldrh	r3, [r7, #6]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b2dc      	uxtb	r4, r3
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	4413      	add	r3, r2
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	4622      	mov	r2, r4
 80016c6:	f7ff feb9 	bl	800143c <DrawLine>
	for (i = 0; i <= h; i++) {
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	3301      	adds	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	883a      	ldrh	r2, [r7, #0]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d2e2      	bcs.n	80016a0 <DrawFilledRectangle+0x70>
 80016da:	e000      	b.n	80016de <DrawFilledRectangle+0xae>
		return;
 80016dc:	bf00      	nop
	}
}
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd90      	pop	{r4, r7, pc}
 80016e4:	20000001 	.word	0x20000001
 80016e8:	20000000 	.word	0x20000000

080016ec <delay_init>:
//#include "stm32f1xx.h"



void delay_init ()
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(_TIMER);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <delay_init+0x10>)
 80016f2:	f003 fd8f 	bl	8005214 <HAL_TIM_Base_Start>
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000564 	.word	0x20000564

08001700 <delay_us>:

void delay_us (uint16_t delay)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(_TIMER, 0);  // reset the counter
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <delay_us+0x30>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2200      	movs	r2, #0
 8001710:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(_TIMER))<delay);  // wait for the delay to complete
 8001712:	bf00      	nop
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <delay_us+0x30>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800171a:	88fb      	ldrh	r3, [r7, #6]
 800171c:	429a      	cmp	r2, r3
 800171e:	d3f9      	bcc.n	8001714 <delay_us+0x14>
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000564 	.word	0x20000564

08001734 <encoder_init>:
extern stepper_motor extruder;
extern dc_motor DC_motor;


void encoder_init(GPIO_TypeDef* GPIO_BTN_PORT, uint16_t Button_Pin, uint32_t debounce_time)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	460b      	mov	r3, r1
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	817b      	strh	r3, [r7, #10]
	enc_btn.PORT = GPIO_BTN_PORT;
 8001742:	4a10      	ldr	r2, [pc, #64]	; (8001784 <encoder_init+0x50>)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6013      	str	r3, [r2, #0]
	enc_btn.PIN = Button_Pin;
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <encoder_init+0x50>)
 800174a:	897b      	ldrh	r3, [r7, #10]
 800174c:	8093      	strh	r3, [r2, #4]
	enc_btn.debounce_time = debounce_time;
 800174e:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <encoder_init+0x50>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60d3      	str	r3, [r2, #12]
	enc_btn.BTN_state = DEFA;
 8001754:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <encoder_init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	741a      	strb	r2, [r3, #16]
	enc_btn.last_tick = 0;
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <encoder_init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	609a      	str	r2, [r3, #8]

	ENC_Button_RegisterPressCallback(&ENC_Button_PressedTask);
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <encoder_init+0x54>)
 8001762:	f000 f821 	bl	80017a8 <ENC_Button_RegisterPressCallback>

	__HAL_TIM_SET_AUTORELOAD(_ENC_TIMER, 19);
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <encoder_init+0x58>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2213      	movs	r2, #19
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <encoder_init+0x58>)
 8001770:	2213      	movs	r2, #19
 8001772:	60da      	str	r2, [r3, #12]
	HAL_TIM_Encoder_Start(_ENC_TIMER, TIM_CHANNEL_ALL);
 8001774:	213c      	movs	r1, #60	; 0x3c
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <encoder_init+0x58>)
 8001778:	f004 f8a0 	bl	80058bc <HAL_TIM_Encoder_Start>
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000030 	.word	0x20000030
 8001788:	080018b5 	.word	0x080018b5
 800178c:	20000518 	.word	0x20000518

08001790 <enc_get_counter>:


uint32_t enc_get_counter()
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(_ENC_TIMER);
 8001794:	4b03      	ldr	r3, [pc, #12]	; (80017a4 <enc_get_counter+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	20000518 	.word	0x20000518

080017a8 <ENC_Button_RegisterPressCallback>:


void ENC_Button_RegisterPressCallback(void *callback)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	enc_btn.ButtonPressed = callback;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a04      	ldr	r2, [pc, #16]	; (80017c4 <ENC_Button_RegisterPressCallback+0x1c>)
 80017b4:	6153      	str	r3, [r2, #20]

}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000030 	.word	0x20000030

080017c8 <ENC_Button_DebounceRoutine>:


void ENC_Button_DebounceRoutine(cursor_position* cur_postion)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if((HAL_GetTick() - enc_btn.last_tick) > enc_btn.debounce_time)
 80017d0:	f001 fcda 	bl	8003188 <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	4b10      	ldr	r3, [pc, #64]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d915      	bls.n	8001810 <ENC_Button_DebounceRoutine+0x48>
	{
		if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 80017e4:	2140      	movs	r1, #64	; 0x40
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <ENC_Button_DebounceRoutine+0x54>)
 80017e8:	f001 ff8a 	bl	8003700 <HAL_GPIO_ReadPin>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10b      	bne.n	800180a <ENC_Button_DebounceRoutine+0x42>
		{
			enc_btn.BTN_state = PRESSED;
 80017f2:	4b09      	ldr	r3, [pc, #36]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	741a      	strb	r2, [r3, #16]
			if(enc_btn.ButtonPressed != NULL)
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d007      	beq.n	8001810 <ENC_Button_DebounceRoutine+0x48>
			{
				enc_btn.ButtonPressed(cur_postion);
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	4798      	blx	r3
			enc_btn.BTN_state = DEFA;
		}

	}

}
 8001808:	e002      	b.n	8001810 <ENC_Button_DebounceRoutine+0x48>
			enc_btn.BTN_state = DEFA;
 800180a:	4b03      	ldr	r3, [pc, #12]	; (8001818 <ENC_Button_DebounceRoutine+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	741a      	strb	r2, [r3, #16]
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000030 	.word	0x20000030
 800181c:	48000400 	.word	0x48000400

08001820 <ENC_Button_IdleRoutine>:


void ENC_Button_IdleRoutine()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_RESET)
 8001824:	2140      	movs	r1, #64	; 0x40
 8001826:	4808      	ldr	r0, [pc, #32]	; (8001848 <ENC_Button_IdleRoutine+0x28>)
 8001828:	f001 ff6a 	bl	8003700 <HAL_GPIO_ReadPin>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d107      	bne.n	8001842 <ENC_Button_IdleRoutine+0x22>
	{
		enc_btn.last_tick = HAL_GetTick();
 8001832:	f001 fca9 	bl	8003188 <HAL_GetTick>
 8001836:	4603      	mov	r3, r0
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <ENC_Button_IdleRoutine+0x2c>)
 800183a:	6093      	str	r3, [r2, #8]
		enc_btn.BTN_state = DEBOUNCE;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <ENC_Button_IdleRoutine+0x2c>)
 800183e:	2201      	movs	r2, #1
 8001840:	741a      	strb	r2, [r3, #16]
	}
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	48000400 	.word	0x48000400
 800184c:	20000030 	.word	0x20000030

08001850 <ENC_Button_PressedRoutine>:


void ENC_Button_PressedRoutine()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(ENC_BTN_GPIO_Port, ENC_BTN_Pin) == GPIO_PIN_SET)
 8001854:	2140      	movs	r1, #64	; 0x40
 8001856:	4805      	ldr	r0, [pc, #20]	; (800186c <ENC_Button_PressedRoutine+0x1c>)
 8001858:	f001 ff52 	bl	8003700 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b01      	cmp	r3, #1
 8001860:	d102      	bne.n	8001868 <ENC_Button_PressedRoutine+0x18>
	{
		enc_btn.BTN_state = DEFA;
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <ENC_Button_PressedRoutine+0x20>)
 8001864:	2200      	movs	r2, #0
 8001866:	741a      	strb	r2, [r3, #16]
	}
}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	48000400 	.word	0x48000400
 8001870:	20000030 	.word	0x20000030

08001874 <ENC_Button_Action>:


void ENC_Button_Action(cursor_position* cur_postion)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
	switch(enc_btn.BTN_state)
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <ENC_Button_Action+0x3c>)
 800187e:	7c1b      	ldrb	r3, [r3, #16]
 8001880:	2b02      	cmp	r3, #2
 8001882:	d00d      	beq.n	80018a0 <ENC_Button_Action+0x2c>
 8001884:	2b02      	cmp	r3, #2
 8001886:	dc0e      	bgt.n	80018a6 <ENC_Button_Action+0x32>
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <ENC_Button_Action+0x1e>
 800188c:	2b01      	cmp	r3, #1
 800188e:	d003      	beq.n	8001898 <ENC_Button_Action+0x24>
		break;
	case PRESSED:
		ENC_Button_PressedRoutine();
		break;
	}
}
 8001890:	e009      	b.n	80018a6 <ENC_Button_Action+0x32>
		ENC_Button_IdleRoutine();
 8001892:	f7ff ffc5 	bl	8001820 <ENC_Button_IdleRoutine>
		break;
 8001896:	e006      	b.n	80018a6 <ENC_Button_Action+0x32>
		ENC_Button_DebounceRoutine(cur_postion);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff95 	bl	80017c8 <ENC_Button_DebounceRoutine>
		break;
 800189e:	e002      	b.n	80018a6 <ENC_Button_Action+0x32>
		ENC_Button_PressedRoutine();
 80018a0:	f7ff ffd6 	bl	8001850 <ENC_Button_PressedRoutine>
		break;
 80018a4:	bf00      	nop
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000030 	.word	0x20000030

080018b4 <ENC_Button_PressedTask>:



//void ENC_Button_PressedTask(encoder_button* enc_btn, cursor_position* cursor_pos)
void ENC_Button_PressedTask(cursor_position* cursor_pos)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
	if(cursor_pos->current_layer == FIRST_LAYER)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	799b      	ldrb	r3, [r3, #6]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d137      	bne.n	8001934 <ENC_Button_PressedTask+0x80>
	{
		if(cursor_pos->FL_position == SETTINGS)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d107      	bne.n	80018dc <ENC_Button_PressedTask+0x28>
		{
			cursor_pos->current_layer = SECOND_LAYER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	719a      	strb	r2, [r3, #6]
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 80018d2:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <ENC_Button_PressedTask+0xd0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2200      	movs	r2, #0
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

	}



}
 80018da:	e04f      	b.n	800197c <ENC_Button_PressedTask+0xc8>
		else if(cursor_pos->FL_position == START)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d115      	bne.n	8001910 <ENC_Button_PressedTask+0x5c>
			stepper_set_angle(&extruder, 360, 10, LEFT);
 80018e4:	2301      	movs	r3, #1
 80018e6:	220a      	movs	r2, #10
 80018e8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018ec:	4826      	ldr	r0, [pc, #152]	; (8001988 <ENC_Button_PressedTask+0xd4>)
 80018ee:	f000 fe5b 	bl	80025a8 <stepper_set_angle>
			DC_set_angle(&DC_motor, 360, 50, LEFT);
 80018f2:	2301      	movs	r3, #1
 80018f4:	2232      	movs	r2, #50	; 0x32
 80018f6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80018fa:	4824      	ldr	r0, [pc, #144]	; (800198c <ENC_Button_PressedTask+0xd8>)
 80018fc:	f7ff fafe 	bl	8000efc <DC_set_angle>
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001900:	4b20      	ldr	r3, [pc, #128]	; (8001984 <ENC_Button_PressedTask+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	701a      	strb	r2, [r3, #0]
}
 800190e:	e035      	b.n	800197c <ENC_Button_PressedTask+0xc8>
		else if(cursor_pos->FL_position == STOP)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b02      	cmp	r3, #2
 8001916:	d131      	bne.n	800197c <ENC_Button_PressedTask+0xc8>
			stepper_stop(&extruder);
 8001918:	481b      	ldr	r0, [pc, #108]	; (8001988 <ENC_Button_PressedTask+0xd4>)
 800191a:	f000 fd53 	bl	80023c4 <stepper_stop>
			DC_stop(&DC_motor);
 800191e:	481b      	ldr	r0, [pc, #108]	; (800198c <ENC_Button_PressedTask+0xd8>)
 8001920:	f7ff fa9d 	bl	8000e5e <DC_stop>
			__HAL_TIM_SET_COUNTER(_ENC_TIMER, 0);
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <ENC_Button_PressedTask+0xd0>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
			cursor_pos->FL_position = DEFAULT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
}
 8001932:	e023      	b.n	800197c <ENC_Button_PressedTask+0xc8>
	else if(cursor_pos->current_layer == SECOND_LAYER)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	799b      	ldrb	r3, [r3, #6]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d11f      	bne.n	800197c <ENC_Button_PressedTask+0xc8>
		if(cursor_pos->SL_position == BACK)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	789b      	ldrb	r3, [r3, #2]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d106      	bne.n	8001952 <ENC_Button_PressedTask+0x9e>
			cursor_pos->current_layer = FIRST_LAYER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	719a      	strb	r2, [r3, #6]
			cursor_pos->FL_position = DEFAULT;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
}
 8001950:	e014      	b.n	800197c <ENC_Button_PressedTask+0xc8>
		else if(cursor_pos->SL_position == FIL_DIA)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	789b      	ldrb	r3, [r3, #2]
 8001956:	2b01      	cmp	r3, #1
 8001958:	d106      	bne.n	8001968 <ENC_Button_PressedTask+0xb4>
			cursor_pos->current_layer = THIRD_LAYER;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2202      	movs	r2, #2
 800195e:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DIAMETER_175;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	711a      	strb	r2, [r3, #4]
}
 8001966:	e009      	b.n	800197c <ENC_Button_PressedTask+0xc8>
		else if(cursor_pos->SL_position == FIL_DEN)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	789b      	ldrb	r3, [r3, #2]
 800196c:	2b02      	cmp	r3, #2
 800196e:	d105      	bne.n	800197c <ENC_Button_PressedTask+0xc8>
			cursor_pos->current_layer = THIRD_LAYER;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2202      	movs	r2, #2
 8001974:	719a      	strb	r2, [r3, #6]
			cursor_pos->TL_position = DENSITY_PLA;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2202      	movs	r2, #2
 800197a:	711a      	strb	r2, [r3, #4]
}
 800197c:	bf00      	nop
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000518 	.word	0x20000518
 8001988:	20000048 	.word	0x20000048
 800198c:	2000006c 	.word	0x2000006c

08001990 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019aa:	4a3a      	ldr	r2, [pc, #232]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b2:	4b38      	ldr	r3, [pc, #224]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019be:	4b35      	ldr	r3, [pc, #212]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	4a34      	ldr	r2, [pc, #208]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ca:	4b32      	ldr	r3, [pc, #200]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e2:	4b2c      	ldr	r3, [pc, #176]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	4b29      	ldr	r3, [pc, #164]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019f4:	f043 0302 	orr.w	r3, r3, #2
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <MX_GPIO_Init+0x104>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a06:	2200      	movs	r2, #0
 8001a08:	f641 410f 	movw	r1, #7183	; 0x1c0f
 8001a0c:	4822      	ldr	r0, [pc, #136]	; (8001a98 <MX_GPIO_Init+0x108>)
 8001a0e:	f001 fe8f 	bl	8003730 <HAL_GPIO_WritePin>
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8001a12:	2200      	movs	r2, #0
 8001a14:	2120      	movs	r1, #32
 8001a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a1a:	f001 fe89 	bl	8003730 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a24:	4b1d      	ldr	r3, [pc, #116]	; (8001a9c <MX_GPIO_Init+0x10c>)
 8001a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	4819      	ldr	r0, [pc, #100]	; (8001a98 <MX_GPIO_Init+0x108>)
 8001a34:	f001 fcea 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a38:	f641 430f 	movw	r3, #7183	; 0x1c0f
 8001a3c:	617b      	str	r3, [r7, #20]
                          |EXT_DIR_Pin|CUT_DIR_IN2_Pin|CUT_DIR_IN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4811      	ldr	r0, [pc, #68]	; (8001a98 <MX_GPIO_Init+0x108>)
 8001a52:	f001 fcdb 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001a56:	2320      	movs	r3, #32
 8001a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a70:	f001 fccc 	bl	800340c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001a74:	2340      	movs	r3, #64	; 0x40
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4619      	mov	r1, r3
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <MX_GPIO_Init+0x110>)
 8001a88:	f001 fcc0 	bl	800340c <HAL_GPIO_Init>

}
 8001a8c:	bf00      	nop
 8001a8e:	3728      	adds	r7, #40	; 0x28
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	40021000 	.word	0x40021000
 8001a98:	48000800 	.word	0x48000800
 8001a9c:	10210000 	.word	0x10210000
 8001aa0:	48000400 	.word	0x48000400

08001aa4 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001aa8:	4b16      	ldr	r3, [pc, #88]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001aaa:	4a17      	ldr	r2, [pc, #92]	; (8001b08 <MX_LPTIM1_Init+0x64>)
 8001aac:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001aae:	4b15      	ldr	r3, [pc, #84]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8001ab4:	4b13      	ldr	r3, [pc, #76]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8001ac0:	4b10      	ldr	r3, [pc, #64]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001acc:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001adc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001ae2:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001aee:	4805      	ldr	r0, [pc, #20]	; (8001b04 <MX_LPTIM1_Init+0x60>)
 8001af0:	f001 fe36 	bl	8003760 <HAL_LPTIM_Init>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_LPTIM1_Init+0x5a>
  {
    Error_Handler();
 8001afa:	f000 f949 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20000494 	.word	0x20000494
 8001b08:	40007c00 	.word	0x40007c00

08001b0c <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0a4      	sub	sp, #144	; 0x90
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b14:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	605a      	str	r2, [r3, #4]
 8001b1e:	609a      	str	r2, [r3, #8]
 8001b20:	60da      	str	r2, [r3, #12]
 8001b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2268      	movs	r2, #104	; 0x68
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f005 fc29 	bl	8007384 <memset>
  if(lptimHandle->Instance==LPTIM1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <HAL_LPTIM_MspInit+0xc0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d142      	bne.n	8001bc2 <HAL_LPTIM_MspInit+0xb6>
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001b42:	2300      	movs	r3, #0
 8001b44:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f002 ffac 	bl	8004aa8 <HAL_RCCEx_PeriphCLKConfig>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_LPTIM_MspInit+0x4e>
    {
      Error_Handler();
 8001b56:	f000 f91b 	bl	8001d90 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b60:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b64:	6593      	str	r3, [r2, #88]	; 0x58
 8001b66:	4b1a      	ldr	r3, [pc, #104]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b6e:	613b      	str	r3, [r7, #16]
 8001b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	4a16      	ldr	r2, [pc, #88]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b78:	f043 0302 	orr.w	r3, r3, #2
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7e:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <HAL_LPTIM_MspInit+0xc4>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PB5     ------> LPTIM1_IN1
    PB7     ------> LPTIM1_IN2
    */
    GPIO_InitStruct.Pin = DC_ENC_B_Pin|DC_ENC_A_Pin;
 8001b8a:	23a0      	movs	r3, #160	; 0xa0
 8001b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF1_LPTIM1;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <HAL_LPTIM_MspInit+0xc8>)
 8001bae:	f001 fc2d 	bl	800340c <HAL_GPIO_Init>

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	2041      	movs	r0, #65	; 0x41
 8001bb8:	f001 fbf1 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001bbc:	2041      	movs	r0, #65	; 0x41
 8001bbe:	f001 fc0a 	bl	80033d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	3790      	adds	r7, #144	; 0x90
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40007c00 	.word	0x40007c00
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	48000400 	.word	0x48000400

08001bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bde:	f001 fa63 	bl	80030a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001be2:	f000 f855 	bl	8001c90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001be6:	f7ff fed3 	bl	8001990 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bea:	f001 f9a7 	bl	8002f3c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001bee:	f000 fe83 	bl	80028f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001bf2:	f000 ff2f 	bl	8002a54 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bf6:	f000 ff7d 	bl	8002af4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8001bfa:	f000 ffd1 	bl	8002ba0 <MX_TIM6_Init>
  MX_TIM16_Init();
 8001bfe:	f001 f805 	bl	8002c0c <MX_TIM16_Init>
  MX_LPTIM1_Init();
 8001c02:	f7ff ff4f 	bl	8001aa4 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
  encoder_init(ENC_BTN_GPIO_Port, ENC_BTN_Pin, 20);
 8001c06:	2214      	movs	r2, #20
 8001c08:	2140      	movs	r1, #64	; 0x40
 8001c0a:	4818      	ldr	r0, [pc, #96]	; (8001c6c <main+0x94>)
 8001c0c:	f7ff fd92 	bl	8001734 <encoder_init>
  delay_init();
 8001c10:	f7ff fd6c 	bl	80016ec <delay_init>
  ST7920_Init();
 8001c14:	f7ff fb68 	bl	80012e8 <ST7920_Init>
  stepper_init(&extruder, &htim1, TIM_CHANNEL_1, &htim2, EXT_DIR_GPIO_Port,
 8001c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	4b14      	ldr	r3, [pc, #80]	; (8001c70 <main+0x98>)
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <main+0x9c>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	4914      	ldr	r1, [pc, #80]	; (8001c78 <main+0xa0>)
 8001c28:	4814      	ldr	r0, [pc, #80]	; (8001c7c <main+0xa4>)
 8001c2a:	f000 fbaf 	bl	800238c <stepper_init>
  EXT_DIR_Pin);
  DC_motor_Init(&DC_motor, &htim16, TIM_CHANNEL_1, CUT_DIR_IN1_GPIO_Port,
 8001c2e:	4b14      	ldr	r3, [pc, #80]	; (8001c80 <main+0xa8>)
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c36:	9302      	str	r3, [sp, #8]
 8001c38:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <main+0x98>)
 8001c3a:	9301      	str	r3, [sp, #4]
 8001c3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c40:	9300      	str	r3, [sp, #0]
 8001c42:	4b0b      	ldr	r3, [pc, #44]	; (8001c70 <main+0x98>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	490f      	ldr	r1, [pc, #60]	; (8001c84 <main+0xac>)
 8001c48:	480f      	ldr	r0, [pc, #60]	; (8001c88 <main+0xb0>)
 8001c4a:	f7ff f848 	bl	8000cde <DC_motor_Init>
  CUT_DIR_IN1_Pin, CUT_DIR_IN2_GPIO_Port, CUT_DIR_IN2_Pin, &hlptim1);
  Init_menu(&cursor_pos);
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <main+0xb4>)
 8001c50:	f000 fa38 	bl	80020c4 <Init_menu>
  //stepper_meters_to_rotations(&extruder, 1, 10, DIR);

  stepper_extrude_weight(&extruder, 10);
 8001c54:	210a      	movs	r1, #10
 8001c56:	4809      	ldr	r0, [pc, #36]	; (8001c7c <main+0xa4>)
 8001c58:	f000 fd76 	bl	8002748 <stepper_extrude_weight>
	//stepper_set_angle(&extruder, 360, 10, DIR);
	//DC_set_angle(&DC_motor, 360, 50, DIR);
	while (1)
	{

		ENC_Button_Action(&cursor_pos);
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <main+0xb4>)
 8001c5e:	f7ff fe09 	bl	8001874 <ENC_Button_Action>
		menu_update(&cursor_pos);
 8001c62:	480a      	ldr	r0, [pc, #40]	; (8001c8c <main+0xb4>)
 8001c64:	f000 fa0c 	bl	8002080 <menu_update>
		ENC_Button_Action(&cursor_pos);
 8001c68:	e7f8      	b.n	8001c5c <main+0x84>
 8001c6a:	bf00      	nop
 8001c6c:	48000400 	.word	0x48000400
 8001c70:	48000800 	.word	0x48000800
 8001c74:	200005fc 	.word	0x200005fc
 8001c78:	200005b0 	.word	0x200005b0
 8001c7c:	20000048 	.word	0x20000048
 8001c80:	20000494 	.word	0x20000494
 8001c84:	20000648 	.word	0x20000648
 8001c88:	2000006c 	.word	0x2000006c
 8001c8c:	20000510 	.word	0x20000510

08001c90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b096      	sub	sp, #88	; 0x58
 8001c94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c96:	f107 0314 	add.w	r3, r7, #20
 8001c9a:	2244      	movs	r2, #68	; 0x44
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f005 fb70 	bl	8007384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	605a      	str	r2, [r3, #4]
 8001cac:	609a      	str	r2, [r3, #8]
 8001cae:	60da      	str	r2, [r3, #12]
 8001cb0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001cb2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001cb6:	f002 f87b 	bl	8003db0 <HAL_PWREx_ControlVoltageScaling>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cc0:	f000 f866 	bl	8001d90 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ccc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cce:	2340      	movs	r3, #64	; 0x40
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cde:	230a      	movs	r3, #10
 8001ce0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001ce2:	2307      	movs	r3, #7
 8001ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cea:	2302      	movs	r3, #2
 8001cec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 f8b2 	bl	8003e5c <HAL_RCC_OscConfig>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001cfe:	f000 f847 	bl	8001d90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d02:	230f      	movs	r3, #15
 8001d04:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d06:	2303      	movs	r3, #3
 8001d08:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	2104      	movs	r1, #4
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 fcbe 	bl	800469c <HAL_RCC_ClockConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d26:	f000 f833 	bl	8001d90 <Error_Handler>
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	3758      	adds	r7, #88	; 0x58
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
	...

08001d34 <HAL_LPTIM_AutoReloadMatchCallback>:

/* USER CODE BEGIN 4 */
void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim) {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */
	UNUSED(hlptim);
	DC_stop(&DC_motor);
 8001d3c:	4803      	ldr	r0, [pc, #12]	; (8001d4c <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8001d3e:	f7ff f88e 	bl	8000e5e <DC_stop>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	2000006c 	.word	0x2000006c

08001d50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	if(FIRST_MISS_FLAG == 1)
 8001d58:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d10c      	bne.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if (htim->Instance == extruder.slave_timer.htim->Instance)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	4b08      	ldr	r3, [pc, #32]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d105      	bne.n	8001d7c <HAL_TIM_PeriodElapsedCallback+0x2c>
		{
			stepper_stop(&extruder);
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001d72:	f000 fb27 	bl	80023c4 <stepper_stop>
			EXTRUDE_PROCESS_FLAG = 0;
 8001d76:	4b05      	ldr	r3, [pc, #20]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000048f 	.word	0x2000048f
 8001d88:	20000048 	.word	0x20000048
 8001d8c:	20000490 	.word	0x20000490

08001d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d94:	b672      	cpsid	i
}
 8001d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001d98:	e7fe      	b.n	8001d98 <Error_Handler+0x8>
	...

08001d9c <update_first_layer>:
#include "menu_LCD.h"
#include "ST7920_SERIAL.h"
#include "encoder.h"

void update_first_layer(cursor_position* curr_position)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	if(curr_position->FL_position != curr_position->FL_prev_position)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	781a      	ldrb	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d054      	beq.n	8001e5a <update_first_layer+0xbe>
	{
		switch(curr_position->FL_position)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b03      	cmp	r3, #3
 8001db6:	d84b      	bhi.n	8001e50 <update_first_layer+0xb4>
 8001db8:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <update_first_layer+0x24>)
 8001dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbe:	bf00      	nop
 8001dc0:	08001dd1 	.word	0x08001dd1
 8001dc4:	08001deb 	.word	0x08001deb
 8001dc8:	08001e0d 	.word	0x08001e0d
 8001dcc:	08001e2f 	.word	0x08001e2f
		{
			case DEFAULT:
			ST7920_GraphicMode(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f7ff f985 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001dd6:	f7ff fa37 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff f980 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001de0:	f7ff fa32 	bl	8001248 <ST7920_Clear>

			default_screen();
 8001de4:	f000 fa60 	bl	80022a8 <default_screen>
			break;
 8001de8:	e033      	b.n	8001e52 <update_first_layer+0xb6>

			case START:
			default_screen();
 8001dea:	f000 fa5d 	bl	80022a8 <default_screen>

			// highlighting "START"
			ST7920_GraphicMode(1);
 8001dee:	2001      	movs	r0, #1
 8001df0:	f7ff f976 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(88, 48, 80, 16);
 8001df4:	2310      	movs	r3, #16
 8001df6:	2250      	movs	r2, #80	; 0x50
 8001df8:	2130      	movs	r1, #48	; 0x30
 8001dfa:	2058      	movs	r0, #88	; 0x58
 8001dfc:	f7ff fc18 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001e00:	f7ff fa18 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff f96b 	bl	80010e0 <ST7920_GraphicMode>
			break;
 8001e0a:	e022      	b.n	8001e52 <update_first_layer+0xb6>

			case STOP:
			default_screen();
 8001e0c:	f000 fa4c 	bl	80022a8 <default_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff f965 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 50, 35, 16);
 8001e16:	2310      	movs	r3, #16
 8001e18:	2223      	movs	r2, #35	; 0x23
 8001e1a:	2132      	movs	r1, #50	; 0x32
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7ff fc07 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001e22:	f7ff fa07 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff f95a 	bl	80010e0 <ST7920_GraphicMode>
			break;
 8001e2c:	e011      	b.n	8001e52 <update_first_layer+0xb6>

			case SETTINGS:
			default_screen();
 8001e2e:	f000 fa3b 	bl	80022a8 <default_screen>
			// highlighting "SETTINGS"
			ST7920_GraphicMode(1);
 8001e32:	2001      	movs	r0, #1
 8001e34:	f7ff f954 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 16, 80, 16);
 8001e38:	2310      	movs	r3, #16
 8001e3a:	2250      	movs	r2, #80	; 0x50
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff fbf6 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001e44:	f7ff f9f6 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001e48:	2000      	movs	r0, #0
 8001e4a:	f7ff f949 	bl	80010e0 <ST7920_GraphicMode>
			break;
 8001e4e:	e000      	b.n	8001e52 <update_first_layer+0xb6>

			default:

			break;
 8001e50:	bf00      	nop

		}

		curr_position->FL_prev_position = curr_position->FL_position;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	705a      	strb	r2, [r3, #1]
	}
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop

08001e64 <update_second_layer>:


void update_second_layer(cursor_position* curr_position)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	if(curr_position->SL_position != curr_position->SL_prev_position)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	789a      	ldrb	r2, [r3, #2]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f000 809e 	beq.w	8001fb6 <update_second_layer+0x152>
	{

		switch(curr_position->SL_position)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	789b      	ldrb	r3, [r3, #2]
 8001e7e:	2b04      	cmp	r3, #4
 8001e80:	f200 8094 	bhi.w	8001fac <update_second_layer+0x148>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <update_second_layer+0x28>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001f79 	.word	0x08001f79
 8001e90:	08001ea1 	.word	0x08001ea1
 8001e94:	08001ed7 	.word	0x08001ed7
 8001e98:	08001f0d 	.word	0x08001f0d
 8001e9c:	08001f43 	.word	0x08001f43
		{
		case FIL_DIA:
			ST7920_GraphicMode(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f7ff f91d 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001ea6:	f7ff f9cf 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff f918 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001eb0:	f7ff f9ca 	bl	8001248 <ST7920_Clear>


			settings_screen();
 8001eb4:	f000 fa28 	bl	8002308 <settings_screen>

			// highlighting
			ST7920_GraphicMode(1);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f7ff f911 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 8001ebe:	230e      	movs	r3, #14
 8001ec0:	224f      	movs	r2, #79	; 0x4f
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fbb3 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001eca:	f7ff f9b3 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff f906 	bl	80010e0 <ST7920_GraphicMode>

			break;
 8001ed4:	e06b      	b.n	8001fae <update_second_layer+0x14a>

		case FIL_DEN:
			ST7920_GraphicMode(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff f902 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001edc:	f7ff f9b4 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff f8fd 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001ee6:	f7ff f9af 	bl	8001248 <ST7920_Clear>

			// highlighting
			settings_screen();
 8001eea:	f000 fa0d 	bl	8002308 <settings_screen>
			ST7920_GraphicMode(1);
 8001eee:	2001      	movs	r0, #1
 8001ef0:	f7ff f8f6 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 8001ef4:	230f      	movs	r3, #15
 8001ef6:	224f      	movs	r2, #79	; 0x4f
 8001ef8:	210f      	movs	r1, #15
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7ff fb98 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001f00:	f7ff f998 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f8eb 	bl	80010e0 <ST7920_GraphicMode>

			break;
 8001f0a:	e050      	b.n	8001fae <update_second_layer+0x14a>

		case SAMPLE_WEIGHT:
			ST7920_GraphicMode(1);
 8001f0c:	2001      	movs	r0, #1
 8001f0e:	f7ff f8e7 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f12:	f7ff f999 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff f8e2 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f1c:	f7ff f994 	bl	8001248 <ST7920_Clear>


			settings_screen();
 8001f20:	f000 f9f2 	bl	8002308 <settings_screen>

			ST7920_GraphicMode(1);
 8001f24:	2001      	movs	r0, #1
 8001f26:	f7ff f8db 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 30, 79, 15);
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	224f      	movs	r2, #79	; 0x4f
 8001f2e:	211e      	movs	r1, #30
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7ff fb7d 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001f36:	f7ff f97d 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7ff f8d0 	bl	80010e0 <ST7920_GraphicMode>
			break;
 8001f40:	e035      	b.n	8001fae <update_second_layer+0x14a>

		case QUANTITY:
			ST7920_GraphicMode(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f7ff f8cc 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f48:	f7ff f97e 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f8c7 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f52:	f7ff f979 	bl	8001248 <ST7920_Clear>


			settings_screen();
 8001f56:	f000 f9d7 	bl	8002308 <settings_screen>

			ST7920_GraphicMode(1);
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff f8c0 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 48, 79, 15);
 8001f60:	230f      	movs	r3, #15
 8001f62:	224f      	movs	r2, #79	; 0x4f
 8001f64:	2130      	movs	r1, #48	; 0x30
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7ff fb62 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001f6c:	f7ff f962 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff f8b5 	bl	80010e0 <ST7920_GraphicMode>
			break;
 8001f76:	e01a      	b.n	8001fae <update_second_layer+0x14a>

		case BACK:
			ST7920_GraphicMode(1);
 8001f78:	2001      	movs	r0, #1
 8001f7a:	f7ff f8b1 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f7e:	f7ff f963 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff f8ac 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8001f88:	f7ff f95e 	bl	8001248 <ST7920_Clear>


			settings_screen();
 8001f8c:	f000 f9bc 	bl	8002308 <settings_screen>

			ST7920_GraphicMode(1);
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff f8a5 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(80, 48, 79, 15);
 8001f96:	230f      	movs	r3, #15
 8001f98:	224f      	movs	r2, #79	; 0x4f
 8001f9a:	2130      	movs	r1, #48	; 0x30
 8001f9c:	2050      	movs	r0, #80	; 0x50
 8001f9e:	f7ff fb47 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8001fa2:	f7ff f947 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff f89a 	bl	80010e0 <ST7920_GraphicMode>


		default:

			break;
 8001fac:	bf00      	nop
		}

		curr_position->SL_prev_position = curr_position->SL_position;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	789a      	ldrb	r2, [r3, #2]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	70da      	strb	r2, [r3, #3]
	}

}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop

08001fc0 <update_third_layer>:


void update_third_layer(cursor_position* curr_position)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	if(curr_position->TL_position != curr_position->TL_prev_position)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	791a      	ldrb	r2, [r3, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	795b      	ldrb	r3, [r3, #5]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d050      	beq.n	8002076 <update_third_layer+0xb6>
	{
		switch(curr_position->TL_position)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	2b06      	cmp	r3, #6
 8001fda:	d847      	bhi.n	800206c <update_third_layer+0xac>
 8001fdc:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <update_third_layer+0x24>)
 8001fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe2:	bf00      	nop
 8001fe4:	08002001 	.word	0x08002001
 8001fe8:	08002037 	.word	0x08002037
 8001fec:	0800206d 	.word	0x0800206d
 8001ff0:	0800206d 	.word	0x0800206d
 8001ff4:	0800206d 	.word	0x0800206d
 8001ff8:	0800206d 	.word	0x0800206d
 8001ffc:	0800206d 	.word	0x0800206d
		{
		case DIAMETER_175:
			ST7920_GraphicMode(1);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff f86d 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8002006:	f7ff f91f 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 800200a:	2000      	movs	r0, #0
 800200c:	f7ff f868 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8002010:	f7ff f91a 	bl	8001248 <ST7920_Clear>
			diameter_screen();
 8002014:	f000 f9a0 	bl	8002358 <diameter_screen>

			ST7920_GraphicMode(1);
 8002018:	2001      	movs	r0, #1
 800201a:	f7ff f861 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 0, 79, 14);
 800201e:	230e      	movs	r3, #14
 8002020:	224f      	movs	r2, #79	; 0x4f
 8002022:	2100      	movs	r1, #0
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fb03 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 800202a:	f7ff f903 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff f856 	bl	80010e0 <ST7920_GraphicMode>

			break;
 8002034:	e01b      	b.n	800206e <update_third_layer+0xae>
		case DIAMETER_285:
			ST7920_GraphicMode(1);
 8002036:	2001      	movs	r0, #1
 8002038:	f7ff f852 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 800203c:	f7ff f904 	bl	8001248 <ST7920_Clear>
			ST7920_GraphicMode(0);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff f84d 	bl	80010e0 <ST7920_GraphicMode>
			ST7920_Clear();
 8002046:	f7ff f8ff 	bl	8001248 <ST7920_Clear>
			diameter_screen();
 800204a:	f000 f985 	bl	8002358 <diameter_screen>

			ST7920_GraphicMode(1);
 800204e:	2001      	movs	r0, #1
 8002050:	f7ff f846 	bl	80010e0 <ST7920_GraphicMode>
			DrawFilledRectangle(0, 15, 79, 15);
 8002054:	230f      	movs	r3, #15
 8002056:	224f      	movs	r2, #79	; 0x4f
 8002058:	210f      	movs	r1, #15
 800205a:	2000      	movs	r0, #0
 800205c:	f7ff fae8 	bl	8001630 <DrawFilledRectangle>
			ST7920_Update();
 8002060:	f7ff f8e8 	bl	8001234 <ST7920_Update>
			ST7920_GraphicMode(0);
 8002064:	2000      	movs	r0, #0
 8002066:	f7ff f83b 	bl	80010e0 <ST7920_GraphicMode>

			break;
 800206a:	e000      	b.n	800206e <update_third_layer+0xae>
		case WEIGHT:
			break;
		case QTY:
			break;
		default:
			break;
 800206c:	bf00      	nop

		}

		curr_position->TL_prev_position = curr_position->TL_position;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	791a      	ldrb	r2, [r3, #4]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	715a      	strb	r2, [r3, #5]

	}

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop

08002080 <menu_update>:




void menu_update(cursor_position* curr_position)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

	update_enc(curr_position);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f83b 	bl	8002104 <update_enc>

	if(curr_position->current_layer == FIRST_LAYER)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	799b      	ldrb	r3, [r3, #6]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d103      	bne.n	800209e <menu_update+0x1e>
	{

		update_first_layer(curr_position);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fe80 	bl	8001d9c <update_first_layer>
	}




}
 800209c:	e00e      	b.n	80020bc <menu_update+0x3c>
	else if(curr_position->current_layer == SECOND_LAYER)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	799b      	ldrb	r3, [r3, #6]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d103      	bne.n	80020ae <menu_update+0x2e>
		update_second_layer(curr_position);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fedc 	bl	8001e64 <update_second_layer>
}
 80020ac:	e006      	b.n	80020bc <menu_update+0x3c>
	else if(curr_position->current_layer == THIRD_LAYER)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	799b      	ldrb	r3, [r3, #6]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d102      	bne.n	80020bc <menu_update+0x3c>
		update_third_layer(curr_position);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff ff82 	bl	8001fc0 <update_third_layer>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <Init_menu>:


void Init_menu(cursor_position* curr_position)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
	curr_position->FL_position = DEFAULT;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]

	curr_position->SL_position = FIL_DIA;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	709a      	strb	r2, [r3, #2]

	curr_position->TL_position = DIAMETER_175;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	711a      	strb	r2, [r3, #4]

	curr_position->FL_prev_position = START;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	705a      	strb	r2, [r3, #1]

	curr_position->SL_prev_position = NONE;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2205      	movs	r2, #5
 80020e8:	70da      	strb	r2, [r3, #3]

	curr_position->TL_prev_position = NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2205      	movs	r2, #5
 80020ee:	715a      	strb	r2, [r3, #5]


	curr_position->current_layer = FIRST_LAYER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	719a      	strb	r2, [r3, #6]

	menu_update(curr_position);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff ffc2 	bl	8002080 <menu_update>

}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <update_enc>:



void update_enc(cursor_position* curr_position)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

	uint8_t enc_value;
	enc_value = enc_get_counter();
 800210c:	f7ff fb40 	bl	8001790 <enc_get_counter>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]

	if(curr_position->current_layer == FIRST_LAYER)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	799b      	ldrb	r3, [r3, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d143      	bne.n	80021a4 <update_enc+0xa0>
	{

			if((enc_value >=0) & (enc_value < 4))
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	2b03      	cmp	r3, #3
 8002120:	d803      	bhi.n	800212a <update_enc+0x26>
			{
				curr_position->FL_position = DEFAULT;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8002128:	e0b9      	b.n	800229e <update_enc+0x19a>
			else if((enc_value >= 4) & (enc_value < 8))
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	2b03      	cmp	r3, #3
 800212e:	bf8c      	ite	hi
 8002130:	2301      	movhi	r3, #1
 8002132:	2300      	movls	r3, #0
 8002134:	b2da      	uxtb	r2, r3
 8002136:	7bfb      	ldrb	r3, [r7, #15]
 8002138:	2b07      	cmp	r3, #7
 800213a:	bf94      	ite	ls
 800213c:	2301      	movls	r3, #1
 800213e:	2300      	movhi	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4013      	ands	r3, r2
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <update_enc+0x4e>
				curr_position->FL_position = SETTINGS;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	701a      	strb	r2, [r3, #0]
}
 8002150:	e0a5      	b.n	800229e <update_enc+0x19a>
			else if((enc_value >= 8) & (enc_value < 12))
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	2b07      	cmp	r3, #7
 8002156:	bf8c      	ite	hi
 8002158:	2301      	movhi	r3, #1
 800215a:	2300      	movls	r3, #0
 800215c:	b2da      	uxtb	r2, r3
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b0b      	cmp	r3, #11
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	4013      	ands	r3, r2
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <update_enc+0x76>
				curr_position->FL_position = START;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
}
 8002178:	e091      	b.n	800229e <update_enc+0x19a>
			else if((enc_value >= 12) & (enc_value < 16))
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	2b0b      	cmp	r3, #11
 800217e:	bf8c      	ite	hi
 8002180:	2301      	movhi	r3, #1
 8002182:	2300      	movls	r3, #0
 8002184:	b2da      	uxtb	r2, r3
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	bf94      	ite	ls
 800218c:	2301      	movls	r3, #1
 800218e:	2300      	movhi	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4013      	ands	r3, r2
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8081 	beq.w	800229e <update_enc+0x19a>
				curr_position->FL_position = STOP;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	701a      	strb	r2, [r3, #0]
}
 80021a2:	e07c      	b.n	800229e <update_enc+0x19a>
	else if(curr_position->current_layer == SECOND_LAYER)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	799b      	ldrb	r3, [r3, #6]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d156      	bne.n	800225a <update_enc+0x156>
		if((enc_value >=0) & (enc_value < 4))
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b03      	cmp	r3, #3
 80021b0:	d803      	bhi.n	80021ba <update_enc+0xb6>
			curr_position->SL_position = FIL_DIA;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2201      	movs	r2, #1
 80021b6:	709a      	strb	r2, [r3, #2]
}
 80021b8:	e071      	b.n	800229e <update_enc+0x19a>
		else if((enc_value >= 4) & (enc_value < 8))
 80021ba:	7bfb      	ldrb	r3, [r7, #15]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	bf8c      	ite	hi
 80021c0:	2301      	movhi	r3, #1
 80021c2:	2300      	movls	r3, #0
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	7bfb      	ldrb	r3, [r7, #15]
 80021c8:	2b07      	cmp	r3, #7
 80021ca:	bf94      	ite	ls
 80021cc:	2301      	movls	r3, #1
 80021ce:	2300      	movhi	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4013      	ands	r3, r2
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <update_enc+0xde>
			curr_position->SL_position = FIL_DEN;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2202      	movs	r2, #2
 80021de:	709a      	strb	r2, [r3, #2]
}
 80021e0:	e05d      	b.n	800229e <update_enc+0x19a>
		else if((enc_value >= 8) & (enc_value < 12))
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
 80021e4:	2b07      	cmp	r3, #7
 80021e6:	bf8c      	ite	hi
 80021e8:	2301      	movhi	r3, #1
 80021ea:	2300      	movls	r3, #0
 80021ec:	b2da      	uxtb	r2, r3
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b0b      	cmp	r3, #11
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4013      	ands	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <update_enc+0x106>
			curr_position->SL_position = SAMPLE_WEIGHT;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2203      	movs	r2, #3
 8002206:	709a      	strb	r2, [r3, #2]
}
 8002208:	e049      	b.n	800229e <update_enc+0x19a>
		else if((enc_value >= 12) & (enc_value < 16))
 800220a:	7bfb      	ldrb	r3, [r7, #15]
 800220c:	2b0b      	cmp	r3, #11
 800220e:	bf8c      	ite	hi
 8002210:	2301      	movhi	r3, #1
 8002212:	2300      	movls	r3, #0
 8002214:	b2da      	uxtb	r2, r3
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b0f      	cmp	r3, #15
 800221a:	bf94      	ite	ls
 800221c:	2301      	movls	r3, #1
 800221e:	2300      	movhi	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4013      	ands	r3, r2
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <update_enc+0x12e>
			curr_position->SL_position = QUANTITY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2204      	movs	r2, #4
 800222e:	709a      	strb	r2, [r3, #2]
}
 8002230:	e035      	b.n	800229e <update_enc+0x19a>
		else if((enc_value >= 16) & (enc_value < 21))
 8002232:	7bfb      	ldrb	r3, [r7, #15]
 8002234:	2b0f      	cmp	r3, #15
 8002236:	bf8c      	ite	hi
 8002238:	2301      	movhi	r3, #1
 800223a:	2300      	movls	r3, #0
 800223c:	b2da      	uxtb	r2, r3
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2b14      	cmp	r3, #20
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	4013      	ands	r3, r2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d025      	beq.n	800229e <update_enc+0x19a>
			curr_position->SL_position = BACK;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	709a      	strb	r2, [r3, #2]
}
 8002258:	e021      	b.n	800229e <update_enc+0x19a>
	else if(curr_position->current_layer == THIRD_LAYER)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	799b      	ldrb	r3, [r3, #6]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d11d      	bne.n	800229e <update_enc+0x19a>
		if(curr_position->SL_position == FIL_DIA)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	789b      	ldrb	r3, [r3, #2]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d119      	bne.n	800229e <update_enc+0x19a>
			if((enc_value >= 0) & (enc_value < 4))
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b03      	cmp	r3, #3
 800226e:	d803      	bhi.n	8002278 <update_enc+0x174>
				curr_position->TL_position = DIAMETER_175;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	711a      	strb	r2, [r3, #4]
}
 8002276:	e012      	b.n	800229e <update_enc+0x19a>
			else if((enc_value >= 4) & (enc_value <= 8))
 8002278:	7bfb      	ldrb	r3, [r7, #15]
 800227a:	2b03      	cmp	r3, #3
 800227c:	bf8c      	ite	hi
 800227e:	2301      	movhi	r3, #1
 8002280:	2300      	movls	r3, #0
 8002282:	b2da      	uxtb	r2, r3
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	2b08      	cmp	r3, #8
 8002288:	bf94      	ite	ls
 800228a:	2301      	movls	r3, #1
 800228c:	2300      	movhi	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4013      	ands	r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <update_enc+0x19a>
				curr_position->TL_position = DIAMETER_285;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	711a      	strb	r2, [r3, #4]
}
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <default_screen>:




void default_screen()
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"FILAMENT CUTTER");
 80022ac:	4a12      	ldr	r2, [pc, #72]	; (80022f8 <default_screen+0x50>)
 80022ae:	2100      	movs	r1, #0
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7fe fed1 	bl	8001058 <ST7920_SendString>
	ST7920_GraphicMode(1);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7fe ff12 	bl	80010e0 <ST7920_GraphicMode>
	ST7920_Clear();
 80022bc:	f7fe ffc4 	bl	8001248 <ST7920_Clear>
	DrawRectangle(0, 0, 127, 14);
 80022c0:	230e      	movs	r3, #14
 80022c2:	227f      	movs	r2, #127	; 0x7f
 80022c4:	2100      	movs	r1, #0
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff f928 	bl	800151c <DrawRectangle>
	ST7920_Update();
 80022cc:	f7fe ffb2 	bl	8001234 <ST7920_Update>
	ST7920_GraphicMode(0);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe ff05 	bl	80010e0 <ST7920_GraphicMode>
	ST7920_SendString(1,0,"1.Settings");
 80022d6:	4a09      	ldr	r2, [pc, #36]	; (80022fc <default_screen+0x54>)
 80022d8:	2100      	movs	r1, #0
 80022da:	2001      	movs	r0, #1
 80022dc:	f7fe febc 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(3,0,"STOP");
 80022e0:	4a07      	ldr	r2, [pc, #28]	; (8002300 <default_screen+0x58>)
 80022e2:	2100      	movs	r1, #0
 80022e4:	2003      	movs	r0, #3
 80022e6:	f7fe feb7 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(3,5," START");
 80022ea:	4a06      	ldr	r2, [pc, #24]	; (8002304 <default_screen+0x5c>)
 80022ec:	2105      	movs	r1, #5
 80022ee:	2003      	movs	r0, #3
 80022f0:	f7fe feb2 	bl	8001058 <ST7920_SendString>

}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	080073ac 	.word	0x080073ac
 80022fc:	080073bc 	.word	0x080073bc
 8002300:	080073c8 	.word	0x080073c8
 8002304:	080073d0 	.word	0x080073d0

08002308 <settings_screen>:



void settings_screen()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
	ST7920_SendString(0,0,"1.Diameter");
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <settings_screen+0x3c>)
 800230e:	2100      	movs	r1, #0
 8002310:	2000      	movs	r0, #0
 8002312:	f7fe fea1 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(1,0,"2.Density");
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <settings_screen+0x40>)
 8002318:	2100      	movs	r1, #0
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe fe9c 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(2,0,"3.Weight");
 8002320:	4a0a      	ldr	r2, [pc, #40]	; (800234c <settings_screen+0x44>)
 8002322:	2100      	movs	r1, #0
 8002324:	2002      	movs	r0, #2
 8002326:	f7fe fe97 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(3,0,"4.QTY");
 800232a:	4a09      	ldr	r2, [pc, #36]	; (8002350 <settings_screen+0x48>)
 800232c:	2100      	movs	r1, #0
 800232e:	2003      	movs	r0, #3
 8002330:	f7fe fe92 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(3,5,"5.BACK");
 8002334:	4a07      	ldr	r2, [pc, #28]	; (8002354 <settings_screen+0x4c>)
 8002336:	2105      	movs	r1, #5
 8002338:	2003      	movs	r0, #3
 800233a:	f7fe fe8d 	bl	8001058 <ST7920_SendString>

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	080073d8 	.word	0x080073d8
 8002348:	080073e4 	.word	0x080073e4
 800234c:	080073f0 	.word	0x080073f0
 8002350:	080073fc 	.word	0x080073fc
 8002354:	08007404 	.word	0x08007404

08002358 <diameter_screen>:


void diameter_screen()
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	ST7920_SendString(0, 0, "1.75 mm");
 800235c:	4a08      	ldr	r2, [pc, #32]	; (8002380 <diameter_screen+0x28>)
 800235e:	2100      	movs	r1, #0
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fe79 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(1, 0, "2.85 mm");
 8002366:	4a07      	ldr	r2, [pc, #28]	; (8002384 <diameter_screen+0x2c>)
 8002368:	2100      	movs	r1, #0
 800236a:	2001      	movs	r0, #1
 800236c:	f7fe fe74 	bl	8001058 <ST7920_SendString>
	ST7920_SendString(3, 3, "BACK");
 8002370:	4a05      	ldr	r2, [pc, #20]	; (8002388 <diameter_screen+0x30>)
 8002372:	2103      	movs	r1, #3
 8002374:	2003      	movs	r0, #3
 8002376:	f7fe fe6f 	bl	8001058 <ST7920_SendString>
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	0800740c 	.word	0x0800740c
 8002384:	08007414 	.word	0x08007414
 8002388:	0800741c 	.word	0x0800741c

0800238c <stepper_init>:
#include "stepper.h"


void stepper_init(stepper_motor *motor, TIM_HandleTypeDef *htim, uint32_t channel,
		TIM_HandleTypeDef *slave_timer, GPIO_TypeDef* Dir_port, uint16_t Dir_pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]
	motor->timer.htim = htim;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	601a      	str	r2, [r3, #0]
	motor->timer.channel = channel;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]
	motor->slave_timer.htim = slave_timer;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	609a      	str	r2, [r3, #8]
	motor->DIR_port = Dir_port;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	615a      	str	r2, [r3, #20]
	motor->DIR_pin = Dir_pin;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8bba      	ldrh	r2, [r7, #28]
 80023b6:	831a      	strh	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	3714      	adds	r7, #20
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <stepper_stop>:

// Basic stepper motor control functions

void stepper_stop(stepper_motor *motor)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	motor->mode = IDLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	745a      	strb	r2, [r3, #17]

	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, 0);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <stepper_stop+0x22>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	635a      	str	r2, [r3, #52]	; 0x34
 80023e4:	e02c      	b.n	8002440 <stepper_stop+0x7c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d105      	bne.n	80023fa <stepper_stop+0x36>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	2300      	movs	r3, #0
 80023f6:	6393      	str	r3, [r2, #56]	; 0x38
 80023f8:	e022      	b.n	8002440 <stepper_stop+0x7c>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b08      	cmp	r3, #8
 8002400:	d105      	bne.n	800240e <stepper_stop+0x4a>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2300      	movs	r3, #0
 800240a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800240c:	e018      	b.n	8002440 <stepper_stop+0x7c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b0c      	cmp	r3, #12
 8002414:	d105      	bne.n	8002422 <stepper_stop+0x5e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	6413      	str	r3, [r2, #64]	; 0x40
 8002420:	e00e      	b.n	8002440 <stepper_stop+0x7c>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b10      	cmp	r3, #16
 8002428:	d105      	bne.n	8002436 <stepper_stop+0x72>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	2300      	movs	r3, #0
 8002432:	6593      	str	r3, [r2, #88]	; 0x58
 8002434:	e004      	b.n	8002440 <stepper_stop+0x7c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	65d3      	str	r3, [r2, #92]	; 0x5c
	HAL_TIM_PWM_Stop(motor->timer.htim, motor->timer.channel);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	4619      	mov	r1, r3
 800244a:	4610      	mov	r0, r2
 800244c:	f003 f908 	bl	8005660 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(motor->slave_timer.htim);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4618      	mov	r0, r3
 8002456:	f002 ff8d 	bl	8005374 <HAL_TIM_Base_Stop_IT>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <stepper_set_dir>:

void stepper_set_dir(stepper_motor *motor, stepper_dir direction)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
 800246a:	460b      	mov	r3, r1
 800246c:	70fb      	strb	r3, [r7, #3]
	motor->dir = direction;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	741a      	strb	r2, [r3, #16]
	if(motor->dir == CW)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7c1b      	ldrb	r3, [r3, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d108      	bne.n	800248e <stepper_set_dir+0x2c>
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_RESET);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6958      	ldr	r0, [r3, #20]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	8b1b      	ldrh	r3, [r3, #24]
 8002484:	2200      	movs	r2, #0
 8002486:	4619      	mov	r1, r3
 8002488:	f001 f952 	bl	8003730 <HAL_GPIO_WritePin>

	else
	{
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
	}
}
 800248c:	e007      	b.n	800249e <stepper_set_dir+0x3c>
		HAL_GPIO_WritePin(motor->DIR_port, motor->DIR_pin , GPIO_PIN_SET);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6958      	ldr	r0, [r3, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8b1b      	ldrh	r3, [r3, #24]
 8002496:	2201      	movs	r2, #1
 8002498:	4619      	mov	r1, r3
 800249a:	f001 f949 	bl	8003730 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <stepper_set_speed>:

void stepper_set_speed(stepper_motor *motor, uint32_t speed)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
	uint32_t freq, counter;

	if(speed > 100)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b64      	cmp	r3, #100	; 0x64
 80024b6:	d902      	bls.n	80024be <stepper_set_speed+0x16>
	{
		speed = 100;
 80024b8:	2364      	movs	r3, #100	; 0x64
 80024ba:	603b      	str	r3, [r7, #0]
 80024bc:	e006      	b.n	80024cc <stepper_set_speed+0x24>
	}

	else if(speed == 0)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <stepper_set_speed+0x24>
	{
		stepper_stop(motor);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f7ff ff7d 	bl	80023c4 <stepper_stop>
		return;
 80024ca:	e068      	b.n	800259e <stepper_set_speed+0xf6>
	}

	freq = (speed * (STEPEER_MOTOR_MAX_FREQ_HZ - STEPPER_MOTOR_MIN_FREQ_HZ)) / STEPPER_MOTOR_MAX_SPEED;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	f240 32e7 	movw	r2, #999	; 0x3e7
 80024d2:	fb02 f303 	mul.w	r3, r2, r3
 80024d6:	4a33      	ldr	r2, [pc, #204]	; (80025a4 <stepper_set_speed+0xfc>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	60fb      	str	r3, [r7, #12]

	counter = HAL_RCC_GetPCLK1Freq() / (motor->timer.htim->Init.Prescaler * freq);
 80024e0:	f002 fa56 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 80024e4:	4601      	mov	r1, r0
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	fb02 f303 	mul.w	r3, r2, r3
 80024f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80024f6:	60bb      	str	r3, [r7, #8]

	__HAL_TIM_SET_COUNTER(motor->timer.htim, 0);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->timer.htim, counter - 1);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	3a01      	subs	r2, #1
 800250c:	62da      	str	r2, [r3, #44]	; 0x2c
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	3a01      	subs	r2, #1
 8002516:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(motor->timer.htim, motor->timer.channel, (counter/2)-1);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <stepper_set_speed+0x88>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	085a      	lsrs	r2, r3, #1
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3a01      	subs	r2, #1
 800252c:	635a      	str	r2, [r3, #52]	; 0x34
 800252e:	e036      	b.n	800259e <stepper_set_speed+0xf6>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d107      	bne.n	8002548 <stepper_set_speed+0xa0>
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	3b01      	subs	r3, #1
 8002544:	6393      	str	r3, [r2, #56]	; 0x38
 8002546:	e02a      	b.n	800259e <stepper_set_speed+0xf6>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d107      	bne.n	8002560 <stepper_set_speed+0xb8>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	6812      	ldr	r2, [r2, #0]
 800255a:	3b01      	subs	r3, #1
 800255c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800255e:	e01e      	b.n	800259e <stepper_set_speed+0xf6>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b0c      	cmp	r3, #12
 8002566:	d107      	bne.n	8002578 <stepper_set_speed+0xd0>
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	085b      	lsrs	r3, r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	3b01      	subs	r3, #1
 8002574:	6413      	str	r3, [r2, #64]	; 0x40
 8002576:	e012      	b.n	800259e <stepper_set_speed+0xf6>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b10      	cmp	r3, #16
 800257e:	d107      	bne.n	8002590 <stepper_set_speed+0xe8>
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	085b      	lsrs	r3, r3, #1
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	3b01      	subs	r3, #1
 800258c:	6593      	str	r3, [r2, #88]	; 0x58
 800258e:	e006      	b.n	800259e <stepper_set_speed+0xf6>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	3b01      	subs	r3, #1
 800259c:	65d3      	str	r3, [r2, #92]	; 0x5c

}
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	51eb851f 	.word	0x51eb851f

080025a8 <stepper_set_angle>:


void stepper_set_angle(stepper_motor *motor, uint32_t angle, uint32_t speed, stepper_dir dir)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	70fb      	strb	r3, [r7, #3]
	motor->mode = ANGLE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	745a      	strb	r2, [r3, #17]
	stepper_set_dir(motor, dir);
 80025bc:	78fb      	ldrb	r3, [r7, #3]
 80025be:	4619      	mov	r1, r3
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff ff4e 	bl	8002462 <stepper_set_dir>
	stepper_set_speed(motor, speed);
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ff6d 	bl	80024a8 <stepper_set_speed>


	// set angle
	motor->step_counter = 0;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
	motor->steps_to_count = angle * (STEP_PER_REVOLUTION * MICRO_STEP) / 360;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	22c8      	movs	r2, #200	; 0xc8
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	08db      	lsrs	r3, r3, #3
 80025de:	4a19      	ldr	r2, [pc, #100]	; (8002644 <stepper_set_angle+0x9c>)
 80025e0:	fba2 2303 	umull	r2, r3, r2, r3
 80025e4:	089a      	lsrs	r2, r3, #2
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	621a      	str	r2, [r3, #32]


	if(0 == motor->steps_to_count)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <stepper_set_angle+0x50>
	{
		stepper_stop(motor);
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff fee6 	bl	80023c4 <stepper_stop>
	}
	__HAL_TIM_SET_COUNTER(motor->slave_timer.htim, 0);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
	__HAL_TIM_SET_AUTORELOAD(motor->slave_timer.htim, motor->steps_to_count - 1);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a1a      	ldr	r2, [r3, #32]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	3a01      	subs	r2, #1
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a1a      	ldr	r2, [r3, #32]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	3a01      	subs	r2, #1
 800261a:	60da      	str	r2, [r3, #12]

	HAL_TIM_Base_Start_IT(motor->slave_timer.htim);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fe4b 	bl	80052bc <HAL_TIM_Base_Start_IT>
	FIRST_MISS_FLAG = 1;
 8002626:	4b08      	ldr	r3, [pc, #32]	; (8002648 <stepper_set_angle+0xa0>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_PWM_Start(motor->timer.htim, motor->timer.channel);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4619      	mov	r1, r3
 8002636:	4610      	mov	r0, r2
 8002638:	f002 ff2c 	bl	8005494 <HAL_TIM_PWM_Start>

}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	16c16c17 	.word	0x16c16c17
 8002648:	2000048f 	.word	0x2000048f
 800264c:	00000000 	.word	0x00000000

08002650 <stepper_meters_to_rotations>:


void stepper_meters_to_rotations(stepper_motor *motor, uint32_t meters, uint32_t speed, stepper_dir dir)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	70fb      	strb	r3, [r7, #3]
	// 1 rotate = 0,069 m
	// 2*pi*0.0006[m]

	uint32_t target_angle;
	target_angle = (uint32_t)meters / FULL_ROTATION_LENGTH;
 800265e:	68b8      	ldr	r0, [r7, #8]
 8002660:	f7fd fefc 	bl	800045c <__aeabi_ui2d>
 8002664:	a30e      	add	r3, pc, #56	; (adr r3, 80026a0 <stepper_meters_to_rotations+0x50>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fe f89b 	bl	80007a4 <__aeabi_ddiv>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4610      	mov	r0, r2
 8002674:	4619      	mov	r1, r3
 8002676:	f7fe f97d 	bl	8000974 <__aeabi_d2uiz>
 800267a:	4603      	mov	r3, r0
 800267c:	617b      	str	r3, [r7, #20]
	target_angle *= 360;
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002684:	fb02 f303 	mul.w	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
	stepper_set_angle(motor, target_angle, speed, dir);
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6979      	ldr	r1, [r7, #20]
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff ff89 	bl	80025a8 <stepper_set_angle>
}
 8002696:	bf00      	nop
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	4189374c 	.word	0x4189374c
 80026a4:	3fa0e560 	.word	0x3fa0e560

080026a8 <stepper_grams_to_meters>:


uint32_t stepper_grams_to_meters(stepper_motor *motor, uint16_t grams, float filament_diameter, float filament_density, uint32_t speed)
{
 80026a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ac:	b088      	sub	sp, #32
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6178      	str	r0, [r7, #20]
 80026b2:	460b      	mov	r3, r1
 80026b4:	ed87 0a03 	vstr	s0, [r7, #12]
 80026b8:	edc7 0a02 	vstr	s1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	827b      	strh	r3, [r7, #18]

	// dlugosc = 4*waga/ (density * PI * srednica_fil * srednica fil)
	uint32_t length;
	length = 4*grams / (filament_density * 3.14 * filament_diameter * filament_diameter);
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd fed9 	bl	800047c <__aeabi_i2d>
 80026ca:	4604      	mov	r4, r0
 80026cc:	460d      	mov	r5, r1
 80026ce:	68b8      	ldr	r0, [r7, #8]
 80026d0:	f7fd fee6 	bl	80004a0 <__aeabi_f2d>
 80026d4:	a31a      	add	r3, pc, #104	; (adr r3, 8002740 <stepper_grams_to_meters+0x98>)
 80026d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026da:	f7fd ff39 	bl	8000550 <__aeabi_dmul>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4690      	mov	r8, r2
 80026e4:	4699      	mov	r9, r3
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7fd feda 	bl	80004a0 <__aeabi_f2d>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4640      	mov	r0, r8
 80026f2:	4649      	mov	r1, r9
 80026f4:	f7fd ff2c 	bl	8000550 <__aeabi_dmul>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	4690      	mov	r8, r2
 80026fe:	4699      	mov	r9, r3
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f7fd fecd 	bl	80004a0 <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4640      	mov	r0, r8
 800270c:	4649      	mov	r1, r9
 800270e:	f7fd ff1f 	bl	8000550 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	f7fe f843 	bl	80007a4 <__aeabi_ddiv>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe f925 	bl	8000974 <__aeabi_d2uiz>
 800272a:	4603      	mov	r3, r0
 800272c:	61fb      	str	r3, [r7, #28]
	return length;
 800272e:	69fb      	ldr	r3, [r7, #28]

}
 8002730:	4618      	mov	r0, r3
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800273a:	bf00      	nop
 800273c:	f3af 8000 	nop.w
 8002740:	51eb851f 	.word	0x51eb851f
 8002744:	40091eb8 	.word	0x40091eb8

08002748 <stepper_extrude_weight>:

void stepper_extrude_weight(stepper_motor *motor, uint16_t weight)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	807b      	strh	r3, [r7, #2]
	EXTRUDE_PROCESS_FLAG = 1;
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <stepper_extrude_weight+0x3c>)
 8002756:	2201      	movs	r2, #1
 8002758:	701a      	strb	r2, [r3, #0]
	uint32_t meters;
	meters = stepper_grams_to_meters(motor, weight, 1.75, 1.24, 20);
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	2214      	movs	r2, #20
 800275e:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002788 <stepper_extrude_weight+0x40>
 8002762:	eeb7 0a0c 	vmov.f32	s0, #124	; 0x3fe00000  1.750
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff9d 	bl	80026a8 <stepper_grams_to_meters>
 800276e:	60f8      	str	r0, [r7, #12]
	stepper_meters_to_rotations(motor, meters, 20, CW);
 8002770:	2300      	movs	r3, #0
 8002772:	2214      	movs	r2, #20
 8002774:	68f9      	ldr	r1, [r7, #12]
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff6a 	bl	8002650 <stepper_meters_to_rotations>

}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000490 	.word	0x20000490
 8002788:	3f9eb852 	.word	0x3f9eb852

0800278c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_MspInit+0x44>)
 8002794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002796:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <HAL_MspInit+0x44>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6613      	str	r3, [r2, #96]	; 0x60
 800279e:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <HAL_MspInit+0x44>)
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <HAL_MspInit+0x44>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <HAL_MspInit+0x44>)
 80027b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b4:	6593      	str	r3, [r2, #88]	; 0x58
 80027b6:	4b06      	ldr	r3, [pc, #24]	; (80027d0 <HAL_MspInit+0x44>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027be:	603b      	str	r3, [r7, #0]
 80027c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000

080027d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d8:	e7fe      	b.n	80027d8 <NMI_Handler+0x4>

080027da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027da:	b480      	push	{r7}
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027de:	e7fe      	b.n	80027de <HardFault_Handler+0x4>

080027e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e4:	e7fe      	b.n	80027e4 <MemManage_Handler+0x4>

080027e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e6:	b480      	push	{r7}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	e7fe      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002820:	f000 fc9e 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}

08002828 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800282e:	f003 f8d3 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	200005b0 	.word	0x200005b0

0800283c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002840:	4803      	ldr	r0, [pc, #12]	; (8002850 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002842:	f003 f8c9 	bl	80059d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002846:	4803      	ldr	r0, [pc, #12]	; (8002854 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002848:	f003 f8c6 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	200005b0 	.word	0x200005b0
 8002854:	20000648 	.word	0x20000648

08002858 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <TIM1_CC_IRQHandler+0x10>)
 800285e:	f003 f8bb 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200005b0 	.word	0x200005b0

0800286c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002870:	4802      	ldr	r0, [pc, #8]	; (800287c <TIM2_IRQHandler+0x10>)
 8002872:	f003 f8b1 	bl	80059d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200005fc 	.word	0x200005fc

08002880 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002884:	4802      	ldr	r0, [pc, #8]	; (8002890 <LPTIM1_IRQHandler+0x10>)
 8002886:	f001 f87c 	bl	8003982 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000494 	.word	0x20000494

08002894 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002898:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <SystemInit+0x5c>)
 800289a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289e:	4a14      	ldr	r2, [pc, #80]	; (80028f0 <SystemInit+0x5c>)
 80028a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <SystemInit+0x60>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <SystemInit+0x60>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <SystemInit+0x60>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80028ba:	4b0e      	ldr	r3, [pc, #56]	; (80028f4 <SystemInit+0x60>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a0d      	ldr	r2, [pc, #52]	; (80028f4 <SystemInit+0x60>)
 80028c0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80028c4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80028c8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80028ca:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <SystemInit+0x60>)
 80028cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <SystemInit+0x60>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a07      	ldr	r2, [pc, #28]	; (80028f4 <SystemInit+0x60>)
 80028d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028dc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80028de:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SystemInit+0x60>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	e000ed00 	.word	0xe000ed00
 80028f4:	40021000 	.word	0x40021000

080028f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b09a      	sub	sp, #104	; 0x68
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
 8002928:	615a      	str	r2, [r3, #20]
 800292a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800292c:	1d3b      	adds	r3, r7, #4
 800292e:	222c      	movs	r2, #44	; 0x2c
 8002930:	2100      	movs	r1, #0
 8002932:	4618      	mov	r0, r3
 8002934:	f004 fd26 	bl	8007384 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002938:	4b44      	ldr	r3, [pc, #272]	; (8002a4c <MX_TIM1_Init+0x154>)
 800293a:	4a45      	ldr	r2, [pc, #276]	; (8002a50 <MX_TIM1_Init+0x158>)
 800293c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 800293e:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002940:	2250      	movs	r2, #80	; 0x50
 8002942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800294a:	4b40      	ldr	r3, [pc, #256]	; (8002a4c <MX_TIM1_Init+0x154>)
 800294c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b3e      	ldr	r3, [pc, #248]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002958:	4b3c      	ldr	r3, [pc, #240]	; (8002a4c <MX_TIM1_Init+0x154>)
 800295a:	2200      	movs	r2, #0
 800295c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002960:	2200      	movs	r2, #0
 8002962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002964:	4839      	ldr	r0, [pc, #228]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002966:	f002 fbfd 	bl	8005164 <HAL_TIM_Base_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002970:	f7ff fa0e 	bl	8001d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002978:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800297a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800297e:	4619      	mov	r1, r3
 8002980:	4832      	ldr	r0, [pc, #200]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002982:	f003 fa59 	bl	8005e38 <HAL_TIM_ConfigClockSource>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800298c:	f7ff fa00 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002990:	482e      	ldr	r0, [pc, #184]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002992:	f002 fd1e 	bl	80053d2 <HAL_TIM_PWM_Init>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800299c:	f7ff f9f8 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80029a0:	2340      	movs	r3, #64	; 0x40
 80029a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC1REF;
 80029a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029a8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80029aa:	2380      	movs	r3, #128	; 0x80
 80029ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80029ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80029b2:	4619      	mov	r1, r3
 80029b4:	4825      	ldr	r0, [pc, #148]	; (8002a4c <MX_TIM1_Init+0x154>)
 80029b6:	f003 ffab 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 80029c0:	f7ff f9e6 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029c4:	2360      	movs	r3, #96	; 0x60
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 500;
 80029c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029ce:	2300      	movs	r3, #0
 80029d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80029e6:	2200      	movs	r2, #0
 80029e8:	4619      	mov	r1, r3
 80029ea:	4818      	ldr	r0, [pc, #96]	; (8002a4c <MX_TIM1_Init+0x154>)
 80029ec:	f003 f914 	bl	8005c18 <HAL_TIM_PWM_ConfigChannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 80029f6:	f7ff f9cb 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029fe:	2300      	movs	r3, #0
 8002a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a26:	2300      	movs	r3, #0
 8002a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002a2a:	1d3b      	adds	r3, r7, #4
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4807      	ldr	r0, [pc, #28]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002a30:	f003 ffdc 	bl	80069ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8002a3a:	f7ff f9a9 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002a3e:	4803      	ldr	r0, [pc, #12]	; (8002a4c <MX_TIM1_Init+0x154>)
 8002a40:	f000 fa1e 	bl	8002e80 <HAL_TIM_MspPostInit>

}
 8002a44:	bf00      	nop
 8002a46:	3768      	adds	r7, #104	; 0x68
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	200005b0 	.word	0x200005b0
 8002a50:	40012c00 	.word	0x40012c00

08002a54 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002a5a:	f107 030c 	add.w	r3, r7, #12
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]
 8002a68:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a6a:	463b      	mov	r3, r7
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002a7c:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a9c:	4814      	ldr	r0, [pc, #80]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002a9e:	f002 fb61 	bl	8005164 <HAL_TIM_Base_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002aa8:	f7ff f972 	bl	8001d90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002aac:	2307      	movs	r3, #7
 8002aae:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	4619      	mov	r1, r3
 8002aba:	480d      	ldr	r0, [pc, #52]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002abc:	f003 fa82 	bl	8005fc4 <HAL_TIM_SlaveConfigSynchro>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002ac6:	f7ff f963 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4806      	ldr	r0, [pc, #24]	; (8002af0 <MX_TIM2_Init+0x9c>)
 8002ad8:	f003 ff1a 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8002ae2:	f7ff f955 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	200005fc 	.word	0x200005fc

08002af4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08c      	sub	sp, #48	; 0x30
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	2224      	movs	r2, #36	; 0x24
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fc3e 	bl	8007384 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b12:	4b21      	ldr	r3, [pc, #132]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b14:	4a21      	ldr	r2, [pc, #132]	; (8002b9c <MX_TIM3_Init+0xa8>)
 8002b16:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1e:	4b1e      	ldr	r3, [pc, #120]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b32:	4b19      	ldr	r3, [pc, #100]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b40:	2301      	movs	r3, #1
 8002b42:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8002b48:	230f      	movs	r3, #15
 8002b4a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b50:	2301      	movs	r3, #1
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8002b58:	230f      	movs	r3, #15
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002b5c:	f107 030c 	add.w	r3, r7, #12
 8002b60:	4619      	mov	r1, r3
 8002b62:	480d      	ldr	r0, [pc, #52]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b64:	f002 fe04 	bl	8005770 <HAL_TIM_Encoder_Init>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002b6e:	f7ff f90f 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002b7a:	463b      	mov	r3, r7
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4806      	ldr	r0, [pc, #24]	; (8002b98 <MX_TIM3_Init+0xa4>)
 8002b80:	f003 fec6 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002b8a:	f7ff f901 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002b8e:	bf00      	nop
 8002b90:	3730      	adds	r7, #48	; 0x30
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000518 	.word	0x20000518
 8002b9c:	40000400 	.word	0x40000400

08002ba0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ba6:	1d3b      	adds	r3, r7, #4
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002bb0:	4b14      	ldr	r3, [pc, #80]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bb2:	4a15      	ldr	r2, [pc, #84]	; (8002c08 <MX_TIM6_Init+0x68>)
 8002bb4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 80;
 8002bb6:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bb8:	2250      	movs	r2, #80	; 0x50
 8002bba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbc:	4b11      	ldr	r3, [pc, #68]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002bd0:	480c      	ldr	r0, [pc, #48]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bd2:	f002 fac7 	bl	8005164 <HAL_TIM_Base_Init>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002bdc:	f7ff f8d8 	bl	8001d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be0:	2300      	movs	r3, #0
 8002be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002be8:	1d3b      	adds	r3, r7, #4
 8002bea:	4619      	mov	r1, r3
 8002bec:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_TIM6_Init+0x64>)
 8002bee:	f003 fe8f 	bl	8006910 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002bf8:	f7ff f8ca 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000564 	.word	0x20000564
 8002c08:	40001000 	.word	0x40001000

08002c0c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b092      	sub	sp, #72	; 0x48
 8002c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	605a      	str	r2, [r3, #4]
 8002c1c:	609a      	str	r2, [r3, #8]
 8002c1e:	60da      	str	r2, [r3, #12]
 8002c20:	611a      	str	r2, [r3, #16]
 8002c22:	615a      	str	r2, [r3, #20]
 8002c24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002c26:	463b      	mov	r3, r7
 8002c28:	222c      	movs	r2, #44	; 0x2c
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f004 fba9 	bl	8007384 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002c32:	4b30      	ldr	r3, [pc, #192]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <MX_TIM16_Init+0xec>)
 8002c36:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 39999;
 8002c38:	4b2e      	ldr	r3, [pc, #184]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c3a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8002c3e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c40:	4b2c      	ldr	r3, [pc, #176]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 99;
 8002c46:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c48:	2263      	movs	r2, #99	; 0x63
 8002c4a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c4c:	4b29      	ldr	r3, [pc, #164]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c58:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002c5e:	4825      	ldr	r0, [pc, #148]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c60:	f002 fa80 	bl	8005164 <HAL_TIM_Base_Init>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002c6a:	f7ff f891 	bl	8001d90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002c6e:	4821      	ldr	r0, [pc, #132]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002c70:	f002 fbaf 	bl	80053d2 <HAL_TIM_PWM_Init>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002c7a:	f7ff f889 	bl	8001d90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c7e:	2360      	movs	r3, #96	; 0x60
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 99;
 8002c82:	2363      	movs	r3, #99	; 0x63
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c86:	2300      	movs	r3, #0
 8002c88:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c92:	2300      	movs	r3, #0
 8002c94:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c96:	2300      	movs	r3, #0
 8002c98:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4814      	ldr	r0, [pc, #80]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002ca4:	f002 ffb8 	bl	8005c18 <HAL_TIM_PWM_ConfigChannel>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8002cae:	f7ff f86f 	bl	8001d90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002cd0:	463b      	mov	r3, r7
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4807      	ldr	r0, [pc, #28]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002cd6:	f003 fe89 	bl	80069ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8002ce0:	f7ff f856 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002ce4:	4803      	ldr	r0, [pc, #12]	; (8002cf4 <MX_TIM16_Init+0xe8>)
 8002ce6:	f000 f8cb 	bl	8002e80 <HAL_TIM_MspPostInit>

}
 8002cea:	bf00      	nop
 8002cec:	3748      	adds	r7, #72	; 0x48
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000648 	.word	0x20000648
 8002cf8:	40014400 	.word	0x40014400

08002cfc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a38      	ldr	r2, [pc, #224]	; (8002dec <HAL_TIM_Base_MspInit+0xf0>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d124      	bne.n	8002d58 <HAL_TIM_Base_MspInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d0e:	4b38      	ldr	r3, [pc, #224]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d12:	4a37      	ldr	r2, [pc, #220]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d18:	6613      	str	r3, [r2, #96]	; 0x60
 8002d1a:	4b35      	ldr	r3, [pc, #212]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d22:	617b      	str	r3, [r7, #20]
 8002d24:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002d26:	2200      	movs	r2, #0
 8002d28:	2100      	movs	r1, #0
 8002d2a:	2018      	movs	r0, #24
 8002d2c:	f000 fb37 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002d30:	2018      	movs	r0, #24
 8002d32:	f000 fb50 	bl	80033d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002d36:	2200      	movs	r2, #0
 8002d38:	2100      	movs	r1, #0
 8002d3a:	2019      	movs	r0, #25
 8002d3c:	f000 fb2f 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002d40:	2019      	movs	r0, #25
 8002d42:	f000 fb48 	bl	80033d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002d46:	2200      	movs	r2, #0
 8002d48:	2100      	movs	r1, #0
 8002d4a:	201b      	movs	r0, #27
 8002d4c:	f000 fb27 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002d50:	201b      	movs	r0, #27
 8002d52:	f000 fb40 	bl	80033d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8002d56:	e044      	b.n	8002de2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d60:	d114      	bne.n	8002d8c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d62:	4b23      	ldr	r3, [pc, #140]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d68:	f043 0301 	orr.w	r3, r3, #1
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	2100      	movs	r1, #0
 8002d7e:	201c      	movs	r0, #28
 8002d80:	f000 fb0d 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002d84:	201c      	movs	r0, #28
 8002d86:	f000 fb26 	bl	80033d6 <HAL_NVIC_EnableIRQ>
}
 8002d8a:	e02a      	b.n	8002de2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM6)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <HAL_TIM_Base_MspInit+0xf8>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d10c      	bne.n	8002db0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002d9c:	f043 0310 	orr.w	r3, r3, #16
 8002da0:	6593      	str	r3, [r2, #88]	; 0x58
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da6:	f003 0310 	and.w	r3, r3, #16
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
}
 8002dae:	e018      	b.n	8002de2 <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM16)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a10      	ldr	r2, [pc, #64]	; (8002df8 <HAL_TIM_Base_MspInit+0xfc>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d113      	bne.n	8002de2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dbe:	4a0c      	ldr	r2, [pc, #48]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	; (8002df0 <HAL_TIM_Base_MspInit+0xf4>)
 8002dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	60bb      	str	r3, [r7, #8]
 8002dd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2019      	movs	r0, #25
 8002dd8:	f000 fae1 	bl	800339e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002ddc:	2019      	movs	r0, #25
 8002dde:	f000 fafa 	bl	80033d6 <HAL_NVIC_EnableIRQ>
}
 8002de2:	bf00      	nop
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40012c00 	.word	0x40012c00
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40001000 	.word	0x40001000
 8002df8:	40014400 	.word	0x40014400

08002dfc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d128      	bne.n	8002e70 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002e1e:	4b17      	ldr	r3, [pc, #92]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e24:	f043 0302 	orr.w	r3, r3, #2
 8002e28:	6593      	str	r3, [r2, #88]	; 0x58
 8002e2a:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3a:	4a10      	ldr	r2, [pc, #64]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e42:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <HAL_TIM_Encoder_MspInit+0x80>)
 8002e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8002e4e:	23c0      	movs	r3, #192	; 0xc0
 8002e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e52:	2302      	movs	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e5e:	2302      	movs	r3, #2
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e62:	f107 0314 	add.w	r3, r7, #20
 8002e66:	4619      	mov	r1, r3
 8002e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e6c:	f000 face 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40021000 	.word	0x40021000

08002e80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08a      	sub	sp, #40	; 0x28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	609a      	str	r2, [r3, #8]
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a23      	ldr	r2, [pc, #140]	; (8002f2c <HAL_TIM_MspPostInit+0xac>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d11e      	bne.n	8002ee0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ea2:	4b23      	ldr	r3, [pc, #140]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ea6:	4a22      	ldr	r2, [pc, #136]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EXT_STEP_Pin;
 8002eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EXT_STEP_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 0314 	add.w	r3, r7, #20
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eda:	f000 fa97 	bl	800340c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8002ede:	e021      	b.n	8002f24 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a13      	ldr	r2, [pc, #76]	; (8002f34 <HAL_TIM_MspPostInit+0xb4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d11c      	bne.n	8002f24 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	4a10      	ldr	r2, [pc, #64]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <HAL_TIM_MspPostInit+0xb0>)
 8002ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	60fb      	str	r3, [r7, #12]
 8002f00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CUTT_PWM_Pin;
 8002f02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f08:	2302      	movs	r3, #2
 8002f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f10:	2300      	movs	r3, #0
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8002f14:	230e      	movs	r3, #14
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(CUTT_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f18:	f107 0314 	add.w	r3, r7, #20
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <HAL_TIM_MspPostInit+0xb8>)
 8002f20:	f000 fa74 	bl	800340c <HAL_GPIO_Init>
}
 8002f24:	bf00      	nop
 8002f26:	3728      	adds	r7, #40	; 0x28
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40012c00 	.word	0x40012c00
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	48000400 	.word	0x48000400

08002f3c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <MX_USART2_UART_Init+0x5c>)
 8002f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f4e:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f60:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f62:	220c      	movs	r2, #12
 8002f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f66:	4b0b      	ldr	r3, [pc, #44]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f7e:	4805      	ldr	r0, [pc, #20]	; (8002f94 <MX_USART2_UART_Init+0x58>)
 8002f80:	f003 fdca 	bl	8006b18 <HAL_UART_Init>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f8a:	f7fe ff01 	bl	8001d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	20000694 	.word	0x20000694
 8002f98:	40004400 	.word	0x40004400

08002f9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b0a4      	sub	sp, #144	; 0x90
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb4:	f107 0314 	add.w	r3, r7, #20
 8002fb8:	2268      	movs	r2, #104	; 0x68
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f004 f9e1 	bl	8007384 <memset>
  if(uartHandle->Instance==USART2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a21      	ldr	r2, [pc, #132]	; (800304c <HAL_UART_MspInit+0xb0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d13a      	bne.n	8003042 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd4:	f107 0314 	add.w	r3, r7, #20
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f001 fd65 	bl	8004aa8 <HAL_RCCEx_PeriphCLKConfig>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fe4:	f7fe fed4 	bl	8001d90 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fe8:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_UART_MspInit+0xb4>)
 8002fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <HAL_UART_MspInit+0xb4>)
 8002fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ff2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ff4:	4b16      	ldr	r3, [pc, #88]	; (8003050 <HAL_UART_MspInit+0xb4>)
 8002ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b13      	ldr	r3, [pc, #76]	; (8003050 <HAL_UART_MspInit+0xb4>)
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	4a12      	ldr	r2, [pc, #72]	; (8003050 <HAL_UART_MspInit+0xb4>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300c:	4b10      	ldr	r3, [pc, #64]	; (8003050 <HAL_UART_MspInit+0xb4>)
 800300e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003018:	230c      	movs	r3, #12
 800301a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301c:	2302      	movs	r3, #2
 800301e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003028:	2303      	movs	r3, #3
 800302a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800302e:	2307      	movs	r3, #7
 8003030:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003034:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003038:	4619      	mov	r1, r3
 800303a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303e:	f000 f9e5 	bl	800340c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003042:	bf00      	nop
 8003044:	3790      	adds	r7, #144	; 0x90
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40004400 	.word	0x40004400
 8003050:	40021000 	.word	0x40021000

08003054 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800308c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003058:	f7ff fc1c 	bl	8002894 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800305c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800305e:	e003      	b.n	8003068 <LoopCopyDataInit>

08003060 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003062:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003064:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003066:	3104      	adds	r1, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003068:	480a      	ldr	r0, [pc, #40]	; (8003094 <LoopForever+0xa>)
	ldr	r3, =_edata
 800306a:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <LoopForever+0xe>)
	adds	r2, r0, r1
 800306c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800306e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003070:	d3f6      	bcc.n	8003060 <CopyDataInit>
	ldr	r2, =_sbss
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003074:	e002      	b.n	800307c <LoopFillZerobss>

08003076 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003076:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003078:	f842 3b04 	str.w	r3, [r2], #4

0800307c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <LoopForever+0x16>)
	cmp	r2, r3
 800307e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003080:	d3f9      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003082:	f004 f95b 	bl	800733c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003086:	f7fe fda7 	bl	8001bd8 <main>

0800308a <LoopForever>:

LoopForever:
    b LoopForever
 800308a:	e7fe      	b.n	800308a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800308c:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8003090:	0800747c 	.word	0x0800747c
	ldr	r0, =_sdata
 8003094:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003098:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 800309c:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80030a0:	2000071c 	.word	0x2000071c

080030a4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030a4:	e7fe      	b.n	80030a4 <ADC1_IRQHandler>
	...

080030a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030ae:	2300      	movs	r3, #0
 80030b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_Init+0x3c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a0b      	ldr	r2, [pc, #44]	; (80030e4 <HAL_Init+0x3c>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030be:	2003      	movs	r0, #3
 80030c0:	f000 f962 	bl	8003388 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030c4:	2000      	movs	r0, #0
 80030c6:	f000 f80f 	bl	80030e8 <HAL_InitTick>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	71fb      	strb	r3, [r7, #7]
 80030d4:	e001      	b.n	80030da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030d6:	f7ff fb59 	bl	800278c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030da:	79fb      	ldrb	r3, [r7, #7]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	40022000 	.word	0x40022000

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80030f4:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_InitTick+0x6c>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d023      	beq.n	8003144 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80030fc:	4b16      	ldr	r3, [pc, #88]	; (8003158 <HAL_InitTick+0x70>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_InitTick+0x6c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	4619      	mov	r1, r3
 8003106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800310a:	fbb3 f3f1 	udiv	r3, r3, r1
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	4618      	mov	r0, r3
 8003114:	f000 f96d 	bl	80033f2 <HAL_SYSTICK_Config>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d809      	bhi.n	8003138 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003124:	2200      	movs	r2, #0
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	f04f 30ff 	mov.w	r0, #4294967295
 800312c:	f000 f937 	bl	800339e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <HAL_InitTick+0x74>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e007      	b.n	8003148 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	73fb      	strb	r3, [r7, #15]
 800313c:	e004      	b.n	8003148 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	73fb      	strb	r3, [r7, #15]
 8003142:	e001      	b.n	8003148 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003148:	7bfb      	ldrb	r3, [r7, #15]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3710      	adds	r7, #16
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	2000000c 	.word	0x2000000c
 8003158:	20000004 	.word	0x20000004
 800315c:	20000008 	.word	0x20000008

08003160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003164:	4b06      	ldr	r3, [pc, #24]	; (8003180 <HAL_IncTick+0x20>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	461a      	mov	r2, r3
 800316a:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x24>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4413      	add	r3, r2
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_IncTick+0x24>)
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	bf00      	nop
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	2000000c 	.word	0x2000000c
 8003184:	20000718 	.word	0x20000718

08003188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return uwTick;
 800318c:	4b03      	ldr	r3, [pc, #12]	; (800319c <HAL_GetTick+0x14>)
 800318e:	681b      	ldr	r3, [r3, #0]
}
 8003190:	4618      	mov	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	20000718 	.word	0x20000718

080031a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a8:	f7ff ffee 	bl	8003188 <HAL_GetTick>
 80031ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d005      	beq.n	80031c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_Delay+0x44>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	461a      	mov	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4413      	add	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031c6:	bf00      	nop
 80031c8:	f7ff ffde 	bl	8003188 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d8f7      	bhi.n	80031c8 <HAL_Delay+0x28>
  {
  }
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	2000000c 	.word	0x2000000c

080031e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f8:	4b0c      	ldr	r3, [pc, #48]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003204:	4013      	ands	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003210:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321a:	4a04      	ldr	r2, [pc, #16]	; (800322c <__NVIC_SetPriorityGrouping+0x44>)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	60d3      	str	r3, [r2, #12]
}
 8003220:	bf00      	nop
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003234:	4b04      	ldr	r3, [pc, #16]	; (8003248 <__NVIC_GetPriorityGrouping+0x18>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	0a1b      	lsrs	r3, r3, #8
 800323a:	f003 0307 	and.w	r3, r3, #7
}
 800323e:	4618      	mov	r0, r3
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325a:	2b00      	cmp	r3, #0
 800325c:	db0b      	blt.n	8003276 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325e:	79fb      	ldrb	r3, [r7, #7]
 8003260:	f003 021f 	and.w	r2, r3, #31
 8003264:	4907      	ldr	r1, [pc, #28]	; (8003284 <__NVIC_EnableIRQ+0x38>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2001      	movs	r0, #1
 800326e:	fa00 f202 	lsl.w	r2, r0, r2
 8003272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003276:	bf00      	nop
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000e100 	.word	0xe000e100

08003288 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003288:	b480      	push	{r7}
 800328a:	b083      	sub	sp, #12
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	6039      	str	r1, [r7, #0]
 8003292:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	2b00      	cmp	r3, #0
 800329a:	db0a      	blt.n	80032b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	490c      	ldr	r1, [pc, #48]	; (80032d4 <__NVIC_SetPriority+0x4c>)
 80032a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a6:	0112      	lsls	r2, r2, #4
 80032a8:	b2d2      	uxtb	r2, r2
 80032aa:	440b      	add	r3, r1
 80032ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b0:	e00a      	b.n	80032c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	4908      	ldr	r1, [pc, #32]	; (80032d8 <__NVIC_SetPriority+0x50>)
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	f003 030f 	and.w	r3, r3, #15
 80032be:	3b04      	subs	r3, #4
 80032c0:	0112      	lsls	r2, r2, #4
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	440b      	add	r3, r1
 80032c6:	761a      	strb	r2, [r3, #24]
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	e000e100 	.word	0xe000e100
 80032d8:	e000ed00 	.word	0xe000ed00

080032dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032dc:	b480      	push	{r7}
 80032de:	b089      	sub	sp, #36	; 0x24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f1c3 0307 	rsb	r3, r3, #7
 80032f6:	2b04      	cmp	r3, #4
 80032f8:	bf28      	it	cs
 80032fa:	2304      	movcs	r3, #4
 80032fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3304      	adds	r3, #4
 8003302:	2b06      	cmp	r3, #6
 8003304:	d902      	bls.n	800330c <NVIC_EncodePriority+0x30>
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	3b03      	subs	r3, #3
 800330a:	e000      	b.n	800330e <NVIC_EncodePriority+0x32>
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003310:	f04f 32ff 	mov.w	r2, #4294967295
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	401a      	ands	r2, r3
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003324:	f04f 31ff 	mov.w	r1, #4294967295
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa01 f303 	lsl.w	r3, r1, r3
 800332e:	43d9      	mvns	r1, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003334:	4313      	orrs	r3, r2
         );
}
 8003336:	4618      	mov	r0, r3
 8003338:	3724      	adds	r7, #36	; 0x24
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	3b01      	subs	r3, #1
 8003350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003354:	d301      	bcc.n	800335a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003356:	2301      	movs	r3, #1
 8003358:	e00f      	b.n	800337a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335a:	4a0a      	ldr	r2, [pc, #40]	; (8003384 <SysTick_Config+0x40>)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3b01      	subs	r3, #1
 8003360:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003362:	210f      	movs	r1, #15
 8003364:	f04f 30ff 	mov.w	r0, #4294967295
 8003368:	f7ff ff8e 	bl	8003288 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800336c:	4b05      	ldr	r3, [pc, #20]	; (8003384 <SysTick_Config+0x40>)
 800336e:	2200      	movs	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003372:	4b04      	ldr	r3, [pc, #16]	; (8003384 <SysTick_Config+0x40>)
 8003374:	2207      	movs	r2, #7
 8003376:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	e000e010 	.word	0xe000e010

08003388 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7ff ff29 	bl	80031e8 <__NVIC_SetPriorityGrouping>
}
 8003396:	bf00      	nop
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b086      	sub	sp, #24
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	4603      	mov	r3, r0
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
 80033aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80033b0:	f7ff ff3e 	bl	8003230 <__NVIC_GetPriorityGrouping>
 80033b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	6978      	ldr	r0, [r7, #20]
 80033bc:	f7ff ff8e 	bl	80032dc <NVIC_EncodePriority>
 80033c0:	4602      	mov	r2, r0
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff ff5d 	bl	8003288 <__NVIC_SetPriority>
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	4603      	mov	r3, r0
 80033de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff31 	bl	800324c <__NVIC_EnableIRQ>
}
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7ff ffa2 	bl	8003344 <SysTick_Config>
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800341a:	e154      	b.n	80036c6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	fa01 f303 	lsl.w	r3, r1, r3
 8003428:	4013      	ands	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8146 	beq.w	80036c0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b01      	cmp	r3, #1
 800343a:	d00b      	beq.n	8003454 <HAL_GPIO_Init+0x48>
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003448:	2b11      	cmp	r3, #17
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b12      	cmp	r3, #18
 8003452:	d130      	bne.n	80034b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4013      	ands	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	68da      	ldr	r2, [r3, #12]
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800348a:	2201      	movs	r2, #1
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4013      	ands	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	091b      	lsrs	r3, r3, #4
 80034a0:	f003 0201 	and.w	r2, r3, #1
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	693a      	ldr	r2, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b02      	cmp	r3, #2
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0xea>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b12      	cmp	r3, #18
 80034f4:	d123      	bne.n	800353e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	220f      	movs	r2, #15
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	691a      	ldr	r2, [r3, #16]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	4313      	orrs	r3, r2
 800352e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	08da      	lsrs	r2, r3, #3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3208      	adds	r2, #8
 8003538:	6939      	ldr	r1, [r7, #16]
 800353a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	2203      	movs	r2, #3
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	43db      	mvns	r3, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4013      	ands	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	f003 0203 	and.w	r2, r3, #3
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a0 	beq.w	80036c0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003580:	4b58      	ldr	r3, [pc, #352]	; (80036e4 <HAL_GPIO_Init+0x2d8>)
 8003582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003584:	4a57      	ldr	r2, [pc, #348]	; (80036e4 <HAL_GPIO_Init+0x2d8>)
 8003586:	f043 0301 	orr.w	r3, r3, #1
 800358a:	6613      	str	r3, [r2, #96]	; 0x60
 800358c:	4b55      	ldr	r3, [pc, #340]	; (80036e4 <HAL_GPIO_Init+0x2d8>)
 800358e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	60bb      	str	r3, [r7, #8]
 8003596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003598:	4a53      	ldr	r2, [pc, #332]	; (80036e8 <HAL_GPIO_Init+0x2dc>)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	3302      	adds	r3, #2
 80035a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	f003 0303 	and.w	r3, r3, #3
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	220f      	movs	r2, #15
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035c2:	d019      	beq.n	80035f8 <HAL_GPIO_Init+0x1ec>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a49      	ldr	r2, [pc, #292]	; (80036ec <HAL_GPIO_Init+0x2e0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_GPIO_Init+0x1e8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_GPIO_Init+0x2e4>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00d      	beq.n	80035f0 <HAL_GPIO_Init+0x1e4>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a47      	ldr	r2, [pc, #284]	; (80036f4 <HAL_GPIO_Init+0x2e8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <HAL_GPIO_Init+0x1e0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a46      	ldr	r2, [pc, #280]	; (80036f8 <HAL_GPIO_Init+0x2ec>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d101      	bne.n	80035e8 <HAL_GPIO_Init+0x1dc>
 80035e4:	2304      	movs	r3, #4
 80035e6:	e008      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035e8:	2307      	movs	r3, #7
 80035ea:	e006      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035ec:	2303      	movs	r3, #3
 80035ee:	e004      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e002      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f4:	2301      	movs	r3, #1
 80035f6:	e000      	b.n	80035fa <HAL_GPIO_Init+0x1ee>
 80035f8:	2300      	movs	r3, #0
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	f002 0203 	and.w	r2, r2, #3
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	4093      	lsls	r3, r2
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800360a:	4937      	ldr	r1, [pc, #220]	; (80036e8 <HAL_GPIO_Init+0x2dc>)
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	089b      	lsrs	r3, r3, #2
 8003610:	3302      	adds	r3, #2
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003618:	4b38      	ldr	r3, [pc, #224]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	43db      	mvns	r3, r3
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800363c:	4a2f      	ldr	r2, [pc, #188]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003642:	4b2e      	ldr	r3, [pc, #184]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	43db      	mvns	r3, r3
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	4013      	ands	r3, r2
 8003650:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4313      	orrs	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003666:	4a25      	ldr	r2, [pc, #148]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800366c:	4b23      	ldr	r3, [pc, #140]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4313      	orrs	r3, r2
 800368e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003690:	4a1a      	ldr	r2, [pc, #104]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	43db      	mvns	r3, r3
 80036a0:	693a      	ldr	r2, [r7, #16]
 80036a2:	4013      	ands	r3, r2
 80036a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ba:	4a10      	ldr	r2, [pc, #64]	; (80036fc <HAL_GPIO_Init+0x2f0>)
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	3301      	adds	r3, #1
 80036c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f aea3 	bne.w	800341c <HAL_GPIO_Init+0x10>
  }
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	371c      	adds	r7, #28
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010000 	.word	0x40010000
 80036ec:	48000400 	.word	0x48000400
 80036f0:	48000800 	.word	0x48000800
 80036f4:	48000c00 	.word	0x48000c00
 80036f8:	48001000 	.word	0x48001000
 80036fc:	40010400 	.word	0x40010400

08003700 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003700:	b480      	push	{r7}
 8003702:	b085      	sub	sp, #20
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	460b      	mov	r3, r1
 800370a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	887b      	ldrh	r3, [r7, #2]
 8003712:	4013      	ands	r3, r2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
 800371c:	e001      	b.n	8003722 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800371e:	2300      	movs	r3, #0
 8003720:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	460b      	mov	r3, r1
 800373a:	807b      	strh	r3, [r7, #2]
 800373c:	4613      	mov	r3, r2
 800373e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003740:	787b      	ldrb	r3, [r7, #1]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003746:	887a      	ldrh	r2, [r7, #2]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800374c:	e002      	b.n	8003754 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e08f      	b.n	8003892 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7fe f9bd 	bl	8001b0c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d004      	beq.n	80037b4 <HAL_LPTIM_Init+0x54>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037b2:	d103      	bne.n	80037bc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 031e 	bic.w	r3, r3, #30
 80037ba:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d005      	beq.n	80037d4 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80037ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037d2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	4b31      	ldr	r3, [pc, #196]	; (800389c <HAL_LPTIM_Init+0x13c>)
 80037d8:	4013      	ands	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037e4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80037ea:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80037f0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80037f6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d107      	bne.n	8003816 <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800380e:	4313      	orrs	r3, r2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) 
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d004      	beq.n	8003828 <HAL_LPTIM_Init+0xc8>
   || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003826:	d107      	bne.n	8003838 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003830:	4313      	orrs	r3, r2
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003840:	4293      	cmp	r3, r2
 8003842:	d00a      	beq.n	800385a <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800384c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003852:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	4313      	orrs	r3, r2
 8003858:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68fa      	ldr	r2, [r7, #12]
 8003860:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <HAL_LPTIM_Init+0x140>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d108      	bne.n	800387e <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	621a      	str	r2, [r3, #32]
 800387c:	e004      	b.n	8003888 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003886:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	ff19f1fe 	.word	0xff19f1fe
 80038a0:	40007c00 	.word	0x40007c00

080038a4 <HAL_LPTIM_Encoder_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Encoder_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  assert_param(hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC);
  assert_param(hlptim->Init.Clock.Prescaler == LPTIM_PRESCALER_DIV1);
  assert_param(IS_LPTIM_CLOCK_POLARITY(hlptim->Init.UltraLowPowerClock.Polarity));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Configure edge sensitivity for encoder mode */
  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Clear CKPOL bits */
  tmpcfgr &= (uint32_t)(~LPTIM_CFGR_CKPOL);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f023 0306 	bic.w	r3, r3, #6
 80038c4:	60fb      	str	r3, [r7, #12]

  /* Set Input polarity */
  tmpcfgr |=  hlptim->Init.UltraLowPowerClock.Polarity;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60fb      	str	r3, [r7, #12]

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	60da      	str	r2, [r3, #12]

  /* Set ENC bit to enable the encoder interface */
  hlptim->Instance->CFGR |= LPTIM_CFGR_ENC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	691a      	ldr	r2, [r3, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 0201 	orr.w	r2, r2, #1
 80038f6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003908:	2110      	movs	r1, #16
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f91e 	bl	8003b4c <LPTIM_WaitForFlag>
 8003910:	4603      	mov	r3, r0
 8003912:	2b03      	cmp	r3, #3
 8003914:	d101      	bne.n	800391a <HAL_LPTIM_Encoder_Start_IT+0x76>
  {
    return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e02f      	b.n	800397a <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f000 f946 	bl	8003bac <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 f905 	bl	8003b30 <HAL_LPTIM_GetState>
 8003926:	4603      	mov	r3, r0
 8003928:	2b03      	cmp	r3, #3
 800392a:	d101      	bne.n	8003930 <HAL_LPTIM_Encoder_Start_IT+0x8c>
  {
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e024      	b.n	800397a <HAL_LPTIM_Encoder_Start_IT+0xd6>
  }

  /* Enable "switch to down direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_DOWN);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800393e:	609a      	str	r2, [r3, #8]

  /* Enable "switch to up direction" interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_UP);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f042 0220 	orr.w	r2, r2, #32
 800394e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	691a      	ldr	r2, [r3, #16]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0204 	orr.w	r2, r2, #4
 800396e:	611a      	str	r2, [r3, #16]

  /* Change the TIM state*/
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b01      	cmp	r3, #1
 8003996:	d10d      	bne.n	80039b4 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d106      	bne.n	80039b4 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2201      	movs	r2, #1
 80039ac:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f882 	bl	8003ab8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d10d      	bne.n	80039de <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d106      	bne.n	80039de <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2202      	movs	r2, #2
 80039d6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7fe f9ab 	bl	8001d34 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d10d      	bne.n	8003a08 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d106      	bne.n	8003a08 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2204      	movs	r2, #4
 8003a00:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f862 	bl	8003acc <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0308 	and.w	r3, r3, #8
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d10d      	bne.n	8003a32 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0308 	and.w	r3, r3, #8
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d106      	bne.n	8003a32 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	2208      	movs	r2, #8
 8003a2a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f000 f857 	bl	8003ae0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0310 	and.w	r3, r3, #16
 8003a3c:	2b10      	cmp	r3, #16
 8003a3e:	d10d      	bne.n	8003a5c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 0310 	and.w	r3, r3, #16
 8003a4a:	2b10      	cmp	r3, #16
 8003a4c:	d106      	bne.n	8003a5c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2210      	movs	r2, #16
 8003a54:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f84c 	bl	8003af4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b20      	cmp	r3, #32
 8003a68:	d10d      	bne.n	8003a86 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f003 0320 	and.w	r3, r3, #32
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d106      	bne.n	8003a86 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 f841 	bl	8003b08 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a90:	2b40      	cmp	r3, #64	; 0x40
 8003a92:	d10d      	bne.n	8003ab0 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b40      	cmp	r3, #64	; 0x40
 8003aa0:	d106      	bne.n	8003ab0 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2240      	movs	r2, #64	; 0x40
 8003aa8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f836 	bl	8003b1c <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b3e:	b2db      	uxtb	r3, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003b56:	2300      	movs	r3, #0
 8003b58:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <LPTIM_WaitForFlag+0x58>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <LPTIM_WaitForFlag+0x5c>)
 8003b60:	fba2 2303 	umull	r2, r3, r2, r3
 8003b64:	0b9b      	lsrs	r3, r3, #14
 8003b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d002      	beq.n	8003b96 <LPTIM_WaitForFlag+0x4a>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1ec      	bne.n	8003b70 <LPTIM_WaitForFlag+0x24>

  return result;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	d1b71759 	.word	0xd1b71759

08003bac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b088      	sub	sp, #32
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bb8:	b672      	cpsid	i
}
 8003bba:	bf00      	nop

  __disable_irq();

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a71      	ldr	r2, [pc, #452]	; (8003d88 <LPTIM_Disable+0x1dc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <LPTIM_Disable+0x22>
 8003bc6:	4a71      	ldr	r2, [pc, #452]	; (8003d8c <LPTIM_Disable+0x1e0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d007      	beq.n	8003bdc <LPTIM_Disable+0x30>
    case LPTIM2_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003bcc:	e00d      	b.n	8003bea <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8003bce:	4b70      	ldr	r3, [pc, #448]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003bd8:	61fb      	str	r3, [r7, #28]
      break;
 8003bda:	e006      	b.n	8003bea <LPTIM_Disable+0x3e>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8003bdc:	4b6c      	ldr	r3, [pc, #432]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003be6:	61fb      	str	r3, [r7, #28]
      break;
 8003be8:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	61bb      	str	r3, [r7, #24]
  tmpCFGR = hlptim->Instance->CFGR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	617b      	str	r3, [r7, #20]
  tmpCMP = hlptim->Instance->CMP;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	695b      	ldr	r3, [r3, #20]
 8003c00:	613b      	str	r3, [r7, #16]
  tmpARR = hlptim->Instance->ARR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	699b      	ldr	r3, [r3, #24]
 8003c08:	60fb      	str	r3, [r7, #12]
  tmpOR = hlptim->Instance->OR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	6a1b      	ldr	r3, [r3, #32]
 8003c10:	60bb      	str	r3, [r7, #8]
#if defined(LPTIM_RCR_REP)
  tmpRCR = hlptim->Instance->RCR;
#endif

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5c      	ldr	r2, [pc, #368]	; (8003d88 <LPTIM_Disable+0x1dc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <LPTIM_Disable+0x78>
 8003c1c:	4a5b      	ldr	r2, [pc, #364]	; (8003d8c <LPTIM_Disable+0x1e0>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00d      	beq.n	8003c3e <LPTIM_Disable+0x92>
      __HAL_RCC_LPTIM2_FORCE_RESET();
      __HAL_RCC_LPTIM2_RELEASE_RESET();
      break;
#endif /* LPTIM2 */
    default:
      break;
 8003c22:	e019      	b.n	8003c58 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8003c24:	4b5a      	ldr	r3, [pc, #360]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c28:	4a59      	ldr	r2, [pc, #356]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c2e:	6393      	str	r3, [r2, #56]	; 0x38
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8003c30:	4b57      	ldr	r3, [pc, #348]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4a56      	ldr	r2, [pc, #344]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c3a:	6393      	str	r3, [r2, #56]	; 0x38
      break;
 8003c3c:	e00c      	b.n	8003c58 <LPTIM_Disable+0xac>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8003c3e:	4b54      	ldr	r3, [pc, #336]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	4a53      	ldr	r2, [pc, #332]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c44:	f043 0320 	orr.w	r3, r3, #32
 8003c48:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8003c4a:	4b51      	ldr	r3, [pc, #324]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4e:	4a50      	ldr	r2, [pc, #320]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c50:	f023 0320 	bic.w	r3, r3, #32
 8003c54:	63d3      	str	r3, [r2, #60]	; 0x3c
      break;
 8003c56:	bf00      	nop

  /*********** Restore LPTIM Config ***********/
#if defined(LPTIM_RCR_REP)
  if ((tmpCMP != 0UL) || (tmpARR != 0UL) || (tmpRCR != 0UL))
#else
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d102      	bne.n	8003c64 <LPTIM_Disable+0xb8>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d075      	beq.n	8003d50 <LPTIM_Disable+0x1a4>
#endif
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a47      	ldr	r2, [pc, #284]	; (8003d88 <LPTIM_Disable+0x1dc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d003      	beq.n	8003c76 <LPTIM_Disable+0xca>
 8003c6e:	4a47      	ldr	r2, [pc, #284]	; (8003d8c <LPTIM_Disable+0x1e0>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d009      	beq.n	8003c88 <LPTIM_Disable+0xdc>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003c74:	e011      	b.n	8003c9a <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8003c76:	4b46      	ldr	r3, [pc, #280]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7c:	4a44      	ldr	r2, [pc, #272]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c7e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8003c82:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003c86:	e008      	b.n	8003c9a <LPTIM_Disable+0xee>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_PCLK1);
 8003c88:	4b41      	ldr	r3, [pc, #260]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	4a40      	ldr	r2, [pc, #256]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003c90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        break;
 8003c98:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01a      	beq.n	8003cd6 <LPTIM_Disable+0x12a>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8003cb8:	2108      	movs	r1, #8
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7ff ff46 	bl	8003b4c <LPTIM_WaitForFlag>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d103      	bne.n	8003cce <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2203      	movs	r2, #3
 8003cca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2208      	movs	r2, #8
 8003cd4:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d01a      	beq.n	8003d12 <LPTIM_Disable+0x166>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	691a      	ldr	r2, [r3, #16]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8003cf4:	2110      	movs	r1, #16
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff ff28 	bl	8003b4c <LPTIM_WaitForFlag>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d103      	bne.n	8003d0a <LPTIM_Disable+0x15e>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2203      	movs	r2, #3
 8003d06:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2210      	movs	r2, #16
 8003d10:	605a      	str	r2, [r3, #4]
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
    }
#endif

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1c      	ldr	r2, [pc, #112]	; (8003d88 <LPTIM_Disable+0x1dc>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d003      	beq.n	8003d24 <LPTIM_Disable+0x178>
 8003d1c:	4a1b      	ldr	r2, [pc, #108]	; (8003d8c <LPTIM_Disable+0x1e0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00b      	beq.n	8003d3a <LPTIM_Disable+0x18e>
      case LPTIM2_BASE:
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
        break;
#endif /* LPTIM2 */
      default:
        break;
 8003d22:	e016      	b.n	8003d52 <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8003d24:	4b1a      	ldr	r3, [pc, #104]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d2e:	4918      	ldr	r1, [pc, #96]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003d38:	e00b      	b.n	8003d52 <LPTIM_Disable+0x1a6>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8003d3a:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d44:	4912      	ldr	r1, [pc, #72]	; (8003d90 <LPTIM_Disable+0x1e4>)
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
        break;
 8003d4e:	e000      	b.n	8003d52 <LPTIM_Disable+0x1a6>
    }
  }
 8003d50:	bf00      	nop

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691a      	ldr	r2, [r3, #16]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	60da      	str	r2, [r3, #12]
  hlptim->Instance->OR = tmpOR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	621a      	str	r2, [r3, #32]
  __ASM volatile ("cpsie i" : : : "memory");
 8003d7a:	b662      	cpsie	i
}
 8003d7c:	bf00      	nop

  __enable_irq();
}
 8003d7e:	bf00      	nop
 8003d80:	3720      	adds	r7, #32
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	40007c00 	.word	0x40007c00
 8003d8c:	40009400 	.word	0x40009400
 8003d90:	40021000 	.word	0x40021000

08003d94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d94:	b480      	push	{r7}
 8003d96:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d98:	4b04      	ldr	r3, [pc, #16]	; (8003dac <HAL_PWREx_GetVoltageRange+0x18>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40007000 	.word	0x40007000

08003db0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d130      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dc0:	4b23      	ldr	r3, [pc, #140]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dcc:	d038      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003dce:	4b20      	ldr	r3, [pc, #128]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003dd6:	4a1e      	ldr	r2, [pc, #120]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003dde:	4b1d      	ldr	r3, [pc, #116]	; (8003e54 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2232      	movs	r2, #50	; 0x32
 8003de4:	fb02 f303 	mul.w	r3, r2, r3
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	0c9b      	lsrs	r3, r3, #18
 8003df0:	3301      	adds	r3, #1
 8003df2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003df4:	e002      	b.n	8003dfc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003dfc:	4b14      	ldr	r3, [pc, #80]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e08:	d102      	bne.n	8003e10 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f2      	bne.n	8003df6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e10:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e12:	695b      	ldr	r3, [r3, #20]
 8003e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1c:	d110      	bne.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e00f      	b.n	8003e42 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e22:	4b0b      	ldr	r3, [pc, #44]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d007      	beq.n	8003e40 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e3e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40007000 	.word	0x40007000
 8003e54:	20000004 	.word	0x20000004
 8003e58:	431bde83 	.word	0x431bde83

08003e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f000 bc11 	b.w	8004692 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e70:	4ba0      	ldr	r3, [pc, #640]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 030c 	and.w	r3, r3, #12
 8003e78:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e7a:	4b9e      	ldr	r3, [pc, #632]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80e4 	beq.w	800405a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d007      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4c>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	2b0c      	cmp	r3, #12
 8003e9c:	f040 808b 	bne.w	8003fb6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	f040 8087 	bne.w	8003fb6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ea8:	4b92      	ldr	r3, [pc, #584]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d005      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x64>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e3e8      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1a      	ldr	r2, [r3, #32]
 8003ec4:	4b8b      	ldr	r3, [pc, #556]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0308 	and.w	r3, r3, #8
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <HAL_RCC_OscConfig+0x7e>
 8003ed0:	4b88      	ldr	r3, [pc, #544]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ed8:	e005      	b.n	8003ee6 <HAL_RCC_OscConfig+0x8a>
 8003eda:	4b86      	ldr	r3, [pc, #536]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee0:	091b      	lsrs	r3, r3, #4
 8003ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d223      	bcs.n	8003f32 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fd7a 	bl	80049e8 <RCC_SetFlashLatencyFromMSIRange>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e3c9      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003efe:	4b7d      	ldr	r3, [pc, #500]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a7c      	ldr	r2, [pc, #496]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f04:	f043 0308 	orr.w	r3, r3, #8
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	4977      	ldr	r1, [pc, #476]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f1c:	4b75      	ldr	r3, [pc, #468]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	021b      	lsls	r3, r3, #8
 8003f2a:	4972      	ldr	r1, [pc, #456]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	604b      	str	r3, [r1, #4]
 8003f30:	e025      	b.n	8003f7e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f32:	4b70      	ldr	r3, [pc, #448]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a6f      	ldr	r2, [pc, #444]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f38:	f043 0308 	orr.w	r3, r3, #8
 8003f3c:	6013      	str	r3, [r2, #0]
 8003f3e:	4b6d      	ldr	r3, [pc, #436]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1b      	ldr	r3, [r3, #32]
 8003f4a:	496a      	ldr	r1, [pc, #424]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f50:	4b68      	ldr	r3, [pc, #416]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	4965      	ldr	r1, [pc, #404]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d109      	bne.n	8003f7e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fd3a 	bl	80049e8 <RCC_SetFlashLatencyFromMSIRange>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e389      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f7e:	f000 fc6f 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8003f82:	4602      	mov	r2, r0
 8003f84:	4b5b      	ldr	r3, [pc, #364]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	091b      	lsrs	r3, r3, #4
 8003f8a:	f003 030f 	and.w	r3, r3, #15
 8003f8e:	495a      	ldr	r1, [pc, #360]	; (80040f8 <HAL_RCC_OscConfig+0x29c>)
 8003f90:	5ccb      	ldrb	r3, [r1, r3]
 8003f92:	f003 031f 	and.w	r3, r3, #31
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a58      	ldr	r2, [pc, #352]	; (80040fc <HAL_RCC_OscConfig+0x2a0>)
 8003f9c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f9e:	4b58      	ldr	r3, [pc, #352]	; (8004100 <HAL_RCC_OscConfig+0x2a4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f8a0 	bl	80030e8 <HAL_InitTick>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d052      	beq.n	8004058 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	e36d      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d032      	beq.n	8004024 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fbe:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a4c      	ldr	r2, [pc, #304]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fca:	f7ff f8dd 	bl	8003188 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fd2:	f7ff f8d9 	bl	8003188 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e356      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fe4:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ff0:	4b40      	ldr	r3, [pc, #256]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a3f      	ldr	r2, [pc, #252]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003ff6:	f043 0308 	orr.w	r3, r3, #8
 8003ffa:	6013      	str	r3, [r2, #0]
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	493a      	ldr	r1, [pc, #232]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800400e:	4b39      	ldr	r3, [pc, #228]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	021b      	lsls	r3, r3, #8
 800401c:	4935      	ldr	r1, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800401e:	4313      	orrs	r3, r2
 8004020:	604b      	str	r3, [r1, #4]
 8004022:	e01a      	b.n	800405a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004024:	4b33      	ldr	r3, [pc, #204]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a32      	ldr	r2, [pc, #200]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800402a:	f023 0301 	bic.w	r3, r3, #1
 800402e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004030:	f7ff f8aa 	bl	8003188 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004038:	f7ff f8a6 	bl	8003188 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e323      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1f0      	bne.n	8004038 <HAL_RCC_OscConfig+0x1dc>
 8004056:	e000      	b.n	800405a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004058:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d073      	beq.n	800414e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004066:	69bb      	ldr	r3, [r7, #24]
 8004068:	2b08      	cmp	r3, #8
 800406a:	d005      	beq.n	8004078 <HAL_RCC_OscConfig+0x21c>
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b0c      	cmp	r3, #12
 8004070:	d10e      	bne.n	8004090 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	2b03      	cmp	r3, #3
 8004076:	d10b      	bne.n	8004090 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004078:	4b1e      	ldr	r3, [pc, #120]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d063      	beq.n	800414c <HAL_RCC_OscConfig+0x2f0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d15f      	bne.n	800414c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e300      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d106      	bne.n	80040a8 <HAL_RCC_OscConfig+0x24c>
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e01d      	b.n	80040e4 <HAL_RCC_OscConfig+0x288>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x270>
 80040b2:	4b10      	ldr	r3, [pc, #64]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a0f      	ldr	r2, [pc, #60]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	4b0d      	ldr	r3, [pc, #52]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a0c      	ldr	r2, [pc, #48]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c8:	6013      	str	r3, [r2, #0]
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x288>
 80040cc:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040d6:	6013      	str	r3, [r2, #0]
 80040d8:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <HAL_RCC_OscConfig+0x298>)
 80040de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7ff f84c 	bl	8003188 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040f2:	e010      	b.n	8004116 <HAL_RCC_OscConfig+0x2ba>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	08007424 	.word	0x08007424
 80040fc:	20000004 	.word	0x20000004
 8004100:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004104:	f7ff f840 	bl	8003188 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e2bd      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004116:	4baf      	ldr	r3, [pc, #700]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d0f0      	beq.n	8004104 <HAL_RCC_OscConfig+0x2a8>
 8004122:	e014      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7ff f830 	bl	8003188 <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7ff f82c 	bl	8003188 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e2a9      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800413e:	4ba5      	ldr	r3, [pc, #660]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x2d0>
 800414a:	e000      	b.n	800414e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800414c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d060      	beq.n	800421c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2b04      	cmp	r3, #4
 800415e:	d005      	beq.n	800416c <HAL_RCC_OscConfig+0x310>
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	2b0c      	cmp	r3, #12
 8004164:	d119      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d116      	bne.n	800419a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800416c:	4b99      	ldr	r3, [pc, #612]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_OscConfig+0x328>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d101      	bne.n	8004184 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e286      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004184:	4b93      	ldr	r3, [pc, #588]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	061b      	lsls	r3, r3, #24
 8004192:	4990      	ldr	r1, [pc, #576]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004194:	4313      	orrs	r3, r2
 8004196:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004198:	e040      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d023      	beq.n	80041ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041a2:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a8b      	ldr	r2, [pc, #556]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ae:	f7fe ffeb 	bl	8003188 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041b6:	f7fe ffe7 	bl	8003188 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e264      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041c8:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d4:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	061b      	lsls	r3, r3, #24
 80041e2:	497c      	ldr	r1, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	604b      	str	r3, [r1, #4]
 80041e8:	e018      	b.n	800421c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ea:	4b7a      	ldr	r3, [pc, #488]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a79      	ldr	r2, [pc, #484]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80041f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe ffc7 	bl	8003188 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe ffc3 	bl	8003188 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e240      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004210:	4b70      	ldr	r3, [pc, #448]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f0      	bne.n	80041fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0308 	and.w	r3, r3, #8
 8004224:	2b00      	cmp	r3, #0
 8004226:	d03c      	beq.n	80042a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d01c      	beq.n	800426a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004230:	4b68      	ldr	r3, [pc, #416]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004236:	4a67      	ldr	r2, [pc, #412]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004240:	f7fe ffa2 	bl	8003188 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004248:	f7fe ff9e 	bl	8003188 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e21b      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800425a:	4b5e      	ldr	r3, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800425c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ef      	beq.n	8004248 <HAL_RCC_OscConfig+0x3ec>
 8004268:	e01b      	b.n	80042a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800426a:	4b5a      	ldr	r3, [pc, #360]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800426c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004270:	4a58      	ldr	r2, [pc, #352]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427a:	f7fe ff85 	bl	8003188 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004282:	f7fe ff81 	bl	8003188 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e1fe      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004294:	4b4f      	ldr	r3, [pc, #316]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1ef      	bne.n	8004282 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a6 	beq.w	80043fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042b0:	2300      	movs	r3, #0
 80042b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80042b4:	4b47      	ldr	r3, [pc, #284]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80042b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10d      	bne.n	80042dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042c0:	4b44      	ldr	r3, [pc, #272]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80042c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c4:	4a43      	ldr	r2, [pc, #268]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ca:	6593      	str	r3, [r2, #88]	; 0x58
 80042cc:	4b41      	ldr	r3, [pc, #260]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042d4:	60bb      	str	r3, [r7, #8]
 80042d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042d8:	2301      	movs	r3, #1
 80042da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042dc:	4b3e      	ldr	r3, [pc, #248]	; (80043d8 <HAL_RCC_OscConfig+0x57c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d118      	bne.n	800431a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042e8:	4b3b      	ldr	r3, [pc, #236]	; (80043d8 <HAL_RCC_OscConfig+0x57c>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a3a      	ldr	r2, [pc, #232]	; (80043d8 <HAL_RCC_OscConfig+0x57c>)
 80042ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042f4:	f7fe ff48 	bl	8003188 <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042fc:	f7fe ff44 	bl	8003188 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e1c1      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800430e:	4b32      	ldr	r3, [pc, #200]	; (80043d8 <HAL_RCC_OscConfig+0x57c>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0f0      	beq.n	80042fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d108      	bne.n	8004334 <HAL_RCC_OscConfig+0x4d8>
 8004322:	4b2c      	ldr	r3, [pc, #176]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004328:	4a2a      	ldr	r2, [pc, #168]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004332:	e024      	b.n	800437e <HAL_RCC_OscConfig+0x522>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b05      	cmp	r3, #5
 800433a:	d110      	bne.n	800435e <HAL_RCC_OscConfig+0x502>
 800433c:	4b25      	ldr	r3, [pc, #148]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800433e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004342:	4a24      	ldr	r2, [pc, #144]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004344:	f043 0304 	orr.w	r3, r3, #4
 8004348:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 800434e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004354:	f043 0301 	orr.w	r3, r3, #1
 8004358:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800435c:	e00f      	b.n	800437e <HAL_RCC_OscConfig+0x522>
 800435e:	4b1d      	ldr	r3, [pc, #116]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004364:	4a1b      	ldr	r2, [pc, #108]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004366:	f023 0301 	bic.w	r3, r3, #1
 800436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800436e:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004374:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d016      	beq.n	80043b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004386:	f7fe feff 	bl	8003188 <HAL_GetTick>
 800438a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800438c:	e00a      	b.n	80043a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800438e:	f7fe fefb 	bl	8003188 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	f241 3288 	movw	r2, #5000	; 0x1388
 800439c:	4293      	cmp	r3, r2
 800439e:	d901      	bls.n	80043a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e176      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_RCC_OscConfig+0x578>)
 80043a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0ed      	beq.n	800438e <HAL_RCC_OscConfig+0x532>
 80043b2:	e01a      	b.n	80043ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b4:	f7fe fee8 	bl	8003188 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043ba:	e00f      	b.n	80043dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043bc:	f7fe fee4 	bl	8003188 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d906      	bls.n	80043dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e15f      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
 80043d2:	bf00      	nop
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80043dc:	4baa      	ldr	r3, [pc, #680]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e8      	bne.n	80043bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043ea:	7ffb      	ldrb	r3, [r7, #31]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f0:	4ba5      	ldr	r3, [pc, #660]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	4aa4      	ldr	r2, [pc, #656]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80043f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0320 	and.w	r3, r3, #32
 8004404:	2b00      	cmp	r3, #0
 8004406:	d03c      	beq.n	8004482 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d01c      	beq.n	800444a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004410:	4b9d      	ldr	r3, [pc, #628]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004412:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004416:	4a9c      	ldr	r2, [pc, #624]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004418:	f043 0301 	orr.w	r3, r3, #1
 800441c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe feb2 	bl	8003188 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004428:	f7fe feae 	bl	8003188 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e12b      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800443a:	4b93      	ldr	r3, [pc, #588]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800443c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004440:	f003 0302 	and.w	r3, r3, #2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0ef      	beq.n	8004428 <HAL_RCC_OscConfig+0x5cc>
 8004448:	e01b      	b.n	8004482 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800444a:	4b8f      	ldr	r3, [pc, #572]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800444c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004450:	4a8d      	ldr	r2, [pc, #564]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800445a:	f7fe fe95 	bl	8003188 <HAL_GetTick>
 800445e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004460:	e008      	b.n	8004474 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004462:	f7fe fe91 	bl	8003188 <HAL_GetTick>
 8004466:	4602      	mov	r2, r0
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b02      	cmp	r3, #2
 800446e:	d901      	bls.n	8004474 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e10e      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004474:	4b84      	ldr	r3, [pc, #528]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004476:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ef      	bne.n	8004462 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8102 	beq.w	8004690 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	2b02      	cmp	r3, #2
 8004492:	f040 80c5 	bne.w	8004620 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004496:	4b7c      	ldr	r3, [pc, #496]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f003 0203 	and.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d12c      	bne.n	8004504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b4:	3b01      	subs	r3, #1
 80044b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d123      	bne.n	8004504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d11b      	bne.n	8004504 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d8:	429a      	cmp	r2, r3
 80044da:	d113      	bne.n	8004504 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	085b      	lsrs	r3, r3, #1
 80044e8:	3b01      	subs	r3, #1
 80044ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d109      	bne.n	8004504 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	085b      	lsrs	r3, r3, #1
 80044fc:	3b01      	subs	r3, #1
 80044fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d067      	beq.n	80045d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	2b0c      	cmp	r3, #12
 8004508:	d062      	beq.n	80045d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800450a:	4b5f      	ldr	r3, [pc, #380]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e0bb      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800451a:	4b5b      	ldr	r3, [pc, #364]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5a      	ldr	r2, [pc, #360]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004520:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004524:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004526:	f7fe fe2f 	bl	8003188 <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe fe2b 	bl	8003188 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e0a8      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004540:	4b51      	ldr	r3, [pc, #324]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1f0      	bne.n	800452e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800454c:	4b4e      	ldr	r3, [pc, #312]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	4b4e      	ldr	r3, [pc, #312]	; (800468c <HAL_RCC_OscConfig+0x830>)
 8004552:	4013      	ands	r3, r2
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800455c:	3a01      	subs	r2, #1
 800455e:	0112      	lsls	r2, r2, #4
 8004560:	4311      	orrs	r1, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004566:	0212      	lsls	r2, r2, #8
 8004568:	4311      	orrs	r1, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800456e:	0852      	lsrs	r2, r2, #1
 8004570:	3a01      	subs	r2, #1
 8004572:	0552      	lsls	r2, r2, #21
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	3a01      	subs	r2, #1
 800457e:	0652      	lsls	r2, r2, #25
 8004580:	4311      	orrs	r1, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004586:	06d2      	lsls	r2, r2, #27
 8004588:	430a      	orrs	r2, r1
 800458a:	493f      	ldr	r1, [pc, #252]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800458c:	4313      	orrs	r3, r2
 800458e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004590:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3c      	ldr	r2, [pc, #240]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800459a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800459c:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4a39      	ldr	r2, [pc, #228]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045a8:	f7fe fdee 	bl	8003188 <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045b0:	f7fe fdea 	bl	8003188 <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e067      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c2:	4b31      	ldr	r3, [pc, #196]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045ce:	e05f      	b.n	8004690 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e05e      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045d4:	4b2c      	ldr	r3, [pc, #176]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d157      	bne.n	8004690 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045e0:	4b29      	ldr	r3, [pc, #164]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a28      	ldr	r2, [pc, #160]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045ec:	4b26      	ldr	r3, [pc, #152]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4a25      	ldr	r2, [pc, #148]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 80045f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80045f8:	f7fe fdc6 	bl	8003188 <HAL_GetTick>
 80045fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004600:	f7fe fdc2 	bl	8003188 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e03f      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004612:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d0f0      	beq.n	8004600 <HAL_RCC_OscConfig+0x7a4>
 800461e:	e037      	b.n	8004690 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d02d      	beq.n	8004682 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b18      	ldr	r3, [pc, #96]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800462c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004630:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004632:	4b15      	ldr	r3, [pc, #84]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d105      	bne.n	800464a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	4a11      	ldr	r2, [pc, #68]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004644:	f023 0303 	bic.w	r3, r3, #3
 8004648:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800464a:	4b0f      	ldr	r3, [pc, #60]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	4a0e      	ldr	r2, [pc, #56]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004650:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004658:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465a:	f7fe fd95 	bl	8003188 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004662:	f7fe fd91 	bl	8003188 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e00e      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <HAL_RCC_OscConfig+0x82c>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1f0      	bne.n	8004662 <HAL_RCC_OscConfig+0x806>
 8004680:	e006      	b.n	8004690 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e005      	b.n	8004692 <HAL_RCC_OscConfig+0x836>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e0c8      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046b0:	4b66      	ldr	r3, [pc, #408]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d910      	bls.n	80046e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046be:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f023 0207 	bic.w	r2, r3, #7
 80046c6:	4961      	ldr	r1, [pc, #388]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ce:	4b5f      	ldr	r3, [pc, #380]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0307 	and.w	r3, r3, #7
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d001      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e0b0      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d04c      	beq.n	8004786 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	2b03      	cmp	r3, #3
 80046f2:	d107      	bne.n	8004704 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046f4:	4b56      	ldr	r3, [pc, #344]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d121      	bne.n	8004744 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e09e      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b02      	cmp	r3, #2
 800470a:	d107      	bne.n	800471c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d115      	bne.n	8004744 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e092      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d107      	bne.n	8004734 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004724:	4b4a      	ldr	r3, [pc, #296]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e086      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004734:	4b46      	ldr	r3, [pc, #280]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e07e      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004744:	4b42      	ldr	r3, [pc, #264]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f023 0203 	bic.w	r2, r3, #3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	493f      	ldr	r1, [pc, #252]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004756:	f7fe fd17 	bl	8003188 <HAL_GetTick>
 800475a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800475c:	e00a      	b.n	8004774 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800475e:	f7fe fd13 	bl	8003188 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f241 3288 	movw	r2, #5000	; 0x1388
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e066      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	f003 020c 	and.w	r2, r3, #12
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	429a      	cmp	r2, r3
 8004784:	d1eb      	bne.n	800475e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d008      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004792:	4b2f      	ldr	r3, [pc, #188]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	492c      	ldr	r1, [pc, #176]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a4:	4b29      	ldr	r3, [pc, #164]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d210      	bcs.n	80047d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0207 	bic.w	r2, r3, #7
 80047ba:	4924      	ldr	r1, [pc, #144]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <HAL_RCC_ClockConfig+0x1b0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0307 	and.w	r3, r3, #7
 80047ca:	683a      	ldr	r2, [r7, #0]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e036      	b.n	8004842 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e0:	4b1b      	ldr	r3, [pc, #108]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4918      	ldr	r1, [pc, #96]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047fe:	4b14      	ldr	r3, [pc, #80]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4910      	ldr	r1, [pc, #64]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 800480e:	4313      	orrs	r3, r2
 8004810:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004812:	f000 f825 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8004816:	4602      	mov	r2, r0
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <HAL_RCC_ClockConfig+0x1b4>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	490c      	ldr	r1, [pc, #48]	; (8004854 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	5ccb      	ldrb	r3, [r1, r3]
 8004826:	f003 031f 	and.w	r3, r3, #31
 800482a:	fa22 f303 	lsr.w	r3, r2, r3
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <HAL_RCC_ClockConfig+0x1c0>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fc56 	bl	80030e8 <HAL_InitTick>
 800483c:	4603      	mov	r3, r0
 800483e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004840:	7afb      	ldrb	r3, [r7, #11]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	08007424 	.word	0x08007424
 8004858:	20000004 	.word	0x20000004
 800485c:	20000008 	.word	0x20000008

08004860 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	b480      	push	{r7}
 8004862:	b089      	sub	sp, #36	; 0x24
 8004864:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	2300      	movs	r3, #0
 800486c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f003 030c 	and.w	r3, r3, #12
 8004876:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <HAL_RCC_GetSysClockFreq+0x34>
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d121      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b01      	cmp	r3, #1
 8004892:	d11e      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004894:	4b34      	ldr	r3, [pc, #208]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b00      	cmp	r3, #0
 800489e:	d107      	bne.n	80048b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048a0:	4b31      	ldr	r3, [pc, #196]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 030f 	and.w	r3, r3, #15
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	e005      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048b0:	4b2d      	ldr	r3, [pc, #180]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	091b      	lsrs	r3, r3, #4
 80048b6:	f003 030f 	and.w	r3, r3, #15
 80048ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048bc:	4a2b      	ldr	r2, [pc, #172]	; (800496c <HAL_RCC_GetSysClockFreq+0x10c>)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10d      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048d0:	e00a      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	2b04      	cmp	r3, #4
 80048d6:	d102      	bne.n	80048de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048d8:	4b25      	ldr	r3, [pc, #148]	; (8004970 <HAL_RCC_GetSysClockFreq+0x110>)
 80048da:	61bb      	str	r3, [r7, #24]
 80048dc:	e004      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	2b08      	cmp	r3, #8
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048e4:	4b23      	ldr	r3, [pc, #140]	; (8004974 <HAL_RCC_GetSysClockFreq+0x114>)
 80048e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	2b0c      	cmp	r3, #12
 80048ec:	d134      	bne.n	8004958 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048ee:	4b1e      	ldr	r3, [pc, #120]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d003      	beq.n	8004906 <HAL_RCC_GetSysClockFreq+0xa6>
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b03      	cmp	r3, #3
 8004902:	d003      	beq.n	800490c <HAL_RCC_GetSysClockFreq+0xac>
 8004904:	e005      	b.n	8004912 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004906:	4b1a      	ldr	r3, [pc, #104]	; (8004970 <HAL_RCC_GetSysClockFreq+0x110>)
 8004908:	617b      	str	r3, [r7, #20]
      break;
 800490a:	e005      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_RCC_GetSysClockFreq+0x114>)
 800490e:	617b      	str	r3, [r7, #20]
      break;
 8004910:	e002      	b.n	8004918 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	617b      	str	r3, [r7, #20]
      break;
 8004916:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	091b      	lsrs	r3, r3, #4
 800491e:	f003 0307 	and.w	r3, r3, #7
 8004922:	3301      	adds	r3, #1
 8004924:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004926:	4b10      	ldr	r3, [pc, #64]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	0a1b      	lsrs	r3, r3, #8
 800492c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	fb02 f203 	mul.w	r2, r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800493e:	4b0a      	ldr	r3, [pc, #40]	; (8004968 <HAL_RCC_GetSysClockFreq+0x108>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	0e5b      	lsrs	r3, r3, #25
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	3301      	adds	r3, #1
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	fbb2 f3f3 	udiv	r3, r2, r3
 8004956:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004958:	69bb      	ldr	r3, [r7, #24]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3724      	adds	r7, #36	; 0x24
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40021000 	.word	0x40021000
 800496c:	0800743c 	.word	0x0800743c
 8004970:	00f42400 	.word	0x00f42400
 8004974:	007a1200 	.word	0x007a1200

08004978 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <HAL_RCC_GetHCLKFreq+0x14>)
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	20000004 	.word	0x20000004

08004990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004994:	f7ff fff0 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 8004998:	4602      	mov	r2, r0
 800499a:	4b06      	ldr	r3, [pc, #24]	; (80049b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	0a1b      	lsrs	r3, r3, #8
 80049a0:	f003 0307 	and.w	r3, r3, #7
 80049a4:	4904      	ldr	r1, [pc, #16]	; (80049b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049a6:	5ccb      	ldrb	r3, [r1, r3]
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	40021000 	.word	0x40021000
 80049b8:	08007434 	.word	0x08007434

080049bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049c0:	f7ff ffda 	bl	8004978 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0adb      	lsrs	r3, r3, #11
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4904      	ldr	r1, [pc, #16]	; (80049e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	08007434 	.word	0x08007434

080049e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b086      	sub	sp, #24
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80049f0:	2300      	movs	r3, #0
 80049f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80049f4:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d003      	beq.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a00:	f7ff f9c8 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 8004a04:	6178      	str	r0, [r7, #20]
 8004a06:	e014      	b.n	8004a32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a08:	4b25      	ldr	r3, [pc, #148]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0c:	4a24      	ldr	r2, [pc, #144]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a12:	6593      	str	r3, [r2, #88]	; 0x58
 8004a14:	4b22      	ldr	r3, [pc, #136]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a20:	f7ff f9b8 	bl	8003d94 <HAL_PWREx_GetVoltageRange>
 8004a24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	4a1d      	ldr	r2, [pc, #116]	; (8004aa0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a38:	d10b      	bne.n	8004a52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b80      	cmp	r3, #128	; 0x80
 8004a3e:	d919      	bls.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2ba0      	cmp	r3, #160	; 0xa0
 8004a44:	d902      	bls.n	8004a4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a46:	2302      	movs	r3, #2
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	e013      	b.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	613b      	str	r3, [r7, #16]
 8004a50:	e010      	b.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b80      	cmp	r3, #128	; 0x80
 8004a56:	d902      	bls.n	8004a5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004a58:	2303      	movs	r3, #3
 8004a5a:	613b      	str	r3, [r7, #16]
 8004a5c:	e00a      	b.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b80      	cmp	r3, #128	; 0x80
 8004a62:	d102      	bne.n	8004a6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004a64:	2302      	movs	r3, #2
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e004      	b.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b70      	cmp	r3, #112	; 0x70
 8004a6e:	d101      	bne.n	8004a74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a70:	2301      	movs	r3, #1
 8004a72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f023 0207 	bic.w	r2, r3, #7
 8004a7c:	4909      	ldr	r1, [pc, #36]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a84:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d001      	beq.n	8004a96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40022000 	.word	0x40022000

08004aa8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b086      	sub	sp, #24
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d031      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004acc:	d01a      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004ace:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ad2:	d814      	bhi.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004ad8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004adc:	d10f      	bne.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ade:	4b5d      	ldr	r3, [pc, #372]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a5c      	ldr	r2, [pc, #368]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004aea:	e00c      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	3304      	adds	r3, #4
 8004af0:	2100      	movs	r1, #0
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fa44 	bl	8004f80 <RCCEx_PLLSAI1_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	74fb      	strb	r3, [r7, #19]
      break;
 8004b02:	e000      	b.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10b      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b0c:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1a:	494e      	ldr	r1, [pc, #312]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b22:	e001      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 809e 	beq.w	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b3a:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d101      	bne.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b50:	4b40      	ldr	r3, [pc, #256]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b54:	4a3f      	ldr	r2, [pc, #252]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004b5c:	4b3d      	ldr	r3, [pc, #244]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b64:	60bb      	str	r3, [r7, #8]
 8004b66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b6c:	4b3a      	ldr	r3, [pc, #232]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a39      	ldr	r2, [pc, #228]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b78:	f7fe fb06 	bl	8003188 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b7e:	e009      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b80:	f7fe fb02 	bl	8003188 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	74fb      	strb	r3, [r7, #19]
        break;
 8004b92:	e005      	b.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b94:	4b30      	ldr	r3, [pc, #192]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0ef      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d15a      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ba6:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01e      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d019      	beq.n	8004bf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004bc2:	4b24      	ldr	r3, [pc, #144]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004bce:	4b21      	ldr	r3, [pc, #132]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	4a1f      	ldr	r2, [pc, #124]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004bde:	4b1d      	ldr	r3, [pc, #116]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be4:	4a1b      	ldr	r2, [pc, #108]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004be6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004bee:	4a19      	ldr	r2, [pc, #100]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d016      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c00:	f7fe fac2 	bl	8003188 <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c06:	e00b      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c08:	f7fe fabe 	bl	8003188 <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d902      	bls.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	74fb      	strb	r3, [r7, #19]
            break;
 8004c1e:	e006      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ec      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c42:	4904      	ldr	r1, [pc, #16]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c4a:	e009      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
 8004c50:	e006      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004c52:	bf00      	nop
 8004c54:	40021000 	.word	0x40021000
 8004c58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5c:	7cfb      	ldrb	r3, [r7, #19]
 8004c5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c60:	7c7b      	ldrb	r3, [r7, #17]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d105      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c66:	4b9e      	ldr	r3, [pc, #632]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	4a9d      	ldr	r2, [pc, #628]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c7e:	4b98      	ldr	r3, [pc, #608]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c84:	f023 0203 	bic.w	r2, r3, #3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	4994      	ldr	r1, [pc, #592]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ca0:	4b8f      	ldr	r3, [pc, #572]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca6:	f023 020c 	bic.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	498c      	ldr	r1, [pc, #560]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00a      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cc2:	4b87      	ldr	r3, [pc, #540]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	4983      	ldr	r1, [pc, #524]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0308 	and.w	r3, r3, #8
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00a      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ce4:	4b7e      	ldr	r3, [pc, #504]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf2:	497b      	ldr	r1, [pc, #492]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d06:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d14:	4972      	ldr	r1, [pc, #456]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d00a      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d28:	4b6d      	ldr	r3, [pc, #436]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d36:	496a      	ldr	r1, [pc, #424]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d58:	4961      	ldr	r1, [pc, #388]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00a      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d6c:	4b5c      	ldr	r3, [pc, #368]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7a:	4959      	ldr	r1, [pc, #356]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d8e:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9c:	4950      	ldr	r1, [pc, #320]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00a      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004db0:	4b4b      	ldr	r3, [pc, #300]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	4948      	ldr	r1, [pc, #288]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00a      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dd2:	4b43      	ldr	r3, [pc, #268]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dd4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dd8:	f023 0203 	bic.w	r2, r3, #3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	493f      	ldr	r1, [pc, #252]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d028      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004df4:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	4937      	ldr	r1, [pc, #220]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e12:	d106      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b32      	ldr	r3, [pc, #200]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a31      	ldr	r2, [pc, #196]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e011      	b.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e2a:	d10c      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3304      	adds	r3, #4
 8004e30:	2101      	movs	r1, #1
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 f8a4 	bl	8004f80 <RCCEx_PLLSAI1_Config>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e3c:	7cfb      	ldrb	r3, [r7, #19]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d028      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e52:	4b23      	ldr	r3, [pc, #140]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	491f      	ldr	r1, [pc, #124]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e70:	d106      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e7c:	60d3      	str	r3, [r2, #12]
 8004e7e:	e011      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e84:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e88:	d10c      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	3304      	adds	r3, #4
 8004e8e:	2101      	movs	r1, #1
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 f875 	bl	8004f80 <RCCEx_PLLSAI1_Config>
 8004e96:	4603      	mov	r3, r0
 8004e98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e9a:	7cfb      	ldrb	r3, [r7, #19]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02b      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ebe:	4908      	ldr	r1, [pc, #32]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ece:	d109      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ed0:	4b03      	ldr	r3, [pc, #12]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a02      	ldr	r2, [pc, #8]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004eda:	60d3      	str	r3, [r2, #12]
 8004edc:	e014      	b.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004ede:	bf00      	nop
 8004ee0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f000 f843 	bl	8004f80 <RCCEx_PLLSAI1_Config>
 8004efa:	4603      	mov	r3, r0
 8004efc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004efe:	7cfb      	ldrb	r3, [r7, #19]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004f04:	7cfb      	ldrb	r3, [r7, #19]
 8004f06:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01c      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f14:	4b19      	ldr	r3, [pc, #100]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f22:	4916      	ldr	r1, [pc, #88]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f32:	d10c      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3304      	adds	r3, #4
 8004f38:	2102      	movs	r1, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f820 	bl	8004f80 <RCCEx_PLLSAI1_Config>
 8004f40:	4603      	mov	r3, r0
 8004f42:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f44:	7cfb      	ldrb	r3, [r7, #19]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f5a:	4b08      	ldr	r3, [pc, #32]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f68:	4904      	ldr	r1, [pc, #16]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f70:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40021000 	.word	0x40021000

08004f80 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f8e:	4b74      	ldr	r3, [pc, #464]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	f003 0303 	and.w	r3, r3, #3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f9a:	4b71      	ldr	r3, [pc, #452]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f003 0203 	and.w	r2, r3, #3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d10d      	bne.n	8004fc6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
       ||
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d009      	beq.n	8004fc6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004fb2:	4b6b      	ldr	r3, [pc, #428]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	091b      	lsrs	r3, r3, #4
 8004fb8:	f003 0307 	and.w	r3, r3, #7
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d047      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e044      	b.n	8005056 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b03      	cmp	r3, #3
 8004fd2:	d018      	beq.n	8005006 <RCCEx_PLLSAI1_Config+0x86>
 8004fd4:	2b03      	cmp	r3, #3
 8004fd6:	d825      	bhi.n	8005024 <RCCEx_PLLSAI1_Config+0xa4>
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d002      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0x62>
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d009      	beq.n	8004ff4 <RCCEx_PLLSAI1_Config+0x74>
 8004fe0:	e020      	b.n	8005024 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d11d      	bne.n	800502a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ff2:	e01a      	b.n	800502a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ff4:	4b5a      	ldr	r3, [pc, #360]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d116      	bne.n	800502e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005004:	e013      	b.n	800502e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005006:	4b56      	ldr	r3, [pc, #344]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10f      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005012:	4b53      	ldr	r3, [pc, #332]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d109      	bne.n	8005032 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005022:	e006      	b.n	8005032 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
      break;
 8005028:	e004      	b.n	8005034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800502a:	bf00      	nop
 800502c:	e002      	b.n	8005034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800502e:	bf00      	nop
 8005030:	e000      	b.n	8005034 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005032:	bf00      	nop
    }

    if(status == HAL_OK)
 8005034:	7bfb      	ldrb	r3, [r7, #15]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10d      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800503a:	4b49      	ldr	r3, [pc, #292]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6819      	ldr	r1, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	3b01      	subs	r3, #1
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	430b      	orrs	r3, r1
 8005050:	4943      	ldr	r1, [pc, #268]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005056:	7bfb      	ldrb	r3, [r7, #15]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d17c      	bne.n	8005156 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800505c:	4b40      	ldr	r3, [pc, #256]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a3f      	ldr	r2, [pc, #252]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005062:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005066:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005068:	f7fe f88e 	bl	8003188 <HAL_GetTick>
 800506c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800506e:	e009      	b.n	8005084 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005070:	f7fe f88a 	bl	8003188 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d902      	bls.n	8005084 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	73fb      	strb	r3, [r7, #15]
        break;
 8005082:	e005      	b.n	8005090 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005084:	4b36      	ldr	r3, [pc, #216]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1ef      	bne.n	8005070 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d15f      	bne.n	8005156 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d110      	bne.n	80050be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800509c:	4b30      	ldr	r3, [pc, #192]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80050a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	6892      	ldr	r2, [r2, #8]
 80050ac:	0211      	lsls	r1, r2, #8
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	68d2      	ldr	r2, [r2, #12]
 80050b2:	06d2      	lsls	r2, r2, #27
 80050b4:	430a      	orrs	r2, r1
 80050b6:	492a      	ldr	r1, [pc, #168]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	610b      	str	r3, [r1, #16]
 80050bc:	e027      	b.n	800510e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d112      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050c4:	4b26      	ldr	r3, [pc, #152]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80050cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6892      	ldr	r2, [r2, #8]
 80050d4:	0211      	lsls	r1, r2, #8
 80050d6:	687a      	ldr	r2, [r7, #4]
 80050d8:	6912      	ldr	r2, [r2, #16]
 80050da:	0852      	lsrs	r2, r2, #1
 80050dc:	3a01      	subs	r2, #1
 80050de:	0552      	lsls	r2, r2, #21
 80050e0:	430a      	orrs	r2, r1
 80050e2:	491f      	ldr	r1, [pc, #124]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	610b      	str	r3, [r1, #16]
 80050e8:	e011      	b.n	800510e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6892      	ldr	r2, [r2, #8]
 80050fa:	0211      	lsls	r1, r2, #8
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6952      	ldr	r2, [r2, #20]
 8005100:	0852      	lsrs	r2, r2, #1
 8005102:	3a01      	subs	r2, #1
 8005104:	0652      	lsls	r2, r2, #25
 8005106:	430a      	orrs	r2, r1
 8005108:	4915      	ldr	r1, [pc, #84]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800510e:	4b14      	ldr	r3, [pc, #80]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a13      	ldr	r2, [pc, #76]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005114:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005118:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511a:	f7fe f835 	bl	8003188 <HAL_GetTick>
 800511e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005120:	e009      	b.n	8005136 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005122:	f7fe f831 	bl	8003188 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d902      	bls.n	8005136 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	73fb      	strb	r3, [r7, #15]
          break;
 8005134:	e005      	b.n	8005142 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ef      	beq.n	8005122 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005142:	7bfb      	ldrb	r3, [r7, #15]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005148:	4b05      	ldr	r3, [pc, #20]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	4903      	ldr	r1, [pc, #12]	; (8005160 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005152:	4313      	orrs	r3, r2
 8005154:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005156:	7bfb      	ldrb	r3, [r7, #15]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3710      	adds	r7, #16
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40021000 	.word	0x40021000

08005164 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e049      	b.n	800520a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fd fdb6 	bl	8002cfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3304      	adds	r3, #4
 80051a0:	4619      	mov	r1, r3
 80051a2:	4610      	mov	r0, r2
 80051a4:	f000 ff78 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e038      	b.n	800529e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <HAL_TIM_Base_Start+0x98>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_TIM_Base_Start+0x48>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d009      	beq.n	800525c <HAL_TIM_Base_Start+0x48>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a18      	ldr	r2, [pc, #96]	; (80052b0 <HAL_TIM_Base_Start+0x9c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_TIM_Base_Start+0x48>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a17      	ldr	r2, [pc, #92]	; (80052b4 <HAL_TIM_Base_Start+0xa0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d115      	bne.n	8005288 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <HAL_TIM_Base_Start+0xa4>)
 8005264:	4013      	ands	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2b06      	cmp	r3, #6
 800526c:	d015      	beq.n	800529a <HAL_TIM_Base_Start+0x86>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d011      	beq.n	800529a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f042 0201 	orr.w	r2, r2, #1
 8005284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005286:	e008      	b.n	800529a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f042 0201 	orr.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e000      	b.n	800529c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3714      	adds	r7, #20
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	40012c00 	.word	0x40012c00
 80052b0:	40000400 	.word	0x40000400
 80052b4:	40014000 	.word	0x40014000
 80052b8:	00010007 	.word	0x00010007

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e040      	b.n	8005356 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a1c      	ldr	r2, [pc, #112]	; (8005364 <HAL_TIM_Base_Start_IT+0xa8>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d00e      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d009      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a18      	ldr	r2, [pc, #96]	; (8005368 <HAL_TIM_Base_Start_IT+0xac>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d004      	beq.n	8005314 <HAL_TIM_Base_Start_IT+0x58>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a17      	ldr	r2, [pc, #92]	; (800536c <HAL_TIM_Base_Start_IT+0xb0>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d115      	bne.n	8005340 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689a      	ldr	r2, [r3, #8]
 800531a:	4b15      	ldr	r3, [pc, #84]	; (8005370 <HAL_TIM_Base_Start_IT+0xb4>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b06      	cmp	r3, #6
 8005324:	d015      	beq.n	8005352 <HAL_TIM_Base_Start_IT+0x96>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d011      	beq.n	8005352 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f042 0201 	orr.w	r2, r2, #1
 800533c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	e008      	b.n	8005352 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f042 0201 	orr.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]
 8005350:	e000      	b.n	8005354 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005352:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40012c00 	.word	0x40012c00
 8005368:	40000400 	.word	0x40000400
 800536c:	40014000 	.word	0x40014000
 8005370:	00010007 	.word	0x00010007

08005374 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68da      	ldr	r2, [r3, #12]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0201 	bic.w	r2, r2, #1
 800538a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	f241 1311 	movw	r3, #4369	; 0x1111
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10f      	bne.n	80053bc <HAL_TIM_Base_Stop_IT+0x48>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	f240 4344 	movw	r3, #1092	; 0x444
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_Base_Stop_IT+0x48>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0201 	bic.w	r2, r2, #1
 80053ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b082      	sub	sp, #8
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d101      	bne.n	80053e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e049      	b.n	8005478 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f841 	bl	8005480 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2202      	movs	r2, #2
 8005402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3304      	adds	r3, #4
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f000 fe41 	bl	8006098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2201      	movs	r2, #1
 800542a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2201      	movs	r2, #1
 800543a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2201      	movs	r2, #1
 8005442:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2201      	movs	r2, #1
 800545a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3708      	adds	r7, #8
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d109      	bne.n	80054b8 <HAL_TIM_PWM_Start+0x24>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	bf14      	ite	ne
 80054b0:	2301      	movne	r3, #1
 80054b2:	2300      	moveq	r3, #0
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	e03c      	b.n	8005532 <HAL_TIM_PWM_Start+0x9e>
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2b04      	cmp	r3, #4
 80054bc:	d109      	bne.n	80054d2 <HAL_TIM_PWM_Start+0x3e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	bf14      	ite	ne
 80054ca:	2301      	movne	r3, #1
 80054cc:	2300      	moveq	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e02f      	b.n	8005532 <HAL_TIM_PWM_Start+0x9e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b08      	cmp	r3, #8
 80054d6:	d109      	bne.n	80054ec <HAL_TIM_PWM_Start+0x58>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	bf14      	ite	ne
 80054e4:	2301      	movne	r3, #1
 80054e6:	2300      	moveq	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e022      	b.n	8005532 <HAL_TIM_PWM_Start+0x9e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b0c      	cmp	r3, #12
 80054f0:	d109      	bne.n	8005506 <HAL_TIM_PWM_Start+0x72>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	e015      	b.n	8005532 <HAL_TIM_PWM_Start+0x9e>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b10      	cmp	r3, #16
 800550a:	d109      	bne.n	8005520 <HAL_TIM_PWM_Start+0x8c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b01      	cmp	r3, #1
 8005516:	bf14      	ite	ne
 8005518:	2301      	movne	r3, #1
 800551a:	2300      	moveq	r3, #0
 800551c:	b2db      	uxtb	r3, r3
 800551e:	e008      	b.n	8005532 <HAL_TIM_PWM_Start+0x9e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b01      	cmp	r3, #1
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e083      	b.n	8005642 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_TIM_PWM_Start+0xb6>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2202      	movs	r2, #2
 8005544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005548:	e023      	b.n	8005592 <HAL_TIM_PWM_Start+0xfe>
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	2b04      	cmp	r3, #4
 800554e:	d104      	bne.n	800555a <HAL_TIM_PWM_Start+0xc6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005558:	e01b      	b.n	8005592 <HAL_TIM_PWM_Start+0xfe>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d104      	bne.n	800556a <HAL_TIM_PWM_Start+0xd6>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2202      	movs	r2, #2
 8005564:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005568:	e013      	b.n	8005592 <HAL_TIM_PWM_Start+0xfe>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b0c      	cmp	r3, #12
 800556e:	d104      	bne.n	800557a <HAL_TIM_PWM_Start+0xe6>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005578:	e00b      	b.n	8005592 <HAL_TIM_PWM_Start+0xfe>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b10      	cmp	r3, #16
 800557e:	d104      	bne.n	800558a <HAL_TIM_PWM_Start+0xf6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2202      	movs	r2, #2
 8005584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005588:	e003      	b.n	8005592 <HAL_TIM_PWM_Start+0xfe>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2201      	movs	r2, #1
 8005598:	6839      	ldr	r1, [r7, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f992 	bl	80068c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a29      	ldr	r2, [pc, #164]	; (800564c <HAL_TIM_PWM_Start+0x1b8>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d009      	beq.n	80055be <HAL_TIM_PWM_Start+0x12a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a28      	ldr	r2, [pc, #160]	; (8005650 <HAL_TIM_PWM_Start+0x1bc>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d004      	beq.n	80055be <HAL_TIM_PWM_Start+0x12a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a26      	ldr	r2, [pc, #152]	; (8005654 <HAL_TIM_PWM_Start+0x1c0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d101      	bne.n	80055c2 <HAL_TIM_PWM_Start+0x12e>
 80055be:	2301      	movs	r3, #1
 80055c0:	e000      	b.n	80055c4 <HAL_TIM_PWM_Start+0x130>
 80055c2:	2300      	movs	r3, #0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d007      	beq.n	80055d8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a1b      	ldr	r2, [pc, #108]	; (800564c <HAL_TIM_PWM_Start+0x1b8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d00e      	beq.n	8005600 <HAL_TIM_PWM_Start+0x16c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ea:	d009      	beq.n	8005600 <HAL_TIM_PWM_Start+0x16c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a19      	ldr	r2, [pc, #100]	; (8005658 <HAL_TIM_PWM_Start+0x1c4>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d004      	beq.n	8005600 <HAL_TIM_PWM_Start+0x16c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <HAL_TIM_PWM_Start+0x1bc>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d115      	bne.n	800562c <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	4b15      	ldr	r3, [pc, #84]	; (800565c <HAL_TIM_PWM_Start+0x1c8>)
 8005608:	4013      	ands	r3, r2
 800560a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2b06      	cmp	r3, #6
 8005610:	d015      	beq.n	800563e <HAL_TIM_PWM_Start+0x1aa>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005618:	d011      	beq.n	800563e <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0201 	orr.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800562a:	e008      	b.n	800563e <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0201 	orr.w	r2, r2, #1
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	e000      	b.n	8005640 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800563e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40014000 	.word	0x40014000
 8005654:	40014400 	.word	0x40014400
 8005658:	40000400 	.word	0x40000400
 800565c:	00010007 	.word	0x00010007

08005660 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2200      	movs	r2, #0
 8005670:	6839      	ldr	r1, [r7, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f926 	bl	80068c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a39      	ldr	r2, [pc, #228]	; (8005764 <HAL_TIM_PWM_Stop+0x104>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_TIM_PWM_Stop+0x36>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a38      	ldr	r2, [pc, #224]	; (8005768 <HAL_TIM_PWM_Stop+0x108>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_TIM_PWM_Stop+0x36>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a36      	ldr	r2, [pc, #216]	; (800576c <HAL_TIM_PWM_Stop+0x10c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <HAL_TIM_PWM_Stop+0x3a>
 8005696:	2301      	movs	r3, #1
 8005698:	e000      	b.n	800569c <HAL_TIM_PWM_Stop+0x3c>
 800569a:	2300      	movs	r3, #0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a1a      	ldr	r2, [r3, #32]
 80056a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80056aa:	4013      	ands	r3, r2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10f      	bne.n	80056d0 <HAL_TIM_PWM_Stop+0x70>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6a1a      	ldr	r2, [r3, #32]
 80056b6:	f240 4344 	movw	r3, #1092	; 0x444
 80056ba:	4013      	ands	r3, r2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_PWM_Stop+0x70>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6a1a      	ldr	r2, [r3, #32]
 80056d6:	f241 1311 	movw	r3, #4369	; 0x1111
 80056da:	4013      	ands	r3, r2
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10f      	bne.n	8005700 <HAL_TIM_PWM_Stop+0xa0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6a1a      	ldr	r2, [r3, #32]
 80056e6:	f240 4344 	movw	r3, #1092	; 0x444
 80056ea:	4013      	ands	r3, r2
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_TIM_PWM_Stop+0xa0>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0201 	bic.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d104      	bne.n	8005710 <HAL_TIM_PWM_Stop+0xb0>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2201      	movs	r2, #1
 800570a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570e:	e023      	b.n	8005758 <HAL_TIM_PWM_Stop+0xf8>
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2b04      	cmp	r3, #4
 8005714:	d104      	bne.n	8005720 <HAL_TIM_PWM_Stop+0xc0>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800571e:	e01b      	b.n	8005758 <HAL_TIM_PWM_Stop+0xf8>
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2b08      	cmp	r3, #8
 8005724:	d104      	bne.n	8005730 <HAL_TIM_PWM_Stop+0xd0>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800572e:	e013      	b.n	8005758 <HAL_TIM_PWM_Stop+0xf8>
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b0c      	cmp	r3, #12
 8005734:	d104      	bne.n	8005740 <HAL_TIM_PWM_Stop+0xe0>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800573e:	e00b      	b.n	8005758 <HAL_TIM_PWM_Stop+0xf8>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b10      	cmp	r3, #16
 8005744:	d104      	bne.n	8005750 <HAL_TIM_PWM_Stop+0xf0>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800574e:	e003      	b.n	8005758 <HAL_TIM_PWM_Stop+0xf8>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2201      	movs	r2, #1
 8005754:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005758:	2300      	movs	r3, #0
}
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40014000 	.word	0x40014000
 800576c:	40014400 	.word	0x40014400

08005770 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e097      	b.n	80058b4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d106      	bne.n	800579e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7fd fb2f 	bl	8002dfc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2202      	movs	r2, #2
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80057b4:	f023 0307 	bic.w	r3, r3, #7
 80057b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 fc67 	bl	8006098 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	697a      	ldr	r2, [r7, #20]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	021b      	lsls	r3, r3, #8
 8005802:	4313      	orrs	r3, r2
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	4313      	orrs	r3, r2
 8005808:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005810:	f023 030c 	bic.w	r3, r3, #12
 8005814:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800581c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005820:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	021b      	lsls	r3, r3, #8
 800582c:	4313      	orrs	r3, r2
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	011a      	lsls	r2, r3, #4
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	031b      	lsls	r3, r3, #12
 8005840:	4313      	orrs	r3, r2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800584e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005856:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	4313      	orrs	r3, r2
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2201      	movs	r2, #1
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2201      	movs	r2, #1
 800589e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058cc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80058d4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058dc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058e4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d110      	bne.n	800590e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d102      	bne.n	80058f8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80058f2:	7b7b      	ldrb	r3, [r7, #13]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d001      	beq.n	80058fc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e069      	b.n	80059d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800590c:	e031      	b.n	8005972 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b04      	cmp	r3, #4
 8005912:	d110      	bne.n	8005936 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005914:	7bbb      	ldrb	r3, [r7, #14]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d102      	bne.n	8005920 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800591a:	7b3b      	ldrb	r3, [r7, #12]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d001      	beq.n	8005924 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005920:	2301      	movs	r3, #1
 8005922:	e055      	b.n	80059d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2202      	movs	r2, #2
 8005930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005934:	e01d      	b.n	8005972 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005936:	7bfb      	ldrb	r3, [r7, #15]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d108      	bne.n	800594e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d105      	bne.n	800594e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005942:	7b7b      	ldrb	r3, [r7, #13]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d102      	bne.n	800594e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005948:	7b3b      	ldrb	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d001      	beq.n	8005952 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e03e      	b.n	80059d0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2202      	movs	r2, #2
 8005956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2202      	movs	r2, #2
 800595e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2202      	movs	r2, #2
 800596e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d003      	beq.n	8005980 <HAL_TIM_Encoder_Start+0xc4>
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	2b04      	cmp	r3, #4
 800597c:	d008      	beq.n	8005990 <HAL_TIM_Encoder_Start+0xd4>
 800597e:	e00f      	b.n	80059a0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2201      	movs	r2, #1
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f000 ff9b 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 800598e:	e016      	b.n	80059be <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	2104      	movs	r1, #4
 8005998:	4618      	mov	r0, r3
 800599a:	f000 ff93 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 800599e:	e00e      	b.n	80059be <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	2100      	movs	r1, #0
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 ff8b 	bl	80068c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2201      	movs	r2, #1
 80059b4:	2104      	movs	r1, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f000 ff84 	bl	80068c4 <TIM_CCxChannelCmd>
      break;
 80059bc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d122      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d11b      	bne.n	8005a34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0202 	mvn.w	r2, #2
 8005a04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699b      	ldr	r3, [r3, #24]
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 fb1e 	bl	800605c <HAL_TIM_IC_CaptureCallback>
 8005a20:	e005      	b.n	8005a2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 fb10 	bl	8006048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f000 fb21 	bl	8006070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d122      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d11b      	bne.n	8005a88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f06f 0204 	mvn.w	r2, #4
 8005a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 faf4 	bl	800605c <HAL_TIM_IC_CaptureCallback>
 8005a74:	e005      	b.n	8005a82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fae6 	bl	8006048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f000 faf7 	bl	8006070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b08      	cmp	r3, #8
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0208 	mvn.w	r2, #8
 8005aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 faca 	bl	800605c <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fabc 	bl	8006048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 facd 	bl	8006070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	2b10      	cmp	r3, #16
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0310 	and.w	r3, r3, #16
 8005af4:	2b10      	cmp	r3, #16
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0210 	mvn.w	r2, #16
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2208      	movs	r2, #8
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	69db      	ldr	r3, [r3, #28]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 faa0 	bl	800605c <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 fa92 	bl	8006048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 faa3 	bl	8006070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d10e      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d107      	bne.n	8005b5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0201 	mvn.w	r2, #1
 8005b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f7fc f8fa 	bl	8001d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d10e      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b74:	2b80      	cmp	r3, #128	; 0x80
 8005b76:	d107      	bne.n	8005b88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f000 ffb4 	bl	8006af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b96:	d10e      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba2:	2b80      	cmp	r3, #128	; 0x80
 8005ba4:	d107      	bne.n	8005bb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 ffa7 	bl	8006b04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc0:	2b40      	cmp	r3, #64	; 0x40
 8005bc2:	d10e      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d107      	bne.n	8005be2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fa51 	bl	8006084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d10e      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	f003 0320 	and.w	r3, r3, #32
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d107      	bne.n	8005c0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f06f 0220 	mvn.w	r2, #32
 8005c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 ff67 	bl	8006adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d101      	bne.n	8005c32 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c2e:	2302      	movs	r3, #2
 8005c30:	e0fd      	b.n	8005e2e <HAL_TIM_PWM_ConfigChannel+0x216>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b14      	cmp	r3, #20
 8005c3e:	f200 80f0 	bhi.w	8005e22 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005c42:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c9d 	.word	0x08005c9d
 8005c4c:	08005e23 	.word	0x08005e23
 8005c50:	08005e23 	.word	0x08005e23
 8005c54:	08005e23 	.word	0x08005e23
 8005c58:	08005cdd 	.word	0x08005cdd
 8005c5c:	08005e23 	.word	0x08005e23
 8005c60:	08005e23 	.word	0x08005e23
 8005c64:	08005e23 	.word	0x08005e23
 8005c68:	08005d1f 	.word	0x08005d1f
 8005c6c:	08005e23 	.word	0x08005e23
 8005c70:	08005e23 	.word	0x08005e23
 8005c74:	08005e23 	.word	0x08005e23
 8005c78:	08005d5f 	.word	0x08005d5f
 8005c7c:	08005e23 	.word	0x08005e23
 8005c80:	08005e23 	.word	0x08005e23
 8005c84:	08005e23 	.word	0x08005e23
 8005c88:	08005da1 	.word	0x08005da1
 8005c8c:	08005e23 	.word	0x08005e23
 8005c90:	08005e23 	.word	0x08005e23
 8005c94:	08005e23 	.word	0x08005e23
 8005c98:	08005de1 	.word	0x08005de1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	68b9      	ldr	r1, [r7, #8]
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f000 fa66 	bl	8006174 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699a      	ldr	r2, [r3, #24]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f022 0204 	bic.w	r2, r2, #4
 8005cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6999      	ldr	r1, [r3, #24]
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	691a      	ldr	r2, [r3, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	430a      	orrs	r2, r1
 8005cd8:	619a      	str	r2, [r3, #24]
      break;
 8005cda:	e0a3      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68b9      	ldr	r1, [r7, #8]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fac2 	bl	800626c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	699a      	ldr	r2, [r3, #24]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6999      	ldr	r1, [r3, #24]
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	021a      	lsls	r2, r3, #8
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	619a      	str	r2, [r3, #24]
      break;
 8005d1c:	e082      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68b9      	ldr	r1, [r7, #8]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f000 fb1b 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	69da      	ldr	r2, [r3, #28]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f042 0208 	orr.w	r2, r2, #8
 8005d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	69da      	ldr	r2, [r3, #28]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 0204 	bic.w	r2, r2, #4
 8005d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	69d9      	ldr	r1, [r3, #28]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	61da      	str	r2, [r3, #28]
      break;
 8005d5c:	e062      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68b9      	ldr	r1, [r7, #8]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fb73 	bl	8006450 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	69d9      	ldr	r1, [r3, #28]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	021a      	lsls	r2, r3, #8
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	61da      	str	r2, [r3, #28]
      break;
 8005d9e:	e041      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fbb0 	bl	800650c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0208 	orr.w	r2, r2, #8
 8005dba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f022 0204 	bic.w	r2, r2, #4
 8005dca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	691a      	ldr	r2, [r3, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dde:	e021      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68b9      	ldr	r1, [r7, #8]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fbe8 	bl	80065bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	021a      	lsls	r2, r3, #8
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e20:	e000      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8005e22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop

08005e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_ConfigClockSource+0x18>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0b5      	b.n	8005fbc <HAL_TIM_ConfigClockSource+0x184>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8c:	d03e      	beq.n	8005f0c <HAL_TIM_ConfigClockSource+0xd4>
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	f200 8087 	bhi.w	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9a:	f000 8085 	beq.w	8005fa8 <HAL_TIM_ConfigClockSource+0x170>
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d87f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b70      	cmp	r3, #112	; 0x70
 8005ea6:	d01a      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0xa6>
 8005ea8:	2b70      	cmp	r3, #112	; 0x70
 8005eaa:	d87b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d050      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x11a>
 8005eb0:	2b60      	cmp	r3, #96	; 0x60
 8005eb2:	d877      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b50      	cmp	r3, #80	; 0x50
 8005eb6:	d03c      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xfa>
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d873      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d058      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x13a>
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d86f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d064      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	2b30      	cmp	r3, #48	; 0x30
 8005eca:	d86b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d060      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d867      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d05c      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d05a      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005edc:	e062      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f000 fcc9 	bl	8006884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	609a      	str	r2, [r3, #8]
      break;
 8005f0a:	e04e      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6899      	ldr	r1, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f000 fcb2 	bl	8006884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e03b      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fc26 	bl	8006790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2150      	movs	r1, #80	; 0x50
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fc7f 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8005f50:	e02b      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 fc45 	bl	80067ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2160      	movs	r1, #96	; 0x60
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fc6f 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8005f70:	e01b      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 fc06 	bl	8006790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2140      	movs	r1, #64	; 0x40
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fc5f 	bl	800684e <TIM_ITRx_SetConfig>
      break;
 8005f90:	e00b      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 fc56 	bl	800684e <TIM_ITRx_SetConfig>
        break;
 8005fa2:	e002      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005fa4:	bf00      	nop
 8005fa6:	e000      	b.n	8005faa <HAL_TIM_ConfigClockSource+0x172>
      break;
 8005fa8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d101      	bne.n	8005fdc <HAL_TIM_SlaveConfigSynchro+0x18>
 8005fd8:	2302      	movs	r3, #2
 8005fda:	e031      	b.n	8006040 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb3e 	bl	8006670 <TIM_SlaveTimer_SetConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d009      	beq.n	800600e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e018      	b.n	8006040 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68da      	ldr	r2, [r3, #12]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800602c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	3708      	adds	r7, #8
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006098:	b480      	push	{r7}
 800609a:	b085      	sub	sp, #20
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a2e      	ldr	r2, [pc, #184]	; (8006164 <TIM_Base_SetConfig+0xcc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <TIM_Base_SetConfig+0x28>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0x28>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a2b      	ldr	r2, [pc, #172]	; (8006168 <TIM_Base_SetConfig+0xd0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d108      	bne.n	80060d2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a23      	ldr	r2, [pc, #140]	; (8006164 <TIM_Base_SetConfig+0xcc>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d00f      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d00b      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a20      	ldr	r2, [pc, #128]	; (8006168 <TIM_Base_SetConfig+0xd0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a1f      	ldr	r2, [pc, #124]	; (800616c <TIM_Base_SetConfig+0xd4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_Base_SetConfig+0x62>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a1e      	ldr	r2, [pc, #120]	; (8006170 <TIM_Base_SetConfig+0xd8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d108      	bne.n	800610c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4a0c      	ldr	r2, [pc, #48]	; (8006164 <TIM_Base_SetConfig+0xcc>)
 8006134:	4293      	cmp	r3, r2
 8006136:	d007      	beq.n	8006148 <TIM_Base_SetConfig+0xb0>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	4a0c      	ldr	r2, [pc, #48]	; (800616c <TIM_Base_SetConfig+0xd4>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d003      	beq.n	8006148 <TIM_Base_SetConfig+0xb0>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	4a0b      	ldr	r2, [pc, #44]	; (8006170 <TIM_Base_SetConfig+0xd8>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d103      	bne.n	8006150 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	691a      	ldr	r2, [r3, #16]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	615a      	str	r2, [r3, #20]
}
 8006156:	bf00      	nop
 8006158:	3714      	adds	r7, #20
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr
 8006162:	bf00      	nop
 8006164:	40012c00 	.word	0x40012c00
 8006168:	40000400 	.word	0x40000400
 800616c:	40014000 	.word	0x40014000
 8006170:	40014400 	.word	0x40014400

08006174 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a1b      	ldr	r3, [r3, #32]
 8006182:	f023 0201 	bic.w	r2, r3, #1
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f023 0303 	bic.w	r3, r3, #3
 80061ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68fa      	ldr	r2, [r7, #12]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 0302 	bic.w	r3, r3, #2
 80061c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a24      	ldr	r2, [pc, #144]	; (8006260 <TIM_OC1_SetConfig+0xec>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d007      	beq.n	80061e4 <TIM_OC1_SetConfig+0x70>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a23      	ldr	r2, [pc, #140]	; (8006264 <TIM_OC1_SetConfig+0xf0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d003      	beq.n	80061e4 <TIM_OC1_SetConfig+0x70>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a22      	ldr	r2, [pc, #136]	; (8006268 <TIM_OC1_SetConfig+0xf4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d10c      	bne.n	80061fe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f023 0308 	bic.w	r3, r3, #8
 80061ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f023 0304 	bic.w	r3, r3, #4
 80061fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a17      	ldr	r2, [pc, #92]	; (8006260 <TIM_OC1_SetConfig+0xec>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <TIM_OC1_SetConfig+0xa2>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a16      	ldr	r2, [pc, #88]	; (8006264 <TIM_OC1_SetConfig+0xf0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d003      	beq.n	8006216 <TIM_OC1_SetConfig+0xa2>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a15      	ldr	r2, [pc, #84]	; (8006268 <TIM_OC1_SetConfig+0xf4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d111      	bne.n	800623a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	695b      	ldr	r3, [r3, #20]
 800622a:	693a      	ldr	r2, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	621a      	str	r2, [r3, #32]
}
 8006254:	bf00      	nop
 8006256:	371c      	adds	r7, #28
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr
 8006260:	40012c00 	.word	0x40012c00
 8006264:	40014000 	.word	0x40014000
 8006268:	40014400 	.word	0x40014400

0800626c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	f023 0210 	bic.w	r2, r3, #16
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800629e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	f023 0320 	bic.w	r3, r3, #32
 80062ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	4313      	orrs	r3, r2
 80062c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a22      	ldr	r2, [pc, #136]	; (8006354 <TIM_OC2_SetConfig+0xe8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d10d      	bne.n	80062ec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a19      	ldr	r2, [pc, #100]	; (8006354 <TIM_OC2_SetConfig+0xe8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <TIM_OC2_SetConfig+0x98>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC2_SetConfig+0xec>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d003      	beq.n	8006304 <TIM_OC2_SetConfig+0x98>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC2_SetConfig+0xf0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d113      	bne.n	800632c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800630a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006312:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	693a      	ldr	r2, [r7, #16]
 800631c:	4313      	orrs	r3, r2
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	621a      	str	r2, [r3, #32]
}
 8006346:	bf00      	nop
 8006348:	371c      	adds	r7, #28
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	40012c00 	.word	0x40012c00
 8006358:	40014000 	.word	0x40014000
 800635c:	40014400 	.word	0x40014400

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800638e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	697a      	ldr	r2, [r7, #20]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a21      	ldr	r2, [pc, #132]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10d      	bne.n	80063de <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	021b      	lsls	r3, r3, #8
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a18      	ldr	r2, [pc, #96]	; (8006444 <TIM_OC3_SetConfig+0xe4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_OC3_SetConfig+0x96>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a17      	ldr	r2, [pc, #92]	; (8006448 <TIM_OC3_SetConfig+0xe8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_OC3_SetConfig+0x96>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a16      	ldr	r2, [pc, #88]	; (800644c <TIM_OC3_SetConfig+0xec>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d113      	bne.n	800641e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	011b      	lsls	r3, r3, #4
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	4313      	orrs	r3, r2
 8006410:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	011b      	lsls	r3, r3, #4
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	693a      	ldr	r2, [r7, #16]
 8006422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	697a      	ldr	r2, [r7, #20]
 8006436:	621a      	str	r2, [r3, #32]
}
 8006438:	bf00      	nop
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr
 8006444:	40012c00 	.word	0x40012c00
 8006448:	40014000 	.word	0x40014000
 800644c:	40014400 	.word	0x40014400

08006450 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800647e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	021b      	lsls	r3, r3, #8
 8006492:	68fa      	ldr	r2, [r7, #12]
 8006494:	4313      	orrs	r3, r2
 8006496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800649e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	031b      	lsls	r3, r3, #12
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a14      	ldr	r2, [pc, #80]	; (8006500 <TIM_OC4_SetConfig+0xb0>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_OC4_SetConfig+0x74>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a13      	ldr	r2, [pc, #76]	; (8006504 <TIM_OC4_SetConfig+0xb4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_OC4_SetConfig+0x74>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a12      	ldr	r2, [pc, #72]	; (8006508 <TIM_OC4_SetConfig+0xb8>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d109      	bne.n	80064d8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	019b      	lsls	r3, r3, #6
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	697a      	ldr	r2, [r7, #20]
 80064dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	693a      	ldr	r2, [r7, #16]
 80064f0:	621a      	str	r2, [r3, #32]
}
 80064f2:	bf00      	nop
 80064f4:	371c      	adds	r7, #28
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop
 8006500:	40012c00 	.word	0x40012c00
 8006504:	40014000 	.word	0x40014000
 8006508:	40014400 	.word	0x40014400

0800650c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800650c:	b480      	push	{r7}
 800650e:	b087      	sub	sp, #28
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800653a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006550:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	041b      	lsls	r3, r3, #16
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	4313      	orrs	r3, r2
 800655c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a13      	ldr	r2, [pc, #76]	; (80065b0 <TIM_OC5_SetConfig+0xa4>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_OC5_SetConfig+0x6a>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <TIM_OC5_SetConfig+0xa8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_OC5_SetConfig+0x6a>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a11      	ldr	r2, [pc, #68]	; (80065b8 <TIM_OC5_SetConfig+0xac>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d109      	bne.n	800658a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800657c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	021b      	lsls	r3, r3, #8
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	4313      	orrs	r3, r2
 8006588:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	685a      	ldr	r2, [r3, #4]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	621a      	str	r2, [r3, #32]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	40012c00 	.word	0x40012c00
 80065b4:	40014000 	.word	0x40014000
 80065b8:	40014400 	.word	0x40014400

080065bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80065bc:	b480      	push	{r7}
 80065be:	b087      	sub	sp, #28
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a1b      	ldr	r3, [r3, #32]
 80065ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	021b      	lsls	r3, r3, #8
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006602:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	051b      	lsls	r3, r3, #20
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	4313      	orrs	r3, r2
 800660e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a14      	ldr	r2, [pc, #80]	; (8006664 <TIM_OC6_SetConfig+0xa8>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d007      	beq.n	8006628 <TIM_OC6_SetConfig+0x6c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a13      	ldr	r2, [pc, #76]	; (8006668 <TIM_OC6_SetConfig+0xac>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC6_SetConfig+0x6c>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a12      	ldr	r2, [pc, #72]	; (800666c <TIM_OC6_SetConfig+0xb0>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d109      	bne.n	800663c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800662e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	695b      	ldr	r3, [r3, #20]
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	697a      	ldr	r2, [r7, #20]
 8006640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40012c00 	.word	0x40012c00
 8006668:	40014000 	.word	0x40014000
 800666c:	40014400 	.word	0x40014400

08006670 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800669a:	f023 0307 	bic.w	r3, r3, #7
 800669e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b70      	cmp	r3, #112	; 0x70
 80066b8:	d01a      	beq.n	80066f0 <TIM_SlaveTimer_SetConfig+0x80>
 80066ba:	2b70      	cmp	r3, #112	; 0x70
 80066bc:	d860      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066be:	2b60      	cmp	r3, #96	; 0x60
 80066c0:	d054      	beq.n	800676c <TIM_SlaveTimer_SetConfig+0xfc>
 80066c2:	2b60      	cmp	r3, #96	; 0x60
 80066c4:	d85c      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066c6:	2b50      	cmp	r3, #80	; 0x50
 80066c8:	d046      	beq.n	8006758 <TIM_SlaveTimer_SetConfig+0xe8>
 80066ca:	2b50      	cmp	r3, #80	; 0x50
 80066cc:	d858      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066ce:	2b40      	cmp	r3, #64	; 0x40
 80066d0:	d019      	beq.n	8006706 <TIM_SlaveTimer_SetConfig+0x96>
 80066d2:	2b40      	cmp	r3, #64	; 0x40
 80066d4:	d854      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066d6:	2b30      	cmp	r3, #48	; 0x30
 80066d8:	d054      	beq.n	8006784 <TIM_SlaveTimer_SetConfig+0x114>
 80066da:	2b30      	cmp	r3, #48	; 0x30
 80066dc:	d850      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d050      	beq.n	8006784 <TIM_SlaveTimer_SetConfig+0x114>
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d84c      	bhi.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d04c      	beq.n	8006784 <TIM_SlaveTimer_SetConfig+0x114>
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d04a      	beq.n	8006784 <TIM_SlaveTimer_SetConfig+0x114>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 80066ee:	e047      	b.n	8006780 <TIM_SlaveTimer_SetConfig+0x110>
      TIM_ETR_SetConfig(htim->Instance,
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6818      	ldr	r0, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	68d9      	ldr	r1, [r3, #12]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f000 f8c0 	bl	8006884 <TIM_ETR_SetConfig>
      break;
 8006704:	e03f      	b.n	8006786 <TIM_SlaveTimer_SetConfig+0x116>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2b05      	cmp	r3, #5
 800670c:	d101      	bne.n	8006712 <TIM_SlaveTimer_SetConfig+0xa2>
        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e03a      	b.n	8006788 <TIM_SlaveTimer_SetConfig+0x118>
      tmpccer = htim->Instance->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a1b      	ldr	r3, [r3, #32]
 8006718:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	6a1a      	ldr	r2, [r3, #32]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f022 0201 	bic.w	r2, r2, #1
 8006728:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	699b      	ldr	r3, [r3, #24]
 8006730:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006738:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	691b      	ldr	r3, [r3, #16]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	621a      	str	r2, [r3, #32]
      break;
 8006756:	e016      	b.n	8006786 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6818      	ldr	r0, [r3, #0]
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	6899      	ldr	r1, [r3, #8]
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	461a      	mov	r2, r3
 8006766:	f000 f813 	bl	8006790 <TIM_TI1_ConfigInputStage>
      break;
 800676a:	e00c      	b.n	8006786 <TIM_SlaveTimer_SetConfig+0x116>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	6899      	ldr	r1, [r3, #8]
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	461a      	mov	r2, r3
 800677a:	f000 f838 	bl	80067ee <TIM_TI2_ConfigInputStage>
      break;
 800677e:	e002      	b.n	8006786 <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <TIM_SlaveTimer_SetConfig+0x116>
        break;
 8006784:	bf00      	nop
  }
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3718      	adds	r7, #24
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006790:	b480      	push	{r7}
 8006792:	b087      	sub	sp, #28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6a1b      	ldr	r3, [r3, #32]
 80067a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
 80067a6:	f023 0201 	bic.w	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	011b      	lsls	r3, r3, #4
 80067c0:	693a      	ldr	r2, [r7, #16]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f023 030a 	bic.w	r3, r3, #10
 80067cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	621a      	str	r2, [r3, #32]
}
 80067e2:	bf00      	nop
 80067e4:	371c      	adds	r7, #28
 80067e6:	46bd      	mov	sp, r7
 80067e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ec:	4770      	bx	lr

080067ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b087      	sub	sp, #28
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	f023 0210 	bic.w	r2, r3, #16
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006818:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	031b      	lsls	r3, r3, #12
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800682a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	621a      	str	r2, [r3, #32]
}
 8006842:	bf00      	nop
 8006844:	371c      	adds	r7, #28
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800684e:	b480      	push	{r7}
 8006850:	b085      	sub	sp, #20
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
 8006856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	f043 0307 	orr.w	r3, r3, #7
 8006870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	609a      	str	r2, [r3, #8]
}
 8006878:	bf00      	nop
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800689e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	021a      	lsls	r2, r3, #8
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	431a      	orrs	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	697a      	ldr	r2, [r7, #20]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	609a      	str	r2, [r3, #8]
}
 80068b8:	bf00      	nop
 80068ba:	371c      	adds	r7, #28
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2201      	movs	r2, #1
 80068d8:	fa02 f303 	lsl.w	r3, r2, r3
 80068dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	6a1a      	ldr	r2, [r3, #32]
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	43db      	mvns	r3, r3
 80068e6:	401a      	ands	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a1a      	ldr	r2, [r3, #32]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 031f 	and.w	r3, r3, #31
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	fa01 f303 	lsl.w	r3, r1, r3
 80068fc:	431a      	orrs	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
}
 8006902:	bf00      	nop
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006910:	b480      	push	{r7}
 8006912:	b085      	sub	sp, #20
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006924:	2302      	movs	r3, #2
 8006926:	e054      	b.n	80069d2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a24      	ldr	r2, [pc, #144]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d108      	bne.n	8006964 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006958:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4313      	orrs	r3, r2
 8006962:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800696a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4313      	orrs	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a17      	ldr	r2, [pc, #92]	; (80069e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d00e      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006990:	d009      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a13      	ldr	r2, [pc, #76]	; (80069e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d004      	beq.n	80069a6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a11      	ldr	r2, [pc, #68]	; (80069e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d10c      	bne.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40012c00 	.word	0x40012c00
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40014000 	.word	0x40014000

080069ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e060      	b.n	8006aca <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	68db      	ldr	r3, [r3, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	695b      	ldr	r3, [r3, #20]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	699b      	ldr	r3, [r3, #24]
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a14      	ldr	r2, [pc, #80]	; (8006ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d115      	bne.n	8006ab8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	051b      	lsls	r3, r3, #20
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	40012c00 	.word	0x40012c00

08006adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d101      	bne.n	8006b2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e040      	b.n	8006bac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fc fa2e 	bl	8002f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2224      	movs	r2, #36	; 0x24
 8006b44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0201 	bic.w	r2, r2, #1
 8006b54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f82c 	bl	8006bb4 <UART_SetConfig>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e022      	b.n	8006bac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d002      	beq.n	8006b74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa7c 	bl	800706c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ba4:	6878      	ldr	r0, [r7, #4]
 8006ba6:	f000 fb03 	bl	80071b0 <UART_CheckIdleState>
 8006baa:	4603      	mov	r3, r0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3708      	adds	r7, #8
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bd80      	pop	{r7, pc}

08006bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	b5b0      	push	{r4, r5, r7, lr}
 8006bb6:	b088      	sub	sp, #32
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4ba4      	ldr	r3, [pc, #656]	; (8006e70 <UART_SetConfig+0x2bc>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	69f9      	ldr	r1, [r7, #28]
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a99      	ldr	r2, [pc, #612]	; (8006e74 <UART_SetConfig+0x2c0>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a90      	ldr	r2, [pc, #576]	; (8006e78 <UART_SetConfig+0x2c4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d121      	bne.n	8006c7e <UART_SetConfig+0xca>
 8006c3a:	4b90      	ldr	r3, [pc, #576]	; (8006e7c <UART_SetConfig+0x2c8>)
 8006c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c40:	f003 0303 	and.w	r3, r3, #3
 8006c44:	2b03      	cmp	r3, #3
 8006c46:	d817      	bhi.n	8006c78 <UART_SetConfig+0xc4>
 8006c48:	a201      	add	r2, pc, #4	; (adr r2, 8006c50 <UART_SetConfig+0x9c>)
 8006c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c4e:	bf00      	nop
 8006c50:	08006c61 	.word	0x08006c61
 8006c54:	08006c6d 	.word	0x08006c6d
 8006c58:	08006c67 	.word	0x08006c67
 8006c5c:	08006c73 	.word	0x08006c73
 8006c60:	2301      	movs	r3, #1
 8006c62:	76fb      	strb	r3, [r7, #27]
 8006c64:	e0bc      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006c66:	2302      	movs	r3, #2
 8006c68:	76fb      	strb	r3, [r7, #27]
 8006c6a:	e0b9      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006c6c:	2304      	movs	r3, #4
 8006c6e:	76fb      	strb	r3, [r7, #27]
 8006c70:	e0b6      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006c72:	2308      	movs	r3, #8
 8006c74:	76fb      	strb	r3, [r7, #27]
 8006c76:	e0b3      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006c78:	2310      	movs	r3, #16
 8006c7a:	76fb      	strb	r3, [r7, #27]
 8006c7c:	e0b0      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a7f      	ldr	r2, [pc, #508]	; (8006e80 <UART_SetConfig+0x2cc>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d132      	bne.n	8006cee <UART_SetConfig+0x13a>
 8006c88:	4b7c      	ldr	r3, [pc, #496]	; (8006e7c <UART_SetConfig+0x2c8>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f003 030c 	and.w	r3, r3, #12
 8006c92:	2b0c      	cmp	r3, #12
 8006c94:	d828      	bhi.n	8006ce8 <UART_SetConfig+0x134>
 8006c96:	a201      	add	r2, pc, #4	; (adr r2, 8006c9c <UART_SetConfig+0xe8>)
 8006c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c9c:	08006cd1 	.word	0x08006cd1
 8006ca0:	08006ce9 	.word	0x08006ce9
 8006ca4:	08006ce9 	.word	0x08006ce9
 8006ca8:	08006ce9 	.word	0x08006ce9
 8006cac:	08006cdd 	.word	0x08006cdd
 8006cb0:	08006ce9 	.word	0x08006ce9
 8006cb4:	08006ce9 	.word	0x08006ce9
 8006cb8:	08006ce9 	.word	0x08006ce9
 8006cbc:	08006cd7 	.word	0x08006cd7
 8006cc0:	08006ce9 	.word	0x08006ce9
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006ce9 	.word	0x08006ce9
 8006ccc:	08006ce3 	.word	0x08006ce3
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	76fb      	strb	r3, [r7, #27]
 8006cd4:	e084      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	76fb      	strb	r3, [r7, #27]
 8006cda:	e081      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	76fb      	strb	r3, [r7, #27]
 8006ce0:	e07e      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006ce2:	2308      	movs	r3, #8
 8006ce4:	76fb      	strb	r3, [r7, #27]
 8006ce6:	e07b      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	76fb      	strb	r3, [r7, #27]
 8006cec:	e078      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a64      	ldr	r2, [pc, #400]	; (8006e84 <UART_SetConfig+0x2d0>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d120      	bne.n	8006d3a <UART_SetConfig+0x186>
 8006cf8:	4b60      	ldr	r3, [pc, #384]	; (8006e7c <UART_SetConfig+0x2c8>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d02:	2b30      	cmp	r3, #48	; 0x30
 8006d04:	d013      	beq.n	8006d2e <UART_SetConfig+0x17a>
 8006d06:	2b30      	cmp	r3, #48	; 0x30
 8006d08:	d814      	bhi.n	8006d34 <UART_SetConfig+0x180>
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	d009      	beq.n	8006d22 <UART_SetConfig+0x16e>
 8006d0e:	2b20      	cmp	r3, #32
 8006d10:	d810      	bhi.n	8006d34 <UART_SetConfig+0x180>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <UART_SetConfig+0x168>
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d006      	beq.n	8006d28 <UART_SetConfig+0x174>
 8006d1a:	e00b      	b.n	8006d34 <UART_SetConfig+0x180>
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	76fb      	strb	r3, [r7, #27]
 8006d20:	e05e      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d22:	2302      	movs	r3, #2
 8006d24:	76fb      	strb	r3, [r7, #27]
 8006d26:	e05b      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d28:	2304      	movs	r3, #4
 8006d2a:	76fb      	strb	r3, [r7, #27]
 8006d2c:	e058      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d2e:	2308      	movs	r3, #8
 8006d30:	76fb      	strb	r3, [r7, #27]
 8006d32:	e055      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d34:	2310      	movs	r3, #16
 8006d36:	76fb      	strb	r3, [r7, #27]
 8006d38:	e052      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <UART_SetConfig+0x2d4>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d120      	bne.n	8006d86 <UART_SetConfig+0x1d2>
 8006d44:	4b4d      	ldr	r3, [pc, #308]	; (8006e7c <UART_SetConfig+0x2c8>)
 8006d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d50:	d013      	beq.n	8006d7a <UART_SetConfig+0x1c6>
 8006d52:	2bc0      	cmp	r3, #192	; 0xc0
 8006d54:	d814      	bhi.n	8006d80 <UART_SetConfig+0x1cc>
 8006d56:	2b80      	cmp	r3, #128	; 0x80
 8006d58:	d009      	beq.n	8006d6e <UART_SetConfig+0x1ba>
 8006d5a:	2b80      	cmp	r3, #128	; 0x80
 8006d5c:	d810      	bhi.n	8006d80 <UART_SetConfig+0x1cc>
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d002      	beq.n	8006d68 <UART_SetConfig+0x1b4>
 8006d62:	2b40      	cmp	r3, #64	; 0x40
 8006d64:	d006      	beq.n	8006d74 <UART_SetConfig+0x1c0>
 8006d66:	e00b      	b.n	8006d80 <UART_SetConfig+0x1cc>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	76fb      	strb	r3, [r7, #27]
 8006d6c:	e038      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d6e:	2302      	movs	r3, #2
 8006d70:	76fb      	strb	r3, [r7, #27]
 8006d72:	e035      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d74:	2304      	movs	r3, #4
 8006d76:	76fb      	strb	r3, [r7, #27]
 8006d78:	e032      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d7a:	2308      	movs	r3, #8
 8006d7c:	76fb      	strb	r3, [r7, #27]
 8006d7e:	e02f      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d80:	2310      	movs	r3, #16
 8006d82:	76fb      	strb	r3, [r7, #27]
 8006d84:	e02c      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a3a      	ldr	r2, [pc, #232]	; (8006e74 <UART_SetConfig+0x2c0>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d125      	bne.n	8006ddc <UART_SetConfig+0x228>
 8006d90:	4b3a      	ldr	r3, [pc, #232]	; (8006e7c <UART_SetConfig+0x2c8>)
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d96:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d9e:	d017      	beq.n	8006dd0 <UART_SetConfig+0x21c>
 8006da0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006da4:	d817      	bhi.n	8006dd6 <UART_SetConfig+0x222>
 8006da6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006daa:	d00b      	beq.n	8006dc4 <UART_SetConfig+0x210>
 8006dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006db0:	d811      	bhi.n	8006dd6 <UART_SetConfig+0x222>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d003      	beq.n	8006dbe <UART_SetConfig+0x20a>
 8006db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006dba:	d006      	beq.n	8006dca <UART_SetConfig+0x216>
 8006dbc:	e00b      	b.n	8006dd6 <UART_SetConfig+0x222>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	76fb      	strb	r3, [r7, #27]
 8006dc2:	e00d      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006dc4:	2302      	movs	r3, #2
 8006dc6:	76fb      	strb	r3, [r7, #27]
 8006dc8:	e00a      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006dca:	2304      	movs	r3, #4
 8006dcc:	76fb      	strb	r3, [r7, #27]
 8006dce:	e007      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006dd0:	2308      	movs	r3, #8
 8006dd2:	76fb      	strb	r3, [r7, #27]
 8006dd4:	e004      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006dd6:	2310      	movs	r3, #16
 8006dd8:	76fb      	strb	r3, [r7, #27]
 8006dda:	e001      	b.n	8006de0 <UART_SetConfig+0x22c>
 8006ddc:	2310      	movs	r3, #16
 8006dde:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <UART_SetConfig+0x2c0>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	f040 8084 	bne.w	8006ef4 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006dec:	7efb      	ldrb	r3, [r7, #27]
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d823      	bhi.n	8006e3a <UART_SetConfig+0x286>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x244>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e3b 	.word	0x08006e3b
 8006e00:	08006e25 	.word	0x08006e25
 8006e04:	08006e3b 	.word	0x08006e3b
 8006e08:	08006e2b 	.word	0x08006e2b
 8006e0c:	08006e3b 	.word	0x08006e3b
 8006e10:	08006e3b 	.word	0x08006e3b
 8006e14:	08006e3b 	.word	0x08006e3b
 8006e18:	08006e33 	.word	0x08006e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fd fdb8 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8006e20:	6178      	str	r0, [r7, #20]
        break;
 8006e22:	e00f      	b.n	8006e44 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e24:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <UART_SetConfig+0x2d8>)
 8006e26:	617b      	str	r3, [r7, #20]
        break;
 8006e28:	e00c      	b.n	8006e44 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e2a:	f7fd fd19 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8006e2e:	6178      	str	r0, [r7, #20]
        break;
 8006e30:	e008      	b.n	8006e44 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e36:	617b      	str	r3, [r7, #20]
        break;
 8006e38:	e004      	b.n	8006e44 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	76bb      	strb	r3, [r7, #26]
        break;
 8006e42:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	f000 8102 	beq.w	8007050 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	4613      	mov	r3, r2
 8006e52:	005b      	lsls	r3, r3, #1
 8006e54:	4413      	add	r3, r2
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d305      	bcc.n	8006e68 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d913      	bls.n	8006e90 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	76bb      	strb	r3, [r7, #26]
 8006e6c:	e0f0      	b.n	8007050 <UART_SetConfig+0x49c>
 8006e6e:	bf00      	nop
 8006e70:	efff69f3 	.word	0xefff69f3
 8006e74:	40008000 	.word	0x40008000
 8006e78:	40013800 	.word	0x40013800
 8006e7c:	40021000 	.word	0x40021000
 8006e80:	40004400 	.word	0x40004400
 8006e84:	40004800 	.word	0x40004800
 8006e88:	40004c00 	.word	0x40004c00
 8006e8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	4618      	mov	r0, r3
 8006e94:	f04f 0100 	mov.w	r1, #0
 8006e98:	f04f 0200 	mov.w	r2, #0
 8006e9c:	f04f 0300 	mov.w	r3, #0
 8006ea0:	020b      	lsls	r3, r1, #8
 8006ea2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006ea6:	0202      	lsls	r2, r0, #8
 8006ea8:	6879      	ldr	r1, [r7, #4]
 8006eaa:	6849      	ldr	r1, [r1, #4]
 8006eac:	0849      	lsrs	r1, r1, #1
 8006eae:	4608      	mov	r0, r1
 8006eb0:	f04f 0100 	mov.w	r1, #0
 8006eb4:	1814      	adds	r4, r2, r0
 8006eb6:	eb43 0501 	adc.w	r5, r3, r1
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	f7f9 fd74 	bl	80009b4 <__aeabi_uldivmod>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006eda:	d308      	bcc.n	8006eee <UART_SetConfig+0x33a>
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ee2:	d204      	bcs.n	8006eee <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	60da      	str	r2, [r3, #12]
 8006eec:	e0b0      	b.n	8007050 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	76bb      	strb	r3, [r7, #26]
 8006ef2:	e0ad      	b.n	8007050 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006efc:	d15c      	bne.n	8006fb8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006efe:	7efb      	ldrb	r3, [r7, #27]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d828      	bhi.n	8006f56 <UART_SetConfig+0x3a2>
 8006f04:	a201      	add	r2, pc, #4	; (adr r2, 8006f0c <UART_SetConfig+0x358>)
 8006f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0a:	bf00      	nop
 8006f0c:	08006f31 	.word	0x08006f31
 8006f10:	08006f39 	.word	0x08006f39
 8006f14:	08006f41 	.word	0x08006f41
 8006f18:	08006f57 	.word	0x08006f57
 8006f1c:	08006f47 	.word	0x08006f47
 8006f20:	08006f57 	.word	0x08006f57
 8006f24:	08006f57 	.word	0x08006f57
 8006f28:	08006f57 	.word	0x08006f57
 8006f2c:	08006f4f 	.word	0x08006f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f30:	f7fd fd2e 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8006f34:	6178      	str	r0, [r7, #20]
        break;
 8006f36:	e013      	b.n	8006f60 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f38:	f7fd fd40 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8006f3c:	6178      	str	r0, [r7, #20]
        break;
 8006f3e:	e00f      	b.n	8006f60 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f40:	4b49      	ldr	r3, [pc, #292]	; (8007068 <UART_SetConfig+0x4b4>)
 8006f42:	617b      	str	r3, [r7, #20]
        break;
 8006f44:	e00c      	b.n	8006f60 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f46:	f7fd fc8b 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8006f4a:	6178      	str	r0, [r7, #20]
        break;
 8006f4c:	e008      	b.n	8006f60 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f52:	617b      	str	r3, [r7, #20]
        break;
 8006f54:	e004      	b.n	8006f60 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	76bb      	strb	r3, [r7, #26]
        break;
 8006f5e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d074      	beq.n	8007050 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	005a      	lsls	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	085b      	lsrs	r3, r3, #1
 8006f70:	441a      	add	r2, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	2b0f      	cmp	r3, #15
 8006f82:	d916      	bls.n	8006fb2 <UART_SetConfig+0x3fe>
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f8a:	d212      	bcs.n	8006fb2 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f023 030f 	bic.w	r3, r3, #15
 8006f94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	085b      	lsrs	r3, r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	f003 0307 	and.w	r3, r3, #7
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	89fb      	ldrh	r3, [r7, #14]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	89fa      	ldrh	r2, [r7, #14]
 8006fae:	60da      	str	r2, [r3, #12]
 8006fb0:	e04e      	b.n	8007050 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	76bb      	strb	r3, [r7, #26]
 8006fb6:	e04b      	b.n	8007050 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fb8:	7efb      	ldrb	r3, [r7, #27]
 8006fba:	2b08      	cmp	r3, #8
 8006fbc:	d827      	bhi.n	800700e <UART_SetConfig+0x45a>
 8006fbe:	a201      	add	r2, pc, #4	; (adr r2, 8006fc4 <UART_SetConfig+0x410>)
 8006fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc4:	08006fe9 	.word	0x08006fe9
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff9 	.word	0x08006ff9
 8006fd0:	0800700f 	.word	0x0800700f
 8006fd4:	08006fff 	.word	0x08006fff
 8006fd8:	0800700f 	.word	0x0800700f
 8006fdc:	0800700f 	.word	0x0800700f
 8006fe0:	0800700f 	.word	0x0800700f
 8006fe4:	08007007 	.word	0x08007007
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fe8:	f7fd fcd2 	bl	8004990 <HAL_RCC_GetPCLK1Freq>
 8006fec:	6178      	str	r0, [r7, #20]
        break;
 8006fee:	e013      	b.n	8007018 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ff0:	f7fd fce4 	bl	80049bc <HAL_RCC_GetPCLK2Freq>
 8006ff4:	6178      	str	r0, [r7, #20]
        break;
 8006ff6:	e00f      	b.n	8007018 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ff8:	4b1b      	ldr	r3, [pc, #108]	; (8007068 <UART_SetConfig+0x4b4>)
 8006ffa:	617b      	str	r3, [r7, #20]
        break;
 8006ffc:	e00c      	b.n	8007018 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ffe:	f7fd fc2f 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 8007002:	6178      	str	r0, [r7, #20]
        break;
 8007004:	e008      	b.n	8007018 <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800700a:	617b      	str	r3, [r7, #20]
        break;
 800700c:	e004      	b.n	8007018 <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	76bb      	strb	r3, [r7, #26]
        break;
 8007016:	bf00      	nop
    }

    if (pclk != 0U)
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d018      	beq.n	8007050 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	085a      	lsrs	r2, r3, #1
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	441a      	add	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007030:	b29b      	uxth	r3, r3
 8007032:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	2b0f      	cmp	r3, #15
 8007038:	d908      	bls.n	800704c <UART_SetConfig+0x498>
 800703a:	693b      	ldr	r3, [r7, #16]
 800703c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007040:	d204      	bcs.n	800704c <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	60da      	str	r2, [r3, #12]
 800704a:	e001      	b.n	8007050 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800705c:	7ebb      	ldrb	r3, [r7, #26]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3720      	adds	r7, #32
 8007062:	46bd      	mov	sp, r7
 8007064:	bdb0      	pop	{r4, r5, r7, pc}
 8007066:	bf00      	nop
 8007068:	00f42400 	.word	0x00f42400

0800706c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800706c:	b480      	push	{r7}
 800706e:	b083      	sub	sp, #12
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00a      	beq.n	8007096 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	685b      	ldr	r3, [r3, #4]
 8007086:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	430a      	orrs	r2, r1
 8007094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00a      	beq.n	80070b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00a      	beq.n	80070da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	430a      	orrs	r2, r1
 80070d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070de:	f003 0308 	and.w	r3, r3, #8
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00a      	beq.n	80070fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	430a      	orrs	r2, r1
 80070fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007100:	f003 0310 	and.w	r3, r3, #16
 8007104:	2b00      	cmp	r3, #0
 8007106:	d00a      	beq.n	800711e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	f003 0320 	and.w	r3, r3, #32
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01a      	beq.n	8007182 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007166:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800716a:	d10a      	bne.n	8007182 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00a      	beq.n	80071a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	605a      	str	r2, [r3, #4]
  }
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071c0:	f7fb ffe2 	bl	8003188 <HAL_GetTick>
 80071c4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0308 	and.w	r3, r3, #8
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d10e      	bne.n	80071f2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f82d 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e023      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b04      	cmp	r3, #4
 80071fe:	d10e      	bne.n	800721e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007200:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f817 	bl	8007242 <UART_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e00d      	b.n	800723a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2220      	movs	r2, #32
 8007222:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2220      	movs	r2, #32
 8007228:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2200      	movs	r2, #0
 800722e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007252:	e05e      	b.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800725a:	d05a      	beq.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800725c:	f7fb ff94 	bl	8003188 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	69ba      	ldr	r2, [r7, #24]
 8007268:	429a      	cmp	r2, r3
 800726a:	d302      	bcc.n	8007272 <UART_WaitOnFlagUntilTimeout+0x30>
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d11b      	bne.n	80072aa <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681a      	ldr	r2, [r3, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007280:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689a      	ldr	r2, [r3, #8]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2220      	movs	r2, #32
 8007296:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2220      	movs	r2, #32
 800729c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e043      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f003 0304 	and.w	r3, r3, #4
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d02c      	beq.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072c6:	d124      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d0:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80072e0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	689a      	ldr	r2, [r3, #8]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0201 	bic.w	r2, r2, #1
 80072f0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2220      	movs	r2, #32
 8007302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e00f      	b.n	8007332 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69da      	ldr	r2, [r3, #28]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	68ba      	ldr	r2, [r7, #8]
 800731e:	429a      	cmp	r2, r3
 8007320:	bf0c      	ite	eq
 8007322:	2301      	moveq	r3, #1
 8007324:	2300      	movne	r3, #0
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	79fb      	ldrb	r3, [r7, #7]
 800732c:	429a      	cmp	r2, r3
 800732e:	d091      	beq.n	8007254 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	3710      	adds	r7, #16
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
	...

0800733c <__libc_init_array>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	4d0d      	ldr	r5, [pc, #52]	; (8007374 <__libc_init_array+0x38>)
 8007340:	4c0d      	ldr	r4, [pc, #52]	; (8007378 <__libc_init_array+0x3c>)
 8007342:	1b64      	subs	r4, r4, r5
 8007344:	10a4      	asrs	r4, r4, #2
 8007346:	2600      	movs	r6, #0
 8007348:	42a6      	cmp	r6, r4
 800734a:	d109      	bne.n	8007360 <__libc_init_array+0x24>
 800734c:	4d0b      	ldr	r5, [pc, #44]	; (800737c <__libc_init_array+0x40>)
 800734e:	4c0c      	ldr	r4, [pc, #48]	; (8007380 <__libc_init_array+0x44>)
 8007350:	f000 f820 	bl	8007394 <_init>
 8007354:	1b64      	subs	r4, r4, r5
 8007356:	10a4      	asrs	r4, r4, #2
 8007358:	2600      	movs	r6, #0
 800735a:	42a6      	cmp	r6, r4
 800735c:	d105      	bne.n	800736a <__libc_init_array+0x2e>
 800735e:	bd70      	pop	{r4, r5, r6, pc}
 8007360:	f855 3b04 	ldr.w	r3, [r5], #4
 8007364:	4798      	blx	r3
 8007366:	3601      	adds	r6, #1
 8007368:	e7ee      	b.n	8007348 <__libc_init_array+0xc>
 800736a:	f855 3b04 	ldr.w	r3, [r5], #4
 800736e:	4798      	blx	r3
 8007370:	3601      	adds	r6, #1
 8007372:	e7f2      	b.n	800735a <__libc_init_array+0x1e>
 8007374:	08007474 	.word	0x08007474
 8007378:	08007474 	.word	0x08007474
 800737c:	08007474 	.word	0x08007474
 8007380:	08007478 	.word	0x08007478

08007384 <memset>:
 8007384:	4402      	add	r2, r0
 8007386:	4603      	mov	r3, r0
 8007388:	4293      	cmp	r3, r2
 800738a:	d100      	bne.n	800738e <memset+0xa>
 800738c:	4770      	bx	lr
 800738e:	f803 1b01 	strb.w	r1, [r3], #1
 8007392:	e7f9      	b.n	8007388 <memset+0x4>

08007394 <_init>:
 8007394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007396:	bf00      	nop
 8007398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739a:	bc08      	pop	{r3}
 800739c:	469e      	mov	lr, r3
 800739e:	4770      	bx	lr

080073a0 <_fini>:
 80073a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a2:	bf00      	nop
 80073a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073a6:	bc08      	pop	{r3}
 80073a8:	469e      	mov	lr, r3
 80073aa:	4770      	bx	lr
